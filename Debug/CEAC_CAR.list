
CEAC_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005aa4  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08005c2c  08005c2c  00006c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cd8  08005cd8  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005cd8  08005cd8  00006cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ce0  08005ce0  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ce0  08005ce0  00006ce0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ce4  08005ce4  00006ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005ce8  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          00000460  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200004c0  200004c0  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001045c  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000024c3  00000000  00000000  000174ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e50  00000000  00000000  000199b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b23  00000000  00000000  0001a800  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000235df  00000000  00000000  0001b323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012bc6  00000000  00000000  0003e902  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8084  00000000  00000000  000514c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012954c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e64  00000000  00000000  00129590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004a  00000000  00000000  0012d3f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005c14 	.word	0x08005c14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005c14 	.word	0x08005c14

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <HAL_UART_RxCpltCallback>:
uint32_t rx_idx = 0;
uint8_t reset_flag = 0, forward = 0, backward = 0, left = 0, right = 0;
UART_HandleTypeDef *pUart;
char buffer[1];

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	6078      	str	r0, [r7, #4]
	if (huart->Instance == pUart->Instance) {
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681a      	ldr	r2, [r3, #0]
 80004d4:	4b0c      	ldr	r3, [pc, #48]	@ (8000508 <HAL_UART_RxCpltCallback+0x40>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	429a      	cmp	r2, r3
 80004dc:	d10f      	bne.n	80004fe <HAL_UART_RxCpltCallback+0x36>
		HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
 80004de:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80004e2:	480a      	ldr	r0, [pc, #40]	@ (800050c <HAL_UART_RxCpltCallback+0x44>)
 80004e4:	f002 fc59 	bl	8002d9a <HAL_GPIO_TogglePin>
		ctrller_Rev(buffer);
 80004e8:	4809      	ldr	r0, [pc, #36]	@ (8000510 <HAL_UART_RxCpltCallback+0x48>)
 80004ea:	f000 f873 	bl	80005d4 <ctrller_Rev>
		HAL_UART_Receive_IT(pUart, (uint8_t *)buffer, strlen(buffer));
 80004ee:	4b06      	ldr	r3, [pc, #24]	@ (8000508 <HAL_UART_RxCpltCallback+0x40>)
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	2200      	movs	r2, #0
 80004f4:	b292      	uxth	r2, r2
 80004f6:	4906      	ldr	r1, [pc, #24]	@ (8000510 <HAL_UART_RxCpltCallback+0x48>)
 80004f8:	4618      	mov	r0, r3
 80004fa:	f004 fb84 	bl	8004c06 <HAL_UART_Receive_IT>

	}
}
 80004fe:	bf00      	nop
 8000500:	3708      	adds	r7, #8
 8000502:	46bd      	mov	sp, r7
 8000504:	bd80      	pop	{r7, pc}
 8000506:	bf00      	nop
 8000508:	20000088 	.word	0x20000088
 800050c:	40020000 	.word	0x40020000
 8000510:	2000008c 	.word	0x2000008c

08000514 <ctrller_Init>:
void ctrller_Init(UART_HandleTypeDef *UART_pointer) {
 8000514:	b5b0      	push	{r4, r5, r7, lr}
 8000516:	b08a      	sub	sp, #40	@ 0x28
 8000518:	af00      	add	r7, sp, #0
 800051a:	6078      	str	r0, [r7, #4]
	char *send_command[8] =
 800051c:	4b29      	ldr	r3, [pc, #164]	@ (80005c4 <ctrller_Init+0xb0>)
 800051e:	f107 0408 	add.w	r4, r7, #8
 8000522:	461d      	mov	r5, r3
 8000524:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000528:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800052c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			{ "AT", "AT+VERSION", "AT+ROLE=S", "AT+ROLE=M", "AT+CONT=0",
					"AT+NAME=CEAC-MFV", "AT+ADDR=XINCAMON1234", "AT+CONT=?" };
	pUart = UART_pointer;
 8000530:	4a25      	ldr	r2, [pc, #148]	@ (80005c8 <ctrller_Init+0xb4>)
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	6013      	str	r3, [r2, #0]
	strcpy(message, "\0");
 8000536:	4b25      	ldr	r3, [pc, #148]	@ (80005cc <ctrller_Init+0xb8>)
 8000538:	2200      	movs	r2, #0
 800053a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(pUart, (uint8_t *)send_command[2], strlen(send_command[2]), 100);
 800053c:	4b22      	ldr	r3, [pc, #136]	@ (80005c8 <ctrller_Init+0xb4>)
 800053e:	681c      	ldr	r4, [r3, #0]
 8000540:	693d      	ldr	r5, [r7, #16]
 8000542:	693b      	ldr	r3, [r7, #16]
 8000544:	4618      	mov	r0, r3
 8000546:	f7ff fe3f 	bl	80001c8 <strlen>
 800054a:	4603      	mov	r3, r0
 800054c:	b29a      	uxth	r2, r3
 800054e:	2364      	movs	r3, #100	@ 0x64
 8000550:	4629      	mov	r1, r5
 8000552:	4620      	mov	r0, r4
 8000554:	f004 facc 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Transmit(pUart, (uint8_t *)send_command[4], strlen(send_command[2]), 100);
 8000558:	4b1b      	ldr	r3, [pc, #108]	@ (80005c8 <ctrller_Init+0xb4>)
 800055a:	681c      	ldr	r4, [r3, #0]
 800055c:	69bd      	ldr	r5, [r7, #24]
 800055e:	693b      	ldr	r3, [r7, #16]
 8000560:	4618      	mov	r0, r3
 8000562:	f7ff fe31 	bl	80001c8 <strlen>
 8000566:	4603      	mov	r3, r0
 8000568:	b29a      	uxth	r2, r3
 800056a:	2364      	movs	r3, #100	@ 0x64
 800056c:	4629      	mov	r1, r5
 800056e:	4620      	mov	r0, r4
 8000570:	f004 fabe 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Transmit(pUart, (uint8_t *)send_command[5], strlen(send_command[2]), 100);
 8000574:	4b14      	ldr	r3, [pc, #80]	@ (80005c8 <ctrller_Init+0xb4>)
 8000576:	681c      	ldr	r4, [r3, #0]
 8000578:	69fd      	ldr	r5, [r7, #28]
 800057a:	693b      	ldr	r3, [r7, #16]
 800057c:	4618      	mov	r0, r3
 800057e:	f7ff fe23 	bl	80001c8 <strlen>
 8000582:	4603      	mov	r3, r0
 8000584:	b29a      	uxth	r2, r3
 8000586:	2364      	movs	r3, #100	@ 0x64
 8000588:	4629      	mov	r1, r5
 800058a:	4620      	mov	r0, r4
 800058c:	f004 fab0 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Transmit(pUart, (uint8_t *)send_command[6], strlen(send_command[2]), 100);
 8000590:	4b0d      	ldr	r3, [pc, #52]	@ (80005c8 <ctrller_Init+0xb4>)
 8000592:	681c      	ldr	r4, [r3, #0]
 8000594:	6a3d      	ldr	r5, [r7, #32]
 8000596:	693b      	ldr	r3, [r7, #16]
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff fe15 	bl	80001c8 <strlen>
 800059e:	4603      	mov	r3, r0
 80005a0:	b29a      	uxth	r2, r3
 80005a2:	2364      	movs	r3, #100	@ 0x64
 80005a4:	4629      	mov	r1, r5
 80005a6:	4620      	mov	r0, r4
 80005a8:	f004 faa2 	bl	8004af0 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(pUart, (uint8_t *)buffer, strlen(buffer));
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <ctrller_Init+0xb4>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	2200      	movs	r2, #0
 80005b2:	b292      	uxth	r2, r2
 80005b4:	4906      	ldr	r1, [pc, #24]	@ (80005d0 <ctrller_Init+0xbc>)
 80005b6:	4618      	mov	r0, r3
 80005b8:	f004 fb25 	bl	8004c06 <HAL_UART_Receive_IT>
}
 80005bc:	bf00      	nop
 80005be:	3728      	adds	r7, #40	@ 0x28
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bdb0      	pop	{r4, r5, r7, pc}
 80005c4:	08005c98 	.word	0x08005c98
 80005c8:	20000088 	.word	0x20000088
 80005cc:	200000a0 	.word	0x200000a0
 80005d0:	2000008c 	.word	0x2000008c

080005d4 <ctrller_Rev>:
void ctrller_Rev(char *buffer) {
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b084      	sub	sp, #16
 80005d8:	af00      	add	r7, sp, #0
 80005da:	6078      	str	r0, [r7, #4]
	if (buffer[0] != 13 || buffer[0] != 0) { // 13 is enter key and 0 is null char
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	781b      	ldrb	r3, [r3, #0]
 80005e0:	2b0d      	cmp	r3, #13
 80005e2:	d104      	bne.n	80005ee <ctrller_Rev+0x1a>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	781b      	ldrb	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	f000 8086 	beq.w	80006fa <ctrller_Rev+0x126>
		switch (buffer[0]) {
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	2b77      	cmp	r3, #119	@ 0x77
 80005f4:	dc67      	bgt.n	80006c6 <ctrller_Rev+0xf2>
 80005f6:	2b61      	cmp	r3, #97	@ 0x61
 80005f8:	da08      	bge.n	800060c <ctrller_Rev+0x38>
 80005fa:	2b33      	cmp	r3, #51	@ 0x33
 80005fc:	d042      	beq.n	8000684 <ctrller_Rev+0xb0>
 80005fe:	2b33      	cmp	r3, #51	@ 0x33
 8000600:	dc61      	bgt.n	80006c6 <ctrller_Rev+0xf2>
 8000602:	2b31      	cmp	r3, #49	@ 0x31
 8000604:	d036      	beq.n	8000674 <ctrller_Rev+0xa0>
 8000606:	2b32      	cmp	r3, #50	@ 0x32
 8000608:	d038      	beq.n	800067c <ctrller_Rev+0xa8>
 800060a:	e05c      	b.n	80006c6 <ctrller_Rev+0xf2>
 800060c:	3b61      	subs	r3, #97	@ 0x61
 800060e:	2b16      	cmp	r3, #22
 8000610:	d859      	bhi.n	80006c6 <ctrller_Rev+0xf2>
 8000612:	a201      	add	r2, pc, #4	@ (adr r2, 8000618 <ctrller_Rev+0x44>)
 8000614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000618:	080006ab 	.word	0x080006ab
 800061c:	080006c7 	.word	0x080006c7
 8000620:	080006c7 	.word	0x080006c7
 8000624:	080006b9 	.word	0x080006b9
 8000628:	080006c7 	.word	0x080006c7
 800062c:	080006c7 	.word	0x080006c7
 8000630:	080006c7 	.word	0x080006c7
 8000634:	080006c7 	.word	0x080006c7
 8000638:	080006c7 	.word	0x080006c7
 800063c:	080006c7 	.word	0x080006c7
 8000640:	080006c7 	.word	0x080006c7
 8000644:	080006c7 	.word	0x080006c7
 8000648:	080006c7 	.word	0x080006c7
 800064c:	080006c7 	.word	0x080006c7
 8000650:	080006c7 	.word	0x080006c7
 8000654:	080006c7 	.word	0x080006c7
 8000658:	080006c7 	.word	0x080006c7
 800065c:	080006c7 	.word	0x080006c7
 8000660:	0800069d 	.word	0x0800069d
 8000664:	080006c7 	.word	0x080006c7
 8000668:	080006c7 	.word	0x080006c7
 800066c:	080006c7 	.word	0x080006c7
 8000670:	0800068f 	.word	0x0800068f
		case '1':
			base_pwm = PWM_MODE_1;
 8000674:	4b2c      	ldr	r3, [pc, #176]	@ (8000728 <ctrller_Rev+0x154>)
 8000676:	2264      	movs	r2, #100	@ 0x64
 8000678:	801a      	strh	r2, [r3, #0]
			break;
 800067a:	e028      	b.n	80006ce <ctrller_Rev+0xfa>
		case '2':
			base_pwm = PWM_MODE_2;
 800067c:	4b2a      	ldr	r3, [pc, #168]	@ (8000728 <ctrller_Rev+0x154>)
 800067e:	22ff      	movs	r2, #255	@ 0xff
 8000680:	801a      	strh	r2, [r3, #0]
			break;
 8000682:	e024      	b.n	80006ce <ctrller_Rev+0xfa>
		case '3':
			base_pwm = PWM_MODE_3;
 8000684:	4b28      	ldr	r3, [pc, #160]	@ (8000728 <ctrller_Rev+0x154>)
 8000686:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 800068a:	801a      	strh	r2, [r3, #0]
			break;
 800068c:	e01f      	b.n	80006ce <ctrller_Rev+0xfa>
		case 'w':
			forward++;
 800068e:	4b27      	ldr	r3, [pc, #156]	@ (800072c <ctrller_Rev+0x158>)
 8000690:	781b      	ldrb	r3, [r3, #0]
 8000692:	3301      	adds	r3, #1
 8000694:	b2da      	uxtb	r2, r3
 8000696:	4b25      	ldr	r3, [pc, #148]	@ (800072c <ctrller_Rev+0x158>)
 8000698:	701a      	strb	r2, [r3, #0]
			break;
 800069a:	e018      	b.n	80006ce <ctrller_Rev+0xfa>
		case 's':
			backward++;
 800069c:	4b24      	ldr	r3, [pc, #144]	@ (8000730 <ctrller_Rev+0x15c>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	3301      	adds	r3, #1
 80006a2:	b2da      	uxtb	r2, r3
 80006a4:	4b22      	ldr	r3, [pc, #136]	@ (8000730 <ctrller_Rev+0x15c>)
 80006a6:	701a      	strb	r2, [r3, #0]
			break;
 80006a8:	e011      	b.n	80006ce <ctrller_Rev+0xfa>
		case 'a':
			left++;
 80006aa:	4b22      	ldr	r3, [pc, #136]	@ (8000734 <ctrller_Rev+0x160>)
 80006ac:	781b      	ldrb	r3, [r3, #0]
 80006ae:	3301      	adds	r3, #1
 80006b0:	b2da      	uxtb	r2, r3
 80006b2:	4b20      	ldr	r3, [pc, #128]	@ (8000734 <ctrller_Rev+0x160>)
 80006b4:	701a      	strb	r2, [r3, #0]
			break;
 80006b6:	e00a      	b.n	80006ce <ctrller_Rev+0xfa>
		case 'd':
			right++;
 80006b8:	4b1f      	ldr	r3, [pc, #124]	@ (8000738 <ctrller_Rev+0x164>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	3301      	adds	r3, #1
 80006be:	b2da      	uxtb	r2, r3
 80006c0:	4b1d      	ldr	r3, [pc, #116]	@ (8000738 <ctrller_Rev+0x164>)
 80006c2:	701a      	strb	r2, [r3, #0]
			break;
 80006c4:	e003      	b.n	80006ce <ctrller_Rev+0xfa>
		default: // command line, do not count direction
			reset_flag = 1;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	@ (800073c <ctrller_Rev+0x168>)
 80006c8:	2201      	movs	r2, #1
 80006ca:	701a      	strb	r2, [r3, #0]
			break;
 80006cc:	bf00      	nop
		}
		message[rx_idx++] = buffer[0];
 80006ce:	4b1c      	ldr	r3, [pc, #112]	@ (8000740 <ctrller_Rev+0x16c>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	1c5a      	adds	r2, r3, #1
 80006d4:	491a      	ldr	r1, [pc, #104]	@ (8000740 <ctrller_Rev+0x16c>)
 80006d6:	600a      	str	r2, [r1, #0]
 80006d8:	687a      	ldr	r2, [r7, #4]
 80006da:	7811      	ldrb	r1, [r2, #0]
 80006dc:	4a19      	ldr	r2, [pc, #100]	@ (8000744 <ctrller_Rev+0x170>)
 80006de:	54d1      	strb	r1, [r2, r3]
		if (rx_idx >= MESSAGE_SIZE) {
 80006e0:	4b17      	ldr	r3, [pc, #92]	@ (8000740 <ctrller_Rev+0x16c>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	2b31      	cmp	r3, #49	@ 0x31
 80006e6:	d91a      	bls.n	800071e <ctrller_Rev+0x14a>
			memset(message, 0, sizeof(message));
 80006e8:	2232      	movs	r2, #50	@ 0x32
 80006ea:	2100      	movs	r1, #0
 80006ec:	4815      	ldr	r0, [pc, #84]	@ (8000744 <ctrller_Rev+0x170>)
 80006ee:	f005 fa19 	bl	8005b24 <memset>
			rx_idx = 0;
 80006f2:	4b13      	ldr	r3, [pc, #76]	@ (8000740 <ctrller_Rev+0x16c>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	601a      	str	r2, [r3, #0]
		if (rx_idx >= MESSAGE_SIZE) {
 80006f8:	e011      	b.n	800071e <ctrller_Rev+0x14a>
		}
	} else {
		reset_flag = 0;
 80006fa:	4b10      	ldr	r3, [pc, #64]	@ (800073c <ctrller_Rev+0x168>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MESSAGE_SIZE; i++)
 8000700:	2300      	movs	r3, #0
 8000702:	60fb      	str	r3, [r7, #12]
 8000704:	e007      	b.n	8000716 <ctrller_Rev+0x142>
			message[i] = 0;
 8000706:	4a0f      	ldr	r2, [pc, #60]	@ (8000744 <ctrller_Rev+0x170>)
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	4413      	add	r3, r2
 800070c:	2200      	movs	r2, #0
 800070e:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MESSAGE_SIZE; i++)
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	3301      	adds	r3, #1
 8000714:	60fb      	str	r3, [r7, #12]
 8000716:	68fb      	ldr	r3, [r7, #12]
 8000718:	2b31      	cmp	r3, #49	@ 0x31
 800071a:	ddf4      	ble.n	8000706 <ctrller_Rev+0x132>
	}
}
 800071c:	bf00      	nop
 800071e:	bf00      	nop
 8000720:	3710      	adds	r7, #16
 8000722:	46bd      	mov	sp, r7
 8000724:	bd80      	pop	{r7, pc}
 8000726:	bf00      	nop
 8000728:	20000000 	.word	0x20000000
 800072c:	20000081 	.word	0x20000081
 8000730:	20000082 	.word	0x20000082
 8000734:	20000083 	.word	0x20000083
 8000738:	20000084 	.word	0x20000084
 800073c:	20000080 	.word	0x20000080
 8000740:	2000007c 	.word	0x2000007c
 8000744:	200000a0 	.word	0x200000a0

08000748 <ctrller_run>:

void ctrller_run() {
 8000748:	b580      	push	{r7, lr}
 800074a:	b082      	sub	sp, #8
 800074c:	af00      	add	r7, sp, #0
	if (reset_flag == 1) {
 800074e:	4b3b      	ldr	r3, [pc, #236]	@ (800083c <ctrller_run+0xf4>)
 8000750:	781b      	ldrb	r3, [r3, #0]
 8000752:	2b01      	cmp	r3, #1
 8000754:	d10b      	bne.n	800076e <ctrller_run+0x26>
		forward = 0, backward = 0, left = 0, right = 0;
 8000756:	4b3a      	ldr	r3, [pc, #232]	@ (8000840 <ctrller_run+0xf8>)
 8000758:	2200      	movs	r2, #0
 800075a:	701a      	strb	r2, [r3, #0]
 800075c:	4b39      	ldr	r3, [pc, #228]	@ (8000844 <ctrller_run+0xfc>)
 800075e:	2200      	movs	r2, #0
 8000760:	701a      	strb	r2, [r3, #0]
 8000762:	4b39      	ldr	r3, [pc, #228]	@ (8000848 <ctrller_run+0x100>)
 8000764:	2200      	movs	r2, #0
 8000766:	701a      	strb	r2, [r3, #0]
 8000768:	4b38      	ldr	r3, [pc, #224]	@ (800084c <ctrller_run+0x104>)
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
	}

	if (left < right + 5 || left > right - 5) {			// the differ is 10 unit
 800076e:	4b37      	ldr	r3, [pc, #220]	@ (800084c <ctrller_run+0x104>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	3304      	adds	r3, #4
 8000774:	4a34      	ldr	r2, [pc, #208]	@ (8000848 <ctrller_run+0x100>)
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	4293      	cmp	r3, r2
 800077a:	da06      	bge.n	800078a <ctrller_run+0x42>
 800077c:	4b33      	ldr	r3, [pc, #204]	@ (800084c <ctrller_run+0x104>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	3b04      	subs	r3, #4
 8000782:	4a31      	ldr	r2, [pc, #196]	@ (8000848 <ctrller_run+0x100>)
 8000784:	7812      	ldrb	r2, [r2, #0]
 8000786:	4293      	cmp	r3, r2
 8000788:	dc05      	bgt.n	8000796 <ctrller_run+0x4e>
		set_servo(&servo, SERVO_LEFT);
 800078a:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800078e:	4830      	ldr	r0, [pc, #192]	@ (8000850 <ctrller_run+0x108>)
 8000790:	f000 f956 	bl	8000a40 <set_servo>
 8000794:	e018      	b.n	80007c8 <ctrller_run+0x80>
	} else if (right < left + 5 || right > left - 5) {
 8000796:	4b2c      	ldr	r3, [pc, #176]	@ (8000848 <ctrller_run+0x100>)
 8000798:	781b      	ldrb	r3, [r3, #0]
 800079a:	3304      	adds	r3, #4
 800079c:	4a2b      	ldr	r2, [pc, #172]	@ (800084c <ctrller_run+0x104>)
 800079e:	7812      	ldrb	r2, [r2, #0]
 80007a0:	4293      	cmp	r3, r2
 80007a2:	da06      	bge.n	80007b2 <ctrller_run+0x6a>
 80007a4:	4b28      	ldr	r3, [pc, #160]	@ (8000848 <ctrller_run+0x100>)
 80007a6:	781b      	ldrb	r3, [r3, #0]
 80007a8:	3b04      	subs	r3, #4
 80007aa:	4a28      	ldr	r2, [pc, #160]	@ (800084c <ctrller_run+0x104>)
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	4293      	cmp	r3, r2
 80007b0:	dc05      	bgt.n	80007be <ctrller_run+0x76>
		set_servo(&servo, SERVO_RIGHT);
 80007b2:	f240 31c2 	movw	r1, #962	@ 0x3c2
 80007b6:	4826      	ldr	r0, [pc, #152]	@ (8000850 <ctrller_run+0x108>)
 80007b8:	f000 f942 	bl	8000a40 <set_servo>
 80007bc:	e004      	b.n	80007c8 <ctrller_run+0x80>
	} else {
		set_servo(&servo, SERVO_CENTER);
 80007be:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80007c2:	4823      	ldr	r0, [pc, #140]	@ (8000850 <ctrller_run+0x108>)
 80007c4:	f000 f93c 	bl	8000a40 <set_servo>
	}

	PWMcontrol *ctrlMotor = &motor[0];
 80007c8:	4b22      	ldr	r3, [pc, #136]	@ (8000854 <ctrller_run+0x10c>)
 80007ca:	607b      	str	r3, [r7, #4]
	if (forward < backward + 5 || forward > backward - 5) {
 80007cc:	4b1d      	ldr	r3, [pc, #116]	@ (8000844 <ctrller_run+0xfc>)
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	3304      	adds	r3, #4
 80007d2:	4a1b      	ldr	r2, [pc, #108]	@ (8000840 <ctrller_run+0xf8>)
 80007d4:	7812      	ldrb	r2, [r2, #0]
 80007d6:	4293      	cmp	r3, r2
 80007d8:	da06      	bge.n	80007e8 <ctrller_run+0xa0>
 80007da:	4b1a      	ldr	r3, [pc, #104]	@ (8000844 <ctrller_run+0xfc>)
 80007dc:	781b      	ldrb	r3, [r3, #0]
 80007de:	3b04      	subs	r3, #4
 80007e0:	4a17      	ldr	r2, [pc, #92]	@ (8000840 <ctrller_run+0xf8>)
 80007e2:	7812      	ldrb	r2, [r2, #0]
 80007e4:	4293      	cmp	r3, r2
 80007e6:	dc07      	bgt.n	80007f8 <ctrller_run+0xb0>
		set_motor(ctrlMotor, FORWARD, (uint16_t)base_pwm);
 80007e8:	4b1b      	ldr	r3, [pc, #108]	@ (8000858 <ctrller_run+0x110>)
 80007ea:	881b      	ldrh	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	2101      	movs	r1, #1
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f000 f833 	bl	800085c <set_motor>
 80007f6:	e01c      	b.n	8000832 <ctrller_run+0xea>
	} else if (backward < forward + 5 || backward > forward - 5) {
 80007f8:	4b11      	ldr	r3, [pc, #68]	@ (8000840 <ctrller_run+0xf8>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	3304      	adds	r3, #4
 80007fe:	4a11      	ldr	r2, [pc, #68]	@ (8000844 <ctrller_run+0xfc>)
 8000800:	7812      	ldrb	r2, [r2, #0]
 8000802:	4293      	cmp	r3, r2
 8000804:	da06      	bge.n	8000814 <ctrller_run+0xcc>
 8000806:	4b0e      	ldr	r3, [pc, #56]	@ (8000840 <ctrller_run+0xf8>)
 8000808:	781b      	ldrb	r3, [r3, #0]
 800080a:	3b04      	subs	r3, #4
 800080c:	4a0d      	ldr	r2, [pc, #52]	@ (8000844 <ctrller_run+0xfc>)
 800080e:	7812      	ldrb	r2, [r2, #0]
 8000810:	4293      	cmp	r3, r2
 8000812:	dc08      	bgt.n	8000826 <ctrller_run+0xde>
		set_motor(ctrlMotor, BACKWARD, base_pwm);
 8000814:	4b10      	ldr	r3, [pc, #64]	@ (8000858 <ctrller_run+0x110>)
 8000816:	881b      	ldrh	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	f04f 31ff 	mov.w	r1, #4294967295
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f81c 	bl	800085c <set_motor>
 8000824:	e005      	b.n	8000832 <ctrller_run+0xea>
	} else {
		set_motor(ctrlMotor, STOP, 0);
 8000826:	2200      	movs	r2, #0
 8000828:	2100      	movs	r1, #0
 800082a:	6878      	ldr	r0, [r7, #4]
 800082c:	f000 f816 	bl	800085c <set_motor>
	}
}
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	3708      	adds	r7, #8
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000080 	.word	0x20000080
 8000840:	20000081 	.word	0x20000081
 8000844:	20000082 	.word	0x20000082
 8000848:	20000083 	.word	0x20000083
 800084c:	20000084 	.word	0x20000084
 8000850:	20000090 	.word	0x20000090
 8000854:	20000098 	.word	0x20000098
 8000858:	20000000 	.word	0x20000000

0800085c <set_motor>:
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
    return;
}

void set_motor(PWMcontrol *PWMcontrol, int8_t direction, uint16_t PWM)
{
 800085c:	b480      	push	{r7}
 800085e:	b083      	sub	sp, #12
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
 8000864:	460b      	mov	r3, r1
 8000866:	70fb      	strb	r3, [r7, #3]
 8000868:	4613      	mov	r3, r2
 800086a:	803b      	strh	r3, [r7, #0]
    if (PWM > MAX_PULSE_WIDTH)
 800086c:	883b      	ldrh	r3, [r7, #0]
 800086e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000872:	d302      	bcc.n	800087a <set_motor+0x1e>
    {
        PWM = MAX_PULSE_WIDTH;
 8000874:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 8000878:	803b      	strh	r3, [r7, #0]
    else if (PWM < 0)
    {
        PWM = 0;
    }

    if (direction == BACKWARD)
 800087a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000882:	d146      	bne.n	8000912 <set_motor+0xb6>
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	889b      	ldrh	r3, [r3, #4]
 8000888:	2b00      	cmp	r3, #0
 800088a:	d105      	bne.n	8000898 <set_motor+0x3c>
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	681b      	ldr	r3, [r3, #0]
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	883a      	ldrh	r2, [r7, #0]
 8000894:	635a      	str	r2, [r3, #52]	@ 0x34
 8000896:	e018      	b.n	80008ca <set_motor+0x6e>
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	889b      	ldrh	r3, [r3, #4]
 800089c:	2b04      	cmp	r3, #4
 800089e:	d105      	bne.n	80008ac <set_motor+0x50>
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	681a      	ldr	r2, [r3, #0]
 80008a6:	883b      	ldrh	r3, [r7, #0]
 80008a8:	6393      	str	r3, [r2, #56]	@ 0x38
 80008aa:	e00e      	b.n	80008ca <set_motor+0x6e>
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	889b      	ldrh	r3, [r3, #4]
 80008b0:	2b08      	cmp	r3, #8
 80008b2:	d105      	bne.n	80008c0 <set_motor+0x64>
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	681a      	ldr	r2, [r3, #0]
 80008ba:	883b      	ldrh	r3, [r7, #0]
 80008bc:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80008be:	e004      	b.n	80008ca <set_motor+0x6e>
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	681a      	ldr	r2, [r3, #0]
 80008c6:	883b      	ldrh	r3, [r7, #0]
 80008c8:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80008ca:	687b      	ldr	r3, [r7, #4]
 80008cc:	88db      	ldrh	r3, [r3, #6]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d105      	bne.n	80008de <set_motor+0x82>
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2200      	movs	r2, #0
 80008da:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
    }
    return;
 80008dc:	e0ab      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	88db      	ldrh	r3, [r3, #6]
 80008e2:	2b04      	cmp	r3, #4
 80008e4:	d105      	bne.n	80008f2 <set_motor+0x96>
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	2300      	movs	r3, #0
 80008ee:	6393      	str	r3, [r2, #56]	@ 0x38
 80008f0:	e0a0      	b.n	8000a34 <set_motor+0x1d8>
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	88db      	ldrh	r3, [r3, #6]
 80008f6:	2b08      	cmp	r3, #8
 80008f8:	d105      	bne.n	8000906 <set_motor+0xaa>
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	2300      	movs	r3, #0
 8000902:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000904:	e096      	b.n	8000a34 <set_motor+0x1d8>
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	681b      	ldr	r3, [r3, #0]
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	2300      	movs	r3, #0
 800090e:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 8000910:	e091      	b.n	8000a36 <set_motor+0x1da>
    else if (direction == FORWARD)
 8000912:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000916:	2b01      	cmp	r3, #1
 8000918:	d146      	bne.n	80009a8 <set_motor+0x14c>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 800091a:	687b      	ldr	r3, [r7, #4]
 800091c:	889b      	ldrh	r3, [r3, #4]
 800091e:	2b00      	cmp	r3, #0
 8000920:	d105      	bne.n	800092e <set_motor+0xd2>
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	681b      	ldr	r3, [r3, #0]
 8000928:	2200      	movs	r2, #0
 800092a:	635a      	str	r2, [r3, #52]	@ 0x34
 800092c:	e018      	b.n	8000960 <set_motor+0x104>
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	889b      	ldrh	r3, [r3, #4]
 8000932:	2b04      	cmp	r3, #4
 8000934:	d105      	bne.n	8000942 <set_motor+0xe6>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	681a      	ldr	r2, [r3, #0]
 800093c:	2300      	movs	r3, #0
 800093e:	6393      	str	r3, [r2, #56]	@ 0x38
 8000940:	e00e      	b.n	8000960 <set_motor+0x104>
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	889b      	ldrh	r3, [r3, #4]
 8000946:	2b08      	cmp	r3, #8
 8000948:	d105      	bne.n	8000956 <set_motor+0xfa>
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2300      	movs	r3, #0
 8000952:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000954:	e004      	b.n	8000960 <set_motor+0x104>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	681b      	ldr	r3, [r3, #0]
 800095a:	681a      	ldr	r2, [r3, #0]
 800095c:	2300      	movs	r3, #0
 800095e:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	88db      	ldrh	r3, [r3, #6]
 8000964:	2b00      	cmp	r3, #0
 8000966:	d105      	bne.n	8000974 <set_motor+0x118>
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	883a      	ldrh	r2, [r7, #0]
 8000970:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 8000972:	e060      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	88db      	ldrh	r3, [r3, #6]
 8000978:	2b04      	cmp	r3, #4
 800097a:	d105      	bne.n	8000988 <set_motor+0x12c>
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	883b      	ldrh	r3, [r7, #0]
 8000984:	6393      	str	r3, [r2, #56]	@ 0x38
 8000986:	e055      	b.n	8000a34 <set_motor+0x1d8>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	88db      	ldrh	r3, [r3, #6]
 800098c:	2b08      	cmp	r3, #8
 800098e:	d105      	bne.n	800099c <set_motor+0x140>
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	681a      	ldr	r2, [r3, #0]
 8000996:	883b      	ldrh	r3, [r7, #0]
 8000998:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800099a:	e04b      	b.n	8000a34 <set_motor+0x1d8>
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	883b      	ldrh	r3, [r7, #0]
 80009a4:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 80009a6:	e046      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	889b      	ldrh	r3, [r3, #4]
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d105      	bne.n	80009bc <set_motor+0x160>
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	2200      	movs	r2, #0
 80009b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80009ba:	e018      	b.n	80009ee <set_motor+0x192>
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	889b      	ldrh	r3, [r3, #4]
 80009c0:	2b04      	cmp	r3, #4
 80009c2:	d105      	bne.n	80009d0 <set_motor+0x174>
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	2300      	movs	r3, #0
 80009cc:	6393      	str	r3, [r2, #56]	@ 0x38
 80009ce:	e00e      	b.n	80009ee <set_motor+0x192>
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	889b      	ldrh	r3, [r3, #4]
 80009d4:	2b08      	cmp	r3, #8
 80009d6:	d105      	bne.n	80009e4 <set_motor+0x188>
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681a      	ldr	r2, [r3, #0]
 80009de:	2300      	movs	r3, #0
 80009e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80009e2:	e004      	b.n	80009ee <set_motor+0x192>
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	2300      	movs	r3, #0
 80009ec:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	88db      	ldrh	r3, [r3, #6]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d105      	bne.n	8000a02 <set_motor+0x1a6>
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2200      	movs	r2, #0
 80009fe:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 8000a00:	e019      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	88db      	ldrh	r3, [r3, #6]
 8000a06:	2b04      	cmp	r3, #4
 8000a08:	d105      	bne.n	8000a16 <set_motor+0x1ba>
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	681a      	ldr	r2, [r3, #0]
 8000a10:	2300      	movs	r3, #0
 8000a12:	6393      	str	r3, [r2, #56]	@ 0x38
    return;
 8000a14:	e00f      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	88db      	ldrh	r3, [r3, #6]
 8000a1a:	2b08      	cmp	r3, #8
 8000a1c:	d105      	bne.n	8000a2a <set_motor+0x1ce>
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	681a      	ldr	r2, [r3, #0]
 8000a24:	2300      	movs	r3, #0
 8000a26:	63d3      	str	r3, [r2, #60]	@ 0x3c
    return;
 8000a28:	e005      	b.n	8000a36 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	681b      	ldr	r3, [r3, #0]
 8000a2e:	681a      	ldr	r2, [r3, #0]
 8000a30:	2300      	movs	r3, #0
 8000a32:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 8000a34:	bf00      	nop
}
 8000a36:	370c      	adds	r7, #12
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <set_servo>:

void set_servo(PWMcontrol *PWMcontrol, uint16_t PWM)
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	460b      	mov	r3, r1
 8000a4a:	807b      	strh	r3, [r7, #2]
//     }
//     else if (PWM < SERVO_MIN_PULSE)
//     {
//         PWM = SERVO_MIN_PULSE;
//     }
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	889b      	ldrh	r3, [r3, #4]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d105      	bne.n	8000a60 <set_servo+0x20>
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	887a      	ldrh	r2, [r7, #2]
 8000a5c:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 8000a5e:	e019      	b.n	8000a94 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	889b      	ldrh	r3, [r3, #4]
 8000a64:	2b04      	cmp	r3, #4
 8000a66:	d105      	bne.n	8000a74 <set_servo+0x34>
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	681a      	ldr	r2, [r3, #0]
 8000a6e:	887b      	ldrh	r3, [r7, #2]
 8000a70:	6393      	str	r3, [r2, #56]	@ 0x38
    return;
 8000a72:	e00f      	b.n	8000a94 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	889b      	ldrh	r3, [r3, #4]
 8000a78:	2b08      	cmp	r3, #8
 8000a7a:	d105      	bne.n	8000a88 <set_servo+0x48>
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	681a      	ldr	r2, [r3, #0]
 8000a82:	887b      	ldrh	r3, [r7, #2]
 8000a84:	63d3      	str	r3, [r2, #60]	@ 0x3c
    return;
 8000a86:	e005      	b.n	8000a94 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	681a      	ldr	r2, [r3, #0]
 8000a8e:	887b      	ldrh	r3, [r7, #2]
 8000a90:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 8000a92:	bf00      	nop
}
 8000a94:	370c      	adds	r7, #12
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
	...

08000aa0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000aa4:	f001 f862 	bl	8001b6c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000aa8:	f000 f81e 	bl	8000ae8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000aac:	f000 fbe6 	bl	800127c <MX_GPIO_Init>
	MX_DMA_Init();
 8000ab0:	f000 fbc4 	bl	800123c <MX_DMA_Init>
	MX_TIM3_Init();
 8000ab4:	f000 f9e2 	bl	8000e7c <MX_TIM3_Init>
	MX_TIM8_Init();
 8000ab8:	f000 fa82 	bl	8000fc0 <MX_TIM8_Init>
	MX_ADC1_Init();
 8000abc:	f000 f87c 	bl	8000bb8 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000ac0:	f000 f904 	bl	8000ccc <MX_ADC2_Init>
	MX_TIM2_Init();
 8000ac4:	f000 f954 	bl	8000d70 <MX_TIM2_Init>
	MX_TIM10_Init();
 8000ac8:	f000 fb40 	bl	800114c <MX_TIM10_Init>
	MX_TIM4_Init();
 8000acc:	f000 fa2a 	bl	8000f24 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8000ad0:	f000 fb8a 	bl	80011e8 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
//	HAL_UART_Receive_IT(&huart3, (uint8_t*) rev, sizeof(rev));
	Scheduler_Init();
 8000ad4:	f000 fcf2 	bl	80014bc <Scheduler_Init>

#ifdef TEST_BOARD
#ifdef TEST_BLE
	ctrller_Init(&huart3);
 8000ad8:	4802      	ldr	r0, [pc, #8]	@ (8000ae4 <main+0x44>)
 8000ada:	f7ff fd1b 	bl	8000514 <ctrller_Init>
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
#ifdef TEST_BOARD
#ifdef TEST_BLE
		ctrller_run();
 8000ade:	f7ff fe33 	bl	8000748 <ctrller_run>
 8000ae2:	e7fc      	b.n	8000ade <main+0x3e>
 8000ae4:	2000032c 	.word	0x2000032c

08000ae8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b094      	sub	sp, #80	@ 0x50
 8000aec:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000aee:	f107 0320 	add.w	r3, r7, #32
 8000af2:	2230      	movs	r2, #48	@ 0x30
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f005 f814 	bl	8005b24 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000afc:	f107 030c 	add.w	r3, r7, #12
 8000b00:	2200      	movs	r2, #0
 8000b02:	601a      	str	r2, [r3, #0]
 8000b04:	605a      	str	r2, [r3, #4]
 8000b06:	609a      	str	r2, [r3, #8]
 8000b08:	60da      	str	r2, [r3, #12]
 8000b0a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	4b27      	ldr	r3, [pc, #156]	@ (8000bb0 <SystemClock_Config+0xc8>)
 8000b12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b14:	4a26      	ldr	r2, [pc, #152]	@ (8000bb0 <SystemClock_Config+0xc8>)
 8000b16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b1a:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b1c:	4b24      	ldr	r3, [pc, #144]	@ (8000bb0 <SystemClock_Config+0xc8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b24:	60bb      	str	r3, [r7, #8]
 8000b26:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b28:	2300      	movs	r3, #0
 8000b2a:	607b      	str	r3, [r7, #4]
 8000b2c:	4b21      	ldr	r3, [pc, #132]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a20      	ldr	r2, [pc, #128]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b32:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b36:	6013      	str	r3, [r2, #0]
 8000b38:	4b1e      	ldr	r3, [pc, #120]	@ (8000bb4 <SystemClock_Config+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b40:	607b      	str	r3, [r7, #4]
 8000b42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b44:	2302      	movs	r3, #2
 8000b46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b48:	2301      	movs	r3, #1
 8000b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b4c:	2310      	movs	r3, #16
 8000b4e:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b50:	2302      	movs	r3, #2
 8000b52:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b58:	2308      	movs	r3, #8
 8000b5a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000b5c:	2348      	movs	r3, #72	@ 0x48
 8000b5e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b60:	2302      	movs	r3, #2
 8000b62:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b64:	2304      	movs	r3, #4
 8000b66:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b68:	f107 0320 	add.w	r3, r7, #32
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f002 f92f 	bl	8002dd0 <HAL_RCC_OscConfig>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d001      	beq.n	8000b7c <SystemClock_Config+0x94>
		Error_Handler();
 8000b78:	f000 fc9a 	bl	80014b0 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b7c:	230f      	movs	r3, #15
 8000b7e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b80:	2302      	movs	r3, #2
 8000b82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b84:	2300      	movs	r3, #0
 8000b86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b88:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b8c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b92:	f107 030c 	add.w	r3, r7, #12
 8000b96:	2102      	movs	r1, #2
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f002 fb91 	bl	80032c0 <HAL_RCC_ClockConfig>
 8000b9e:	4603      	mov	r3, r0
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d001      	beq.n	8000ba8 <SystemClock_Config+0xc0>
		Error_Handler();
 8000ba4:	f000 fc84 	bl	80014b0 <Error_Handler>
	}
}
 8000ba8:	bf00      	nop
 8000baa:	3750      	adds	r7, #80	@ 0x50
 8000bac:	46bd      	mov	sp, r7
 8000bae:	bd80      	pop	{r7, pc}
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40007000 	.word	0x40007000

08000bb8 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000bbe:	463b      	mov	r3, r7
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	601a      	str	r2, [r3, #0]
 8000bc4:	605a      	str	r2, [r3, #4]
 8000bc6:	609a      	str	r2, [r3, #8]
 8000bc8:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000bca:	4b3d      	ldr	r3, [pc, #244]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bcc:	4a3d      	ldr	r2, [pc, #244]	@ (8000cc4 <MX_ADC1_Init+0x10c>)
 8000bce:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bd0:	4b3b      	ldr	r3, [pc, #236]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd6:	4b3a      	ldr	r3, [pc, #232]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000bdc:	4b38      	ldr	r3, [pc, #224]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bde:	2201      	movs	r2, #1
 8000be0:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000be2:	4b37      	ldr	r3, [pc, #220]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000be4:	2201      	movs	r2, #1
 8000be6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000be8:	4b35      	ldr	r3, [pc, #212]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bf0:	4b33      	ldr	r3, [pc, #204]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bf6:	4b32      	ldr	r3, [pc, #200]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bf8:	4a33      	ldr	r2, [pc, #204]	@ (8000cc8 <MX_ADC1_Init+0x110>)
 8000bfa:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bfc:	4b30      	ldr	r3, [pc, #192]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 5;
 8000c02:	4b2f      	ldr	r3, [pc, #188]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c04:	2205      	movs	r2, #5
 8000c06:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c08:	4b2d      	ldr	r3, [pc, #180]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c10:	4b2b      	ldr	r3, [pc, #172]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000c16:	482a      	ldr	r0, [pc, #168]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c18:	f001 f81a 	bl	8001c50 <HAL_ADC_Init>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000c22:	f000 fc45 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000c2a:	2301      	movs	r3, #1
 8000c2c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c32:	463b      	mov	r3, r7
 8000c34:	4619      	mov	r1, r3
 8000c36:	4822      	ldr	r0, [pc, #136]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c38:	f001 f84e 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	2b00      	cmp	r3, #0
 8000c40:	d001      	beq.n	8000c46 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8000c42:	f000 fc35 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000c46:	2304      	movs	r3, #4
 8000c48:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000c4a:	2302      	movs	r3, #2
 8000c4c:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c4e:	463b      	mov	r3, r7
 8000c50:	4619      	mov	r1, r3
 8000c52:	481b      	ldr	r0, [pc, #108]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c54:	f001 f840 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000c58:	4603      	mov	r3, r0
 8000c5a:	2b00      	cmp	r3, #0
 8000c5c:	d001      	beq.n	8000c62 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8000c5e:	f000 fc27 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c62:	2305      	movs	r3, #5
 8000c64:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8000c66:	2303      	movs	r3, #3
 8000c68:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c6a:	463b      	mov	r3, r7
 8000c6c:	4619      	mov	r1, r3
 8000c6e:	4814      	ldr	r0, [pc, #80]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c70:	f001 f832 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000c74:	4603      	mov	r3, r0
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d001      	beq.n	8000c7e <MX_ADC1_Init+0xc6>
		Error_Handler();
 8000c7a:	f000 fc19 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000c7e:	2306      	movs	r3, #6
 8000c80:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8000c82:	2304      	movs	r3, #4
 8000c84:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c86:	463b      	mov	r3, r7
 8000c88:	4619      	mov	r1, r3
 8000c8a:	480d      	ldr	r0, [pc, #52]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000c8c:	f001 f824 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d001      	beq.n	8000c9a <MX_ADC1_Init+0xe2>
		Error_Handler();
 8000c96:	f000 fc0b 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000c9a:	2307      	movs	r3, #7
 8000c9c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8000c9e:	2305      	movs	r3, #5
 8000ca0:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000ca2:	463b      	mov	r3, r7
 8000ca4:	4619      	mov	r1, r3
 8000ca6:	4806      	ldr	r0, [pc, #24]	@ (8000cc0 <MX_ADC1_Init+0x108>)
 8000ca8:	f001 f816 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000cac:	4603      	mov	r3, r0
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d001      	beq.n	8000cb6 <MX_ADC1_Init+0xfe>
		Error_Handler();
 8000cb2:	f000 fbfd 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000cb6:	bf00      	nop
 8000cb8:	3710      	adds	r7, #16
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	200000d4 	.word	0x200000d4
 8000cc4:	40012000 	.word	0x40012000
 8000cc8:	0f000001 	.word	0x0f000001

08000ccc <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b084      	sub	sp, #16
 8000cd0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000cde:	4b21      	ldr	r3, [pc, #132]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000ce0:	4a21      	ldr	r2, [pc, #132]	@ (8000d68 <MX_ADC2_Init+0x9c>)
 8000ce2:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ce4:	4b1f      	ldr	r3, [pc, #124]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cea:	4b1e      	ldr	r3, [pc, #120]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000cf0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000cf6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cfc:	4b19      	ldr	r3, [pc, #100]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d04:	4b17      	ldr	r3, [pc, #92]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d0a:	4b16      	ldr	r3, [pc, #88]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d0c:	4a17      	ldr	r2, [pc, #92]	@ (8000d6c <MX_ADC2_Init+0xa0>)
 8000d0e:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d10:	4b14      	ldr	r3, [pc, #80]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000d16:	4b13      	ldr	r3, [pc, #76]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d18:	2201      	movs	r2, #1
 8000d1a:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d1c:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d24:	4b0f      	ldr	r3, [pc, #60]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d26:	2201      	movs	r2, #1
 8000d28:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000d2a:	480e      	ldr	r0, [pc, #56]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d2c:	f000 ff90 	bl	8001c50 <HAL_ADC_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC2_Init+0x6e>
		Error_Handler();
 8000d36:	f000 fbbb 	bl	80014b0 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000d3a:	2308      	movs	r3, #8
 8000d3c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000d46:	463b      	mov	r3, r7
 8000d48:	4619      	mov	r1, r3
 8000d4a:	4806      	ldr	r0, [pc, #24]	@ (8000d64 <MX_ADC2_Init+0x98>)
 8000d4c:	f000 ffc4 	bl	8001cd8 <HAL_ADC_ConfigChannel>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d001      	beq.n	8000d5a <MX_ADC2_Init+0x8e>
		Error_Handler();
 8000d56:	f000 fbab 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000d5a:	bf00      	nop
 8000d5c:	3710      	adds	r7, #16
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	2000011c 	.word	0x2000011c
 8000d68:	40012100 	.word	0x40012100
 8000d6c:	0f000001 	.word	0x0f000001

08000d70 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b08a      	sub	sp, #40	@ 0x28
 8000d74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	601a      	str	r2, [r3, #0]
 8000d7e:	605a      	str	r2, [r3, #4]
 8000d80:	609a      	str	r2, [r3, #8]
 8000d82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d84:	f107 0310 	add.w	r3, r7, #16
 8000d88:	2200      	movs	r2, #0
 8000d8a:	601a      	str	r2, [r3, #0]
 8000d8c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000d8e:	463b      	mov	r3, r7
 8000d90:	2200      	movs	r2, #0
 8000d92:	601a      	str	r2, [r3, #0]
 8000d94:	605a      	str	r2, [r3, #4]
 8000d96:	609a      	str	r2, [r3, #8]
 8000d98:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d9a:	4b37      	ldr	r3, [pc, #220]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000d9c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000da0:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8000da2:	4b35      	ldr	r3, [pc, #212]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000da4:	2247      	movs	r2, #71	@ 0x47
 8000da6:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000da8:	4b33      	ldr	r3, [pc, #204]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000daa:	2200      	movs	r2, #0
 8000dac:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000dae:	4b32      	ldr	r3, [pc, #200]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000db0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000db4:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000db6:	4b30      	ldr	r3, [pc, #192]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000db8:	2200      	movs	r2, #0
 8000dba:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dbc:	4b2e      	ldr	r3, [pc, #184]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000dc2:	482d      	ldr	r0, [pc, #180]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000dc4:	f002 fc5c 	bl	8003680 <HAL_TIM_Base_Init>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM2_Init+0x62>
		Error_Handler();
 8000dce:	f000 fb6f 	bl	80014b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dd2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000dd6:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000dd8:	f107 0318 	add.w	r3, r7, #24
 8000ddc:	4619      	mov	r1, r3
 8000dde:	4826      	ldr	r0, [pc, #152]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000de0:	f003 f844 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x7e>
		Error_Handler();
 8000dea:	f000 fb61 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000dee:	4822      	ldr	r0, [pc, #136]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000df0:	f002 fcee 	bl	80037d0 <HAL_TIM_IC_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_TIM2_Init+0x8e>
		Error_Handler();
 8000dfa:	f000 fb59 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	4619      	mov	r1, r3
 8000e0c:	481a      	ldr	r0, [pc, #104]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000e0e:	f003 fd3d 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8000e18:	f000 fb4a 	bl	80014b0 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e20:	2301      	movs	r3, #1
 8000e22:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e24:	2300      	movs	r3, #0
 8000e26:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000e2c:	463b      	mov	r3, r7
 8000e2e:	2204      	movs	r2, #4
 8000e30:	4619      	mov	r1, r3
 8000e32:	4811      	ldr	r0, [pc, #68]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000e34:	f002 febb 	bl	8003bae <HAL_TIM_IC_ConfigChannel>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_TIM2_Init+0xd2>
		Error_Handler();
 8000e3e:	f000 fb37 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8000e42:	463b      	mov	r3, r7
 8000e44:	2208      	movs	r2, #8
 8000e46:	4619      	mov	r1, r3
 8000e48:	480b      	ldr	r0, [pc, #44]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000e4a:	f002 feb0 	bl	8003bae <HAL_TIM_IC_ConfigChannel>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8000e54:	f000 fb2c 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8000e58:	463b      	mov	r3, r7
 8000e5a:	220c      	movs	r2, #12
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	4806      	ldr	r0, [pc, #24]	@ (8000e78 <MX_TIM2_Init+0x108>)
 8000e60:	f002 fea5 	bl	8003bae <HAL_TIM_IC_ConfigChannel>
 8000e64:	4603      	mov	r3, r0
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d001      	beq.n	8000e6e <MX_TIM2_Init+0xfe>
		Error_Handler();
 8000e6a:	f000 fb21 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e6e:	bf00      	nop
 8000e70:	3728      	adds	r7, #40	@ 0x28
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	bf00      	nop
 8000e78:	200001c4 	.word	0x200001c4

08000e7c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b08c      	sub	sp, #48	@ 0x30
 8000e80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000e82:	f107 030c 	add.w	r3, r7, #12
 8000e86:	2224      	movs	r2, #36	@ 0x24
 8000e88:	2100      	movs	r1, #0
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f004 fe4a 	bl	8005b24 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
 8000e96:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e98:	4b20      	ldr	r3, [pc, #128]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000e9a:	4a21      	ldr	r2, [pc, #132]	@ (8000f20 <MX_TIM3_Init+0xa4>)
 8000e9c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e9e:	4b1f      	ldr	r3, [pc, #124]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea4:	4b1d      	ldr	r3, [pc, #116]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000eaa:	4b1c      	ldr	r3, [pc, #112]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000eac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000eb0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eb2:	4b1a      	ldr	r3, [pc, #104]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb8:	4b18      	ldr	r3, [pc, #96]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8000ee2:	f107 030c 	add.w	r3, r7, #12
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	480c      	ldr	r0, [pc, #48]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000eea:	f002 fcca 	bl	8003882 <HAL_TIM_Encoder_Init>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8000ef4:	f000 fadc 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000efc:	2300      	movs	r3, #0
 8000efe:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000f00:	1d3b      	adds	r3, r7, #4
 8000f02:	4619      	mov	r1, r3
 8000f04:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_TIM3_Init+0xa0>)
 8000f06:	f003 fcc1 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000f10:	f000 face 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000f14:	bf00      	nop
 8000f16:	3730      	adds	r7, #48	@ 0x30
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	2000020c 	.word	0x2000020c
 8000f20:	40000400 	.word	0x40000400

08000f24 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f2a:	f107 0308 	add.w	r3, r7, #8
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f38:	463b      	mov	r3, r7
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000f40:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f42:	4a1e      	ldr	r2, [pc, #120]	@ (8000fbc <MX_TIM4_Init+0x98>)
 8000f44:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 720 - 1;
 8000f46:	4b1c      	ldr	r3, [pc, #112]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f48:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000f4c:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100 - 1;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f56:	2263      	movs	r2, #99	@ 0x63
 8000f58:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f60:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000f66:	4814      	ldr	r0, [pc, #80]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f68:	f002 fb8a 	bl	8003680 <HAL_TIM_Base_Init>
 8000f6c:	4603      	mov	r3, r0
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d001      	beq.n	8000f76 <MX_TIM4_Init+0x52>
		Error_Handler();
 8000f72:	f000 fa9d 	bl	80014b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f76:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f7a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000f7c:	f107 0308 	add.w	r3, r7, #8
 8000f80:	4619      	mov	r1, r3
 8000f82:	480d      	ldr	r0, [pc, #52]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000f84:	f002 ff72 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	2b00      	cmp	r3, #0
 8000f8c:	d001      	beq.n	8000f92 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8000f8e:	f000 fa8f 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f92:	2300      	movs	r3, #0
 8000f94:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	4806      	ldr	r0, [pc, #24]	@ (8000fb8 <MX_TIM4_Init+0x94>)
 8000fa0:	f003 fc74 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 8000fa4:	4603      	mov	r3, r0
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000faa:	f000 fa81 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000fae:	bf00      	nop
 8000fb0:	3718      	adds	r7, #24
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000254 	.word	0x20000254
 8000fbc:	40000800 	.word	0x40000800

08000fc0 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b096      	sub	sp, #88	@ 0x58
 8000fc4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000fc6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000fd4:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]
 8000fdc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	601a      	str	r2, [r3, #0]
 8000fe6:	605a      	str	r2, [r3, #4]
 8000fe8:	609a      	str	r2, [r3, #8]
 8000fea:	60da      	str	r2, [r3, #12]
 8000fec:	611a      	str	r2, [r3, #16]
 8000fee:	615a      	str	r2, [r3, #20]
 8000ff0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	f004 fd93 	bl	8005b24 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000ffe:	4b51      	ldr	r3, [pc, #324]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001000:	4a51      	ldr	r2, [pc, #324]	@ (8001148 <MX_TIM8_Init+0x188>)
 8001002:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 720 - 1;
 8001004:	4b4f      	ldr	r3, [pc, #316]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001006:	f240 22cf 	movw	r2, #719	@ 0x2cf
 800100a:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800100c:	4b4d      	ldr	r3, [pc, #308]	@ (8001144 <MX_TIM8_Init+0x184>)
 800100e:	2200      	movs	r2, #0
 8001010:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1023;
 8001012:	4b4c      	ldr	r3, [pc, #304]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001014:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8001018:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800101a:	4b4a      	ldr	r3, [pc, #296]	@ (8001144 <MX_TIM8_Init+0x184>)
 800101c:	2200      	movs	r2, #0
 800101e:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8001020:	4b48      	ldr	r3, [pc, #288]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001022:	2200      	movs	r2, #0
 8001024:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001026:	4b47      	ldr	r3, [pc, #284]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001028:	2200      	movs	r2, #0
 800102a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 800102c:	4845      	ldr	r0, [pc, #276]	@ (8001144 <MX_TIM8_Init+0x184>)
 800102e:	f002 fb27 	bl	8003680 <HAL_TIM_Base_Init>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <MX_TIM8_Init+0x7c>
		Error_Handler();
 8001038:	f000 fa3a 	bl	80014b0 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800103c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001040:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8001042:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001046:	4619      	mov	r1, r3
 8001048:	483e      	ldr	r0, [pc, #248]	@ (8001144 <MX_TIM8_Init+0x184>)
 800104a:	f002 ff0f 	bl	8003e6c <HAL_TIM_ConfigClockSource>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <MX_TIM8_Init+0x98>
		Error_Handler();
 8001054:	f000 fa2c 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001058:	483a      	ldr	r0, [pc, #232]	@ (8001144 <MX_TIM8_Init+0x184>)
 800105a:	f002 fb60 	bl	800371e <HAL_TIM_PWM_Init>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_TIM8_Init+0xa8>
		Error_Handler();
 8001064:	f000 fa24 	bl	80014b0 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001068:	2300      	movs	r3, #0
 800106a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106c:	2300      	movs	r3, #0
 800106e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001070:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001074:	4619      	mov	r1, r3
 8001076:	4833      	ldr	r0, [pc, #204]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001078:	f003 fc08 	bl	800488c <HAL_TIMEx_MasterConfigSynchronization>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_TIM8_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001082:	f000 fa15 	bl	80014b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001086:	2360      	movs	r3, #96	@ 0x60
 8001088:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 100;
 800108a:	2364      	movs	r3, #100	@ 0x64
 800108c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800108e:	2300      	movs	r3, #0
 8001090:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001092:	2300      	movs	r3, #0
 8001094:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001096:	2300      	movs	r3, #0
 8001098:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800109a:	2300      	movs	r3, #0
 800109c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800109e:	2300      	movs	r3, #0
 80010a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 80010a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010a6:	2200      	movs	r2, #0
 80010a8:	4619      	mov	r1, r3
 80010aa:	4826      	ldr	r0, [pc, #152]	@ (8001144 <MX_TIM8_Init+0x184>)
 80010ac:	f002 fe1c 	bl	8003ce8 <HAL_TIM_PWM_ConfigChannel>
 80010b0:	4603      	mov	r3, r0
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d001      	beq.n	80010ba <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 80010b6:	f000 f9fb 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 80010ba:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010be:	2204      	movs	r2, #4
 80010c0:	4619      	mov	r1, r3
 80010c2:	4820      	ldr	r0, [pc, #128]	@ (8001144 <MX_TIM8_Init+0x184>)
 80010c4:	f002 fe10 	bl	8003ce8 <HAL_TIM_PWM_ConfigChannel>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_TIM8_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 80010ce:	f000 f9ef 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 80010d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010d6:	2208      	movs	r2, #8
 80010d8:	4619      	mov	r1, r3
 80010da:	481a      	ldr	r0, [pc, #104]	@ (8001144 <MX_TIM8_Init+0x184>)
 80010dc:	f002 fe04 	bl	8003ce8 <HAL_TIM_PWM_ConfigChannel>
 80010e0:	4603      	mov	r3, r0
 80010e2:	2b00      	cmp	r3, #0
 80010e4:	d001      	beq.n	80010ea <MX_TIM8_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 80010e6:	f000 f9e3 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 80010ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80010ee:	220c      	movs	r2, #12
 80010f0:	4619      	mov	r1, r3
 80010f2:	4814      	ldr	r0, [pc, #80]	@ (8001144 <MX_TIM8_Init+0x184>)
 80010f4:	f002 fdf8 	bl	8003ce8 <HAL_TIM_PWM_ConfigChannel>
 80010f8:	4603      	mov	r3, r0
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 80010fe:	f000 f9d7 	bl	80014b0 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001102:	2300      	movs	r3, #0
 8001104:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800110a:	2300      	movs	r3, #0
 800110c:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001116:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800111a:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800111c:	2300      	movs	r3, #0
 800111e:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	4619      	mov	r1, r3
 8001124:	4807      	ldr	r0, [pc, #28]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001126:	f003 fc2d 	bl	8004984 <HAL_TIMEx_ConfigBreakDeadTime>
 800112a:	4603      	mov	r3, r0
 800112c:	2b00      	cmp	r3, #0
 800112e:	d001      	beq.n	8001134 <MX_TIM8_Init+0x174>
			!= HAL_OK) {
		Error_Handler();
 8001130:	f000 f9be 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 8001134:	4803      	ldr	r0, [pc, #12]	@ (8001144 <MX_TIM8_Init+0x184>)
 8001136:	f000 fbc7 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 800113a:	bf00      	nop
 800113c:	3758      	adds	r7, #88	@ 0x58
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	2000029c 	.word	0x2000029c
 8001148:	40010400 	.word	0x40010400

0800114c <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001152:	1d3b      	adds	r3, r7, #4
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
 8001158:	605a      	str	r2, [r3, #4]
 800115a:	609a      	str	r2, [r3, #8]
 800115c:	60da      	str	r2, [r3, #12]
 800115e:	611a      	str	r2, [r3, #16]
 8001160:	615a      	str	r2, [r3, #20]
 8001162:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001164:	4b1e      	ldr	r3, [pc, #120]	@ (80011e0 <MX_TIM10_Init+0x94>)
 8001166:	4a1f      	ldr	r2, [pc, #124]	@ (80011e4 <MX_TIM10_Init+0x98>)
 8001168:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 144 - 1;
 800116a:	4b1d      	ldr	r3, [pc, #116]	@ (80011e0 <MX_TIM10_Init+0x94>)
 800116c:	228f      	movs	r2, #143	@ 0x8f
 800116e:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001170:	4b1b      	ldr	r3, [pc, #108]	@ (80011e0 <MX_TIM10_Init+0x94>)
 8001172:	2200      	movs	r2, #0
 8001174:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 9999;
 8001176:	4b1a      	ldr	r3, [pc, #104]	@ (80011e0 <MX_TIM10_Init+0x94>)
 8001178:	f242 720f 	movw	r2, #9999	@ 0x270f
 800117c:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800117e:	4b18      	ldr	r3, [pc, #96]	@ (80011e0 <MX_TIM10_Init+0x94>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001184:	4b16      	ldr	r3, [pc, #88]	@ (80011e0 <MX_TIM10_Init+0x94>)
 8001186:	2200      	movs	r2, #0
 8001188:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800118a:	4815      	ldr	r0, [pc, #84]	@ (80011e0 <MX_TIM10_Init+0x94>)
 800118c:	f002 fa78 	bl	8003680 <HAL_TIM_Base_Init>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM10_Init+0x4e>
		Error_Handler();
 8001196:	f000 f98b 	bl	80014b0 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 800119a:	4811      	ldr	r0, [pc, #68]	@ (80011e0 <MX_TIM10_Init+0x94>)
 800119c:	f002 fabf 	bl	800371e <HAL_TIM_PWM_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_TIM10_Init+0x5e>
		Error_Handler();
 80011a6:	f000 f983 	bl	80014b0 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011aa:	2360      	movs	r3, #96	@ 0x60
 80011ac:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 749;
 80011ae:	f240 23ed 	movw	r3, #749	@ 0x2ed
 80011b2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011b4:	2300      	movs	r3, #0
 80011b6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b8:	2300      	movs	r3, #0
 80011ba:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80011bc:	1d3b      	adds	r3, r7, #4
 80011be:	2200      	movs	r2, #0
 80011c0:	4619      	mov	r1, r3
 80011c2:	4807      	ldr	r0, [pc, #28]	@ (80011e0 <MX_TIM10_Init+0x94>)
 80011c4:	f002 fd90 	bl	8003ce8 <HAL_TIM_PWM_ConfigChannel>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d001      	beq.n	80011d2 <MX_TIM10_Init+0x86>
			!= HAL_OK) {
		Error_Handler();
 80011ce:	f000 f96f 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80011d2:	4803      	ldr	r0, [pc, #12]	@ (80011e0 <MX_TIM10_Init+0x94>)
 80011d4:	f000 fb78 	bl	80018c8 <HAL_TIM_MspPostInit>

}
 80011d8:	bf00      	nop
 80011da:	3720      	adds	r7, #32
 80011dc:	46bd      	mov	sp, r7
 80011de:	bd80      	pop	{r7, pc}
 80011e0:	200002e4 	.word	0x200002e4
 80011e4:	40014400 	.word	0x40014400

080011e8 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80011ec:	4b11      	ldr	r3, [pc, #68]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 80011ee:	4a12      	ldr	r2, [pc, #72]	@ (8001238 <MX_USART3_UART_Init+0x50>)
 80011f0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80011f2:	4b10      	ldr	r3, [pc, #64]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 80011f4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011f8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 8001200:	4b0c      	ldr	r3, [pc, #48]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 8001202:	2200      	movs	r2, #0
 8001204:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 8001206:	4b0b      	ldr	r3, [pc, #44]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 800120c:	4b09      	ldr	r3, [pc, #36]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 800120e:	220c      	movs	r2, #12
 8001210:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001212:	4b08      	ldr	r3, [pc, #32]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001218:	4b06      	ldr	r3, [pc, #24]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 800121a:	2200      	movs	r2, #0
 800121c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 800121e:	4805      	ldr	r0, [pc, #20]	@ (8001234 <MX_USART3_UART_Init+0x4c>)
 8001220:	f003 fc16 	bl	8004a50 <HAL_UART_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_USART3_UART_Init+0x46>
		Error_Handler();
 800122a:	f000 f941 	bl	80014b0 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	2000032c 	.word	0x2000032c
 8001238:	40004800 	.word	0x40004800

0800123c <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	4b0c      	ldr	r3, [pc, #48]	@ (8001278 <MX_DMA_Init+0x3c>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a0b      	ldr	r2, [pc, #44]	@ (8001278 <MX_DMA_Init+0x3c>)
 800124c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b09      	ldr	r3, [pc, #36]	@ (8001278 <MX_DMA_Init+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800125a:	607b      	str	r3, [r7, #4]
 800125c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800125e:	2200      	movs	r2, #0
 8001260:	2100      	movs	r1, #0
 8001262:	2038      	movs	r0, #56	@ 0x38
 8001264:	f001 f831 	bl	80022ca <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001268:	2038      	movs	r0, #56	@ 0x38
 800126a:	f001 f84a 	bl	8002302 <HAL_NVIC_EnableIRQ>

}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	40023800 	.word	0x40023800

0800127c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800127c:	b580      	push	{r7, lr}
 800127e:	b08c      	sub	sp, #48	@ 0x30
 8001280:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001282:	f107 031c 	add.w	r3, r7, #28
 8001286:	2200      	movs	r2, #0
 8001288:	601a      	str	r2, [r3, #0]
 800128a:	605a      	str	r2, [r3, #4]
 800128c:	609a      	str	r2, [r3, #8]
 800128e:	60da      	str	r2, [r3, #12]
 8001290:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	61bb      	str	r3, [r7, #24]
 8001296:	4b77      	ldr	r3, [pc, #476]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a76      	ldr	r2, [pc, #472]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 800129c:	f043 0310 	orr.w	r3, r3, #16
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b74      	ldr	r3, [pc, #464]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0310 	and.w	r3, r3, #16
 80012aa:	61bb      	str	r3, [r7, #24]
 80012ac:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80012ae:	2300      	movs	r3, #0
 80012b0:	617b      	str	r3, [r7, #20]
 80012b2:	4b70      	ldr	r3, [pc, #448]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012b6:	4a6f      	ldr	r2, [pc, #444]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012b8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012be:	4b6d      	ldr	r3, [pc, #436]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80012ca:	2300      	movs	r3, #0
 80012cc:	613b      	str	r3, [r7, #16]
 80012ce:	4b69      	ldr	r3, [pc, #420]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d2:	4a68      	ldr	r2, [pc, #416]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012d4:	f043 0304 	orr.w	r3, r3, #4
 80012d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80012da:	4b66      	ldr	r3, [pc, #408]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012de:	f003 0304 	and.w	r3, r3, #4
 80012e2:	613b      	str	r3, [r7, #16]
 80012e4:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80012e6:	2300      	movs	r3, #0
 80012e8:	60fb      	str	r3, [r7, #12]
 80012ea:	4b62      	ldr	r3, [pc, #392]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ee:	4a61      	ldr	r2, [pc, #388]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012f0:	f043 0301 	orr.w	r3, r3, #1
 80012f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012f6:	4b5f      	ldr	r3, [pc, #380]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012fa:	f003 0301 	and.w	r3, r3, #1
 80012fe:	60fb      	str	r3, [r7, #12]
 8001300:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001302:	2300      	movs	r3, #0
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	4b5b      	ldr	r3, [pc, #364]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001308:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130a:	4a5a      	ldr	r2, [pc, #360]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 800130c:	f043 0302 	orr.w	r3, r3, #2
 8001310:	6313      	str	r3, [r2, #48]	@ 0x30
 8001312:	4b58      	ldr	r3, [pc, #352]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001316:	f003 0302 	and.w	r3, r3, #2
 800131a:	60bb      	str	r3, [r7, #8]
 800131c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b54      	ldr	r3, [pc, #336]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	4a53      	ldr	r2, [pc, #332]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001328:	f043 0308 	orr.w	r3, r3, #8
 800132c:	6313      	str	r3, [r2, #48]	@ 0x30
 800132e:	4b51      	ldr	r3, [pc, #324]	@ (8001474 <MX_GPIO_Init+0x1f8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001332:	f003 0308 	and.w	r3, r3, #8
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 800133a:	2200      	movs	r2, #0
 800133c:	2108      	movs	r1, #8
 800133e:	484e      	ldr	r0, [pc, #312]	@ (8001478 <MX_GPIO_Init+0x1fc>)
 8001340:	f001 fd12 	bl	8002d68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8001344:	2200      	movs	r2, #0
 8001346:	f24f 0104 	movw	r1, #61444	@ 0xf004
 800134a:	484c      	ldr	r0, [pc, #304]	@ (800147c <MX_GPIO_Init+0x200>)
 800134c:	f001 fd0c 	bl	8002d68 <HAL_GPIO_WritePin>
	GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001350:	2200      	movs	r2, #0
 8001352:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8001356:	484a      	ldr	r0, [pc, #296]	@ (8001480 <MX_GPIO_Init+0x204>)
 8001358:	f001 fd06 	bl	8002d68 <HAL_GPIO_WritePin>
			GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
					| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800135c:	2200      	movs	r2, #0
 800135e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001362:	4848      	ldr	r0, [pc, #288]	@ (8001484 <MX_GPIO_Init+0x208>)
 8001364:	f001 fd00 	bl	8002d68 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 800136e:	4846      	ldr	r0, [pc, #280]	@ (8001488 <MX_GPIO_Init+0x20c>)
 8001370:	f001 fcfa 	bl	8002d68 <HAL_GPIO_WritePin>
	LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 8001374:	231c      	movs	r3, #28
 8001376:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001378:	2300      	movs	r3, #0
 800137a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	483e      	ldr	r0, [pc, #248]	@ (8001480 <MX_GPIO_Init+0x204>)
 8001388:	f001 fb52 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 800138c:	2302      	movs	r3, #2
 800138e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001390:	2300      	movs	r3, #0
 8001392:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2300      	movs	r3, #0
 8001396:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001398:	f107 031c 	add.w	r3, r7, #28
 800139c:	4619      	mov	r1, r3
 800139e:	4836      	ldr	r0, [pc, #216]	@ (8001478 <MX_GPIO_Init+0x1fc>)
 80013a0:	f001 fb46 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pin : trigger_Pin */
	GPIO_InitStruct.Pin = trigger_Pin;
 80013a4:	2308      	movs	r3, #8
 80013a6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a8:	2301      	movs	r3, #1
 80013aa:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ac:	2300      	movs	r3, #0
 80013ae:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 80013b4:	f107 031c 	add.w	r3, r7, #28
 80013b8:	4619      	mov	r1, r3
 80013ba:	482f      	ldr	r0, [pc, #188]	@ (8001478 <MX_GPIO_Init+0x1fc>)
 80013bc:	f001 fb38 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 80013c0:	f24f 0304 	movw	r3, #61444	@ 0xf004
 80013c4:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c6:	2301      	movs	r3, #1
 80013c8:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ce:	2300      	movs	r3, #0
 80013d0:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d2:	f107 031c 	add.w	r3, r7, #28
 80013d6:	4619      	mov	r1, r3
 80013d8:	4828      	ldr	r0, [pc, #160]	@ (800147c <MX_GPIO_Init+0x200>)
 80013da:	f001 fb29 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE7 PE8 PE9 PE10
	 PE11 PE12 PE13 PE14
	 PE15 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
 80013de:	f64f 7380 	movw	r3, #65408	@ 0xff80
 80013e2:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e8:	2300      	movs	r3, #0
 80013ea:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ec:	2300      	movs	r3, #0
 80013ee:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4822      	ldr	r0, [pc, #136]	@ (8001480 <MX_GPIO_Init+0x204>)
 80013f8:	f001 fb1a 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013fc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001400:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001402:	2301      	movs	r3, #1
 8001404:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	2300      	movs	r3, #0
 800140c:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	4619      	mov	r1, r3
 8001414:	481b      	ldr	r0, [pc, #108]	@ (8001484 <MX_GPIO_Init+0x208>)
 8001416:	f001 fb0b 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_1_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = SW_1_Pin | SW_2_Pin;
 800141a:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 800141e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001420:	2300      	movs	r3, #0
 8001422:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001428:	f107 031c 	add.w	r3, r7, #28
 800142c:	4619      	mov	r1, r3
 800142e:	4815      	ldr	r0, [pc, #84]	@ (8001484 <MX_GPIO_Init+0x208>)
 8001430:	f001 fafe 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
	 LED_5_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 8001434:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8001438:	61fb      	str	r3, [r7, #28]
			| LED_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800143a:	2301      	movs	r3, #1
 800143c:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800143e:	2300      	movs	r3, #0
 8001440:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001442:	2300      	movs	r3, #0
 8001444:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001446:	f107 031c 	add.w	r3, r7, #28
 800144a:	4619      	mov	r1, r3
 800144c:	480e      	ldr	r0, [pc, #56]	@ (8001488 <MX_GPIO_Init+0x20c>)
 800144e:	f001 faef 	bl	8002a30 <HAL_GPIO_Init>

	/*Configure GPIO pins : ES_L_Pin ES_R_Pin */
	GPIO_InitStruct.Pin = ES_L_Pin | ES_R_Pin;
 8001452:	23c0      	movs	r3, #192	@ 0xc0
 8001454:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001456:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800145a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001460:	f107 031c 	add.w	r3, r7, #28
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	@ (8001484 <MX_GPIO_Init+0x208>)
 8001468:	f001 fae2 	bl	8002a30 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800146c:	bf00      	nop
 800146e:	3730      	adds	r7, #48	@ 0x30
 8001470:	46bd      	mov	sp, r7
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	40020800 	.word	0x40020800
 800147c:	40020400 	.word	0x40020400
 8001480:	40021000 	.word	0x40021000
 8001484:	40020c00 	.word	0x40020c00
 8001488:	40020000 	.word	0x40020000

0800148c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

// #if defined(TEST_ULTRASONIC) || defined(TEST_ENCODER)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim4.Instance) // make sure
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681a      	ldr	r2, [r3, #0]
 8001498:	4b04      	ldr	r3, [pc, #16]	@ (80014ac <HAL_TIM_PeriodElapsedCallback+0x20>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	429a      	cmp	r2, r3
 800149e:	d101      	bne.n	80014a4 <HAL_TIM_PeriodElapsedCallback+0x18>
			{
		Scheduler_Update();
 80014a0:	f000 f83a 	bl	8001518 <Scheduler_Update>
		//   HAL_TIM_IC_Start_IT((&sensor1)->htim, TIM_CHANNEL_1);
		//   HAL_TIM_IC_Start_IT((&sensor2)->htim, TIM_CHANNEL_2);
		//   HAL_TIM_IC_Start_IT((&sensor3)->htim, TIM_CHANNEL_3);
		//   //		updateEncoder(&enc, ((TIM3->SMCR & 0x3) == 0x3));
	}
}
 80014a4:	bf00      	nop
 80014a6:	3708      	adds	r7, #8
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000254 	.word	0x20000254

080014b0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014b4:	b672      	cpsid	i
}
 80014b6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014b8:	bf00      	nop
 80014ba:	e7fd      	b.n	80014b8 <Error_Handler+0x8>

080014bc <Scheduler_Init>:
Tasks_t tasks;

int is_avail(TaskNode *task) {
	return (task->runMe == 1);
}
void Scheduler_Init(void) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
	if (!tasks.head) {
 80014c2:	4b14      	ldr	r3, [pc, #80]	@ (8001514 <Scheduler_Init+0x58>)
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d106      	bne.n	80014d8 <Scheduler_Init+0x1c>
		tasks.head = NULL;
 80014ca:	4b12      	ldr	r3, [pc, #72]	@ (8001514 <Scheduler_Init+0x58>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]
		tasks.nTasks = 0;
 80014d0:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <Scheduler_Init+0x58>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	605a      	str	r2, [r3, #4]
			current = current->next;
			free(tmp);
		}
		tasks.head = NULL;
	}
}
 80014d6:	e018      	b.n	800150a <Scheduler_Init+0x4e>
		TaskNode *current = tasks.head;
 80014d8:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <Scheduler_Init+0x58>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80014de:	2300      	movs	r3, #0
 80014e0:	72fb      	strb	r3, [r7, #11]
 80014e2:	e00a      	b.n	80014fa <Scheduler_Init+0x3e>
			TaskNode *tmp = current;
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	607b      	str	r3, [r7, #4]
			current = current->next;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	60fb      	str	r3, [r7, #12]
			free(tmp);
 80014ee:	6878      	ldr	r0, [r7, #4]
 80014f0:	f004 fb04 	bl	8005afc <free>
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80014f4:	7afb      	ldrb	r3, [r7, #11]
 80014f6:	3301      	adds	r3, #1
 80014f8:	72fb      	strb	r3, [r7, #11]
 80014fa:	7afa      	ldrb	r2, [r7, #11]
 80014fc:	4b05      	ldr	r3, [pc, #20]	@ (8001514 <Scheduler_Init+0x58>)
 80014fe:	685b      	ldr	r3, [r3, #4]
 8001500:	429a      	cmp	r2, r3
 8001502:	d3ef      	bcc.n	80014e4 <Scheduler_Init+0x28>
		tasks.head = NULL;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <Scheduler_Init+0x58>)
 8001506:	2200      	movs	r2, #0
 8001508:	601a      	str	r2, [r3, #0]
}
 800150a:	bf00      	nop
 800150c:	3710      	adds	r7, #16
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000374 	.word	0x20000374

08001518 <Scheduler_Update>:
	}
	tasks.nTasks++;
	return newTask->TaskID;
}

void Scheduler_Update(void) {
 8001518:	b480      	push	{r7}
 800151a:	af00      	add	r7, sp, #0
	if (!tasks.head)
 800151c:	4b0c      	ldr	r3, [pc, #48]	@ (8001550 <Scheduler_Update+0x38>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d00f      	beq.n	8001544 <Scheduler_Update+0x2c>
		return;
	if (tasks.head->delay <= 0) {
 8001524:	4b0a      	ldr	r3, [pc, #40]	@ (8001550 <Scheduler_Update+0x38>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	689b      	ldr	r3, [r3, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	d104      	bne.n	8001538 <Scheduler_Update+0x20>
		tasks.head->runMe = 1;
 800152e:	4b08      	ldr	r3, [pc, #32]	@ (8001550 <Scheduler_Update+0x38>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2201      	movs	r2, #1
 8001534:	741a      	strb	r2, [r3, #16]
 8001536:	e006      	b.n	8001546 <Scheduler_Update+0x2e>
	} else
		tasks.head->delay--;
 8001538:	4b05      	ldr	r3, [pc, #20]	@ (8001550 <Scheduler_Update+0x38>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	689a      	ldr	r2, [r3, #8]
 800153e:	3a01      	subs	r2, #1
 8001540:	609a      	str	r2, [r3, #8]
 8001542:	e000      	b.n	8001546 <Scheduler_Update+0x2e>
		return;
 8001544:	bf00      	nop
}
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	20000374 	.word	0x20000374

08001554 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001554:	b480      	push	{r7}
 8001556:	b083      	sub	sp, #12
 8001558:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800155a:	2300      	movs	r3, #0
 800155c:	607b      	str	r3, [r7, #4]
 800155e:	4b10      	ldr	r3, [pc, #64]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001562:	4a0f      	ldr	r2, [pc, #60]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001564:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001568:	6453      	str	r3, [r2, #68]	@ 0x44
 800156a:	4b0d      	ldr	r3, [pc, #52]	@ (80015a0 <HAL_MspInit+0x4c>)
 800156c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800156e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001572:	607b      	str	r3, [r7, #4]
 8001574:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
 800157a:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_MspInit+0x4c>)
 800157c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157e:	4a08      	ldr	r2, [pc, #32]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001580:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001584:	6413      	str	r3, [r2, #64]	@ 0x40
 8001586:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <HAL_MspInit+0x4c>)
 8001588:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800158a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800158e:	603b      	str	r3, [r7, #0]
 8001590:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001592:	bf00      	nop
 8001594:	370c      	adds	r7, #12
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40023800 	.word	0x40023800

080015a4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b08c      	sub	sp, #48	@ 0x30
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ac:	f107 031c 	add.w	r3, r7, #28
 80015b0:	2200      	movs	r2, #0
 80015b2:	601a      	str	r2, [r3, #0]
 80015b4:	605a      	str	r2, [r3, #4]
 80015b6:	609a      	str	r2, [r3, #8]
 80015b8:	60da      	str	r2, [r3, #12]
 80015ba:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a46      	ldr	r2, [pc, #280]	@ (80016dc <HAL_ADC_MspInit+0x138>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d158      	bne.n	8001678 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	61bb      	str	r3, [r7, #24]
 80015ca:	4b45      	ldr	r3, [pc, #276]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015ce:	4a44      	ldr	r2, [pc, #272]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80015d6:	4b42      	ldr	r3, [pc, #264]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015de:	61bb      	str	r3, [r7, #24]
 80015e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
 80015e6:	4b3e      	ldr	r3, [pc, #248]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015ea:	4a3d      	ldr	r2, [pc, #244]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015ec:	f043 0301 	orr.w	r3, r3, #1
 80015f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80015f2:	4b3b      	ldr	r3, [pc, #236]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015f6:	f003 0301 	and.w	r3, r3, #1
 80015fa:	617b      	str	r3, [r7, #20]
 80015fc:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 80015fe:	23f1      	movs	r3, #241	@ 0xf1
 8001600:	61fb      	str	r3, [r7, #28]
                          |IR5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001602:	2303      	movs	r3, #3
 8001604:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800160a:	f107 031c 	add.w	r3, r7, #28
 800160e:	4619      	mov	r1, r3
 8001610:	4834      	ldr	r0, [pc, #208]	@ (80016e4 <HAL_ADC_MspInit+0x140>)
 8001612:	f001 fa0d 	bl	8002a30 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001616:	4b34      	ldr	r3, [pc, #208]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001618:	4a34      	ldr	r2, [pc, #208]	@ (80016ec <HAL_ADC_MspInit+0x148>)
 800161a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800161c:	4b32      	ldr	r3, [pc, #200]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 800161e:	2200      	movs	r2, #0
 8001620:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	4b31      	ldr	r3, [pc, #196]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001624:	2200      	movs	r2, #0
 8001626:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001628:	4b2f      	ldr	r3, [pc, #188]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 800162a:	2200      	movs	r2, #0
 800162c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800162e:	4b2e      	ldr	r3, [pc, #184]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001630:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001634:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001636:	4b2c      	ldr	r3, [pc, #176]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001638:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800163c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800163e:	4b2a      	ldr	r3, [pc, #168]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001640:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001644:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001646:	4b28      	ldr	r3, [pc, #160]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001648:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800164c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 800164e:	4b26      	ldr	r3, [pc, #152]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001650:	2200      	movs	r2, #0
 8001652:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001654:	4b24      	ldr	r3, [pc, #144]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001656:	2200      	movs	r2, #0
 8001658:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800165a:	4823      	ldr	r0, [pc, #140]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 800165c:	f000 fe6c 	bl	8002338 <HAL_DMA_Init>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001666:	f7ff ff23 	bl	80014b0 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	4a1e      	ldr	r2, [pc, #120]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 800166e:	639a      	str	r2, [r3, #56]	@ 0x38
 8001670:	4a1d      	ldr	r2, [pc, #116]	@ (80016e8 <HAL_ADC_MspInit+0x144>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001676:	e02c      	b.n	80016d2 <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a1c      	ldr	r2, [pc, #112]	@ (80016f0 <HAL_ADC_MspInit+0x14c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d127      	bne.n	80016d2 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	613b      	str	r3, [r7, #16]
 8001686:	4b16      	ldr	r3, [pc, #88]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 8001688:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800168a:	4a15      	ldr	r2, [pc, #84]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 800168c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001690:	6453      	str	r3, [r2, #68]	@ 0x44
 8001692:	4b13      	ldr	r3, [pc, #76]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001696:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800169e:	2300      	movs	r3, #0
 80016a0:	60fb      	str	r3, [r7, #12]
 80016a2:	4b0f      	ldr	r3, [pc, #60]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80016a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016a6:	4a0e      	ldr	r2, [pc, #56]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80016a8:	f043 0302 	orr.w	r3, r3, #2
 80016ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ae:	4b0c      	ldr	r3, [pc, #48]	@ (80016e0 <HAL_ADC_MspInit+0x13c>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BATT_Pin;
 80016ba:	2301      	movs	r3, #1
 80016bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016be:	2303      	movs	r3, #3
 80016c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 031c 	add.w	r3, r7, #28
 80016ca:	4619      	mov	r1, r3
 80016cc:	4809      	ldr	r0, [pc, #36]	@ (80016f4 <HAL_ADC_MspInit+0x150>)
 80016ce:	f001 f9af 	bl	8002a30 <HAL_GPIO_Init>
}
 80016d2:	bf00      	nop
 80016d4:	3730      	adds	r7, #48	@ 0x30
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40012000 	.word	0x40012000
 80016e0:	40023800 	.word	0x40023800
 80016e4:	40020000 	.word	0x40020000
 80016e8:	20000164 	.word	0x20000164
 80016ec:	40026410 	.word	0x40026410
 80016f0:	40012100 	.word	0x40012100
 80016f4:	40020400 	.word	0x40020400

080016f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08c      	sub	sp, #48	@ 0x30
 80016fc:	af00      	add	r7, sp, #0
 80016fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001700:	f107 031c 	add.w	r3, r7, #28
 8001704:	2200      	movs	r2, #0
 8001706:	601a      	str	r2, [r3, #0]
 8001708:	605a      	str	r2, [r3, #4]
 800170a:	609a      	str	r2, [r3, #8]
 800170c:	60da      	str	r2, [r3, #12]
 800170e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001718:	d134      	bne.n	8001784 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
 800171e:	4b3d      	ldr	r3, [pc, #244]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001722:	4a3c      	ldr	r2, [pc, #240]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	6413      	str	r3, [r2, #64]	@ 0x40
 800172a:	4b3a      	ldr	r3, [pc, #232]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 800172c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172e:	f003 0301 	and.w	r3, r3, #1
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	617b      	str	r3, [r7, #20]
 800173a:	4b36      	ldr	r3, [pc, #216]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 800173c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173e:	4a35      	ldr	r2, [pc, #212]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001740:	f043 0301 	orr.w	r3, r3, #1
 8001744:	6313      	str	r3, [r2, #48]	@ 0x30
 8001746:	4b33      	ldr	r3, [pc, #204]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800174a:	f003 0301 	and.w	r3, r3, #1
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ECHO_L_Pin|ECHO_M_Pin|ECHO_R_Pin;
 8001752:	230e      	movs	r3, #14
 8001754:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001756:	2302      	movs	r3, #2
 8001758:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800175a:	2300      	movs	r3, #0
 800175c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175e:	2300      	movs	r3, #0
 8001760:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001762:	2301      	movs	r3, #1
 8001764:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	4619      	mov	r1, r3
 800176c:	482a      	ldr	r0, [pc, #168]	@ (8001818 <HAL_TIM_Base_MspInit+0x120>)
 800176e:	f001 f95f 	bl	8002a30 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001772:	2200      	movs	r2, #0
 8001774:	2100      	movs	r1, #0
 8001776:	201c      	movs	r0, #28
 8001778:	f000 fda7 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800177c:	201c      	movs	r0, #28
 800177e:	f000 fdc0 	bl	8002302 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001782:	e042      	b.n	800180a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a24      	ldr	r2, [pc, #144]	@ (800181c <HAL_TIM_Base_MspInit+0x124>)
 800178a:	4293      	cmp	r3, r2
 800178c:	d116      	bne.n	80017bc <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
 8001792:	4b20      	ldr	r3, [pc, #128]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001794:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001796:	4a1f      	ldr	r2, [pc, #124]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001798:	f043 0304 	orr.w	r3, r3, #4
 800179c:	6413      	str	r3, [r2, #64]	@ 0x40
 800179e:	4b1d      	ldr	r3, [pc, #116]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	613b      	str	r3, [r7, #16]
 80017a8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80017aa:	2200      	movs	r2, #0
 80017ac:	2100      	movs	r1, #0
 80017ae:	201e      	movs	r0, #30
 80017b0:	f000 fd8b 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80017b4:	201e      	movs	r0, #30
 80017b6:	f000 fda4 	bl	8002302 <HAL_NVIC_EnableIRQ>
}
 80017ba:	e026      	b.n	800180a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a17      	ldr	r2, [pc, #92]	@ (8001820 <HAL_TIM_Base_MspInit+0x128>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10e      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ce:	4a11      	ldr	r2, [pc, #68]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017da:	f003 0302 	and.w	r3, r3, #2
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
}
 80017e2:	e012      	b.n	800180a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a0e      	ldr	r2, [pc, #56]	@ (8001824 <HAL_TIM_Base_MspInit+0x12c>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d10d      	bne.n	800180a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	60bb      	str	r3, [r7, #8]
 80017f2:	4b08      	ldr	r3, [pc, #32]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017f6:	4a07      	ldr	r2, [pc, #28]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 80017f8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017fe:	4b05      	ldr	r3, [pc, #20]	@ (8001814 <HAL_TIM_Base_MspInit+0x11c>)
 8001800:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001802:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001806:	60bb      	str	r3, [r7, #8]
 8001808:	68bb      	ldr	r3, [r7, #8]
}
 800180a:	bf00      	nop
 800180c:	3730      	adds	r7, #48	@ 0x30
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000
 800181c:	40000800 	.word	0x40000800
 8001820:	40010400 	.word	0x40010400
 8001824:	40014400 	.word	0x40014400

08001828 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b08a      	sub	sp, #40	@ 0x28
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001830:	f107 0314 	add.w	r3, r7, #20
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a1d      	ldr	r2, [pc, #116]	@ (80018bc <HAL_TIM_Encoder_MspInit+0x94>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d133      	bne.n	80018b2 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800184a:	2300      	movs	r3, #0
 800184c:	613b      	str	r3, [r7, #16]
 800184e:	4b1c      	ldr	r3, [pc, #112]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	4a1b      	ldr	r2, [pc, #108]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001854:	f043 0302 	orr.w	r3, r3, #2
 8001858:	6413      	str	r3, [r2, #64]	@ 0x40
 800185a:	4b19      	ldr	r3, [pc, #100]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800185c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185e:	f003 0302 	and.w	r3, r3, #2
 8001862:	613b      	str	r3, [r7, #16]
 8001864:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001866:	2300      	movs	r3, #0
 8001868:	60fb      	str	r3, [r7, #12]
 800186a:	4b15      	ldr	r3, [pc, #84]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186e:	4a14      	ldr	r2, [pc, #80]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001870:	f043 0302 	orr.w	r3, r3, #2
 8001874:	6313      	str	r3, [r2, #48]	@ 0x30
 8001876:	4b12      	ldr	r3, [pc, #72]	@ (80018c0 <HAL_TIM_Encoder_MspInit+0x98>)
 8001878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800187a:	f003 0302 	and.w	r3, r3, #2
 800187e:	60fb      	str	r3, [r7, #12]
 8001880:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_L1_Pin|EN_L0_Pin;
 8001882:	2330      	movs	r3, #48	@ 0x30
 8001884:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001886:	2302      	movs	r3, #2
 8001888:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800188a:	2300      	movs	r3, #0
 800188c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800188e:	2300      	movs	r3, #0
 8001890:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001892:	2302      	movs	r3, #2
 8001894:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001896:	f107 0314 	add.w	r3, r7, #20
 800189a:	4619      	mov	r1, r3
 800189c:	4809      	ldr	r0, [pc, #36]	@ (80018c4 <HAL_TIM_Encoder_MspInit+0x9c>)
 800189e:	f001 f8c7 	bl	8002a30 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	201d      	movs	r0, #29
 80018a8:	f000 fd0f 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80018ac:	201d      	movs	r0, #29
 80018ae:	f000 fd28 	bl	8002302 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 80018b2:	bf00      	nop
 80018b4:	3728      	adds	r7, #40	@ 0x28
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	40000400 	.word	0x40000400
 80018c0:	40023800 	.word	0x40023800
 80018c4:	40020400 	.word	0x40020400

080018c8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b08a      	sub	sp, #40	@ 0x28
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d0:	f107 0314 	add.w	r3, r7, #20
 80018d4:	2200      	movs	r2, #0
 80018d6:	601a      	str	r2, [r3, #0]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	609a      	str	r2, [r3, #8]
 80018dc:	60da      	str	r2, [r3, #12]
 80018de:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a25      	ldr	r2, [pc, #148]	@ (800197c <HAL_TIM_MspPostInit+0xb4>)
 80018e6:	4293      	cmp	r3, r2
 80018e8:	d11f      	bne.n	800192a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018ea:	2300      	movs	r3, #0
 80018ec:	613b      	str	r3, [r7, #16]
 80018ee:	4b24      	ldr	r3, [pc, #144]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 80018f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f2:	4a23      	ldr	r2, [pc, #140]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 80018f4:	f043 0304 	orr.w	r3, r3, #4
 80018f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fa:	4b21      	ldr	r3, [pc, #132]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 80018fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018fe:	f003 0304 	and.w	r3, r3, #4
 8001902:	613b      	str	r3, [r7, #16]
 8001904:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_R1_Pin|MOTOR_R0_Pin|MOTOR_L1_Pin|MOTOR_L0_Pin;
 8001906:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800190a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001918:	2303      	movs	r3, #3
 800191a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800191c:	f107 0314 	add.w	r3, r7, #20
 8001920:	4619      	mov	r1, r3
 8001922:	4818      	ldr	r0, [pc, #96]	@ (8001984 <HAL_TIM_MspPostInit+0xbc>)
 8001924:	f001 f884 	bl	8002a30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001928:	e023      	b.n	8001972 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4a16      	ldr	r2, [pc, #88]	@ (8001988 <HAL_TIM_MspPostInit+0xc0>)
 8001930:	4293      	cmp	r3, r2
 8001932:	d11e      	bne.n	8001972 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001934:	2300      	movs	r3, #0
 8001936:	60fb      	str	r3, [r7, #12]
 8001938:	4b11      	ldr	r3, [pc, #68]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 800193a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800193c:	4a10      	ldr	r2, [pc, #64]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 800193e:	f043 0302 	orr.w	r3, r3, #2
 8001942:	6313      	str	r3, [r2, #48]	@ 0x30
 8001944:	4b0e      	ldr	r3, [pc, #56]	@ (8001980 <HAL_TIM_MspPostInit+0xb8>)
 8001946:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001948:	f003 0302 	and.w	r3, r3, #2
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001950:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001954:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001956:	2302      	movs	r3, #2
 8001958:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195a:	2300      	movs	r3, #0
 800195c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800195e:	2300      	movs	r3, #0
 8001960:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001962:	2303      	movs	r3, #3
 8001964:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001966:	f107 0314 	add.w	r3, r7, #20
 800196a:	4619      	mov	r1, r3
 800196c:	4807      	ldr	r0, [pc, #28]	@ (800198c <HAL_TIM_MspPostInit+0xc4>)
 800196e:	f001 f85f 	bl	8002a30 <HAL_GPIO_Init>
}
 8001972:	bf00      	nop
 8001974:	3728      	adds	r7, #40	@ 0x28
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40010400 	.word	0x40010400
 8001980:	40023800 	.word	0x40023800
 8001984:	40020800 	.word	0x40020800
 8001988:	40014400 	.word	0x40014400
 800198c:	40020400 	.word	0x40020400

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08a      	sub	sp, #40	@ 0x28
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001998:	f107 0314 	add.w	r3, r7, #20
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a1d      	ldr	r2, [pc, #116]	@ (8001a24 <HAL_UART_MspInit+0x94>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d134      	bne.n	8001a1c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80019b2:	2300      	movs	r3, #0
 80019b4:	613b      	str	r3, [r7, #16]
 80019b6:	4b1c      	ldr	r3, [pc, #112]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ba:	4a1b      	ldr	r2, [pc, #108]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019bc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019c0:	6413      	str	r3, [r2, #64]	@ 0x40
 80019c2:	4b19      	ldr	r3, [pc, #100]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019c6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019ca:	613b      	str	r3, [r7, #16]
 80019cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019d6:	4a14      	ldr	r2, [pc, #80]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80019de:	4b12      	ldr	r3, [pc, #72]	@ (8001a28 <HAL_UART_MspInit+0x98>)
 80019e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019ea:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f0:	2302      	movs	r3, #2
 80019f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019f4:	2300      	movs	r3, #0
 80019f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f8:	2303      	movs	r3, #3
 80019fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019fc:	2307      	movs	r3, #7
 80019fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a00:	f107 0314 	add.w	r3, r7, #20
 8001a04:	4619      	mov	r1, r3
 8001a06:	4809      	ldr	r0, [pc, #36]	@ (8001a2c <HAL_UART_MspInit+0x9c>)
 8001a08:	f001 f812 	bl	8002a30 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	2100      	movs	r1, #0
 8001a10:	2027      	movs	r0, #39	@ 0x27
 8001a12:	f000 fc5a 	bl	80022ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a16:	2027      	movs	r0, #39	@ 0x27
 8001a18:	f000 fc73 	bl	8002302 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a1c:	bf00      	nop
 8001a1e:	3728      	adds	r7, #40	@ 0x28
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40004800 	.word	0x40004800
 8001a28:	40023800 	.word	0x40023800
 8001a2c:	40020400 	.word	0x40020400

08001a30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <NMI_Handler+0x4>

08001a38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <HardFault_Handler+0x4>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <MemManage_Handler+0x4>

08001a48 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4c:	bf00      	nop
 8001a4e:	e7fd      	b.n	8001a4c <BusFault_Handler+0x4>

08001a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a50:	b480      	push	{r7}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a54:	bf00      	nop
 8001a56:	e7fd      	b.n	8001a54 <UsageFault_Handler+0x4>

08001a58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a5c:	bf00      	nop
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a66:	b480      	push	{r7}
 8001a68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a6a:	bf00      	nop
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a78:	bf00      	nop
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr

08001a82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a86:	f000 f8c3 	bl	8001c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a8a:	bf00      	nop
 8001a8c:	bd80      	pop	{r7, pc}
	...

08001a90 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a94:	4802      	ldr	r0, [pc, #8]	@ (8001aa0 <TIM2_IRQHandler+0x10>)
 8001a96:	f001 ff9a 	bl	80039ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a9a:	bf00      	nop
 8001a9c:	bd80      	pop	{r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	200001c4 	.word	0x200001c4

08001aa4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001aa8:	4802      	ldr	r0, [pc, #8]	@ (8001ab4 <TIM3_IRQHandler+0x10>)
 8001aaa:	f001 ff90 	bl	80039ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001aae:	bf00      	nop
 8001ab0:	bd80      	pop	{r7, pc}
 8001ab2:	bf00      	nop
 8001ab4:	2000020c 	.word	0x2000020c

08001ab8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001abc:	4802      	ldr	r0, [pc, #8]	@ (8001ac8 <TIM4_IRQHandler+0x10>)
 8001abe:	f001 ff86 	bl	80039ce <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	20000254 	.word	0x20000254

08001acc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ad0:	4802      	ldr	r0, [pc, #8]	@ (8001adc <USART3_IRQHandler+0x10>)
 8001ad2:	f003 f8bd 	bl	8004c50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	2000032c 	.word	0x2000032c

08001ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001ae4:	4802      	ldr	r0, [pc, #8]	@ (8001af0 <DMA2_Stream0_IRQHandler+0x10>)
 8001ae6:	f000 fd67 	bl	80025b8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	20000164 	.word	0x20000164

08001af4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001af8:	4b06      	ldr	r3, [pc, #24]	@ (8001b14 <SystemInit+0x20>)
 8001afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001afe:	4a05      	ldr	r2, [pc, #20]	@ (8001b14 <SystemInit+0x20>)
 8001b00:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b04:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b08:	bf00      	nop
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b10:	4770      	bx	lr
 8001b12:	bf00      	nop
 8001b14:	e000ed00 	.word	0xe000ed00

08001b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b1c:	480d      	ldr	r0, [pc, #52]	@ (8001b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b1e:	490e      	ldr	r1, [pc, #56]	@ (8001b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b20:	4a0e      	ldr	r2, [pc, #56]	@ (8001b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b24:	e002      	b.n	8001b2c <LoopCopyDataInit>

08001b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b2a:	3304      	adds	r3, #4

08001b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b30:	d3f9      	bcc.n	8001b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b32:	4a0b      	ldr	r2, [pc, #44]	@ (8001b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b34:	4c0b      	ldr	r4, [pc, #44]	@ (8001b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b38:	e001      	b.n	8001b3e <LoopFillZerobss>

08001b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b3c:	3204      	adds	r2, #4

08001b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b40:	d3fb      	bcc.n	8001b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b42:	f7ff ffd7 	bl	8001af4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b46:	f003 fff5 	bl	8005b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b4a:	f7fe ffa9 	bl	8000aa0 <main>
  bx  lr    
 8001b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b58:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b5c:	08005ce8 	.word	0x08005ce8
  ldr r2, =_sbss
 8001b60:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b64:	200004c0 	.word	0x200004c0

08001b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b68:	e7fe      	b.n	8001b68 <ADC_IRQHandler>
	...

08001b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a0d      	ldr	r2, [pc, #52]	@ (8001bac <HAL_Init+0x40>)
 8001b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8001bac <HAL_Init+0x40>)
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <HAL_Init+0x40>)
 8001b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b88:	4b08      	ldr	r3, [pc, #32]	@ (8001bac <HAL_Init+0x40>)
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	4a07      	ldr	r2, [pc, #28]	@ (8001bac <HAL_Init+0x40>)
 8001b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b94:	2003      	movs	r0, #3
 8001b96:	f000 fb8d 	bl	80022b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b9a:	200f      	movs	r0, #15
 8001b9c:	f000 f808 	bl	8001bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ba0:	f7ff fcd8 	bl	8001554 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	bd80      	pop	{r7, pc}
 8001baa:	bf00      	nop
 8001bac:	40023c00 	.word	0x40023c00

08001bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001bb8:	4b12      	ldr	r3, [pc, #72]	@ (8001c04 <HAL_InitTick+0x54>)
 8001bba:	681a      	ldr	r2, [r3, #0]
 8001bbc:	4b12      	ldr	r3, [pc, #72]	@ (8001c08 <HAL_InitTick+0x58>)
 8001bbe:	781b      	ldrb	r3, [r3, #0]
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fba5 	bl	800231e <HAL_SYSTICK_Config>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e00e      	b.n	8001bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	d80a      	bhi.n	8001bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001be4:	2200      	movs	r2, #0
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	f04f 30ff 	mov.w	r0, #4294967295
 8001bec:	f000 fb6d 	bl	80022ca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bf0:	4a06      	ldr	r2, [pc, #24]	@ (8001c0c <HAL_InitTick+0x5c>)
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	e000      	b.n	8001bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
}
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	3708      	adds	r7, #8
 8001c00:	46bd      	mov	sp, r7
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	20000004 	.word	0x20000004
 8001c08:	2000000c 	.word	0x2000000c
 8001c0c:	20000008 	.word	0x20000008

08001c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c10:	b480      	push	{r7}
 8001c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c14:	4b06      	ldr	r3, [pc, #24]	@ (8001c30 <HAL_IncTick+0x20>)
 8001c16:	781b      	ldrb	r3, [r3, #0]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	4b06      	ldr	r3, [pc, #24]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4413      	add	r3, r2
 8001c20:	4a04      	ldr	r2, [pc, #16]	@ (8001c34 <HAL_IncTick+0x24>)
 8001c22:	6013      	str	r3, [r2, #0]
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr
 8001c2e:	bf00      	nop
 8001c30:	2000000c 	.word	0x2000000c
 8001c34:	2000037c 	.word	0x2000037c

08001c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8001c3c:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <HAL_GetTick+0x14>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	46bd      	mov	sp, r7
 8001c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c48:	4770      	bx	lr
 8001c4a:	bf00      	nop
 8001c4c:	2000037c 	.word	0x2000037c

08001c50 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b084      	sub	sp, #16
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c62:	2301      	movs	r3, #1
 8001c64:	e033      	b.n	8001cce <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d109      	bne.n	8001c82 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c6e:	6878      	ldr	r0, [r7, #4]
 8001c70:	f7ff fc98 	bl	80015a4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c86:	f003 0310 	and.w	r3, r3, #16
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d118      	bne.n	8001cc0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c92:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c96:	f023 0302 	bic.w	r3, r3, #2
 8001c9a:	f043 0202 	orr.w	r2, r3, #2
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f000 f93a 	bl	8001f1c <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	2200      	movs	r2, #0
 8001cac:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	f023 0303 	bic.w	r3, r3, #3
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	641a      	str	r2, [r3, #64]	@ 0x40
 8001cbe:	e001      	b.n	8001cc4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001ccc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cce:	4618      	mov	r0, r3
 8001cd0:	3710      	adds	r7, #16
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
	...

08001cd8 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cd8:	b480      	push	{r7}
 8001cda:	b085      	sub	sp, #20
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
 8001ce0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d101      	bne.n	8001cf4 <HAL_ADC_ConfigChannel+0x1c>
 8001cf0:	2302      	movs	r3, #2
 8001cf2:	e105      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x228>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	2b09      	cmp	r3, #9
 8001d02:	d925      	bls.n	8001d50 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	68d9      	ldr	r1, [r3, #12]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	b29b      	uxth	r3, r3
 8001d10:	461a      	mov	r2, r3
 8001d12:	4613      	mov	r3, r2
 8001d14:	005b      	lsls	r3, r3, #1
 8001d16:	4413      	add	r3, r2
 8001d18:	3b1e      	subs	r3, #30
 8001d1a:	2207      	movs	r2, #7
 8001d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d20:	43da      	mvns	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	400a      	ands	r2, r1
 8001d28:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	68d9      	ldr	r1, [r3, #12]
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	689a      	ldr	r2, [r3, #8]
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	005b      	lsls	r3, r3, #1
 8001d40:	4403      	add	r3, r0
 8001d42:	3b1e      	subs	r3, #30
 8001d44:	409a      	lsls	r2, r3
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	430a      	orrs	r2, r1
 8001d4c:	60da      	str	r2, [r3, #12]
 8001d4e:	e022      	b.n	8001d96 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	6919      	ldr	r1, [r3, #16]
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	461a      	mov	r2, r3
 8001d5e:	4613      	mov	r3, r2
 8001d60:	005b      	lsls	r3, r3, #1
 8001d62:	4413      	add	r3, r2
 8001d64:	2207      	movs	r2, #7
 8001d66:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6a:	43da      	mvns	r2, r3
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	400a      	ands	r2, r1
 8001d72:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	6919      	ldr	r1, [r3, #16]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	689a      	ldr	r2, [r3, #8]
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	b29b      	uxth	r3, r3
 8001d84:	4618      	mov	r0, r3
 8001d86:	4603      	mov	r3, r0
 8001d88:	005b      	lsls	r3, r3, #1
 8001d8a:	4403      	add	r3, r0
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	430a      	orrs	r2, r1
 8001d94:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	2b06      	cmp	r3, #6
 8001d9c:	d824      	bhi.n	8001de8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685a      	ldr	r2, [r3, #4]
 8001da8:	4613      	mov	r3, r2
 8001daa:	009b      	lsls	r3, r3, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	3b05      	subs	r3, #5
 8001db0:	221f      	movs	r2, #31
 8001db2:	fa02 f303 	lsl.w	r3, r2, r3
 8001db6:	43da      	mvns	r2, r3
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	400a      	ands	r2, r1
 8001dbe:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	4618      	mov	r0, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685a      	ldr	r2, [r3, #4]
 8001dd2:	4613      	mov	r3, r2
 8001dd4:	009b      	lsls	r3, r3, #2
 8001dd6:	4413      	add	r3, r2
 8001dd8:	3b05      	subs	r3, #5
 8001dda:	fa00 f203 	lsl.w	r2, r0, r3
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	430a      	orrs	r2, r1
 8001de4:	635a      	str	r2, [r3, #52]	@ 0x34
 8001de6:	e04c      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	2b0c      	cmp	r3, #12
 8001dee:	d824      	bhi.n	8001e3a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	685a      	ldr	r2, [r3, #4]
 8001dfa:	4613      	mov	r3, r2
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	4413      	add	r3, r2
 8001e00:	3b23      	subs	r3, #35	@ 0x23
 8001e02:	221f      	movs	r2, #31
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43da      	mvns	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	400a      	ands	r2, r1
 8001e10:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	b29b      	uxth	r3, r3
 8001e1e:	4618      	mov	r0, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685a      	ldr	r2, [r3, #4]
 8001e24:	4613      	mov	r3, r2
 8001e26:	009b      	lsls	r3, r3, #2
 8001e28:	4413      	add	r3, r2
 8001e2a:	3b23      	subs	r3, #35	@ 0x23
 8001e2c:	fa00 f203 	lsl.w	r2, r0, r3
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	430a      	orrs	r2, r1
 8001e36:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e38:	e023      	b.n	8001e82 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685a      	ldr	r2, [r3, #4]
 8001e44:	4613      	mov	r3, r2
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4413      	add	r3, r2
 8001e4a:	3b41      	subs	r3, #65	@ 0x41
 8001e4c:	221f      	movs	r2, #31
 8001e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e52:	43da      	mvns	r2, r3
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	400a      	ands	r2, r1
 8001e5a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	b29b      	uxth	r3, r3
 8001e68:	4618      	mov	r0, r3
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685a      	ldr	r2, [r3, #4]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	3b41      	subs	r3, #65	@ 0x41
 8001e76:	fa00 f203 	lsl.w	r2, r0, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	430a      	orrs	r2, r1
 8001e80:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e82:	4b22      	ldr	r3, [pc, #136]	@ (8001f0c <HAL_ADC_ConfigChannel+0x234>)
 8001e84:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a21      	ldr	r2, [pc, #132]	@ (8001f10 <HAL_ADC_ConfigChannel+0x238>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d109      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1cc>
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	2b12      	cmp	r3, #18
 8001e96:	d105      	bne.n	8001ea4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	4a19      	ldr	r2, [pc, #100]	@ (8001f10 <HAL_ADC_ConfigChannel+0x238>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d123      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
 8001eae:	683b      	ldr	r3, [r7, #0]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	2b10      	cmp	r3, #16
 8001eb4:	d003      	beq.n	8001ebe <HAL_ADC_ConfigChannel+0x1e6>
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	2b11      	cmp	r3, #17
 8001ebc:	d11b      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	2b10      	cmp	r3, #16
 8001ed0:	d111      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001ed2:	4b10      	ldr	r3, [pc, #64]	@ (8001f14 <HAL_ADC_ConfigChannel+0x23c>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a10      	ldr	r2, [pc, #64]	@ (8001f18 <HAL_ADC_ConfigChannel+0x240>)
 8001ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8001edc:	0c9a      	lsrs	r2, r3, #18
 8001ede:	4613      	mov	r3, r2
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	4413      	add	r3, r2
 8001ee4:	005b      	lsls	r3, r3, #1
 8001ee6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ee8:	e002      	b.n	8001ef0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	3b01      	subs	r3, #1
 8001eee:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d1f9      	bne.n	8001eea <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2200      	movs	r2, #0
 8001efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001efe:	2300      	movs	r3, #0
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	40012300 	.word	0x40012300
 8001f10:	40012000 	.word	0x40012000
 8001f14:	20000004 	.word	0x20000004
 8001f18:	431bde83 	.word	0x431bde83

08001f1c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f1c:	b480      	push	{r7}
 8001f1e:	b085      	sub	sp, #20
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f24:	4b79      	ldr	r3, [pc, #484]	@ (800210c <ADC_Init+0x1f0>)
 8001f26:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	685a      	ldr	r2, [r3, #4]
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	431a      	orrs	r2, r3
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	685a      	ldr	r2, [r3, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	6859      	ldr	r1, [r3, #4]
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	691b      	ldr	r3, [r3, #16]
 8001f5c:	021a      	lsls	r2, r3, #8
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	430a      	orrs	r2, r1
 8001f64:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	685a      	ldr	r2, [r3, #4]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f74:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	6859      	ldr	r1, [r3, #4]
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689a      	ldr	r2, [r3, #8]
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	430a      	orrs	r2, r1
 8001f86:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	689a      	ldr	r2, [r3, #8]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f96:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	6899      	ldr	r1, [r3, #8]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	68da      	ldr	r2, [r3, #12]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	430a      	orrs	r2, r1
 8001fa8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fae:	4a58      	ldr	r2, [pc, #352]	@ (8002110 <ADC_Init+0x1f4>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d022      	beq.n	8001ffa <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	689a      	ldr	r2, [r3, #8]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001fc2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	6899      	ldr	r1, [r3, #8]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	430a      	orrs	r2, r1
 8001fd4:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	689a      	ldr	r2, [r3, #8]
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	6899      	ldr	r1, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	430a      	orrs	r2, r1
 8001ff6:	609a      	str	r2, [r3, #8]
 8001ff8:	e00f      	b.n	800201a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	689a      	ldr	r2, [r3, #8]
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002008:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	689a      	ldr	r2, [r3, #8]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002018:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	689a      	ldr	r2, [r3, #8]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0202 	bic.w	r2, r2, #2
 8002028:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	6899      	ldr	r1, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	7e1b      	ldrb	r3, [r3, #24]
 8002034:	005a      	lsls	r2, r3, #1
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d01b      	beq.n	8002080 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	685a      	ldr	r2, [r3, #4]
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002056:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	685a      	ldr	r2, [r3, #4]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002066:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002072:	3b01      	subs	r3, #1
 8002074:	035a      	lsls	r2, r3, #13
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	430a      	orrs	r2, r1
 800207c:	605a      	str	r2, [r3, #4]
 800207e:	e007      	b.n	8002090 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800208e:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800209e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	69db      	ldr	r3, [r3, #28]
 80020aa:	3b01      	subs	r3, #1
 80020ac:	051a      	lsls	r2, r3, #20
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	430a      	orrs	r2, r1
 80020b4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689a      	ldr	r2, [r3, #8]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020c4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	6899      	ldr	r1, [r3, #8]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020d2:	025a      	lsls	r2, r3, #9
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	430a      	orrs	r2, r1
 80020da:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	6899      	ldr	r1, [r3, #8]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	029a      	lsls	r2, r3, #10
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	430a      	orrs	r2, r1
 80020fe:	609a      	str	r2, [r3, #8]
}
 8002100:	bf00      	nop
 8002102:	3714      	adds	r7, #20
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40012300 	.word	0x40012300
 8002110:	0f000001 	.word	0x0f000001

08002114 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002114:	b480      	push	{r7}
 8002116:	b085      	sub	sp, #20
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	f003 0307 	and.w	r3, r3, #7
 8002122:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002124:	4b0c      	ldr	r3, [pc, #48]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800212a:	68ba      	ldr	r2, [r7, #8]
 800212c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002130:	4013      	ands	r3, r2
 8002132:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800213c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002140:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002144:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002146:	4a04      	ldr	r2, [pc, #16]	@ (8002158 <__NVIC_SetPriorityGrouping+0x44>)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	60d3      	str	r3, [r2, #12]
}
 800214c:	bf00      	nop
 800214e:	3714      	adds	r7, #20
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002160:	4b04      	ldr	r3, [pc, #16]	@ (8002174 <__NVIC_GetPriorityGrouping+0x18>)
 8002162:	68db      	ldr	r3, [r3, #12]
 8002164:	0a1b      	lsrs	r3, r3, #8
 8002166:	f003 0307 	and.w	r3, r3, #7
}
 800216a:	4618      	mov	r0, r3
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr
 8002174:	e000ed00 	.word	0xe000ed00

08002178 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002178:	b480      	push	{r7}
 800217a:	b083      	sub	sp, #12
 800217c:	af00      	add	r7, sp, #0
 800217e:	4603      	mov	r3, r0
 8002180:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002182:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002186:	2b00      	cmp	r3, #0
 8002188:	db0b      	blt.n	80021a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	f003 021f 	and.w	r2, r3, #31
 8002190:	4907      	ldr	r1, [pc, #28]	@ (80021b0 <__NVIC_EnableIRQ+0x38>)
 8002192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002196:	095b      	lsrs	r3, r3, #5
 8002198:	2001      	movs	r0, #1
 800219a:	fa00 f202 	lsl.w	r2, r0, r2
 800219e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80021a2:	bf00      	nop
 80021a4:	370c      	adds	r7, #12
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	e000e100 	.word	0xe000e100

080021b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b083      	sub	sp, #12
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	6039      	str	r1, [r7, #0]
 80021be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	db0a      	blt.n	80021de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	b2da      	uxtb	r2, r3
 80021cc:	490c      	ldr	r1, [pc, #48]	@ (8002200 <__NVIC_SetPriority+0x4c>)
 80021ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021d2:	0112      	lsls	r2, r2, #4
 80021d4:	b2d2      	uxtb	r2, r2
 80021d6:	440b      	add	r3, r1
 80021d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021dc:	e00a      	b.n	80021f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	b2da      	uxtb	r2, r3
 80021e2:	4908      	ldr	r1, [pc, #32]	@ (8002204 <__NVIC_SetPriority+0x50>)
 80021e4:	79fb      	ldrb	r3, [r7, #7]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	3b04      	subs	r3, #4
 80021ec:	0112      	lsls	r2, r2, #4
 80021ee:	b2d2      	uxtb	r2, r2
 80021f0:	440b      	add	r3, r1
 80021f2:	761a      	strb	r2, [r3, #24]
}
 80021f4:	bf00      	nop
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100
 8002204:	e000ed00 	.word	0xe000ed00

08002208 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002208:	b480      	push	{r7}
 800220a:	b089      	sub	sp, #36	@ 0x24
 800220c:	af00      	add	r7, sp, #0
 800220e:	60f8      	str	r0, [r7, #12]
 8002210:	60b9      	str	r1, [r7, #8]
 8002212:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	f003 0307 	and.w	r3, r3, #7
 800221a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800221c:	69fb      	ldr	r3, [r7, #28]
 800221e:	f1c3 0307 	rsb	r3, r3, #7
 8002222:	2b04      	cmp	r3, #4
 8002224:	bf28      	it	cs
 8002226:	2304      	movcs	r3, #4
 8002228:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	3304      	adds	r3, #4
 800222e:	2b06      	cmp	r3, #6
 8002230:	d902      	bls.n	8002238 <NVIC_EncodePriority+0x30>
 8002232:	69fb      	ldr	r3, [r7, #28]
 8002234:	3b03      	subs	r3, #3
 8002236:	e000      	b.n	800223a <NVIC_EncodePriority+0x32>
 8002238:	2300      	movs	r3, #0
 800223a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800223c:	f04f 32ff 	mov.w	r2, #4294967295
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	43da      	mvns	r2, r3
 8002248:	68bb      	ldr	r3, [r7, #8]
 800224a:	401a      	ands	r2, r3
 800224c:	697b      	ldr	r3, [r7, #20]
 800224e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002250:	f04f 31ff 	mov.w	r1, #4294967295
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	fa01 f303 	lsl.w	r3, r1, r3
 800225a:	43d9      	mvns	r1, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002260:	4313      	orrs	r3, r2
         );
}
 8002262:	4618      	mov	r0, r3
 8002264:	3724      	adds	r7, #36	@ 0x24
 8002266:	46bd      	mov	sp, r7
 8002268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226c:	4770      	bx	lr
	...

08002270 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	3b01      	subs	r3, #1
 800227c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002280:	d301      	bcc.n	8002286 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002282:	2301      	movs	r3, #1
 8002284:	e00f      	b.n	80022a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002286:	4a0a      	ldr	r2, [pc, #40]	@ (80022b0 <SysTick_Config+0x40>)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	3b01      	subs	r3, #1
 800228c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800228e:	210f      	movs	r1, #15
 8002290:	f04f 30ff 	mov.w	r0, #4294967295
 8002294:	f7ff ff8e 	bl	80021b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002298:	4b05      	ldr	r3, [pc, #20]	@ (80022b0 <SysTick_Config+0x40>)
 800229a:	2200      	movs	r2, #0
 800229c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800229e:	4b04      	ldr	r3, [pc, #16]	@ (80022b0 <SysTick_Config+0x40>)
 80022a0:	2207      	movs	r2, #7
 80022a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022a4:	2300      	movs	r3, #0
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	3708      	adds	r7, #8
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	e000e010 	.word	0xe000e010

080022b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022bc:	6878      	ldr	r0, [r7, #4]
 80022be:	f7ff ff29 	bl	8002114 <__NVIC_SetPriorityGrouping>
}
 80022c2:	bf00      	nop
 80022c4:	3708      	adds	r7, #8
 80022c6:	46bd      	mov	sp, r7
 80022c8:	bd80      	pop	{r7, pc}

080022ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022ca:	b580      	push	{r7, lr}
 80022cc:	b086      	sub	sp, #24
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	4603      	mov	r3, r0
 80022d2:	60b9      	str	r1, [r7, #8]
 80022d4:	607a      	str	r2, [r7, #4]
 80022d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022d8:	2300      	movs	r3, #0
 80022da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022dc:	f7ff ff3e 	bl	800215c <__NVIC_GetPriorityGrouping>
 80022e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022e2:	687a      	ldr	r2, [r7, #4]
 80022e4:	68b9      	ldr	r1, [r7, #8]
 80022e6:	6978      	ldr	r0, [r7, #20]
 80022e8:	f7ff ff8e 	bl	8002208 <NVIC_EncodePriority>
 80022ec:	4602      	mov	r2, r0
 80022ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022f2:	4611      	mov	r1, r2
 80022f4:	4618      	mov	r0, r3
 80022f6:	f7ff ff5d 	bl	80021b4 <__NVIC_SetPriority>
}
 80022fa:	bf00      	nop
 80022fc:	3718      	adds	r7, #24
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}

08002302 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002302:	b580      	push	{r7, lr}
 8002304:	b082      	sub	sp, #8
 8002306:	af00      	add	r7, sp, #0
 8002308:	4603      	mov	r3, r0
 800230a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800230c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002310:	4618      	mov	r0, r3
 8002312:	f7ff ff31 	bl	8002178 <__NVIC_EnableIRQ>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800231e:	b580      	push	{r7, lr}
 8002320:	b082      	sub	sp, #8
 8002322:	af00      	add	r7, sp, #0
 8002324:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f7ff ffa2 	bl	8002270 <SysTick_Config>
 800232c:	4603      	mov	r3, r0
}
 800232e:	4618      	mov	r0, r3
 8002330:	3708      	adds	r7, #8
 8002332:	46bd      	mov	sp, r7
 8002334:	bd80      	pop	{r7, pc}
	...

08002338 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b086      	sub	sp, #24
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002340:	2300      	movs	r3, #0
 8002342:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002344:	f7ff fc78 	bl	8001c38 <HAL_GetTick>
 8002348:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d101      	bne.n	8002354 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e099      	b.n	8002488 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	2202      	movs	r2, #2
 8002358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	681a      	ldr	r2, [r3, #0]
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f022 0201 	bic.w	r2, r2, #1
 8002372:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002374:	e00f      	b.n	8002396 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002376:	f7ff fc5f 	bl	8001c38 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b05      	cmp	r3, #5
 8002382:	d908      	bls.n	8002396 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	2220      	movs	r2, #32
 8002388:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2203      	movs	r2, #3
 800238e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8002392:	2303      	movs	r3, #3
 8002394:	e078      	b.n	8002488 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d1e8      	bne.n	8002376 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80023ac:	697a      	ldr	r2, [r7, #20]
 80023ae:	4b38      	ldr	r3, [pc, #224]	@ (8002490 <HAL_DMA_Init+0x158>)
 80023b0:	4013      	ands	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	685a      	ldr	r2, [r3, #4]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	689b      	ldr	r3, [r3, #8]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	691b      	ldr	r3, [r3, #16]
 80023c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	699b      	ldr	r3, [r3, #24]
 80023d4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023ec:	2b04      	cmp	r3, #4
 80023ee:	d107      	bne.n	8002400 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023f8:	4313      	orrs	r3, r2
 80023fa:	697a      	ldr	r2, [r7, #20]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002410:	697b      	ldr	r3, [r7, #20]
 8002412:	f023 0307 	bic.w	r3, r3, #7
 8002416:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800241c:	697a      	ldr	r2, [r7, #20]
 800241e:	4313      	orrs	r3, r2
 8002420:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002426:	2b04      	cmp	r3, #4
 8002428:	d117      	bne.n	800245a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800242e:	697a      	ldr	r2, [r7, #20]
 8002430:	4313      	orrs	r3, r2
 8002432:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002438:	2b00      	cmp	r3, #0
 800243a:	d00e      	beq.n	800245a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f000 fa7b 	bl	8002938 <DMA_CheckFifoParam>
 8002442:	4603      	mov	r3, r0
 8002444:	2b00      	cmp	r3, #0
 8002446:	d008      	beq.n	800245a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2240      	movs	r2, #64	@ 0x40
 800244c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2201      	movs	r2, #1
 8002452:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8002456:	2301      	movs	r3, #1
 8002458:	e016      	b.n	8002488 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	697a      	ldr	r2, [r7, #20]
 8002460:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002462:	6878      	ldr	r0, [r7, #4]
 8002464:	f000 fa32 	bl	80028cc <DMA_CalcBaseAndBitshift>
 8002468:	4603      	mov	r3, r0
 800246a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002470:	223f      	movs	r2, #63	@ 0x3f
 8002472:	409a      	lsls	r2, r3
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2200      	movs	r2, #0
 800247c:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2201      	movs	r2, #1
 8002482:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8002486:	2300      	movs	r3, #0
}
 8002488:	4618      	mov	r0, r3
 800248a:	3718      	adds	r7, #24
 800248c:	46bd      	mov	sp, r7
 800248e:	bd80      	pop	{r7, pc}
 8002490:	f010803f 	.word	0xf010803f

08002494 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b084      	sub	sp, #16
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024a0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024a2:	f7ff fbc9 	bl	8001c38 <HAL_GetTick>
 80024a6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d008      	beq.n	80024c6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	2280      	movs	r2, #128	@ 0x80
 80024b8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2200      	movs	r2, #0
 80024be:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e052      	b.n	800256c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	f022 0216 	bic.w	r2, r2, #22
 80024d4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	695a      	ldr	r2, [r3, #20]
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024e4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d103      	bne.n	80024f6 <HAL_DMA_Abort+0x62>
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d007      	beq.n	8002506 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	681a      	ldr	r2, [r3, #0]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	f022 0208 	bic.w	r2, r2, #8
 8002504:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f022 0201 	bic.w	r2, r2, #1
 8002514:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002516:	e013      	b.n	8002540 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002518:	f7ff fb8e 	bl	8001c38 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b05      	cmp	r3, #5
 8002524:	d90c      	bls.n	8002540 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2220      	movs	r2, #32
 800252a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2203      	movs	r2, #3
 8002530:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2200      	movs	r2, #0
 8002538:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800253c:	2303      	movs	r3, #3
 800253e:	e015      	b.n	800256c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f003 0301 	and.w	r3, r3, #1
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e4      	bne.n	8002518 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002552:	223f      	movs	r2, #63	@ 0x3f
 8002554:	409a      	lsls	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	2200      	movs	r2, #0
 8002566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002574:	b480      	push	{r7}
 8002576:	b083      	sub	sp, #12
 8002578:	af00      	add	r7, sp, #0
 800257a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002582:	b2db      	uxtb	r3, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d004      	beq.n	8002592 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2280      	movs	r2, #128	@ 0x80
 800258c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e00c      	b.n	80025ac <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2205      	movs	r2, #5
 8002596:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f022 0201 	bic.w	r2, r2, #1
 80025a8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025aa:	2300      	movs	r3, #0
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	370c      	adds	r7, #12
 80025b0:	46bd      	mov	sp, r7
 80025b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b6:	4770      	bx	lr

080025b8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b086      	sub	sp, #24
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025c4:	4b8e      	ldr	r3, [pc, #568]	@ (8002800 <HAL_DMA_IRQHandler+0x248>)
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a8e      	ldr	r2, [pc, #568]	@ (8002804 <HAL_DMA_IRQHandler+0x24c>)
 80025ca:	fba2 2303 	umull	r2, r3, r2, r3
 80025ce:	0a9b      	lsrs	r3, r3, #10
 80025d0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025d6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025d8:	693b      	ldr	r3, [r7, #16]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025e2:	2208      	movs	r2, #8
 80025e4:	409a      	lsls	r2, r3
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	4013      	ands	r3, r2
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d01a      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0304 	and.w	r3, r3, #4
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d013      	beq.n	8002624 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	681a      	ldr	r2, [r3, #0]
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	f022 0204 	bic.w	r2, r2, #4
 800260a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	2208      	movs	r2, #8
 8002612:	409a      	lsls	r2, r3
 8002614:	693b      	ldr	r3, [r7, #16]
 8002616:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261c:	f043 0201 	orr.w	r2, r3, #1
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002628:	2201      	movs	r2, #1
 800262a:	409a      	lsls	r2, r3
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	4013      	ands	r3, r2
 8002630:	2b00      	cmp	r3, #0
 8002632:	d012      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800263e:	2b00      	cmp	r3, #0
 8002640:	d00b      	beq.n	800265a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2201      	movs	r2, #1
 8002648:	409a      	lsls	r2, r3
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002652:	f043 0202 	orr.w	r2, r3, #2
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800265e:	2204      	movs	r2, #4
 8002660:	409a      	lsls	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	4013      	ands	r3, r2
 8002666:	2b00      	cmp	r3, #0
 8002668:	d012      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00b      	beq.n	8002690 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2204      	movs	r2, #4
 800267e:	409a      	lsls	r2, r3
 8002680:	693b      	ldr	r3, [r7, #16]
 8002682:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002688:	f043 0204 	orr.w	r2, r3, #4
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002694:	2210      	movs	r2, #16
 8002696:	409a      	lsls	r2, r3
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	4013      	ands	r3, r2
 800269c:	2b00      	cmp	r3, #0
 800269e:	d043      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0308 	and.w	r3, r3, #8
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d03c      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b2:	2210      	movs	r2, #16
 80026b4:	409a      	lsls	r2, r3
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d018      	beq.n	80026fa <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d108      	bne.n	80026e8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d024      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e2:	6878      	ldr	r0, [r7, #4]
 80026e4:	4798      	blx	r3
 80026e6:	e01f      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d01b      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	4798      	blx	r3
 80026f8:	e016      	b.n	8002728 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002704:	2b00      	cmp	r3, #0
 8002706:	d107      	bne.n	8002718 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	681a      	ldr	r2, [r3, #0]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f022 0208 	bic.w	r2, r2, #8
 8002716:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272c:	2220      	movs	r2, #32
 800272e:	409a      	lsls	r2, r3
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	4013      	ands	r3, r2
 8002734:	2b00      	cmp	r3, #0
 8002736:	f000 808f 	beq.w	8002858 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0310 	and.w	r3, r3, #16
 8002744:	2b00      	cmp	r3, #0
 8002746:	f000 8087 	beq.w	8002858 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800274e:	2220      	movs	r2, #32
 8002750:	409a      	lsls	r2, r3
 8002752:	693b      	ldr	r3, [r7, #16]
 8002754:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b05      	cmp	r3, #5
 8002760:	d136      	bne.n	80027d0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	681a      	ldr	r2, [r3, #0]
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f022 0216 	bic.w	r2, r2, #22
 8002770:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	695a      	ldr	r2, [r3, #20]
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002780:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002786:	2b00      	cmp	r3, #0
 8002788:	d103      	bne.n	8002792 <HAL_DMA_IRQHandler+0x1da>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f022 0208 	bic.w	r2, r2, #8
 80027a0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a6:	223f      	movs	r2, #63	@ 0x3f
 80027a8:	409a      	lsls	r2, r3
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2200      	movs	r2, #0
 80027ba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d07e      	beq.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027ca:	6878      	ldr	r0, [r7, #4]
 80027cc:	4798      	blx	r3
        }
        return;
 80027ce:	e079      	b.n	80028c4 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d01d      	beq.n	800281a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d10d      	bne.n	8002808 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d031      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	4798      	blx	r3
 80027fc:	e02c      	b.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
 80027fe:	bf00      	nop
 8002800:	20000004 	.word	0x20000004
 8002804:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800280c:	2b00      	cmp	r3, #0
 800280e:	d023      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002814:	6878      	ldr	r0, [r7, #4]
 8002816:	4798      	blx	r3
 8002818:	e01e      	b.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d10f      	bne.n	8002848 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 0210 	bic.w	r2, r2, #16
 8002836:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2201      	movs	r2, #1
 800283c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2200      	movs	r2, #0
 8002844:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800284c:	2b00      	cmp	r3, #0
 800284e:	d003      	beq.n	8002858 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800285c:	2b00      	cmp	r3, #0
 800285e:	d032      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002864:	f003 0301 	and.w	r3, r3, #1
 8002868:	2b00      	cmp	r3, #0
 800286a:	d022      	beq.n	80028b2 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2205      	movs	r2, #5
 8002870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	681a      	ldr	r2, [r3, #0]
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f022 0201 	bic.w	r2, r2, #1
 8002882:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002884:	68bb      	ldr	r3, [r7, #8]
 8002886:	3301      	adds	r3, #1
 8002888:	60bb      	str	r3, [r7, #8]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	429a      	cmp	r2, r3
 800288e:	d307      	bcc.n	80028a0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f003 0301 	and.w	r3, r3, #1
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1f2      	bne.n	8002884 <HAL_DMA_IRQHandler+0x2cc>
 800289e:	e000      	b.n	80028a2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028a0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2201      	movs	r2, #1
 80028a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	2200      	movs	r2, #0
 80028ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	4798      	blx	r3
 80028c2:	e000      	b.n	80028c6 <HAL_DMA_IRQHandler+0x30e>
        return;
 80028c4:	bf00      	nop
    }
  }
}
 80028c6:	3718      	adds	r7, #24
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}

080028cc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028cc:	b480      	push	{r7}
 80028ce:	b085      	sub	sp, #20
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	b2db      	uxtb	r3, r3
 80028da:	3b10      	subs	r3, #16
 80028dc:	4a14      	ldr	r2, [pc, #80]	@ (8002930 <DMA_CalcBaseAndBitshift+0x64>)
 80028de:	fba2 2303 	umull	r2, r3, r2, r3
 80028e2:	091b      	lsrs	r3, r3, #4
 80028e4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028e6:	4a13      	ldr	r2, [pc, #76]	@ (8002934 <DMA_CalcBaseAndBitshift+0x68>)
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	4413      	add	r3, r2
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	461a      	mov	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	2b03      	cmp	r3, #3
 80028f8:	d909      	bls.n	800290e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002902:	f023 0303 	bic.w	r3, r3, #3
 8002906:	1d1a      	adds	r2, r3, #4
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	659a      	str	r2, [r3, #88]	@ 0x58
 800290c:	e007      	b.n	800291e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8002916:	f023 0303 	bic.w	r3, r3, #3
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002922:	4618      	mov	r0, r3
 8002924:	3714      	adds	r7, #20
 8002926:	46bd      	mov	sp, r7
 8002928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292c:	4770      	bx	lr
 800292e:	bf00      	nop
 8002930:	aaaaaaab 	.word	0xaaaaaaab
 8002934:	08005cd0 	.word	0x08005cd0

08002938 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002940:	2300      	movs	r3, #0
 8002942:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002948:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d11f      	bne.n	8002992 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d856      	bhi.n	8002a06 <DMA_CheckFifoParam+0xce>
 8002958:	a201      	add	r2, pc, #4	@ (adr r2, 8002960 <DMA_CheckFifoParam+0x28>)
 800295a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800295e:	bf00      	nop
 8002960:	08002971 	.word	0x08002971
 8002964:	08002983 	.word	0x08002983
 8002968:	08002971 	.word	0x08002971
 800296c:	08002a07 	.word	0x08002a07
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002974:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002978:	2b00      	cmp	r3, #0
 800297a:	d046      	beq.n	8002a0a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002980:	e043      	b.n	8002a0a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002986:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800298a:	d140      	bne.n	8002a0e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002990:	e03d      	b.n	8002a0e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800299a:	d121      	bne.n	80029e0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	2b03      	cmp	r3, #3
 80029a0:	d837      	bhi.n	8002a12 <DMA_CheckFifoParam+0xda>
 80029a2:	a201      	add	r2, pc, #4	@ (adr r2, 80029a8 <DMA_CheckFifoParam+0x70>)
 80029a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029a8:	080029b9 	.word	0x080029b9
 80029ac:	080029bf 	.word	0x080029bf
 80029b0:	080029b9 	.word	0x080029b9
 80029b4:	080029d1 	.word	0x080029d1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	73fb      	strb	r3, [r7, #15]
      break;
 80029bc:	e030      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d025      	beq.n	8002a16 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029ce:	e022      	b.n	8002a16 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d4:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029d8:	d11f      	bne.n	8002a1a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029da:	2301      	movs	r3, #1
 80029dc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029de:	e01c      	b.n	8002a1a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d903      	bls.n	80029ee <DMA_CheckFifoParam+0xb6>
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	2b03      	cmp	r3, #3
 80029ea:	d003      	beq.n	80029f4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029ec:	e018      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	73fb      	strb	r3, [r7, #15]
      break;
 80029f2:	e015      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029f8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d00e      	beq.n	8002a1e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a00:	2301      	movs	r3, #1
 8002a02:	73fb      	strb	r3, [r7, #15]
      break;
 8002a04:	e00b      	b.n	8002a1e <DMA_CheckFifoParam+0xe6>
      break;
 8002a06:	bf00      	nop
 8002a08:	e00a      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0a:	bf00      	nop
 8002a0c:	e008      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a0e:	bf00      	nop
 8002a10:	e006      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a12:	bf00      	nop
 8002a14:	e004      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a16:	bf00      	nop
 8002a18:	e002      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a1a:	bf00      	nop
 8002a1c:	e000      	b.n	8002a20 <DMA_CheckFifoParam+0xe8>
      break;
 8002a1e:	bf00      	nop
    }
  } 
  
  return status; 
 8002a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a22:	4618      	mov	r0, r3
 8002a24:	3714      	adds	r7, #20
 8002a26:	46bd      	mov	sp, r7
 8002a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2c:	4770      	bx	lr
 8002a2e:	bf00      	nop

08002a30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b089      	sub	sp, #36	@ 0x24
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a42:	2300      	movs	r3, #0
 8002a44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a46:	2300      	movs	r3, #0
 8002a48:	61fb      	str	r3, [r7, #28]
 8002a4a:	e16b      	b.n	8002d24 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	69fb      	ldr	r3, [r7, #28]
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	697a      	ldr	r2, [r7, #20]
 8002a5c:	4013      	ands	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	697b      	ldr	r3, [r7, #20]
 8002a64:	429a      	cmp	r2, r3
 8002a66:	f040 815a 	bne.w	8002d1e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	f003 0303 	and.w	r3, r3, #3
 8002a72:	2b01      	cmp	r3, #1
 8002a74:	d005      	beq.n	8002a82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	685b      	ldr	r3, [r3, #4]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d130      	bne.n	8002ae4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a88:	69fb      	ldr	r3, [r7, #28]
 8002a8a:	005b      	lsls	r3, r3, #1
 8002a8c:	2203      	movs	r2, #3
 8002a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a92:	43db      	mvns	r3, r3
 8002a94:	69ba      	ldr	r2, [r7, #24]
 8002a96:	4013      	ands	r3, r2
 8002a98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	68da      	ldr	r2, [r3, #12]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	69ba      	ldr	r2, [r7, #24]
 8002ab0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ab8:	2201      	movs	r2, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	69ba      	ldr	r2, [r7, #24]
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	091b      	lsrs	r3, r3, #4
 8002ace:	f003 0201 	and.w	r2, r3, #1
 8002ad2:	69fb      	ldr	r3, [r7, #28]
 8002ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ad8:	69ba      	ldr	r2, [r7, #24]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	69ba      	ldr	r2, [r7, #24]
 8002ae2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	f003 0303 	and.w	r3, r3, #3
 8002aec:	2b03      	cmp	r3, #3
 8002aee:	d017      	beq.n	8002b20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	68db      	ldr	r3, [r3, #12]
 8002af4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	005b      	lsls	r3, r3, #1
 8002afa:	2203      	movs	r2, #3
 8002afc:	fa02 f303 	lsl.w	r3, r2, r3
 8002b00:	43db      	mvns	r3, r3
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	4013      	ands	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	69fb      	ldr	r3, [r7, #28]
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b02      	cmp	r3, #2
 8002b2a:	d123      	bne.n	8002b74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	08da      	lsrs	r2, r3, #3
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3208      	adds	r2, #8
 8002b34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	f003 0307 	and.w	r3, r3, #7
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	220f      	movs	r2, #15
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	69ba      	ldr	r2, [r7, #24]
 8002b4c:	4013      	ands	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	691a      	ldr	r2, [r3, #16]
 8002b54:	69fb      	ldr	r3, [r7, #28]
 8002b56:	f003 0307 	and.w	r3, r3, #7
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b60:	69ba      	ldr	r2, [r7, #24]
 8002b62:	4313      	orrs	r3, r2
 8002b64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	08da      	lsrs	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	3208      	adds	r2, #8
 8002b6e:	69b9      	ldr	r1, [r7, #24]
 8002b70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b7a:	69fb      	ldr	r3, [r7, #28]
 8002b7c:	005b      	lsls	r3, r3, #1
 8002b7e:	2203      	movs	r2, #3
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f003 0203 	and.w	r2, r3, #3
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	005b      	lsls	r3, r3, #1
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	69ba      	ldr	r2, [r7, #24]
 8002ba6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	685b      	ldr	r3, [r3, #4]
 8002bac:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	f000 80b4 	beq.w	8002d1e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bb6:	2300      	movs	r3, #0
 8002bb8:	60fb      	str	r3, [r7, #12]
 8002bba:	4b60      	ldr	r3, [pc, #384]	@ (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bbc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bbe:	4a5f      	ldr	r2, [pc, #380]	@ (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bc4:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8002d3c <HAL_GPIO_Init+0x30c>)
 8002bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bce:	60fb      	str	r3, [r7, #12]
 8002bd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bd2:	4a5b      	ldr	r2, [pc, #364]	@ (8002d40 <HAL_GPIO_Init+0x310>)
 8002bd4:	69fb      	ldr	r3, [r7, #28]
 8002bd6:	089b      	lsrs	r3, r3, #2
 8002bd8:	3302      	adds	r3, #2
 8002bda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002be0:	69fb      	ldr	r3, [r7, #28]
 8002be2:	f003 0303 	and.w	r3, r3, #3
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	220f      	movs	r2, #15
 8002bea:	fa02 f303 	lsl.w	r3, r2, r3
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a52      	ldr	r2, [pc, #328]	@ (8002d44 <HAL_GPIO_Init+0x314>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d02b      	beq.n	8002c56 <HAL_GPIO_Init+0x226>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a51      	ldr	r2, [pc, #324]	@ (8002d48 <HAL_GPIO_Init+0x318>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d025      	beq.n	8002c52 <HAL_GPIO_Init+0x222>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a50      	ldr	r2, [pc, #320]	@ (8002d4c <HAL_GPIO_Init+0x31c>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d01f      	beq.n	8002c4e <HAL_GPIO_Init+0x21e>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4f      	ldr	r2, [pc, #316]	@ (8002d50 <HAL_GPIO_Init+0x320>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d019      	beq.n	8002c4a <HAL_GPIO_Init+0x21a>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4e      	ldr	r2, [pc, #312]	@ (8002d54 <HAL_GPIO_Init+0x324>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d013      	beq.n	8002c46 <HAL_GPIO_Init+0x216>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a4d      	ldr	r2, [pc, #308]	@ (8002d58 <HAL_GPIO_Init+0x328>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00d      	beq.n	8002c42 <HAL_GPIO_Init+0x212>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a4c      	ldr	r2, [pc, #304]	@ (8002d5c <HAL_GPIO_Init+0x32c>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <HAL_GPIO_Init+0x20e>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a4b      	ldr	r2, [pc, #300]	@ (8002d60 <HAL_GPIO_Init+0x330>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d101      	bne.n	8002c3a <HAL_GPIO_Init+0x20a>
 8002c36:	2307      	movs	r3, #7
 8002c38:	e00e      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3a:	2308      	movs	r3, #8
 8002c3c:	e00c      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c3e:	2306      	movs	r3, #6
 8002c40:	e00a      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e008      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c46:	2304      	movs	r3, #4
 8002c48:	e006      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4a:	2303      	movs	r3, #3
 8002c4c:	e004      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c4e:	2302      	movs	r3, #2
 8002c50:	e002      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c52:	2301      	movs	r3, #1
 8002c54:	e000      	b.n	8002c58 <HAL_GPIO_Init+0x228>
 8002c56:	2300      	movs	r3, #0
 8002c58:	69fa      	ldr	r2, [r7, #28]
 8002c5a:	f002 0203 	and.w	r2, r2, #3
 8002c5e:	0092      	lsls	r2, r2, #2
 8002c60:	4093      	lsls	r3, r2
 8002c62:	69ba      	ldr	r2, [r7, #24]
 8002c64:	4313      	orrs	r3, r2
 8002c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c68:	4935      	ldr	r1, [pc, #212]	@ (8002d40 <HAL_GPIO_Init+0x310>)
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	089b      	lsrs	r3, r3, #2
 8002c6e:	3302      	adds	r3, #2
 8002c70:	69ba      	ldr	r2, [r7, #24]
 8002c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c76:	4b3b      	ldr	r3, [pc, #236]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	43db      	mvns	r3, r3
 8002c80:	69ba      	ldr	r2, [r7, #24]
 8002c82:	4013      	ands	r3, r2
 8002c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d003      	beq.n	8002c9a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	4313      	orrs	r3, r2
 8002c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c9a:	4a32      	ldr	r2, [pc, #200]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002c9c:	69bb      	ldr	r3, [r7, #24]
 8002c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ca0:	4b30      	ldr	r3, [pc, #192]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	69ba      	ldr	r2, [r7, #24]
 8002cac:	4013      	ands	r3, r2
 8002cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cb0:	683b      	ldr	r3, [r7, #0]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d003      	beq.n	8002cc4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	693b      	ldr	r3, [r7, #16]
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cc4:	4a27      	ldr	r2, [pc, #156]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002cc6:	69bb      	ldr	r3, [r7, #24]
 8002cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cca:	4b26      	ldr	r3, [pc, #152]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cee:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cf4:	4b1b      	ldr	r3, [pc, #108]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d18:	4a12      	ldr	r2, [pc, #72]	@ (8002d64 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d1e:	69fb      	ldr	r3, [r7, #28]
 8002d20:	3301      	adds	r3, #1
 8002d22:	61fb      	str	r3, [r7, #28]
 8002d24:	69fb      	ldr	r3, [r7, #28]
 8002d26:	2b0f      	cmp	r3, #15
 8002d28:	f67f ae90 	bls.w	8002a4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d2c:	bf00      	nop
 8002d2e:	bf00      	nop
 8002d30:	3724      	adds	r7, #36	@ 0x24
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40023800 	.word	0x40023800
 8002d40:	40013800 	.word	0x40013800
 8002d44:	40020000 	.word	0x40020000
 8002d48:	40020400 	.word	0x40020400
 8002d4c:	40020800 	.word	0x40020800
 8002d50:	40020c00 	.word	0x40020c00
 8002d54:	40021000 	.word	0x40021000
 8002d58:	40021400 	.word	0x40021400
 8002d5c:	40021800 	.word	0x40021800
 8002d60:	40021c00 	.word	0x40021c00
 8002d64:	40013c00 	.word	0x40013c00

08002d68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
 8002d70:	460b      	mov	r3, r1
 8002d72:	807b      	strh	r3, [r7, #2]
 8002d74:	4613      	mov	r3, r2
 8002d76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d78:	787b      	ldrb	r3, [r7, #1]
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d003      	beq.n	8002d86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d7e:	887a      	ldrh	r2, [r7, #2]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d84:	e003      	b.n	8002d8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d86:	887b      	ldrh	r3, [r7, #2]
 8002d88:	041a      	lsls	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	619a      	str	r2, [r3, #24]
}
 8002d8e:	bf00      	nop
 8002d90:	370c      	adds	r7, #12
 8002d92:	46bd      	mov	sp, r7
 8002d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d98:	4770      	bx	lr

08002d9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b085      	sub	sp, #20
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
 8002da2:	460b      	mov	r3, r1
 8002da4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002dac:	887a      	ldrh	r2, [r7, #2]
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4013      	ands	r3, r2
 8002db2:	041a      	lsls	r2, r3, #16
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	43d9      	mvns	r1, r3
 8002db8:	887b      	ldrh	r3, [r7, #2]
 8002dba:	400b      	ands	r3, r1
 8002dbc:	431a      	orrs	r2, r3
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	619a      	str	r2, [r3, #24]
}
 8002dc2:	bf00      	nop
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr
	...

08002dd0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b086      	sub	sp, #24
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e267      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d075      	beq.n	8002eda <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002dee:	4b88      	ldr	r3, [pc, #544]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 030c 	and.w	r3, r3, #12
 8002df6:	2b04      	cmp	r3, #4
 8002df8:	d00c      	beq.n	8002e14 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dfa:	4b85      	ldr	r3, [pc, #532]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e02:	2b08      	cmp	r3, #8
 8002e04:	d112      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e06:	4b82      	ldr	r3, [pc, #520]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e0e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e12:	d10b      	bne.n	8002e2c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e14:	4b7e      	ldr	r3, [pc, #504]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d05b      	beq.n	8002ed8 <HAL_RCC_OscConfig+0x108>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d157      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	e242      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e34:	d106      	bne.n	8002e44 <HAL_RCC_OscConfig+0x74>
 8002e36:	4b76      	ldr	r3, [pc, #472]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a75      	ldr	r2, [pc, #468]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e40:	6013      	str	r3, [r2, #0]
 8002e42:	e01d      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e4c:	d10c      	bne.n	8002e68 <HAL_RCC_OscConfig+0x98>
 8002e4e:	4b70      	ldr	r3, [pc, #448]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a6f      	ldr	r2, [pc, #444]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e54:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e58:	6013      	str	r3, [r2, #0]
 8002e5a:	4b6d      	ldr	r3, [pc, #436]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a6c      	ldr	r2, [pc, #432]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e64:	6013      	str	r3, [r2, #0]
 8002e66:	e00b      	b.n	8002e80 <HAL_RCC_OscConfig+0xb0>
 8002e68:	4b69      	ldr	r3, [pc, #420]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a68      	ldr	r2, [pc, #416]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e72:	6013      	str	r3, [r2, #0]
 8002e74:	4b66      	ldr	r3, [pc, #408]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a65      	ldr	r2, [pc, #404]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002e7a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e7e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d013      	beq.n	8002eb0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e88:	f7fe fed6 	bl	8001c38 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e8e:	e008      	b.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e90:	f7fe fed2 	bl	8001c38 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	2b64      	cmp	r3, #100	@ 0x64
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e207      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ea2:	4b5b      	ldr	r3, [pc, #364]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d0f0      	beq.n	8002e90 <HAL_RCC_OscConfig+0xc0>
 8002eae:	e014      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb0:	f7fe fec2 	bl	8001c38 <HAL_GetTick>
 8002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eb6:	e008      	b.n	8002eca <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002eb8:	f7fe febe 	bl	8001c38 <HAL_GetTick>
 8002ebc:	4602      	mov	r2, r0
 8002ebe:	693b      	ldr	r3, [r7, #16]
 8002ec0:	1ad3      	subs	r3, r2, r3
 8002ec2:	2b64      	cmp	r3, #100	@ 0x64
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e1f3      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002eca:	4b51      	ldr	r3, [pc, #324]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d1f0      	bne.n	8002eb8 <HAL_RCC_OscConfig+0xe8>
 8002ed6:	e000      	b.n	8002eda <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ed8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d063      	beq.n	8002fae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002ee6:	4b4a      	ldr	r3, [pc, #296]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	f003 030c 	and.w	r3, r3, #12
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00b      	beq.n	8002f0a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ef2:	4b47      	ldr	r3, [pc, #284]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	689b      	ldr	r3, [r3, #8]
 8002ef6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	d11c      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002efe:	4b44      	ldr	r3, [pc, #272]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f00:	685b      	ldr	r3, [r3, #4]
 8002f02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d116      	bne.n	8002f38 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f0a:	4b41      	ldr	r3, [pc, #260]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f003 0302 	and.w	r3, r3, #2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d005      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	68db      	ldr	r3, [r3, #12]
 8002f1a:	2b01      	cmp	r3, #1
 8002f1c:	d001      	beq.n	8002f22 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f1e:	2301      	movs	r3, #1
 8002f20:	e1c7      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f22:	4b3b      	ldr	r3, [pc, #236]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	00db      	lsls	r3, r3, #3
 8002f30:	4937      	ldr	r1, [pc, #220]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f32:	4313      	orrs	r3, r2
 8002f34:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f36:	e03a      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d020      	beq.n	8002f82 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f40:	4b34      	ldr	r3, [pc, #208]	@ (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fe77 	bl	8001c38 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f4e:	f7fe fe73 	bl	8001c38 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e1a8      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f60:	4b2b      	ldr	r3, [pc, #172]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f6c:	4b28      	ldr	r3, [pc, #160]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	00db      	lsls	r3, r3, #3
 8002f7a:	4925      	ldr	r1, [pc, #148]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	600b      	str	r3, [r1, #0]
 8002f80:	e015      	b.n	8002fae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f82:	4b24      	ldr	r3, [pc, #144]	@ (8003014 <HAL_RCC_OscConfig+0x244>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fe56 	bl	8001c38 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f90:	f7fe fe52 	bl	8001c38 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e187      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fa2:	4b1b      	ldr	r3, [pc, #108]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 0302 	and.w	r3, r3, #2
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f003 0308 	and.w	r3, r3, #8
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d036      	beq.n	8003028 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	695b      	ldr	r3, [r3, #20]
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d016      	beq.n	8002ff0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002fc2:	4b15      	ldr	r3, [pc, #84]	@ (8003018 <HAL_RCC_OscConfig+0x248>)
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fc8:	f7fe fe36 	bl	8001c38 <HAL_GetTick>
 8002fcc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fce:	e008      	b.n	8002fe2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fd0:	f7fe fe32 	bl	8001c38 <HAL_GetTick>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	1ad3      	subs	r3, r2, r3
 8002fda:	2b02      	cmp	r3, #2
 8002fdc:	d901      	bls.n	8002fe2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002fde:	2303      	movs	r3, #3
 8002fe0:	e167      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002fe2:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <HAL_RCC_OscConfig+0x240>)
 8002fe4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fe6:	f003 0302 	and.w	r3, r3, #2
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d0f0      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x200>
 8002fee:	e01b      	b.n	8003028 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ff0:	4b09      	ldr	r3, [pc, #36]	@ (8003018 <HAL_RCC_OscConfig+0x248>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002ff6:	f7fe fe1f 	bl	8001c38 <HAL_GetTick>
 8002ffa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ffc:	e00e      	b.n	800301c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ffe:	f7fe fe1b 	bl	8001c38 <HAL_GetTick>
 8003002:	4602      	mov	r2, r0
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	1ad3      	subs	r3, r2, r3
 8003008:	2b02      	cmp	r3, #2
 800300a:	d907      	bls.n	800301c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800300c:	2303      	movs	r3, #3
 800300e:	e150      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003010:	40023800 	.word	0x40023800
 8003014:	42470000 	.word	0x42470000
 8003018:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800301c:	4b88      	ldr	r3, [pc, #544]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800301e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003020:	f003 0302 	and.w	r3, r3, #2
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1ea      	bne.n	8002ffe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	f003 0304 	and.w	r3, r3, #4
 8003030:	2b00      	cmp	r3, #0
 8003032:	f000 8097 	beq.w	8003164 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003036:	2300      	movs	r3, #0
 8003038:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800303a:	4b81      	ldr	r3, [pc, #516]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800303c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800303e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d10f      	bne.n	8003066 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003046:	2300      	movs	r3, #0
 8003048:	60bb      	str	r3, [r7, #8]
 800304a:	4b7d      	ldr	r3, [pc, #500]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	4a7c      	ldr	r2, [pc, #496]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003050:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003054:	6413      	str	r3, [r2, #64]	@ 0x40
 8003056:	4b7a      	ldr	r3, [pc, #488]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800305a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800305e:	60bb      	str	r3, [r7, #8]
 8003060:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003062:	2301      	movs	r3, #1
 8003064:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003066:	4b77      	ldr	r3, [pc, #476]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800306e:	2b00      	cmp	r3, #0
 8003070:	d118      	bne.n	80030a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003072:	4b74      	ldr	r3, [pc, #464]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	4a73      	ldr	r2, [pc, #460]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 8003078:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800307c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800307e:	f7fe fddb 	bl	8001c38 <HAL_GetTick>
 8003082:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003084:	e008      	b.n	8003098 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003086:	f7fe fdd7 	bl	8001c38 <HAL_GetTick>
 800308a:	4602      	mov	r2, r0
 800308c:	693b      	ldr	r3, [r7, #16]
 800308e:	1ad3      	subs	r3, r2, r3
 8003090:	2b02      	cmp	r3, #2
 8003092:	d901      	bls.n	8003098 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003094:	2303      	movs	r3, #3
 8003096:	e10c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003098:	4b6a      	ldr	r3, [pc, #424]	@ (8003244 <HAL_RCC_OscConfig+0x474>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d0f0      	beq.n	8003086 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	2b01      	cmp	r3, #1
 80030aa:	d106      	bne.n	80030ba <HAL_RCC_OscConfig+0x2ea>
 80030ac:	4b64      	ldr	r3, [pc, #400]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030b0:	4a63      	ldr	r2, [pc, #396]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030b2:	f043 0301 	orr.w	r3, r3, #1
 80030b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030b8:	e01c      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b05      	cmp	r3, #5
 80030c0:	d10c      	bne.n	80030dc <HAL_RCC_OscConfig+0x30c>
 80030c2:	4b5f      	ldr	r3, [pc, #380]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030c6:	4a5e      	ldr	r2, [pc, #376]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	6713      	str	r3, [r2, #112]	@ 0x70
 80030ce:	4b5c      	ldr	r3, [pc, #368]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	4a5b      	ldr	r2, [pc, #364]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030d4:	f043 0301 	orr.w	r3, r3, #1
 80030d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80030da:	e00b      	b.n	80030f4 <HAL_RCC_OscConfig+0x324>
 80030dc:	4b58      	ldr	r3, [pc, #352]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030e0:	4a57      	ldr	r2, [pc, #348]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030e2:	f023 0301 	bic.w	r3, r3, #1
 80030e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80030e8:	4b55      	ldr	r3, [pc, #340]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030ec:	4a54      	ldr	r2, [pc, #336]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80030ee:	f023 0304 	bic.w	r3, r3, #4
 80030f2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d015      	beq.n	8003128 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030fc:	f7fe fd9c 	bl	8001c38 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003102:	e00a      	b.n	800311a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003104:	f7fe fd98 	bl	8001c38 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003112:	4293      	cmp	r3, r2
 8003114:	d901      	bls.n	800311a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003116:	2303      	movs	r3, #3
 8003118:	e0cb      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800311a:	4b49      	ldr	r3, [pc, #292]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800311c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800311e:	f003 0302 	and.w	r3, r3, #2
 8003122:	2b00      	cmp	r3, #0
 8003124:	d0ee      	beq.n	8003104 <HAL_RCC_OscConfig+0x334>
 8003126:	e014      	b.n	8003152 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003128:	f7fe fd86 	bl	8001c38 <HAL_GetTick>
 800312c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800312e:	e00a      	b.n	8003146 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003130:	f7fe fd82 	bl	8001c38 <HAL_GetTick>
 8003134:	4602      	mov	r2, r0
 8003136:	693b      	ldr	r3, [r7, #16]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800313e:	4293      	cmp	r3, r2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e0b5      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003146:	4b3e      	ldr	r3, [pc, #248]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003148:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800314a:	f003 0302 	and.w	r3, r3, #2
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1ee      	bne.n	8003130 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003152:	7dfb      	ldrb	r3, [r7, #23]
 8003154:	2b01      	cmp	r3, #1
 8003156:	d105      	bne.n	8003164 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003158:	4b39      	ldr	r3, [pc, #228]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800315a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800315c:	4a38      	ldr	r2, [pc, #224]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 800315e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003162:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	699b      	ldr	r3, [r3, #24]
 8003168:	2b00      	cmp	r3, #0
 800316a:	f000 80a1 	beq.w	80032b0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800316e:	4b34      	ldr	r3, [pc, #208]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b08      	cmp	r3, #8
 8003178:	d05c      	beq.n	8003234 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	699b      	ldr	r3, [r3, #24]
 800317e:	2b02      	cmp	r3, #2
 8003180:	d141      	bne.n	8003206 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003182:	4b31      	ldr	r3, [pc, #196]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003188:	f7fe fd56 	bl	8001c38 <HAL_GetTick>
 800318c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318e:	e008      	b.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003190:	f7fe fd52 	bl	8001c38 <HAL_GetTick>
 8003194:	4602      	mov	r2, r0
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	1ad3      	subs	r3, r2, r3
 800319a:	2b02      	cmp	r3, #2
 800319c:	d901      	bls.n	80031a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800319e:	2303      	movs	r3, #3
 80031a0:	e087      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031a2:	4b27      	ldr	r3, [pc, #156]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d1f0      	bne.n	8003190 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	69da      	ldr	r2, [r3, #28]
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6a1b      	ldr	r3, [r3, #32]
 80031b6:	431a      	orrs	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031bc:	019b      	lsls	r3, r3, #6
 80031be:	431a      	orrs	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	3b01      	subs	r3, #1
 80031c8:	041b      	lsls	r3, r3, #16
 80031ca:	431a      	orrs	r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031d0:	061b      	lsls	r3, r3, #24
 80031d2:	491b      	ldr	r1, [pc, #108]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80031d8:	4b1b      	ldr	r3, [pc, #108]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 80031da:	2201      	movs	r2, #1
 80031dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031de:	f7fe fd2b 	bl	8001c38 <HAL_GetTick>
 80031e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031e4:	e008      	b.n	80031f8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e6:	f7fe fd27 	bl	8001c38 <HAL_GetTick>
 80031ea:	4602      	mov	r2, r0
 80031ec:	693b      	ldr	r3, [r7, #16]
 80031ee:	1ad3      	subs	r3, r2, r3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d901      	bls.n	80031f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031f4:	2303      	movs	r3, #3
 80031f6:	e05c      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031f8:	4b11      	ldr	r3, [pc, #68]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d0f0      	beq.n	80031e6 <HAL_RCC_OscConfig+0x416>
 8003204:	e054      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003206:	4b10      	ldr	r3, [pc, #64]	@ (8003248 <HAL_RCC_OscConfig+0x478>)
 8003208:	2200      	movs	r2, #0
 800320a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800320c:	f7fe fd14 	bl	8001c38 <HAL_GetTick>
 8003210:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003212:	e008      	b.n	8003226 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003214:	f7fe fd10 	bl	8001c38 <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	693b      	ldr	r3, [r7, #16]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	2b02      	cmp	r3, #2
 8003220:	d901      	bls.n	8003226 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003222:	2303      	movs	r3, #3
 8003224:	e045      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003226:	4b06      	ldr	r3, [pc, #24]	@ (8003240 <HAL_RCC_OscConfig+0x470>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800322e:	2b00      	cmp	r3, #0
 8003230:	d1f0      	bne.n	8003214 <HAL_RCC_OscConfig+0x444>
 8003232:	e03d      	b.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	699b      	ldr	r3, [r3, #24]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d107      	bne.n	800324c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800323c:	2301      	movs	r3, #1
 800323e:	e038      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000
 8003248:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800324c:	4b1b      	ldr	r3, [pc, #108]	@ (80032bc <HAL_RCC_OscConfig+0x4ec>)
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	699b      	ldr	r3, [r3, #24]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d028      	beq.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003264:	429a      	cmp	r2, r3
 8003266:	d121      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003272:	429a      	cmp	r2, r3
 8003274:	d11a      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003276:	68fa      	ldr	r2, [r7, #12]
 8003278:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800327c:	4013      	ands	r3, r2
 800327e:	687a      	ldr	r2, [r7, #4]
 8003280:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003282:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003284:	4293      	cmp	r3, r2
 8003286:	d111      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003292:	085b      	lsrs	r3, r3, #1
 8003294:	3b01      	subs	r3, #1
 8003296:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003298:	429a      	cmp	r2, r3
 800329a:	d107      	bne.n	80032ac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032a6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e000      	b.n	80032b2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80032b0:	2300      	movs	r3, #0
}
 80032b2:	4618      	mov	r0, r3
 80032b4:	3718      	adds	r7, #24
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bd80      	pop	{r7, pc}
 80032ba:	bf00      	nop
 80032bc:	40023800 	.word	0x40023800

080032c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80032c0:	b580      	push	{r7, lr}
 80032c2:	b084      	sub	sp, #16
 80032c4:	af00      	add	r7, sp, #0
 80032c6:	6078      	str	r0, [r7, #4]
 80032c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d101      	bne.n	80032d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80032d0:	2301      	movs	r3, #1
 80032d2:	e0cc      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80032d4:	4b68      	ldr	r3, [pc, #416]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0307 	and.w	r3, r3, #7
 80032dc:	683a      	ldr	r2, [r7, #0]
 80032de:	429a      	cmp	r2, r3
 80032e0:	d90c      	bls.n	80032fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e2:	4b65      	ldr	r3, [pc, #404]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032e4:	683a      	ldr	r2, [r7, #0]
 80032e6:	b2d2      	uxtb	r2, r2
 80032e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ea:	4b63      	ldr	r3, [pc, #396]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	683a      	ldr	r2, [r7, #0]
 80032f4:	429a      	cmp	r2, r3
 80032f6:	d001      	beq.n	80032fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032f8:	2301      	movs	r3, #1
 80032fa:	e0b8      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 0302 	and.w	r3, r3, #2
 8003304:	2b00      	cmp	r3, #0
 8003306:	d020      	beq.n	800334a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f003 0304 	and.w	r3, r3, #4
 8003310:	2b00      	cmp	r3, #0
 8003312:	d005      	beq.n	8003320 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003314:	4b59      	ldr	r3, [pc, #356]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003316:	689b      	ldr	r3, [r3, #8]
 8003318:	4a58      	ldr	r2, [pc, #352]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800331a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800331e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 0308 	and.w	r3, r3, #8
 8003328:	2b00      	cmp	r3, #0
 800332a:	d005      	beq.n	8003338 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800332c:	4b53      	ldr	r3, [pc, #332]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	4a52      	ldr	r2, [pc, #328]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003332:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003336:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003338:	4b50      	ldr	r3, [pc, #320]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	689b      	ldr	r3, [r3, #8]
 8003344:	494d      	ldr	r1, [pc, #308]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003346:	4313      	orrs	r3, r2
 8003348:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	f003 0301 	and.w	r3, r3, #1
 8003352:	2b00      	cmp	r3, #0
 8003354:	d044      	beq.n	80033e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	2b01      	cmp	r3, #1
 800335c:	d107      	bne.n	800336e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335e:	4b47      	ldr	r3, [pc, #284]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d119      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800336a:	2301      	movs	r3, #1
 800336c:	e07f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	2b02      	cmp	r3, #2
 8003374:	d003      	beq.n	800337e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800337a:	2b03      	cmp	r3, #3
 800337c:	d107      	bne.n	800338e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800337e:	4b3f      	ldr	r3, [pc, #252]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d109      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e06f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800338e:	4b3b      	ldr	r3, [pc, #236]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e067      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800339e:	4b37      	ldr	r3, [pc, #220]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f023 0203 	bic.w	r2, r3, #3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	4934      	ldr	r1, [pc, #208]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033ac:	4313      	orrs	r3, r2
 80033ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80033b0:	f7fe fc42 	bl	8001c38 <HAL_GetTick>
 80033b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033b6:	e00a      	b.n	80033ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80033b8:	f7fe fc3e 	bl	8001c38 <HAL_GetTick>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	1ad3      	subs	r3, r2, r3
 80033c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e04f      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80033ce:	4b2b      	ldr	r3, [pc, #172]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	f003 020c 	and.w	r2, r3, #12
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	685b      	ldr	r3, [r3, #4]
 80033da:	009b      	lsls	r3, r3, #2
 80033dc:	429a      	cmp	r2, r3
 80033de:	d1eb      	bne.n	80033b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80033e0:	4b25      	ldr	r3, [pc, #148]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f003 0307 	and.w	r3, r3, #7
 80033e8:	683a      	ldr	r2, [r7, #0]
 80033ea:	429a      	cmp	r2, r3
 80033ec:	d20c      	bcs.n	8003408 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ee:	4b22      	ldr	r3, [pc, #136]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f0:	683a      	ldr	r2, [r7, #0]
 80033f2:	b2d2      	uxtb	r2, r2
 80033f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033f6:	4b20      	ldr	r3, [pc, #128]	@ (8003478 <HAL_RCC_ClockConfig+0x1b8>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f003 0307 	and.w	r3, r3, #7
 80033fe:	683a      	ldr	r2, [r7, #0]
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e032      	b.n	800346e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f003 0304 	and.w	r3, r3, #4
 8003410:	2b00      	cmp	r3, #0
 8003412:	d008      	beq.n	8003426 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003414:	4b19      	ldr	r3, [pc, #100]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
 8003420:	4916      	ldr	r1, [pc, #88]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003422:	4313      	orrs	r3, r2
 8003424:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f003 0308 	and.w	r3, r3, #8
 800342e:	2b00      	cmp	r3, #0
 8003430:	d009      	beq.n	8003446 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003432:	4b12      	ldr	r3, [pc, #72]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	00db      	lsls	r3, r3, #3
 8003440:	490e      	ldr	r1, [pc, #56]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 8003442:	4313      	orrs	r3, r2
 8003444:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003446:	f000 f821 	bl	800348c <HAL_RCC_GetSysClockFreq>
 800344a:	4602      	mov	r2, r0
 800344c:	4b0b      	ldr	r3, [pc, #44]	@ (800347c <HAL_RCC_ClockConfig+0x1bc>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	091b      	lsrs	r3, r3, #4
 8003452:	f003 030f 	and.w	r3, r3, #15
 8003456:	490a      	ldr	r1, [pc, #40]	@ (8003480 <HAL_RCC_ClockConfig+0x1c0>)
 8003458:	5ccb      	ldrb	r3, [r1, r3]
 800345a:	fa22 f303 	lsr.w	r3, r2, r3
 800345e:	4a09      	ldr	r2, [pc, #36]	@ (8003484 <HAL_RCC_ClockConfig+0x1c4>)
 8003460:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003462:	4b09      	ldr	r3, [pc, #36]	@ (8003488 <HAL_RCC_ClockConfig+0x1c8>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fe fba2 	bl	8001bb0 <HAL_InitTick>

  return HAL_OK;
 800346c:	2300      	movs	r3, #0
}
 800346e:	4618      	mov	r0, r3
 8003470:	3710      	adds	r7, #16
 8003472:	46bd      	mov	sp, r7
 8003474:	bd80      	pop	{r7, pc}
 8003476:	bf00      	nop
 8003478:	40023c00 	.word	0x40023c00
 800347c:	40023800 	.word	0x40023800
 8003480:	08005cb8 	.word	0x08005cb8
 8003484:	20000004 	.word	0x20000004
 8003488:	20000008 	.word	0x20000008

0800348c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800348c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003490:	b090      	sub	sp, #64	@ 0x40
 8003492:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003494:	2300      	movs	r3, #0
 8003496:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003498:	2300      	movs	r3, #0
 800349a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 800349c:	2300      	movs	r3, #0
 800349e:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034a4:	4b59      	ldr	r3, [pc, #356]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034a6:	689b      	ldr	r3, [r3, #8]
 80034a8:	f003 030c 	and.w	r3, r3, #12
 80034ac:	2b08      	cmp	r3, #8
 80034ae:	d00d      	beq.n	80034cc <HAL_RCC_GetSysClockFreq+0x40>
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	f200 80a1 	bhi.w	80035f8 <HAL_RCC_GetSysClockFreq+0x16c>
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d002      	beq.n	80034c0 <HAL_RCC_GetSysClockFreq+0x34>
 80034ba:	2b04      	cmp	r3, #4
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_GetSysClockFreq+0x3a>
 80034be:	e09b      	b.n	80035f8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80034c0:	4b53      	ldr	r3, [pc, #332]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x184>)
 80034c2:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034c4:	e09b      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80034c6:	4b53      	ldr	r3, [pc, #332]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 80034c8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80034ca:	e098      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80034cc:	4b4f      	ldr	r3, [pc, #316]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80034d4:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80034d6:	4b4d      	ldr	r3, [pc, #308]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034d8:	685b      	ldr	r3, [r3, #4]
 80034da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d028      	beq.n	8003534 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e2:	4b4a      	ldr	r3, [pc, #296]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	099b      	lsrs	r3, r3, #6
 80034e8:	2200      	movs	r2, #0
 80034ea:	623b      	str	r3, [r7, #32]
 80034ec:	627a      	str	r2, [r7, #36]	@ 0x24
 80034ee:	6a3b      	ldr	r3, [r7, #32]
 80034f0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034f4:	2100      	movs	r1, #0
 80034f6:	4b47      	ldr	r3, [pc, #284]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 80034f8:	fb03 f201 	mul.w	r2, r3, r1
 80034fc:	2300      	movs	r3, #0
 80034fe:	fb00 f303 	mul.w	r3, r0, r3
 8003502:	4413      	add	r3, r2
 8003504:	4a43      	ldr	r2, [pc, #268]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x188>)
 8003506:	fba0 1202 	umull	r1, r2, r0, r2
 800350a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800350c:	460a      	mov	r2, r1
 800350e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003510:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003512:	4413      	add	r3, r2
 8003514:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003518:	2200      	movs	r2, #0
 800351a:	61bb      	str	r3, [r7, #24]
 800351c:	61fa      	str	r2, [r7, #28]
 800351e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003522:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003526:	f7fc fe57 	bl	80001d8 <__aeabi_uldivmod>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4613      	mov	r3, r2
 8003530:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003532:	e053      	b.n	80035dc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003534:	4b35      	ldr	r3, [pc, #212]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	099b      	lsrs	r3, r3, #6
 800353a:	2200      	movs	r2, #0
 800353c:	613b      	str	r3, [r7, #16]
 800353e:	617a      	str	r2, [r7, #20]
 8003540:	693b      	ldr	r3, [r7, #16]
 8003542:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003546:	f04f 0b00 	mov.w	fp, #0
 800354a:	4652      	mov	r2, sl
 800354c:	465b      	mov	r3, fp
 800354e:	f04f 0000 	mov.w	r0, #0
 8003552:	f04f 0100 	mov.w	r1, #0
 8003556:	0159      	lsls	r1, r3, #5
 8003558:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355c:	0150      	lsls	r0, r2, #5
 800355e:	4602      	mov	r2, r0
 8003560:	460b      	mov	r3, r1
 8003562:	ebb2 080a 	subs.w	r8, r2, sl
 8003566:	eb63 090b 	sbc.w	r9, r3, fp
 800356a:	f04f 0200 	mov.w	r2, #0
 800356e:	f04f 0300 	mov.w	r3, #0
 8003572:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003576:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800357a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800357e:	ebb2 0408 	subs.w	r4, r2, r8
 8003582:	eb63 0509 	sbc.w	r5, r3, r9
 8003586:	f04f 0200 	mov.w	r2, #0
 800358a:	f04f 0300 	mov.w	r3, #0
 800358e:	00eb      	lsls	r3, r5, #3
 8003590:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003594:	00e2      	lsls	r2, r4, #3
 8003596:	4614      	mov	r4, r2
 8003598:	461d      	mov	r5, r3
 800359a:	eb14 030a 	adds.w	r3, r4, sl
 800359e:	603b      	str	r3, [r7, #0]
 80035a0:	eb45 030b 	adc.w	r3, r5, fp
 80035a4:	607b      	str	r3, [r7, #4]
 80035a6:	f04f 0200 	mov.w	r2, #0
 80035aa:	f04f 0300 	mov.w	r3, #0
 80035ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b2:	4629      	mov	r1, r5
 80035b4:	028b      	lsls	r3, r1, #10
 80035b6:	4621      	mov	r1, r4
 80035b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035bc:	4621      	mov	r1, r4
 80035be:	028a      	lsls	r2, r1, #10
 80035c0:	4610      	mov	r0, r2
 80035c2:	4619      	mov	r1, r3
 80035c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80035c6:	2200      	movs	r2, #0
 80035c8:	60bb      	str	r3, [r7, #8]
 80035ca:	60fa      	str	r2, [r7, #12]
 80035cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80035d0:	f7fc fe02 	bl	80001d8 <__aeabi_uldivmod>
 80035d4:	4602      	mov	r2, r0
 80035d6:	460b      	mov	r3, r1
 80035d8:	4613      	mov	r3, r2
 80035da:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80035dc:	4b0b      	ldr	r3, [pc, #44]	@ (800360c <HAL_RCC_GetSysClockFreq+0x180>)
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	0c1b      	lsrs	r3, r3, #16
 80035e2:	f003 0303 	and.w	r3, r3, #3
 80035e6:	3301      	adds	r3, #1
 80035e8:	005b      	lsls	r3, r3, #1
 80035ea:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035ec:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035f6:	e002      	b.n	80035fe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035f8:	4b05      	ldr	r3, [pc, #20]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x184>)
 80035fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003600:	4618      	mov	r0, r3
 8003602:	3740      	adds	r7, #64	@ 0x40
 8003604:	46bd      	mov	sp, r7
 8003606:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360a:	bf00      	nop
 800360c:	40023800 	.word	0x40023800
 8003610:	00f42400 	.word	0x00f42400
 8003614:	017d7840 	.word	0x017d7840

08003618 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003618:	b480      	push	{r7}
 800361a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800361c:	4b03      	ldr	r3, [pc, #12]	@ (800362c <HAL_RCC_GetHCLKFreq+0x14>)
 800361e:	681b      	ldr	r3, [r3, #0]
}
 8003620:	4618      	mov	r0, r3
 8003622:	46bd      	mov	sp, r7
 8003624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003628:	4770      	bx	lr
 800362a:	bf00      	nop
 800362c:	20000004 	.word	0x20000004

08003630 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003634:	f7ff fff0 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003638:	4602      	mov	r2, r0
 800363a:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetPCLK1Freq+0x20>)
 800363c:	689b      	ldr	r3, [r3, #8]
 800363e:	0a9b      	lsrs	r3, r3, #10
 8003640:	f003 0307 	and.w	r3, r3, #7
 8003644:	4903      	ldr	r1, [pc, #12]	@ (8003654 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800364c:	4618      	mov	r0, r3
 800364e:	bd80      	pop	{r7, pc}
 8003650:	40023800 	.word	0x40023800
 8003654:	08005cc8 	.word	0x08005cc8

08003658 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003658:	b580      	push	{r7, lr}
 800365a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800365c:	f7ff ffdc 	bl	8003618 <HAL_RCC_GetHCLKFreq>
 8003660:	4602      	mov	r2, r0
 8003662:	4b05      	ldr	r3, [pc, #20]	@ (8003678 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003664:	689b      	ldr	r3, [r3, #8]
 8003666:	0b5b      	lsrs	r3, r3, #13
 8003668:	f003 0307 	and.w	r3, r3, #7
 800366c:	4903      	ldr	r1, [pc, #12]	@ (800367c <HAL_RCC_GetPCLK2Freq+0x24>)
 800366e:	5ccb      	ldrb	r3, [r1, r3]
 8003670:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003674:	4618      	mov	r0, r3
 8003676:	bd80      	pop	{r7, pc}
 8003678:	40023800 	.word	0x40023800
 800367c:	08005cc8 	.word	0x08005cc8

08003680 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b082      	sub	sp, #8
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d101      	bne.n	8003692 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800368e:	2301      	movs	r3, #1
 8003690:	e041      	b.n	8003716 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003698:	b2db      	uxtb	r3, r3
 800369a:	2b00      	cmp	r3, #0
 800369c:	d106      	bne.n	80036ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	2200      	movs	r2, #0
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036a6:	6878      	ldr	r0, [r7, #4]
 80036a8:	f7fe f826 	bl	80016f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2202      	movs	r2, #2
 80036b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681a      	ldr	r2, [r3, #0]
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	3304      	adds	r3, #4
 80036bc:	4619      	mov	r1, r3
 80036be:	4610      	mov	r0, r2
 80036c0:	f000 fcc4 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2201      	movs	r2, #1
 80036e0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	2201      	movs	r2, #1
 80036f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2201      	movs	r2, #1
 8003700:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	2201      	movs	r2, #1
 8003708:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	2201      	movs	r2, #1
 8003710:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003714:	2300      	movs	r3, #0
}
 8003716:	4618      	mov	r0, r3
 8003718:	3708      	adds	r7, #8
 800371a:	46bd      	mov	sp, r7
 800371c:	bd80      	pop	{r7, pc}

0800371e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800371e:	b580      	push	{r7, lr}
 8003720:	b082      	sub	sp, #8
 8003722:	af00      	add	r7, sp, #0
 8003724:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d101      	bne.n	8003730 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e041      	b.n	80037b4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003736:	b2db      	uxtb	r3, r3
 8003738:	2b00      	cmp	r3, #0
 800373a:	d106      	bne.n	800374a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f000 f839 	bl	80037bc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2202      	movs	r2, #2
 800374e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	3304      	adds	r3, #4
 800375a:	4619      	mov	r1, r3
 800375c:	4610      	mov	r0, r2
 800375e:	f000 fc75 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2201      	movs	r2, #1
 8003766:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2201      	movs	r2, #1
 800376e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2201      	movs	r2, #1
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2201      	movs	r2, #1
 8003786:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2201      	movs	r2, #1
 800378e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2201      	movs	r2, #1
 800379e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2201      	movs	r2, #1
 80037a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2201      	movs	r2, #1
 80037ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037b2:	2300      	movs	r3, #0
}
 80037b4:	4618      	mov	r0, r3
 80037b6:	3708      	adds	r7, #8
 80037b8:	46bd      	mov	sp, r7
 80037ba:	bd80      	pop	{r7, pc}

080037bc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80037bc:	b480      	push	{r7}
 80037be:	b083      	sub	sp, #12
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80037c4:	bf00      	nop
 80037c6:	370c      	adds	r7, #12
 80037c8:	46bd      	mov	sp, r7
 80037ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ce:	4770      	bx	lr

080037d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d101      	bne.n	80037e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e041      	b.n	8003866 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d106      	bne.n	80037fc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 f839 	bl	800386e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2202      	movs	r2, #2
 8003800:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681a      	ldr	r2, [r3, #0]
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3304      	adds	r3, #4
 800380c:	4619      	mov	r1, r3
 800380e:	4610      	mov	r0, r2
 8003810:	f000 fc1c 	bl	800404c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2201      	movs	r2, #1
 8003818:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	2201      	movs	r2, #1
 8003820:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	2201      	movs	r2, #1
 8003828:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2201      	movs	r2, #1
 8003830:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2201      	movs	r2, #1
 8003838:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2201      	movs	r2, #1
 8003848:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2201      	movs	r2, #1
 8003850:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2201      	movs	r2, #1
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003864:	2300      	movs	r3, #0
}
 8003866:	4618      	mov	r0, r3
 8003868:	3708      	adds	r7, #8
 800386a:	46bd      	mov	sp, r7
 800386c:	bd80      	pop	{r7, pc}

0800386e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800386e:	b480      	push	{r7}
 8003870:	b083      	sub	sp, #12
 8003872:	af00      	add	r7, sp, #0
 8003874:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr

08003882 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b086      	sub	sp, #24
 8003886:	af00      	add	r7, sp, #0
 8003888:	6078      	str	r0, [r7, #4]
 800388a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d101      	bne.n	8003896 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e097      	b.n	80039c6 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d106      	bne.n	80038b0 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2200      	movs	r2, #0
 80038a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7fd ffbc 	bl	8001828 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2202      	movs	r2, #2
 80038b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	6812      	ldr	r2, [r2, #0]
 80038c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038c6:	f023 0307 	bic.w	r3, r3, #7
 80038ca:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4619      	mov	r1, r3
 80038d6:	4610      	mov	r0, r2
 80038d8:	f000 fbb8 	bl	800404c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	699b      	ldr	r3, [r3, #24]
 80038ea:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	697a      	ldr	r2, [r7, #20]
 80038fa:	4313      	orrs	r3, r2
 80038fc:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038fe:	693b      	ldr	r3, [r7, #16]
 8003900:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003904:	f023 0303 	bic.w	r3, r3, #3
 8003908:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	689a      	ldr	r2, [r3, #8]
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	699b      	ldr	r3, [r3, #24]
 8003912:	021b      	lsls	r3, r3, #8
 8003914:	4313      	orrs	r3, r2
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800391c:	693b      	ldr	r3, [r7, #16]
 800391e:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8003922:	f023 030c 	bic.w	r3, r3, #12
 8003926:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003928:	693b      	ldr	r3, [r7, #16]
 800392a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800392e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003932:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	68da      	ldr	r2, [r3, #12]
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	69db      	ldr	r3, [r3, #28]
 800393c:	021b      	lsls	r3, r3, #8
 800393e:	4313      	orrs	r3, r2
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	4313      	orrs	r3, r2
 8003944:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	691b      	ldr	r3, [r3, #16]
 800394a:	011a      	lsls	r2, r3, #4
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	6a1b      	ldr	r3, [r3, #32]
 8003950:	031b      	lsls	r3, r3, #12
 8003952:	4313      	orrs	r3, r2
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	4313      	orrs	r3, r2
 8003958:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003960:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8003968:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	011b      	lsls	r3, r3, #4
 8003974:	4313      	orrs	r3, r2
 8003976:	68fa      	ldr	r2, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	693a      	ldr	r2, [r7, #16]
 800398a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2201      	movs	r2, #1
 8003998:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2201      	movs	r2, #1
 80039a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2201      	movs	r2, #1
 80039b8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2201      	movs	r2, #1
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3718      	adds	r7, #24
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	691b      	ldr	r3, [r3, #16]
 80039e4:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01b      	beq.n	8003a32 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0202 	mvn.w	r2, #2
 8003a02:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0303 	and.w	r3, r3, #3
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 faf8 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 faea 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fafb 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0304 	and.w	r3, r3, #4
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0304 	and.w	r3, r3, #4
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01b      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0204 	mvn.w	r2, #4
 8003a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2202      	movs	r2, #2
 8003a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	699b      	ldr	r3, [r3, #24]
 8003a5c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 fad2 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003a6a:	e005      	b.n	8003a78 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fac4 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 fad5 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f003 0308 	and.w	r3, r3, #8
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01b      	beq.n	8003aca <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0208 	mvn.w	r2, #8
 8003a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2204      	movs	r2, #4
 8003aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f003 0303 	and.w	r3, r3, #3
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 faac 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003ab6:	e005      	b.n	8003ac4 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa9e 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 faaf 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0310 	and.w	r3, r3, #16
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d020      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0310 	and.w	r3, r3, #16
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d01b      	beq.n	8003b16 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0210 	mvn.w	r2, #16
 8003ae6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2208      	movs	r2, #8
 8003aec:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	69db      	ldr	r3, [r3, #28]
 8003af4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003afc:	6878      	ldr	r0, [r7, #4]
 8003afe:	f000 fa86 	bl	800400e <HAL_TIM_IC_CaptureCallback>
 8003b02:	e005      	b.n	8003b10 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b04:	6878      	ldr	r0, [r7, #4]
 8003b06:	f000 fa78 	bl	8003ffa <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f000 fa89 	bl	8004022 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003b16:	68bb      	ldr	r3, [r7, #8]
 8003b18:	f003 0301 	and.w	r3, r3, #1
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d00c      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f003 0301 	and.w	r3, r3, #1
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f06f 0201 	mvn.w	r2, #1
 8003b32:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b34:	6878      	ldr	r0, [r7, #4]
 8003b36:	f7fd fca9 	bl	800148c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d00c      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d007      	beq.n	8003b5e <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b56:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 ff6f 	bl	8004a3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b5e:	68bb      	ldr	r3, [r7, #8]
 8003b60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d007      	beq.n	8003b82 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b7a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b7c:	6878      	ldr	r0, [r7, #4]
 8003b7e:	f000 fa5a 	bl	8004036 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	f003 0320 	and.w	r3, r3, #32
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00c      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	f003 0320 	and.w	r3, r3, #32
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d007      	beq.n	8003ba6 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f06f 0220 	mvn.w	r2, #32
 8003b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba0:	6878      	ldr	r0, [r7, #4]
 8003ba2:	f000 ff41 	bl	8004a28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}

08003bae <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003bae:	b580      	push	{r7, lr}
 8003bb0:	b086      	sub	sp, #24
 8003bb2:	af00      	add	r7, sp, #0
 8003bb4:	60f8      	str	r0, [r7, #12]
 8003bb6:	60b9      	str	r1, [r7, #8]
 8003bb8:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d101      	bne.n	8003bcc <HAL_TIM_IC_ConfigChannel+0x1e>
 8003bc8:	2302      	movs	r3, #2
 8003bca:	e088      	b.n	8003cde <HAL_TIM_IC_ConfigChannel+0x130>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d11b      	bne.n	8003c12 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003be2:	68bb      	ldr	r3, [r7, #8]
 8003be4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003bea:	f000 fc8b 	bl	8004504 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699a      	ldr	r2, [r3, #24]
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f022 020c 	bic.w	r2, r2, #12
 8003bfc:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	6999      	ldr	r1, [r3, #24]
 8003c04:	68bb      	ldr	r3, [r7, #8]
 8003c06:	689a      	ldr	r2, [r3, #8]
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	430a      	orrs	r2, r1
 8003c0e:	619a      	str	r2, [r3, #24]
 8003c10:	e060      	b.n	8003cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2b04      	cmp	r3, #4
 8003c16:	d11c      	bne.n	8003c52 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003c28:	f000 fd0f 	bl	800464a <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	699a      	ldr	r2, [r3, #24]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c3a:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	6999      	ldr	r1, [r3, #24]
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	021a      	lsls	r2, r3, #8
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	430a      	orrs	r2, r1
 8003c4e:	619a      	str	r2, [r3, #24]
 8003c50:	e040      	b.n	8003cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2b08      	cmp	r3, #8
 8003c56:	d11b      	bne.n	8003c90 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c68:	f000 fd5c 	bl	8004724 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f022 020c 	bic.w	r2, r2, #12
 8003c7a:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	69d9      	ldr	r1, [r3, #28]
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	689a      	ldr	r2, [r3, #8]
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	430a      	orrs	r2, r1
 8003c8c:	61da      	str	r2, [r3, #28]
 8003c8e:	e021      	b.n	8003cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	2b0c      	cmp	r3, #12
 8003c94:	d11c      	bne.n	8003cd0 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c9e:	68bb      	ldr	r3, [r7, #8]
 8003ca0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003ca6:	f000 fd79 	bl	800479c <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003cb8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69d9      	ldr	r1, [r3, #28]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	021a      	lsls	r2, r3, #8
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	430a      	orrs	r2, r1
 8003ccc:	61da      	str	r2, [r3, #28]
 8003cce:	e001      	b.n	8003cd4 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003cdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3718      	adds	r7, #24
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	bd80      	pop	{r7, pc}
	...

08003ce8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b086      	sub	sp, #24
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	60f8      	str	r0, [r7, #12]
 8003cf0:	60b9      	str	r1, [r7, #8]
 8003cf2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cfe:	2b01      	cmp	r3, #1
 8003d00:	d101      	bne.n	8003d06 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d02:	2302      	movs	r3, #2
 8003d04:	e0ae      	b.n	8003e64 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	f200 809f 	bhi.w	8003e54 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d16:	a201      	add	r2, pc, #4	@ (adr r2, 8003d1c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d1c:	08003d51 	.word	0x08003d51
 8003d20:	08003e55 	.word	0x08003e55
 8003d24:	08003e55 	.word	0x08003e55
 8003d28:	08003e55 	.word	0x08003e55
 8003d2c:	08003d91 	.word	0x08003d91
 8003d30:	08003e55 	.word	0x08003e55
 8003d34:	08003e55 	.word	0x08003e55
 8003d38:	08003e55 	.word	0x08003e55
 8003d3c:	08003dd3 	.word	0x08003dd3
 8003d40:	08003e55 	.word	0x08003e55
 8003d44:	08003e55 	.word	0x08003e55
 8003d48:	08003e55 	.word	0x08003e55
 8003d4c:	08003e13 	.word	0x08003e13
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	68b9      	ldr	r1, [r7, #8]
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fa24 	bl	80041a4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699a      	ldr	r2, [r3, #24]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f042 0208 	orr.w	r2, r2, #8
 8003d6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	699a      	ldr	r2, [r3, #24]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f022 0204 	bic.w	r2, r2, #4
 8003d7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	6999      	ldr	r1, [r3, #24]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	430a      	orrs	r2, r1
 8003d8c:	619a      	str	r2, [r3, #24]
      break;
 8003d8e:	e064      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	68b9      	ldr	r1, [r7, #8]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f000 fa74 	bl	8004284 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	699a      	ldr	r2, [r3, #24]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003daa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	699a      	ldr	r2, [r3, #24]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6999      	ldr	r1, [r3, #24]
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	691b      	ldr	r3, [r3, #16]
 8003dc6:	021a      	lsls	r2, r3, #8
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	619a      	str	r2, [r3, #24]
      break;
 8003dd0:	e043      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	4618      	mov	r0, r3
 8003dda:	f000 fac9 	bl	8004370 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	69da      	ldr	r2, [r3, #28]
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f042 0208 	orr.w	r2, r2, #8
 8003dec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	69da      	ldr	r2, [r3, #28]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f022 0204 	bic.w	r2, r2, #4
 8003dfc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	69d9      	ldr	r1, [r3, #28]
 8003e04:	68bb      	ldr	r3, [r7, #8]
 8003e06:	691a      	ldr	r2, [r3, #16]
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	430a      	orrs	r2, r1
 8003e0e:	61da      	str	r2, [r3, #28]
      break;
 8003e10:	e023      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f000 fb1d 	bl	8004458 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	69da      	ldr	r2, [r3, #28]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	69da      	ldr	r2, [r3, #28]
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	69d9      	ldr	r1, [r3, #28]
 8003e44:	68bb      	ldr	r3, [r7, #8]
 8003e46:	691b      	ldr	r3, [r3, #16]
 8003e48:	021a      	lsls	r2, r3, #8
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	430a      	orrs	r2, r1
 8003e50:	61da      	str	r2, [r3, #28]
      break;
 8003e52:	e002      	b.n	8003e5a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	75fb      	strb	r3, [r7, #23]
      break;
 8003e58:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e62:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	3718      	adds	r7, #24
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}

08003e6c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
 8003e74:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e80:	2b01      	cmp	r3, #1
 8003e82:	d101      	bne.n	8003e88 <HAL_TIM_ConfigClockSource+0x1c>
 8003e84:	2302      	movs	r3, #2
 8003e86:	e0b4      	b.n	8003ff2 <HAL_TIM_ConfigClockSource+0x186>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2202      	movs	r2, #2
 8003e94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ea6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eae:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	68ba      	ldr	r2, [r7, #8]
 8003eb6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec0:	d03e      	beq.n	8003f40 <HAL_TIM_ConfigClockSource+0xd4>
 8003ec2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec6:	f200 8087 	bhi.w	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003eca:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ece:	f000 8086 	beq.w	8003fde <HAL_TIM_ConfigClockSource+0x172>
 8003ed2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed6:	d87f      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed8:	2b70      	cmp	r3, #112	@ 0x70
 8003eda:	d01a      	beq.n	8003f12 <HAL_TIM_ConfigClockSource+0xa6>
 8003edc:	2b70      	cmp	r3, #112	@ 0x70
 8003ede:	d87b      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee0:	2b60      	cmp	r3, #96	@ 0x60
 8003ee2:	d050      	beq.n	8003f86 <HAL_TIM_ConfigClockSource+0x11a>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d877      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ee8:	2b50      	cmp	r3, #80	@ 0x50
 8003eea:	d03c      	beq.n	8003f66 <HAL_TIM_ConfigClockSource+0xfa>
 8003eec:	2b50      	cmp	r3, #80	@ 0x50
 8003eee:	d873      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef0:	2b40      	cmp	r3, #64	@ 0x40
 8003ef2:	d058      	beq.n	8003fa6 <HAL_TIM_ConfigClockSource+0x13a>
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d86f      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003ef8:	2b30      	cmp	r3, #48	@ 0x30
 8003efa:	d064      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003efc:	2b30      	cmp	r3, #48	@ 0x30
 8003efe:	d86b      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f00:	2b20      	cmp	r3, #32
 8003f02:	d060      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d867      	bhi.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d05c      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f0c:	2b10      	cmp	r3, #16
 8003f0e:	d05a      	beq.n	8003fc6 <HAL_TIM_ConfigClockSource+0x15a>
 8003f10:	e062      	b.n	8003fd8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f16:	683b      	ldr	r3, [r7, #0]
 8003f18:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f22:	f000 fc93 	bl	800484c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	689b      	ldr	r3, [r3, #8]
 8003f2c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f2e:	68bb      	ldr	r3, [r7, #8]
 8003f30:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f34:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	609a      	str	r2, [r3, #8]
      break;
 8003f3e:	e04f      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f44:	683b      	ldr	r3, [r7, #0]
 8003f46:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f50:	f000 fc7c 	bl	800484c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	689a      	ldr	r2, [r3, #8]
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f62:	609a      	str	r2, [r3, #8]
      break;
 8003f64:	e03c      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f72:	461a      	mov	r2, r3
 8003f74:	f000 fb3a 	bl	80045ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	2150      	movs	r1, #80	@ 0x50
 8003f7e:	4618      	mov	r0, r3
 8003f80:	f000 fc49 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8003f84:	e02c      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f92:	461a      	mov	r2, r3
 8003f94:	f000 fb96 	bl	80046c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2160      	movs	r1, #96	@ 0x60
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	f000 fc39 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8003fa4:	e01c      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb2:	461a      	mov	r2, r3
 8003fb4:	f000 fb1a 	bl	80045ec <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	2140      	movs	r1, #64	@ 0x40
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f000 fc29 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8003fc4:	e00c      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f000 fc20 	bl	8004816 <TIM_ITRx_SetConfig>
      break;
 8003fd6:	e003      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	73fb      	strb	r3, [r7, #15]
      break;
 8003fdc:	e000      	b.n	8003fe0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fde:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2201      	movs	r2, #1
 8003fe4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff2:	4618      	mov	r0, r3
 8003ff4:	3710      	adds	r7, #16
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}

08003ffa <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffa:	b480      	push	{r7}
 8003ffc:	b083      	sub	sp, #12
 8003ffe:	af00      	add	r7, sp, #0
 8004000:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004002:	bf00      	nop
 8004004:	370c      	adds	r7, #12
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr

0800400e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800400e:	b480      	push	{r7}
 8004010:	b083      	sub	sp, #12
 8004012:	af00      	add	r7, sp, #0
 8004014:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004016:	bf00      	nop
 8004018:	370c      	adds	r7, #12
 800401a:	46bd      	mov	sp, r7
 800401c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004034:	4770      	bx	lr

08004036 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004036:	b480      	push	{r7}
 8004038:	b083      	sub	sp, #12
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800403e:	bf00      	nop
 8004040:	370c      	adds	r7, #12
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
	...

0800404c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800404c:	b480      	push	{r7}
 800404e:	b085      	sub	sp, #20
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	4a46      	ldr	r2, [pc, #280]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 8004060:	4293      	cmp	r3, r2
 8004062:	d013      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406a:	d00f      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	4a43      	ldr	r2, [pc, #268]	@ (800417c <TIM_Base_SetConfig+0x130>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d00b      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	4a42      	ldr	r2, [pc, #264]	@ (8004180 <TIM_Base_SetConfig+0x134>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d007      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	4a41      	ldr	r2, [pc, #260]	@ (8004184 <TIM_Base_SetConfig+0x138>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d003      	beq.n	800408c <TIM_Base_SetConfig+0x40>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	4a40      	ldr	r2, [pc, #256]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 8004088:	4293      	cmp	r3, r2
 800408a:	d108      	bne.n	800409e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004092:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	68fa      	ldr	r2, [r7, #12]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a35      	ldr	r2, [pc, #212]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d02b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040ac:	d027      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a32      	ldr	r2, [pc, #200]	@ (800417c <TIM_Base_SetConfig+0x130>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d023      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a31      	ldr	r2, [pc, #196]	@ (8004180 <TIM_Base_SetConfig+0x134>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d01f      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	4a30      	ldr	r2, [pc, #192]	@ (8004184 <TIM_Base_SetConfig+0x138>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d01b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	4a2f      	ldr	r2, [pc, #188]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d017      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	4a2e      	ldr	r2, [pc, #184]	@ (800418c <TIM_Base_SetConfig+0x140>)
 80040d2:	4293      	cmp	r3, r2
 80040d4:	d013      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	4a2d      	ldr	r2, [pc, #180]	@ (8004190 <TIM_Base_SetConfig+0x144>)
 80040da:	4293      	cmp	r3, r2
 80040dc:	d00f      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	4a2c      	ldr	r2, [pc, #176]	@ (8004194 <TIM_Base_SetConfig+0x148>)
 80040e2:	4293      	cmp	r3, r2
 80040e4:	d00b      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	4a2b      	ldr	r2, [pc, #172]	@ (8004198 <TIM_Base_SetConfig+0x14c>)
 80040ea:	4293      	cmp	r3, r2
 80040ec:	d007      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	4a2a      	ldr	r2, [pc, #168]	@ (800419c <TIM_Base_SetConfig+0x150>)
 80040f2:	4293      	cmp	r3, r2
 80040f4:	d003      	beq.n	80040fe <TIM_Base_SetConfig+0xb2>
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	4a29      	ldr	r2, [pc, #164]	@ (80041a0 <TIM_Base_SetConfig+0x154>)
 80040fa:	4293      	cmp	r3, r2
 80040fc:	d108      	bne.n	8004110 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004104:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	68fa      	ldr	r2, [r7, #12]
 800410c:	4313      	orrs	r3, r2
 800410e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004116:	683b      	ldr	r3, [r7, #0]
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	68fa      	ldr	r2, [r7, #12]
 8004122:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	689a      	ldr	r2, [r3, #8]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a10      	ldr	r2, [pc, #64]	@ (8004178 <TIM_Base_SetConfig+0x12c>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d003      	beq.n	8004144 <TIM_Base_SetConfig+0xf8>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <TIM_Base_SetConfig+0x13c>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d103      	bne.n	800414c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	691a      	ldr	r2, [r3, #16]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	2201      	movs	r2, #1
 8004150:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	691b      	ldr	r3, [r3, #16]
 8004156:	f003 0301 	and.w	r3, r3, #1
 800415a:	2b01      	cmp	r3, #1
 800415c:	d105      	bne.n	800416a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	691b      	ldr	r3, [r3, #16]
 8004162:	f023 0201 	bic.w	r2, r3, #1
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	611a      	str	r2, [r3, #16]
  }
}
 800416a:	bf00      	nop
 800416c:	3714      	adds	r7, #20
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr
 8004176:	bf00      	nop
 8004178:	40010000 	.word	0x40010000
 800417c:	40000400 	.word	0x40000400
 8004180:	40000800 	.word	0x40000800
 8004184:	40000c00 	.word	0x40000c00
 8004188:	40010400 	.word	0x40010400
 800418c:	40014000 	.word	0x40014000
 8004190:	40014400 	.word	0x40014400
 8004194:	40014800 	.word	0x40014800
 8004198:	40001800 	.word	0x40001800
 800419c:	40001c00 	.word	0x40001c00
 80041a0:	40002000 	.word	0x40002000

080041a4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b087      	sub	sp, #28
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]
 80041ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a1b      	ldr	r3, [r3, #32]
 80041b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6a1b      	ldr	r3, [r3, #32]
 80041b8:	f023 0201 	bic.w	r2, r3, #1
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	685b      	ldr	r3, [r3, #4]
 80041c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	699b      	ldr	r3, [r3, #24]
 80041ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	68fa      	ldr	r2, [r7, #12]
 80041e2:	4313      	orrs	r3, r2
 80041e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80041e6:	697b      	ldr	r3, [r7, #20]
 80041e8:	f023 0302 	bic.w	r3, r3, #2
 80041ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041ee:	683b      	ldr	r3, [r7, #0]
 80041f0:	689b      	ldr	r3, [r3, #8]
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	4a20      	ldr	r2, [pc, #128]	@ (800427c <TIM_OC1_SetConfig+0xd8>)
 80041fc:	4293      	cmp	r3, r2
 80041fe:	d003      	beq.n	8004208 <TIM_OC1_SetConfig+0x64>
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a1f      	ldr	r2, [pc, #124]	@ (8004280 <TIM_OC1_SetConfig+0xdc>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d10c      	bne.n	8004222 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	f023 0308 	bic.w	r3, r3, #8
 800420e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68db      	ldr	r3, [r3, #12]
 8004214:	697a      	ldr	r2, [r7, #20]
 8004216:	4313      	orrs	r3, r2
 8004218:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800421a:	697b      	ldr	r3, [r7, #20]
 800421c:	f023 0304 	bic.w	r3, r3, #4
 8004220:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a15      	ldr	r2, [pc, #84]	@ (800427c <TIM_OC1_SetConfig+0xd8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <TIM_OC1_SetConfig+0x8e>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a14      	ldr	r2, [pc, #80]	@ (8004280 <TIM_OC1_SetConfig+0xdc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d111      	bne.n	8004256 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004232:	693b      	ldr	r3, [r7, #16]
 8004234:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004238:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004240:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	695b      	ldr	r3, [r3, #20]
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	693a      	ldr	r2, [r7, #16]
 800425a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	68fa      	ldr	r2, [r7, #12]
 8004260:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	697a      	ldr	r2, [r7, #20]
 800426e:	621a      	str	r2, [r3, #32]
}
 8004270:	bf00      	nop
 8004272:	371c      	adds	r7, #28
 8004274:	46bd      	mov	sp, r7
 8004276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427a:	4770      	bx	lr
 800427c:	40010000 	.word	0x40010000
 8004280:	40010400 	.word	0x40010400

08004284 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004284:	b480      	push	{r7}
 8004286:	b087      	sub	sp, #28
 8004288:	af00      	add	r7, sp, #0
 800428a:	6078      	str	r0, [r7, #4]
 800428c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	6a1b      	ldr	r3, [r3, #32]
 8004292:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6a1b      	ldr	r3, [r3, #32]
 8004298:	f023 0210 	bic.w	r2, r3, #16
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	699b      	ldr	r3, [r3, #24]
 80042aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80042b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	021b      	lsls	r3, r3, #8
 80042c2:	68fa      	ldr	r2, [r7, #12]
 80042c4:	4313      	orrs	r3, r2
 80042c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	f023 0320 	bic.w	r3, r3, #32
 80042ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	689b      	ldr	r3, [r3, #8]
 80042d4:	011b      	lsls	r3, r3, #4
 80042d6:	697a      	ldr	r2, [r7, #20]
 80042d8:	4313      	orrs	r3, r2
 80042da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	4a22      	ldr	r2, [pc, #136]	@ (8004368 <TIM_OC2_SetConfig+0xe4>)
 80042e0:	4293      	cmp	r3, r2
 80042e2:	d003      	beq.n	80042ec <TIM_OC2_SetConfig+0x68>
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a21      	ldr	r2, [pc, #132]	@ (800436c <TIM_OC2_SetConfig+0xe8>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d10d      	bne.n	8004308 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	68db      	ldr	r3, [r3, #12]
 80042f8:	011b      	lsls	r3, r3, #4
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004306:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	4a17      	ldr	r2, [pc, #92]	@ (8004368 <TIM_OC2_SetConfig+0xe4>)
 800430c:	4293      	cmp	r3, r2
 800430e:	d003      	beq.n	8004318 <TIM_OC2_SetConfig+0x94>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a16      	ldr	r2, [pc, #88]	@ (800436c <TIM_OC2_SetConfig+0xe8>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d113      	bne.n	8004340 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004318:	693b      	ldr	r3, [r7, #16]
 800431a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800431e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004320:	693b      	ldr	r3, [r7, #16]
 8004322:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004326:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	695b      	ldr	r3, [r3, #20]
 800432c:	009b      	lsls	r3, r3, #2
 800432e:	693a      	ldr	r2, [r7, #16]
 8004330:	4313      	orrs	r3, r2
 8004332:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	699b      	ldr	r3, [r3, #24]
 8004338:	009b      	lsls	r3, r3, #2
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4313      	orrs	r3, r2
 800433e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	693a      	ldr	r2, [r7, #16]
 8004344:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	68fa      	ldr	r2, [r7, #12]
 800434a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	697a      	ldr	r2, [r7, #20]
 8004358:	621a      	str	r2, [r3, #32]
}
 800435a:	bf00      	nop
 800435c:	371c      	adds	r7, #28
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	40010000 	.word	0x40010000
 800436c:	40010400 	.word	0x40010400

08004370 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004370:	b480      	push	{r7}
 8004372:	b087      	sub	sp, #28
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
 8004378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6a1b      	ldr	r3, [r3, #32]
 800437e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a1b      	ldr	r3, [r3, #32]
 8004384:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	69db      	ldr	r3, [r3, #28]
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800439e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	f023 0303 	bic.w	r3, r3, #3
 80043a6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	4313      	orrs	r3, r2
 80043b0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80043b2:	697b      	ldr	r3, [r7, #20]
 80043b4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80043b8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	021b      	lsls	r3, r3, #8
 80043c0:	697a      	ldr	r2, [r7, #20]
 80043c2:	4313      	orrs	r3, r2
 80043c4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a21      	ldr	r2, [pc, #132]	@ (8004450 <TIM_OC3_SetConfig+0xe0>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d003      	beq.n	80043d6 <TIM_OC3_SetConfig+0x66>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a20      	ldr	r2, [pc, #128]	@ (8004454 <TIM_OC3_SetConfig+0xe4>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d10d      	bne.n	80043f2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80043d6:	697b      	ldr	r3, [r7, #20]
 80043d8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80043dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	021b      	lsls	r3, r3, #8
 80043e4:	697a      	ldr	r2, [r7, #20]
 80043e6:	4313      	orrs	r3, r2
 80043e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80043ea:	697b      	ldr	r3, [r7, #20]
 80043ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	4a16      	ldr	r2, [pc, #88]	@ (8004450 <TIM_OC3_SetConfig+0xe0>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d003      	beq.n	8004402 <TIM_OC3_SetConfig+0x92>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	4a15      	ldr	r2, [pc, #84]	@ (8004454 <TIM_OC3_SetConfig+0xe4>)
 80043fe:	4293      	cmp	r3, r2
 8004400:	d113      	bne.n	800442a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004408:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800440a:	693b      	ldr	r3, [r7, #16]
 800440c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004410:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	695b      	ldr	r3, [r3, #20]
 8004416:	011b      	lsls	r3, r3, #4
 8004418:	693a      	ldr	r2, [r7, #16]
 800441a:	4313      	orrs	r3, r2
 800441c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	699b      	ldr	r3, [r3, #24]
 8004422:	011b      	lsls	r3, r3, #4
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	4313      	orrs	r3, r2
 8004428:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	693a      	ldr	r2, [r7, #16]
 800442e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	68fa      	ldr	r2, [r7, #12]
 8004434:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr
 8004450:	40010000 	.word	0x40010000
 8004454:	40010400 	.word	0x40010400

08004458 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004458:	b480      	push	{r7}
 800445a:	b087      	sub	sp, #28
 800445c:	af00      	add	r7, sp, #0
 800445e:	6078      	str	r0, [r7, #4]
 8004460:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6a1b      	ldr	r3, [r3, #32]
 800446c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004486:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800448e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	021b      	lsls	r3, r3, #8
 8004496:	68fa      	ldr	r2, [r7, #12]
 8004498:	4313      	orrs	r3, r2
 800449a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800449c:	693b      	ldr	r3, [r7, #16]
 800449e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044a2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	031b      	lsls	r3, r3, #12
 80044aa:	693a      	ldr	r2, [r7, #16]
 80044ac:	4313      	orrs	r3, r2
 80044ae:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a12      	ldr	r2, [pc, #72]	@ (80044fc <TIM_OC4_SetConfig+0xa4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_OC4_SetConfig+0x68>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a11      	ldr	r2, [pc, #68]	@ (8004500 <TIM_OC4_SetConfig+0xa8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d109      	bne.n	80044d4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80044c0:	697b      	ldr	r3, [r7, #20]
 80044c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80044c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	695b      	ldr	r3, [r3, #20]
 80044cc:	019b      	lsls	r3, r3, #6
 80044ce:	697a      	ldr	r2, [r7, #20]
 80044d0:	4313      	orrs	r3, r2
 80044d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	68fa      	ldr	r2, [r7, #12]
 80044de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685a      	ldr	r2, [r3, #4]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	693a      	ldr	r2, [r7, #16]
 80044ec:	621a      	str	r2, [r3, #32]
}
 80044ee:	bf00      	nop
 80044f0:	371c      	adds	r7, #28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr
 80044fa:	bf00      	nop
 80044fc:	40010000 	.word	0x40010000
 8004500:	40010400 	.word	0x40010400

08004504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004504:	b480      	push	{r7}
 8004506:	b087      	sub	sp, #28
 8004508:	af00      	add	r7, sp, #0
 800450a:	60f8      	str	r0, [r7, #12]
 800450c:	60b9      	str	r1, [r7, #8]
 800450e:	607a      	str	r2, [r7, #4]
 8004510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	6a1b      	ldr	r3, [r3, #32]
 800451c:	f023 0201 	bic.w	r2, r3, #1
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	699b      	ldr	r3, [r3, #24]
 8004528:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	4a28      	ldr	r2, [pc, #160]	@ (80045d0 <TIM_TI1_SetConfig+0xcc>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d01b      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004538:	d017      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	4a25      	ldr	r2, [pc, #148]	@ (80045d4 <TIM_TI1_SetConfig+0xd0>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d013      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	4a24      	ldr	r2, [pc, #144]	@ (80045d8 <TIM_TI1_SetConfig+0xd4>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00f      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	4a23      	ldr	r2, [pc, #140]	@ (80045dc <TIM_TI1_SetConfig+0xd8>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d00b      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	4a22      	ldr	r2, [pc, #136]	@ (80045e0 <TIM_TI1_SetConfig+0xdc>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d007      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4a21      	ldr	r2, [pc, #132]	@ (80045e4 <TIM_TI1_SetConfig+0xe0>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d003      	beq.n	800456a <TIM_TI1_SetConfig+0x66>
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	4a20      	ldr	r2, [pc, #128]	@ (80045e8 <TIM_TI1_SetConfig+0xe4>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d101      	bne.n	800456e <TIM_TI1_SetConfig+0x6a>
 800456a:	2301      	movs	r3, #1
 800456c:	e000      	b.n	8004570 <TIM_TI1_SetConfig+0x6c>
 800456e:	2300      	movs	r3, #0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d008      	beq.n	8004586 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f023 0303 	bic.w	r3, r3, #3
 800457a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800457c:	697a      	ldr	r2, [r7, #20]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	4313      	orrs	r3, r2
 8004582:	617b      	str	r3, [r7, #20]
 8004584:	e003      	b.n	800458e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004586:	697b      	ldr	r3, [r7, #20]
 8004588:	f043 0301 	orr.w	r3, r3, #1
 800458c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004594:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	011b      	lsls	r3, r3, #4
 800459a:	b2db      	uxtb	r3, r3
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	4313      	orrs	r3, r2
 80045a0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	f023 030a 	bic.w	r3, r3, #10
 80045a8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80045aa:	68bb      	ldr	r3, [r7, #8]
 80045ac:	f003 030a 	and.w	r3, r3, #10
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	697a      	ldr	r2, [r7, #20]
 80045ba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	621a      	str	r2, [r3, #32]
}
 80045c2:	bf00      	nop
 80045c4:	371c      	adds	r7, #28
 80045c6:	46bd      	mov	sp, r7
 80045c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	40010000 	.word	0x40010000
 80045d4:	40000400 	.word	0x40000400
 80045d8:	40000800 	.word	0x40000800
 80045dc:	40000c00 	.word	0x40000c00
 80045e0:	40010400 	.word	0x40010400
 80045e4:	40014000 	.word	0x40014000
 80045e8:	40001800 	.word	0x40001800

080045ec <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045ec:	b480      	push	{r7}
 80045ee:	b087      	sub	sp, #28
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	60f8      	str	r0, [r7, #12]
 80045f4:	60b9      	str	r1, [r7, #8]
 80045f6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	6a1b      	ldr	r3, [r3, #32]
 80045fc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	6a1b      	ldr	r3, [r3, #32]
 8004602:	f023 0201 	bic.w	r2, r3, #1
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	699b      	ldr	r3, [r3, #24]
 800460e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004616:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	011b      	lsls	r3, r3, #4
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f023 030a 	bic.w	r3, r3, #10
 8004628:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	68bb      	ldr	r3, [r7, #8]
 800462e:	4313      	orrs	r3, r2
 8004630:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	697a      	ldr	r2, [r7, #20]
 800463c:	621a      	str	r2, [r3, #32]
}
 800463e:	bf00      	nop
 8004640:	371c      	adds	r7, #28
 8004642:	46bd      	mov	sp, r7
 8004644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004648:	4770      	bx	lr

0800464a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800464a:	b480      	push	{r7}
 800464c:	b087      	sub	sp, #28
 800464e:	af00      	add	r7, sp, #0
 8004650:	60f8      	str	r0, [r7, #12]
 8004652:	60b9      	str	r1, [r7, #8]
 8004654:	607a      	str	r2, [r7, #4]
 8004656:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6a1b      	ldr	r3, [r3, #32]
 800465c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	f023 0210 	bic.w	r2, r3, #16
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	699b      	ldr	r3, [r3, #24]
 800466e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004676:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	021b      	lsls	r3, r3, #8
 800467c:	693a      	ldr	r2, [r7, #16]
 800467e:	4313      	orrs	r3, r2
 8004680:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004688:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	031b      	lsls	r3, r3, #12
 800468e:	b29b      	uxth	r3, r3
 8004690:	693a      	ldr	r2, [r7, #16]
 8004692:	4313      	orrs	r3, r2
 8004694:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800469c:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	011b      	lsls	r3, r3, #4
 80046a2:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	621a      	str	r2, [r3, #32]
}
 80046b8:	bf00      	nop
 80046ba:	371c      	adds	r7, #28
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b087      	sub	sp, #28
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	60f8      	str	r0, [r7, #12]
 80046cc:	60b9      	str	r1, [r7, #8]
 80046ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	6a1b      	ldr	r3, [r3, #32]
 80046d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0210 	bic.w	r2, r3, #16
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80046e8:	693b      	ldr	r3, [r7, #16]
 80046ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	031b      	lsls	r3, r3, #12
 80046f4:	693a      	ldr	r2, [r7, #16]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004700:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004702:	68bb      	ldr	r3, [r7, #8]
 8004704:	011b      	lsls	r3, r3, #4
 8004706:	697a      	ldr	r2, [r7, #20]
 8004708:	4313      	orrs	r3, r2
 800470a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	693a      	ldr	r2, [r7, #16]
 8004710:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	621a      	str	r2, [r3, #32]
}
 8004718:	bf00      	nop
 800471a:	371c      	adds	r7, #28
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004724:	b480      	push	{r7}
 8004726:	b087      	sub	sp, #28
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
 8004730:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	6a1b      	ldr	r3, [r3, #32]
 8004736:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	6a1b      	ldr	r3, [r3, #32]
 800473c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	69db      	ldr	r3, [r3, #28]
 8004748:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800474a:	693b      	ldr	r3, [r7, #16]
 800474c:	f023 0303 	bic.w	r3, r3, #3
 8004750:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004752:	693a      	ldr	r2, [r7, #16]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4313      	orrs	r3, r2
 8004758:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004760:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	011b      	lsls	r3, r3, #4
 8004766:	b2db      	uxtb	r3, r3
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004774:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	021b      	lsls	r3, r3, #8
 800477a:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 800477e:	697a      	ldr	r2, [r7, #20]
 8004780:	4313      	orrs	r3, r2
 8004782:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	697a      	ldr	r2, [r7, #20]
 800478e:	621a      	str	r2, [r3, #32]
}
 8004790:	bf00      	nop
 8004792:	371c      	adds	r7, #28
 8004794:	46bd      	mov	sp, r7
 8004796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479a:	4770      	bx	lr

0800479c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800479c:	b480      	push	{r7}
 800479e:	b087      	sub	sp, #28
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
 80047a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	6a1b      	ldr	r3, [r3, #32]
 80047ae:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6a1b      	ldr	r3, [r3, #32]
 80047b4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	69db      	ldr	r3, [r3, #28]
 80047c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047c8:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	021b      	lsls	r3, r3, #8
 80047ce:	693a      	ldr	r2, [r7, #16]
 80047d0:	4313      	orrs	r3, r2
 80047d2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80047d4:	693b      	ldr	r3, [r7, #16]
 80047d6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80047da:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	031b      	lsls	r3, r3, #12
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	693a      	ldr	r2, [r7, #16]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80047e8:	697b      	ldr	r3, [r7, #20]
 80047ea:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80047ee:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047f0:	68bb      	ldr	r3, [r7, #8]
 80047f2:	031b      	lsls	r3, r3, #12
 80047f4:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80047f8:	697a      	ldr	r2, [r7, #20]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	693a      	ldr	r2, [r7, #16]
 8004802:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	697a      	ldr	r2, [r7, #20]
 8004808:	621a      	str	r2, [r3, #32]
}
 800480a:	bf00      	nop
 800480c:	371c      	adds	r7, #28
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr

08004816 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004816:	b480      	push	{r7}
 8004818:	b085      	sub	sp, #20
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800482c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	4313      	orrs	r3, r2
 8004834:	f043 0307 	orr.w	r3, r3, #7
 8004838:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	609a      	str	r2, [r3, #8]
}
 8004840:	bf00      	nop
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr

0800484c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800484c:	b480      	push	{r7}
 800484e:	b087      	sub	sp, #28
 8004850:	af00      	add	r7, sp, #0
 8004852:	60f8      	str	r0, [r7, #12]
 8004854:	60b9      	str	r1, [r7, #8]
 8004856:	607a      	str	r2, [r7, #4]
 8004858:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004860:	697b      	ldr	r3, [r7, #20]
 8004862:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004866:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	021a      	lsls	r2, r3, #8
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	431a      	orrs	r2, r3
 8004870:	68bb      	ldr	r3, [r7, #8]
 8004872:	4313      	orrs	r3, r2
 8004874:	697a      	ldr	r2, [r7, #20]
 8004876:	4313      	orrs	r3, r2
 8004878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	609a      	str	r2, [r3, #8]
}
 8004880:	bf00      	nop
 8004882:	371c      	adds	r7, #28
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr

0800488c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800488c:	b480      	push	{r7}
 800488e:	b085      	sub	sp, #20
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800489c:	2b01      	cmp	r3, #1
 800489e:	d101      	bne.n	80048a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80048a0:	2302      	movs	r3, #2
 80048a2:	e05a      	b.n	800495a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2202      	movs	r2, #2
 80048b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	689b      	ldr	r3, [r3, #8]
 80048c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	68fa      	ldr	r2, [r7, #12]
 80048d2:	4313      	orrs	r3, r2
 80048d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68fa      	ldr	r2, [r7, #12]
 80048dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	4a21      	ldr	r2, [pc, #132]	@ (8004968 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80048e4:	4293      	cmp	r3, r2
 80048e6:	d022      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048f0:	d01d      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4a1d      	ldr	r2, [pc, #116]	@ (800496c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048f8:	4293      	cmp	r3, r2
 80048fa:	d018      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004902:	4293      	cmp	r3, r2
 8004904:	d013      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	4a1a      	ldr	r2, [pc, #104]	@ (8004974 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800490c:	4293      	cmp	r3, r2
 800490e:	d00e      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4a18      	ldr	r2, [pc, #96]	@ (8004978 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004916:	4293      	cmp	r3, r2
 8004918:	d009      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a17      	ldr	r2, [pc, #92]	@ (800497c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004920:	4293      	cmp	r3, r2
 8004922:	d004      	beq.n	800492e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	4a15      	ldr	r2, [pc, #84]	@ (8004980 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800492a:	4293      	cmp	r3, r2
 800492c:	d10c      	bne.n	8004948 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004934:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	685b      	ldr	r3, [r3, #4]
 800493a:	68ba      	ldr	r2, [r7, #8]
 800493c:	4313      	orrs	r3, r2
 800493e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	68ba      	ldr	r2, [r7, #8]
 8004946:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2201      	movs	r2, #1
 800494c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2200      	movs	r2, #0
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004958:	2300      	movs	r3, #0
}
 800495a:	4618      	mov	r0, r3
 800495c:	3714      	adds	r7, #20
 800495e:	46bd      	mov	sp, r7
 8004960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004964:	4770      	bx	lr
 8004966:	bf00      	nop
 8004968:	40010000 	.word	0x40010000
 800496c:	40000400 	.word	0x40000400
 8004970:	40000800 	.word	0x40000800
 8004974:	40000c00 	.word	0x40000c00
 8004978:	40010400 	.word	0x40010400
 800497c:	40014000 	.word	0x40014000
 8004980:	40001800 	.word	0x40001800

08004984 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004984:	b480      	push	{r7}
 8004986:	b085      	sub	sp, #20
 8004988:	af00      	add	r7, sp, #0
 800498a:	6078      	str	r0, [r7, #4]
 800498c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800498e:	2300      	movs	r3, #0
 8004990:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004998:	2b01      	cmp	r3, #1
 800499a:	d101      	bne.n	80049a0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800499c:	2302      	movs	r3, #2
 800499e:	e03d      	b.n	8004a1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2201      	movs	r2, #1
 80049a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80049ae:	683b      	ldr	r3, [r7, #0]
 80049b0:	68db      	ldr	r3, [r3, #12]
 80049b2:	4313      	orrs	r3, r2
 80049b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80049bc:	683b      	ldr	r3, [r7, #0]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4313      	orrs	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	691b      	ldr	r3, [r3, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	4313      	orrs	r3, r2
 80049fa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	69db      	ldr	r3, [r3, #28]
 8004a06:	4313      	orrs	r3, r2
 8004a08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	68fa      	ldr	r2, [r7, #12]
 8004a10:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b083      	sub	sp, #12
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a30:	bf00      	nop
 8004a32:	370c      	adds	r7, #12
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr

08004a3c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a3c:	b480      	push	{r7}
 8004a3e:	b083      	sub	sp, #12
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a44:	bf00      	nop
 8004a46:	370c      	adds	r7, #12
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a50:	b580      	push	{r7, lr}
 8004a52:	b082      	sub	sp, #8
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d101      	bne.n	8004a62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a5e:	2301      	movs	r3, #1
 8004a60:	e042      	b.n	8004ae8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a68:	b2db      	uxtb	r3, r3
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d106      	bne.n	8004a7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	2200      	movs	r2, #0
 8004a72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	f7fc ff8a 	bl	8001990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2224      	movs	r2, #36	@ 0x24
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	68da      	ldr	r2, [r3, #12]
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 fdbd 	bl	8005614 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	691a      	ldr	r2, [r3, #16]
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004aa8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	695a      	ldr	r2, [r3, #20]
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004ab8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	68da      	ldr	r2, [r3, #12]
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004ac8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2220      	movs	r2, #32
 8004ad4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2220      	movs	r2, #32
 8004adc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3708      	adds	r7, #8
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b08a      	sub	sp, #40	@ 0x28
 8004af4:	af02      	add	r7, sp, #8
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	603b      	str	r3, [r7, #0]
 8004afc:	4613      	mov	r3, r2
 8004afe:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b00:	2300      	movs	r3, #0
 8004b02:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b0a:	b2db      	uxtb	r3, r3
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d175      	bne.n	8004bfc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b10:	68bb      	ldr	r3, [r7, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d002      	beq.n	8004b1c <HAL_UART_Transmit+0x2c>
 8004b16:	88fb      	ldrh	r3, [r7, #6]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d101      	bne.n	8004b20 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	e06e      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2200      	movs	r2, #0
 8004b24:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	2221      	movs	r2, #33	@ 0x21
 8004b2a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b2e:	f7fd f883 	bl	8001c38 <HAL_GetTick>
 8004b32:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	88fa      	ldrh	r2, [r7, #6]
 8004b38:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	88fa      	ldrh	r2, [r7, #6]
 8004b3e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b48:	d108      	bne.n	8004b5c <HAL_UART_Transmit+0x6c>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d104      	bne.n	8004b5c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004b52:	2300      	movs	r3, #0
 8004b54:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	61bb      	str	r3, [r7, #24]
 8004b5a:	e003      	b.n	8004b64 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b60:	2300      	movs	r3, #0
 8004b62:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b64:	e02e      	b.n	8004bc4 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	9300      	str	r3, [sp, #0]
 8004b6a:	697b      	ldr	r3, [r7, #20]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	2180      	movs	r1, #128	@ 0x80
 8004b70:	68f8      	ldr	r0, [r7, #12]
 8004b72:	f000 fb1f 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8004b76:	4603      	mov	r3, r0
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d005      	beq.n	8004b88 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2220      	movs	r2, #32
 8004b80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e03a      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004b88:	69fb      	ldr	r3, [r7, #28]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10b      	bne.n	8004ba6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004b8e:	69bb      	ldr	r3, [r7, #24]
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b9c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004b9e:	69bb      	ldr	r3, [r7, #24]
 8004ba0:	3302      	adds	r3, #2
 8004ba2:	61bb      	str	r3, [r7, #24]
 8004ba4:	e007      	b.n	8004bb6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004ba6:	69fb      	ldr	r3, [r7, #28]
 8004ba8:	781a      	ldrb	r2, [r3, #0]
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bba:	b29b      	uxth	r3, r3
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	b29a      	uxth	r2, r3
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004bc8:	b29b      	uxth	r3, r3
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1cb      	bne.n	8004b66 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	9300      	str	r3, [sp, #0]
 8004bd2:	697b      	ldr	r3, [r7, #20]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	2140      	movs	r1, #64	@ 0x40
 8004bd8:	68f8      	ldr	r0, [r7, #12]
 8004bda:	f000 faeb 	bl	80051b4 <UART_WaitOnFlagUntilTimeout>
 8004bde:	4603      	mov	r3, r0
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d005      	beq.n	8004bf0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	e006      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2220      	movs	r2, #32
 8004bf4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3720      	adds	r7, #32
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}

08004c06 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004c06:	b580      	push	{r7, lr}
 8004c08:	b084      	sub	sp, #16
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	60f8      	str	r0, [r7, #12]
 8004c0e:	60b9      	str	r1, [r7, #8]
 8004c10:	4613      	mov	r3, r2
 8004c12:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004c1a:	b2db      	uxtb	r3, r3
 8004c1c:	2b20      	cmp	r3, #32
 8004c1e:	d112      	bne.n	8004c46 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004c20:	68bb      	ldr	r3, [r7, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d002      	beq.n	8004c2c <HAL_UART_Receive_IT+0x26>
 8004c26:	88fb      	ldrh	r3, [r7, #6]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d101      	bne.n	8004c30 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e00b      	b.n	8004c48 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004c36:	88fb      	ldrh	r3, [r7, #6]
 8004c38:	461a      	mov	r2, r3
 8004c3a:	68b9      	ldr	r1, [r7, #8]
 8004c3c:	68f8      	ldr	r0, [r7, #12]
 8004c3e:	f000 fb12 	bl	8005266 <UART_Start_Receive_IT>
 8004c42:	4603      	mov	r3, r0
 8004c44:	e000      	b.n	8004c48 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004c46:	2302      	movs	r3, #2
  }
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3710      	adds	r7, #16
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b0ba      	sub	sp, #232	@ 0xe8
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68db      	ldr	r3, [r3, #12]
 8004c68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	695b      	ldr	r3, [r3, #20]
 8004c72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c76:	2300      	movs	r3, #0
 8004c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c7c:	2300      	movs	r3, #0
 8004c7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c86:	f003 030f 	and.w	r3, r3, #15
 8004c8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d10f      	bne.n	8004cb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9a:	f003 0320 	and.w	r3, r3, #32
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d009      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x66>
 8004ca2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ca6:	f003 0320 	and.w	r3, r3, #32
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d003      	beq.n	8004cb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004cae:	6878      	ldr	r0, [r7, #4]
 8004cb0:	f000 fbf2 	bl	8005498 <UART_Receive_IT>
      return;
 8004cb4:	e25b      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004cb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	f000 80de 	beq.w	8004e7c <HAL_UART_IRQHandler+0x22c>
 8004cc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cc4:	f003 0301 	and.w	r3, r3, #1
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d106      	bne.n	8004cda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ccc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	f000 80d1 	beq.w	8004e7c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xae>
 8004ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cf6:	f043 0201 	orr.w	r2, r3, #1
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d02:	f003 0304 	and.w	r3, r3, #4
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d00b      	beq.n	8004d22 <HAL_UART_IRQHandler+0xd2>
 8004d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d0e:	f003 0301 	and.w	r3, r3, #1
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d005      	beq.n	8004d22 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d1a:	f043 0202 	orr.w	r2, r3, #2
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d00b      	beq.n	8004d46 <HAL_UART_IRQHandler+0xf6>
 8004d2e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d32:	f003 0301 	and.w	r3, r3, #1
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d005      	beq.n	8004d46 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d3e:	f043 0204 	orr.w	r2, r3, #4
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004d46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f003 0308 	and.w	r3, r3, #8
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d011      	beq.n	8004d76 <HAL_UART_IRQHandler+0x126>
 8004d52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d56:	f003 0320 	and.w	r3, r3, #32
 8004d5a:	2b00      	cmp	r3, #0
 8004d5c:	d105      	bne.n	8004d6a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d5e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004d62:	f003 0301 	and.w	r3, r3, #1
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d005      	beq.n	8004d76 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d6e:	f043 0208 	orr.w	r2, r3, #8
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	f000 81f2 	beq.w	8005164 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d84:	f003 0320 	and.w	r3, r3, #32
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d008      	beq.n	8004d9e <HAL_UART_IRQHandler+0x14e>
 8004d8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d90:	f003 0320 	and.w	r3, r3, #32
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d98:	6878      	ldr	r0, [r7, #4]
 8004d9a:	f000 fb7d 	bl	8005498 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	695b      	ldr	r3, [r3, #20]
 8004da4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004da8:	2b40      	cmp	r3, #64	@ 0x40
 8004daa:	bf0c      	ite	eq
 8004dac:	2301      	moveq	r3, #1
 8004dae:	2300      	movne	r3, #0
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004dba:	f003 0308 	and.w	r3, r3, #8
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d103      	bne.n	8004dca <HAL_UART_IRQHandler+0x17a>
 8004dc2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d04f      	beq.n	8004e6a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 fa85 	bl	80052da <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004dda:	2b40      	cmp	r3, #64	@ 0x40
 8004ddc:	d141      	bne.n	8004e62 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	3314      	adds	r3, #20
 8004de4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004de8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004dec:	e853 3f00 	ldrex	r3, [r3]
 8004df0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004df4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004df8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004dfc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	681b      	ldr	r3, [r3, #0]
 8004e04:	3314      	adds	r3, #20
 8004e06:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004e0a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004e0e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e12:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004e16:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004e1a:	e841 2300 	strex	r3, r2, [r1]
 8004e1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004e22:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1d9      	bne.n	8004dde <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d013      	beq.n	8004e5a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e36:	4a7e      	ldr	r2, [pc, #504]	@ (8005030 <HAL_UART_IRQHandler+0x3e0>)
 8004e38:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e3e:	4618      	mov	r0, r3
 8004e40:	f7fd fb98 	bl	8002574 <HAL_DMA_Abort_IT>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004e50:	687a      	ldr	r2, [r7, #4]
 8004e52:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004e54:	4610      	mov	r0, r2
 8004e56:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e58:	e00e      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e5a:	6878      	ldr	r0, [r7, #4]
 8004e5c:	f000 f994 	bl	8005188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e60:	e00a      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f000 f990 	bl	8005188 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e68:	e006      	b.n	8004e78 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e6a:	6878      	ldr	r0, [r7, #4]
 8004e6c:	f000 f98c 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2200      	movs	r2, #0
 8004e74:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e76:	e175      	b.n	8005164 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e78:	bf00      	nop
    return;
 8004e7a:	e173      	b.n	8005164 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	f040 814f 	bne.w	8005124 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e8a:	f003 0310 	and.w	r3, r3, #16
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	f000 8148 	beq.w	8005124 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e94:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e98:	f003 0310 	and.w	r3, r3, #16
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	f000 8141 	beq.w	8005124 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60bb      	str	r3, [r7, #8]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	60bb      	str	r3, [r7, #8]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	685b      	ldr	r3, [r3, #4]
 8004eb4:	60bb      	str	r3, [r7, #8]
 8004eb6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	695b      	ldr	r3, [r3, #20]
 8004ebe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ec2:	2b40      	cmp	r3, #64	@ 0x40
 8004ec4:	f040 80b6 	bne.w	8005034 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ed4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 8145 	beq.w	8005168 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004ee2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	f080 813e 	bcs.w	8005168 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004ef2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ef8:	69db      	ldr	r3, [r3, #28]
 8004efa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004efe:	f000 8088 	beq.w	8005012 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	330c      	adds	r3, #12
 8004f08:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004f18:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004f1c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004f20:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	330c      	adds	r3, #12
 8004f2a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004f2e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f32:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f36:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004f3a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004f3e:	e841 2300 	strex	r3, r2, [r1]
 8004f42:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004f46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1d9      	bne.n	8004f02 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	3314      	adds	r3, #20
 8004f54:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f56:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004f58:	e853 3f00 	ldrex	r3, [r3]
 8004f5c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004f5e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004f60:	f023 0301 	bic.w	r3, r3, #1
 8004f64:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	3314      	adds	r3, #20
 8004f6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004f72:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f76:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f78:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f7a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f7e:	e841 2300 	strex	r3, r2, [r1]
 8004f82:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f84:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d1e1      	bne.n	8004f4e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	3314      	adds	r3, #20
 8004f90:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f92:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f94:	e853 3f00 	ldrex	r3, [r3]
 8004f98:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f9c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004fa0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	3314      	adds	r3, #20
 8004faa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004fae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004fb0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004fb4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004fb6:	e841 2300 	strex	r3, r2, [r1]
 8004fba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004fbc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d1e3      	bne.n	8004f8a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	2220      	movs	r2, #32
 8004fc6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	2200      	movs	r2, #0
 8004fce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	330c      	adds	r3, #12
 8004fd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004fda:	e853 3f00 	ldrex	r3, [r3]
 8004fde:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004fe0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004fe2:	f023 0310 	bic.w	r3, r3, #16
 8004fe6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	330c      	adds	r3, #12
 8004ff0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ff4:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004ff6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ff8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004ffa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004ffc:	e841 2300 	strex	r3, r2, [r1]
 8005000:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005002:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1e3      	bne.n	8004fd0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800500c:	4618      	mov	r0, r3
 800500e:	f7fd fa41 	bl	8002494 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2202      	movs	r2, #2
 8005016:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005020:	b29b      	uxth	r3, r3
 8005022:	1ad3      	subs	r3, r2, r3
 8005024:	b29b      	uxth	r3, r3
 8005026:	4619      	mov	r1, r3
 8005028:	6878      	ldr	r0, [r7, #4]
 800502a:	f000 f8b7 	bl	800519c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800502e:	e09b      	b.n	8005168 <HAL_UART_IRQHandler+0x518>
 8005030:	080053a1 	.word	0x080053a1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800503c:	b29b      	uxth	r3, r3
 800503e:	1ad3      	subs	r3, r2, r3
 8005040:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005048:	b29b      	uxth	r3, r3
 800504a:	2b00      	cmp	r3, #0
 800504c:	f000 808e 	beq.w	800516c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005050:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005054:	2b00      	cmp	r3, #0
 8005056:	f000 8089 	beq.w	800516c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	330c      	adds	r3, #12
 8005060:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005062:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005064:	e853 3f00 	ldrex	r3, [r3]
 8005068:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800506a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800506c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005070:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	330c      	adds	r3, #12
 800507a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800507e:	647a      	str	r2, [r7, #68]	@ 0x44
 8005080:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005082:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005084:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005086:	e841 2300 	strex	r3, r2, [r1]
 800508a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800508c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800508e:	2b00      	cmp	r3, #0
 8005090:	d1e3      	bne.n	800505a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	3314      	adds	r3, #20
 8005098:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800509a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800509c:	e853 3f00 	ldrex	r3, [r3]
 80050a0:	623b      	str	r3, [r7, #32]
   return(result);
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	f023 0301 	bic.w	r3, r3, #1
 80050a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	3314      	adds	r3, #20
 80050b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80050b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80050b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80050bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050be:	e841 2300 	strex	r3, r2, [r1]
 80050c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80050c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d1e3      	bne.n	8005092 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	2220      	movs	r2, #32
 80050ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	2200      	movs	r2, #0
 80050d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	330c      	adds	r3, #12
 80050de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e0:	693b      	ldr	r3, [r7, #16]
 80050e2:	e853 3f00 	ldrex	r3, [r3]
 80050e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f023 0310 	bic.w	r3, r3, #16
 80050ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	330c      	adds	r3, #12
 80050f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80050fc:	61fa      	str	r2, [r7, #28]
 80050fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005100:	69b9      	ldr	r1, [r7, #24]
 8005102:	69fa      	ldr	r2, [r7, #28]
 8005104:	e841 2300 	strex	r3, r2, [r1]
 8005108:	617b      	str	r3, [r7, #20]
   return(result);
 800510a:	697b      	ldr	r3, [r7, #20]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d1e3      	bne.n	80050d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2202      	movs	r2, #2
 8005114:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005116:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800511a:	4619      	mov	r1, r3
 800511c:	6878      	ldr	r0, [r7, #4]
 800511e:	f000 f83d 	bl	800519c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005122:	e023      	b.n	800516c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005124:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005128:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800512c:	2b00      	cmp	r3, #0
 800512e:	d009      	beq.n	8005144 <HAL_UART_IRQHandler+0x4f4>
 8005130:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005134:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005138:	2b00      	cmp	r3, #0
 800513a:	d003      	beq.n	8005144 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800513c:	6878      	ldr	r0, [r7, #4]
 800513e:	f000 f943 	bl	80053c8 <UART_Transmit_IT>
    return;
 8005142:	e014      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005148:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800514c:	2b00      	cmp	r3, #0
 800514e:	d00e      	beq.n	800516e <HAL_UART_IRQHandler+0x51e>
 8005150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005158:	2b00      	cmp	r3, #0
 800515a:	d008      	beq.n	800516e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800515c:	6878      	ldr	r0, [r7, #4]
 800515e:	f000 f983 	bl	8005468 <UART_EndTransmit_IT>
    return;
 8005162:	e004      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
    return;
 8005164:	bf00      	nop
 8005166:	e002      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
      return;
 8005168:	bf00      	nop
 800516a:	e000      	b.n	800516e <HAL_UART_IRQHandler+0x51e>
      return;
 800516c:	bf00      	nop
  }
}
 800516e:	37e8      	adds	r7, #232	@ 0xe8
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005174:	b480      	push	{r7}
 8005176:	b083      	sub	sp, #12
 8005178:	af00      	add	r7, sp, #0
 800517a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800517c:	bf00      	nop
 800517e:	370c      	adds	r7, #12
 8005180:	46bd      	mov	sp, r7
 8005182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005186:	4770      	bx	lr

08005188 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b086      	sub	sp, #24
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	603b      	str	r3, [r7, #0]
 80051c0:	4613      	mov	r3, r2
 80051c2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051c4:	e03b      	b.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051cc:	d037      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ce:	f7fc fd33 	bl	8001c38 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	683b      	ldr	r3, [r7, #0]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	6a3a      	ldr	r2, [r7, #32]
 80051da:	429a      	cmp	r2, r3
 80051dc:	d302      	bcc.n	80051e4 <UART_WaitOnFlagUntilTimeout+0x30>
 80051de:	6a3b      	ldr	r3, [r7, #32]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d101      	bne.n	80051e8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80051e4:	2303      	movs	r3, #3
 80051e6:	e03a      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	f003 0304 	and.w	r3, r3, #4
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d023      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	2b80      	cmp	r3, #128	@ 0x80
 80051fa:	d020      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
 80051fc:	68bb      	ldr	r3, [r7, #8]
 80051fe:	2b40      	cmp	r3, #64	@ 0x40
 8005200:	d01d      	beq.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f003 0308 	and.w	r3, r3, #8
 800520c:	2b08      	cmp	r3, #8
 800520e:	d116      	bne.n	800523e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005210:	2300      	movs	r3, #0
 8005212:	617b      	str	r3, [r7, #20]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	617b      	str	r3, [r7, #20]
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	685b      	ldr	r3, [r3, #4]
 8005222:	617b      	str	r3, [r7, #20]
 8005224:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005226:	68f8      	ldr	r0, [r7, #12]
 8005228:	f000 f857 	bl	80052da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	2208      	movs	r2, #8
 8005230:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	2200      	movs	r2, #0
 8005236:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e00f      	b.n	800525e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	681a      	ldr	r2, [r3, #0]
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	4013      	ands	r3, r2
 8005248:	68ba      	ldr	r2, [r7, #8]
 800524a:	429a      	cmp	r2, r3
 800524c:	bf0c      	ite	eq
 800524e:	2301      	moveq	r3, #1
 8005250:	2300      	movne	r3, #0
 8005252:	b2db      	uxtb	r3, r3
 8005254:	461a      	mov	r2, r3
 8005256:	79fb      	ldrb	r3, [r7, #7]
 8005258:	429a      	cmp	r2, r3
 800525a:	d0b4      	beq.n	80051c6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800525c:	2300      	movs	r3, #0
}
 800525e:	4618      	mov	r0, r3
 8005260:	3718      	adds	r7, #24
 8005262:	46bd      	mov	sp, r7
 8005264:	bd80      	pop	{r7, pc}

08005266 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005266:	b480      	push	{r7}
 8005268:	b085      	sub	sp, #20
 800526a:	af00      	add	r7, sp, #0
 800526c:	60f8      	str	r0, [r7, #12]
 800526e:	60b9      	str	r1, [r7, #8]
 8005270:	4613      	mov	r3, r2
 8005272:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	68ba      	ldr	r2, [r7, #8]
 8005278:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	88fa      	ldrh	r2, [r7, #6]
 8005284:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	2222      	movs	r2, #34	@ 0x22
 8005290:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	691b      	ldr	r3, [r3, #16]
 8005298:	2b00      	cmp	r3, #0
 800529a:	d007      	beq.n	80052ac <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	68da      	ldr	r2, [r3, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80052aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80052ac:	68fb      	ldr	r3, [r7, #12]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	695a      	ldr	r2, [r3, #20]
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f042 0201 	orr.w	r2, r2, #1
 80052ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	68da      	ldr	r2, [r3, #12]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f042 0220 	orr.w	r2, r2, #32
 80052ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052cc:	2300      	movs	r3, #0
}
 80052ce:	4618      	mov	r0, r3
 80052d0:	3714      	adds	r7, #20
 80052d2:	46bd      	mov	sp, r7
 80052d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d8:	4770      	bx	lr

080052da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052da:	b480      	push	{r7}
 80052dc:	b095      	sub	sp, #84	@ 0x54
 80052de:	af00      	add	r7, sp, #0
 80052e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	330c      	adds	r3, #12
 80052e8:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052ec:	e853 3f00 	ldrex	r3, [r3]
 80052f0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052f4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052f8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	330c      	adds	r3, #12
 8005300:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005302:	643a      	str	r2, [r7, #64]	@ 0x40
 8005304:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005306:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005308:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800530a:	e841 2300 	strex	r3, r2, [r1]
 800530e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005310:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1e5      	bne.n	80052e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	3314      	adds	r3, #20
 800531c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	6a3b      	ldr	r3, [r7, #32]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	61fb      	str	r3, [r7, #28]
   return(result);
 8005326:	69fb      	ldr	r3, [r7, #28]
 8005328:	f023 0301 	bic.w	r3, r3, #1
 800532c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	3314      	adds	r3, #20
 8005334:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005336:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005338:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800533c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534e:	2b01      	cmp	r3, #1
 8005350:	d119      	bne.n	8005386 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	330c      	adds	r3, #12
 8005358:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	e853 3f00 	ldrex	r3, [r3]
 8005360:	60bb      	str	r3, [r7, #8]
   return(result);
 8005362:	68bb      	ldr	r3, [r7, #8]
 8005364:	f023 0310 	bic.w	r3, r3, #16
 8005368:	647b      	str	r3, [r7, #68]	@ 0x44
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	330c      	adds	r3, #12
 8005370:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005372:	61ba      	str	r2, [r7, #24]
 8005374:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005376:	6979      	ldr	r1, [r7, #20]
 8005378:	69ba      	ldr	r2, [r7, #24]
 800537a:	e841 2300 	strex	r3, r2, [r1]
 800537e:	613b      	str	r3, [r7, #16]
   return(result);
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	2b00      	cmp	r3, #0
 8005384:	d1e5      	bne.n	8005352 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	2220      	movs	r2, #32
 800538a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2200      	movs	r2, #0
 8005392:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005394:	bf00      	nop
 8005396:	3754      	adds	r7, #84	@ 0x54
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr

080053a0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b084      	sub	sp, #16
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	2200      	movs	r2, #0
 80053b2:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	2200      	movs	r2, #0
 80053b8:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80053ba:	68f8      	ldr	r0, [r7, #12]
 80053bc:	f7ff fee4 	bl	8005188 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053c0:	bf00      	nop
 80053c2:	3710      	adds	r7, #16
 80053c4:	46bd      	mov	sp, r7
 80053c6:	bd80      	pop	{r7, pc}

080053c8 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053c8:	b480      	push	{r7}
 80053ca:	b085      	sub	sp, #20
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053d6:	b2db      	uxtb	r3, r3
 80053d8:	2b21      	cmp	r3, #33	@ 0x21
 80053da:	d13e      	bne.n	800545a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	689b      	ldr	r3, [r3, #8]
 80053e0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053e4:	d114      	bne.n	8005410 <UART_Transmit_IT+0x48>
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	691b      	ldr	r3, [r3, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d110      	bne.n	8005410 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	6a1b      	ldr	r3, [r3, #32]
 80053f2:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	881b      	ldrh	r3, [r3, #0]
 80053f8:	461a      	mov	r2, r3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005402:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	6a1b      	ldr	r3, [r3, #32]
 8005408:	1c9a      	adds	r2, r3, #2
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	621a      	str	r2, [r3, #32]
 800540e:	e008      	b.n	8005422 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	6a1b      	ldr	r3, [r3, #32]
 8005414:	1c59      	adds	r1, r3, #1
 8005416:	687a      	ldr	r2, [r7, #4]
 8005418:	6211      	str	r1, [r2, #32]
 800541a:	781a      	ldrb	r2, [r3, #0]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005426:	b29b      	uxth	r3, r3
 8005428:	3b01      	subs	r3, #1
 800542a:	b29b      	uxth	r3, r3
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4619      	mov	r1, r3
 8005430:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005432:	2b00      	cmp	r3, #0
 8005434:	d10f      	bne.n	8005456 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68da      	ldr	r2, [r3, #12]
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005444:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	68da      	ldr	r2, [r3, #12]
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005454:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	e000      	b.n	800545c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800545a:	2302      	movs	r3, #2
  }
}
 800545c:	4618      	mov	r0, r3
 800545e:	3714      	adds	r7, #20
 8005460:	46bd      	mov	sp, r7
 8005462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005466:	4770      	bx	lr

08005468 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005468:	b580      	push	{r7, lr}
 800546a:	b082      	sub	sp, #8
 800546c:	af00      	add	r7, sp, #0
 800546e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	68da      	ldr	r2, [r3, #12]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800547e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2220      	movs	r2, #32
 8005484:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f7ff fe73 	bl	8005174 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800548e:	2300      	movs	r3, #0
}
 8005490:	4618      	mov	r0, r3
 8005492:	3708      	adds	r7, #8
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}

08005498 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b08c      	sub	sp, #48	@ 0x30
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054a6:	b2db      	uxtb	r3, r3
 80054a8:	2b22      	cmp	r3, #34	@ 0x22
 80054aa:	f040 80ae 	bne.w	800560a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	689b      	ldr	r3, [r3, #8]
 80054b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054b6:	d117      	bne.n	80054e8 <UART_Receive_IT+0x50>
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	691b      	ldr	r3, [r3, #16]
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d113      	bne.n	80054e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054c0:	2300      	movs	r3, #0
 80054c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	685b      	ldr	r3, [r3, #4]
 80054d0:	b29b      	uxth	r3, r3
 80054d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054d6:	b29a      	uxth	r2, r3
 80054d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054e0:	1c9a      	adds	r2, r3, #2
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80054e6:	e026      	b.n	8005536 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80054ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80054ee:	2300      	movs	r3, #0
 80054f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80054fa:	d007      	beq.n	800550c <UART_Receive_IT+0x74>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d10a      	bne.n	800551a <UART_Receive_IT+0x82>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	691b      	ldr	r3, [r3, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d106      	bne.n	800551a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	685b      	ldr	r3, [r3, #4]
 8005512:	b2da      	uxtb	r2, r3
 8005514:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005516:	701a      	strb	r2, [r3, #0]
 8005518:	e008      	b.n	800552c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	b2db      	uxtb	r3, r3
 8005522:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005526:	b2da      	uxtb	r2, r3
 8005528:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800552a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005530:	1c5a      	adds	r2, r3, #1
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29b      	uxth	r3, r3
 8005540:	687a      	ldr	r2, [r7, #4]
 8005542:	4619      	mov	r1, r3
 8005544:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005546:	2b00      	cmp	r3, #0
 8005548:	d15d      	bne.n	8005606 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	68da      	ldr	r2, [r3, #12]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f022 0220 	bic.w	r2, r2, #32
 8005558:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68da      	ldr	r2, [r3, #12]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005568:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695a      	ldr	r2, [r3, #20]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0201 	bic.w	r2, r2, #1
 8005578:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2220      	movs	r2, #32
 800557e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	2200      	movs	r2, #0
 8005586:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800558c:	2b01      	cmp	r3, #1
 800558e:	d135      	bne.n	80055fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	2200      	movs	r2, #0
 8005594:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	330c      	adds	r3, #12
 800559c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	e853 3f00 	ldrex	r3, [r3]
 80055a4:	613b      	str	r3, [r7, #16]
   return(result);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	f023 0310 	bic.w	r3, r3, #16
 80055ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	330c      	adds	r3, #12
 80055b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80055b6:	623a      	str	r2, [r7, #32]
 80055b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80055ba:	69f9      	ldr	r1, [r7, #28]
 80055bc:	6a3a      	ldr	r2, [r7, #32]
 80055be:	e841 2300 	strex	r3, r2, [r1]
 80055c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80055c4:	69bb      	ldr	r3, [r7, #24]
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d1e5      	bne.n	8005596 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0310 	and.w	r3, r3, #16
 80055d4:	2b10      	cmp	r3, #16
 80055d6:	d10a      	bne.n	80055ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055d8:	2300      	movs	r3, #0
 80055da:	60fb      	str	r3, [r7, #12]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	60fb      	str	r3, [r7, #12]
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	60fb      	str	r3, [r7, #12]
 80055ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80055f2:	4619      	mov	r1, r3
 80055f4:	6878      	ldr	r0, [r7, #4]
 80055f6:	f7ff fdd1 	bl	800519c <HAL_UARTEx_RxEventCallback>
 80055fa:	e002      	b.n	8005602 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055fc:	6878      	ldr	r0, [r7, #4]
 80055fe:	f7fa ff63 	bl	80004c8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005602:	2300      	movs	r3, #0
 8005604:	e002      	b.n	800560c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005606:	2300      	movs	r3, #0
 8005608:	e000      	b.n	800560c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800560a:	2302      	movs	r3, #2
  }
}
 800560c:	4618      	mov	r0, r3
 800560e:	3730      	adds	r7, #48	@ 0x30
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005614:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005618:	b0c0      	sub	sp, #256	@ 0x100
 800561a:	af00      	add	r7, sp, #0
 800561c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	691b      	ldr	r3, [r3, #16]
 8005628:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800562c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005630:	68d9      	ldr	r1, [r3, #12]
 8005632:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	ea40 0301 	orr.w	r3, r0, r1
 800563c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800563e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005648:	691b      	ldr	r3, [r3, #16]
 800564a:	431a      	orrs	r2, r3
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	431a      	orrs	r2, r3
 8005654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005658:	69db      	ldr	r3, [r3, #28]
 800565a:	4313      	orrs	r3, r2
 800565c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800566c:	f021 010c 	bic.w	r1, r1, #12
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	681a      	ldr	r2, [r3, #0]
 8005676:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800567a:	430b      	orrs	r3, r1
 800567c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800567e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800568a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800568e:	6999      	ldr	r1, [r3, #24]
 8005690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005694:	681a      	ldr	r2, [r3, #0]
 8005696:	ea40 0301 	orr.w	r3, r0, r1
 800569a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800569c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a0:	681a      	ldr	r2, [r3, #0]
 80056a2:	4b8f      	ldr	r3, [pc, #572]	@ (80058e0 <UART_SetConfig+0x2cc>)
 80056a4:	429a      	cmp	r2, r3
 80056a6:	d005      	beq.n	80056b4 <UART_SetConfig+0xa0>
 80056a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ac:	681a      	ldr	r2, [r3, #0]
 80056ae:	4b8d      	ldr	r3, [pc, #564]	@ (80058e4 <UART_SetConfig+0x2d0>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d104      	bne.n	80056be <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80056b4:	f7fd ffd0 	bl	8003658 <HAL_RCC_GetPCLK2Freq>
 80056b8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80056bc:	e003      	b.n	80056c6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80056be:	f7fd ffb7 	bl	8003630 <HAL_RCC_GetPCLK1Freq>
 80056c2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ca:	69db      	ldr	r3, [r3, #28]
 80056cc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80056d0:	f040 810c 	bne.w	80058ec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056d8:	2200      	movs	r2, #0
 80056da:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80056de:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80056e2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80056e6:	4622      	mov	r2, r4
 80056e8:	462b      	mov	r3, r5
 80056ea:	1891      	adds	r1, r2, r2
 80056ec:	65b9      	str	r1, [r7, #88]	@ 0x58
 80056ee:	415b      	adcs	r3, r3
 80056f0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80056f2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80056f6:	4621      	mov	r1, r4
 80056f8:	eb12 0801 	adds.w	r8, r2, r1
 80056fc:	4629      	mov	r1, r5
 80056fe:	eb43 0901 	adc.w	r9, r3, r1
 8005702:	f04f 0200 	mov.w	r2, #0
 8005706:	f04f 0300 	mov.w	r3, #0
 800570a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800570e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005712:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005716:	4690      	mov	r8, r2
 8005718:	4699      	mov	r9, r3
 800571a:	4623      	mov	r3, r4
 800571c:	eb18 0303 	adds.w	r3, r8, r3
 8005720:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005724:	462b      	mov	r3, r5
 8005726:	eb49 0303 	adc.w	r3, r9, r3
 800572a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800573a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800573e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005742:	460b      	mov	r3, r1
 8005744:	18db      	adds	r3, r3, r3
 8005746:	653b      	str	r3, [r7, #80]	@ 0x50
 8005748:	4613      	mov	r3, r2
 800574a:	eb42 0303 	adc.w	r3, r2, r3
 800574e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005750:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005754:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005758:	f7fa fd3e 	bl	80001d8 <__aeabi_uldivmod>
 800575c:	4602      	mov	r2, r0
 800575e:	460b      	mov	r3, r1
 8005760:	4b61      	ldr	r3, [pc, #388]	@ (80058e8 <UART_SetConfig+0x2d4>)
 8005762:	fba3 2302 	umull	r2, r3, r3, r2
 8005766:	095b      	lsrs	r3, r3, #5
 8005768:	011c      	lsls	r4, r3, #4
 800576a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800576e:	2200      	movs	r2, #0
 8005770:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005774:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005778:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800577c:	4642      	mov	r2, r8
 800577e:	464b      	mov	r3, r9
 8005780:	1891      	adds	r1, r2, r2
 8005782:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005784:	415b      	adcs	r3, r3
 8005786:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005788:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800578c:	4641      	mov	r1, r8
 800578e:	eb12 0a01 	adds.w	sl, r2, r1
 8005792:	4649      	mov	r1, r9
 8005794:	eb43 0b01 	adc.w	fp, r3, r1
 8005798:	f04f 0200 	mov.w	r2, #0
 800579c:	f04f 0300 	mov.w	r3, #0
 80057a0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80057a4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80057a8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80057ac:	4692      	mov	sl, r2
 80057ae:	469b      	mov	fp, r3
 80057b0:	4643      	mov	r3, r8
 80057b2:	eb1a 0303 	adds.w	r3, sl, r3
 80057b6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057ba:	464b      	mov	r3, r9
 80057bc:	eb4b 0303 	adc.w	r3, fp, r3
 80057c0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	2200      	movs	r2, #0
 80057cc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80057d0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80057d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80057d8:	460b      	mov	r3, r1
 80057da:	18db      	adds	r3, r3, r3
 80057dc:	643b      	str	r3, [r7, #64]	@ 0x40
 80057de:	4613      	mov	r3, r2
 80057e0:	eb42 0303 	adc.w	r3, r2, r3
 80057e4:	647b      	str	r3, [r7, #68]	@ 0x44
 80057e6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80057ea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80057ee:	f7fa fcf3 	bl	80001d8 <__aeabi_uldivmod>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4611      	mov	r1, r2
 80057f8:	4b3b      	ldr	r3, [pc, #236]	@ (80058e8 <UART_SetConfig+0x2d4>)
 80057fa:	fba3 2301 	umull	r2, r3, r3, r1
 80057fe:	095b      	lsrs	r3, r3, #5
 8005800:	2264      	movs	r2, #100	@ 0x64
 8005802:	fb02 f303 	mul.w	r3, r2, r3
 8005806:	1acb      	subs	r3, r1, r3
 8005808:	00db      	lsls	r3, r3, #3
 800580a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800580e:	4b36      	ldr	r3, [pc, #216]	@ (80058e8 <UART_SetConfig+0x2d4>)
 8005810:	fba3 2302 	umull	r2, r3, r3, r2
 8005814:	095b      	lsrs	r3, r3, #5
 8005816:	005b      	lsls	r3, r3, #1
 8005818:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800581c:	441c      	add	r4, r3
 800581e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005822:	2200      	movs	r2, #0
 8005824:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005828:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800582c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005830:	4642      	mov	r2, r8
 8005832:	464b      	mov	r3, r9
 8005834:	1891      	adds	r1, r2, r2
 8005836:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005838:	415b      	adcs	r3, r3
 800583a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800583c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005840:	4641      	mov	r1, r8
 8005842:	1851      	adds	r1, r2, r1
 8005844:	6339      	str	r1, [r7, #48]	@ 0x30
 8005846:	4649      	mov	r1, r9
 8005848:	414b      	adcs	r3, r1
 800584a:	637b      	str	r3, [r7, #52]	@ 0x34
 800584c:	f04f 0200 	mov.w	r2, #0
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005858:	4659      	mov	r1, fp
 800585a:	00cb      	lsls	r3, r1, #3
 800585c:	4651      	mov	r1, sl
 800585e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005862:	4651      	mov	r1, sl
 8005864:	00ca      	lsls	r2, r1, #3
 8005866:	4610      	mov	r0, r2
 8005868:	4619      	mov	r1, r3
 800586a:	4603      	mov	r3, r0
 800586c:	4642      	mov	r2, r8
 800586e:	189b      	adds	r3, r3, r2
 8005870:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005874:	464b      	mov	r3, r9
 8005876:	460a      	mov	r2, r1
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800588c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005890:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005894:	460b      	mov	r3, r1
 8005896:	18db      	adds	r3, r3, r3
 8005898:	62bb      	str	r3, [r7, #40]	@ 0x28
 800589a:	4613      	mov	r3, r2
 800589c:	eb42 0303 	adc.w	r3, r2, r3
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80058a2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80058a6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80058aa:	f7fa fc95 	bl	80001d8 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <UART_SetConfig+0x2d4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	@ 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	3332      	adds	r3, #50	@ 0x32
 80058c6:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <UART_SetConfig+0x2d4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 0207 	and.w	r2, r3, #7
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4422      	add	r2, r4
 80058da:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058dc:	e106      	b.n	8005aec <UART_SetConfig+0x4d8>
 80058de:	bf00      	nop
 80058e0:	40011000 	.word	0x40011000
 80058e4:	40011400 	.word	0x40011400
 80058e8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80058f0:	2200      	movs	r2, #0
 80058f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80058f6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80058fa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80058fe:	4642      	mov	r2, r8
 8005900:	464b      	mov	r3, r9
 8005902:	1891      	adds	r1, r2, r2
 8005904:	6239      	str	r1, [r7, #32]
 8005906:	415b      	adcs	r3, r3
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
 800590a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800590e:	4641      	mov	r1, r8
 8005910:	1854      	adds	r4, r2, r1
 8005912:	4649      	mov	r1, r9
 8005914:	eb43 0501 	adc.w	r5, r3, r1
 8005918:	f04f 0200 	mov.w	r2, #0
 800591c:	f04f 0300 	mov.w	r3, #0
 8005920:	00eb      	lsls	r3, r5, #3
 8005922:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005926:	00e2      	lsls	r2, r4, #3
 8005928:	4614      	mov	r4, r2
 800592a:	461d      	mov	r5, r3
 800592c:	4643      	mov	r3, r8
 800592e:	18e3      	adds	r3, r4, r3
 8005930:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005934:	464b      	mov	r3, r9
 8005936:	eb45 0303 	adc.w	r3, r5, r3
 800593a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800593e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005942:	685b      	ldr	r3, [r3, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800594a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800594e:	f04f 0200 	mov.w	r2, #0
 8005952:	f04f 0300 	mov.w	r3, #0
 8005956:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800595a:	4629      	mov	r1, r5
 800595c:	008b      	lsls	r3, r1, #2
 800595e:	4621      	mov	r1, r4
 8005960:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005964:	4621      	mov	r1, r4
 8005966:	008a      	lsls	r2, r1, #2
 8005968:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800596c:	f7fa fc34 	bl	80001d8 <__aeabi_uldivmod>
 8005970:	4602      	mov	r2, r0
 8005972:	460b      	mov	r3, r1
 8005974:	4b60      	ldr	r3, [pc, #384]	@ (8005af8 <UART_SetConfig+0x4e4>)
 8005976:	fba3 2302 	umull	r2, r3, r3, r2
 800597a:	095b      	lsrs	r3, r3, #5
 800597c:	011c      	lsls	r4, r3, #4
 800597e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005982:	2200      	movs	r2, #0
 8005984:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005988:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800598c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005990:	4642      	mov	r2, r8
 8005992:	464b      	mov	r3, r9
 8005994:	1891      	adds	r1, r2, r2
 8005996:	61b9      	str	r1, [r7, #24]
 8005998:	415b      	adcs	r3, r3
 800599a:	61fb      	str	r3, [r7, #28]
 800599c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059a0:	4641      	mov	r1, r8
 80059a2:	1851      	adds	r1, r2, r1
 80059a4:	6139      	str	r1, [r7, #16]
 80059a6:	4649      	mov	r1, r9
 80059a8:	414b      	adcs	r3, r1
 80059aa:	617b      	str	r3, [r7, #20]
 80059ac:	f04f 0200 	mov.w	r2, #0
 80059b0:	f04f 0300 	mov.w	r3, #0
 80059b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80059b8:	4659      	mov	r1, fp
 80059ba:	00cb      	lsls	r3, r1, #3
 80059bc:	4651      	mov	r1, sl
 80059be:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059c2:	4651      	mov	r1, sl
 80059c4:	00ca      	lsls	r2, r1, #3
 80059c6:	4610      	mov	r0, r2
 80059c8:	4619      	mov	r1, r3
 80059ca:	4603      	mov	r3, r0
 80059cc:	4642      	mov	r2, r8
 80059ce:	189b      	adds	r3, r3, r2
 80059d0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80059d4:	464b      	mov	r3, r9
 80059d6:	460a      	mov	r2, r1
 80059d8:	eb42 0303 	adc.w	r3, r2, r3
 80059dc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80059e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	2200      	movs	r2, #0
 80059e8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80059ea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80059ec:	f04f 0200 	mov.w	r2, #0
 80059f0:	f04f 0300 	mov.w	r3, #0
 80059f4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80059f8:	4649      	mov	r1, r9
 80059fa:	008b      	lsls	r3, r1, #2
 80059fc:	4641      	mov	r1, r8
 80059fe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a02:	4641      	mov	r1, r8
 8005a04:	008a      	lsls	r2, r1, #2
 8005a06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005a0a:	f7fa fbe5 	bl	80001d8 <__aeabi_uldivmod>
 8005a0e:	4602      	mov	r2, r0
 8005a10:	460b      	mov	r3, r1
 8005a12:	4611      	mov	r1, r2
 8005a14:	4b38      	ldr	r3, [pc, #224]	@ (8005af8 <UART_SetConfig+0x4e4>)
 8005a16:	fba3 2301 	umull	r2, r3, r3, r1
 8005a1a:	095b      	lsrs	r3, r3, #5
 8005a1c:	2264      	movs	r2, #100	@ 0x64
 8005a1e:	fb02 f303 	mul.w	r3, r2, r3
 8005a22:	1acb      	subs	r3, r1, r3
 8005a24:	011b      	lsls	r3, r3, #4
 8005a26:	3332      	adds	r3, #50	@ 0x32
 8005a28:	4a33      	ldr	r2, [pc, #204]	@ (8005af8 <UART_SetConfig+0x4e4>)
 8005a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8005a2e:	095b      	lsrs	r3, r3, #5
 8005a30:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005a34:	441c      	add	r4, r3
 8005a36:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	673b      	str	r3, [r7, #112]	@ 0x70
 8005a3e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005a40:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005a44:	4642      	mov	r2, r8
 8005a46:	464b      	mov	r3, r9
 8005a48:	1891      	adds	r1, r2, r2
 8005a4a:	60b9      	str	r1, [r7, #8]
 8005a4c:	415b      	adcs	r3, r3
 8005a4e:	60fb      	str	r3, [r7, #12]
 8005a50:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a54:	4641      	mov	r1, r8
 8005a56:	1851      	adds	r1, r2, r1
 8005a58:	6039      	str	r1, [r7, #0]
 8005a5a:	4649      	mov	r1, r9
 8005a5c:	414b      	adcs	r3, r1
 8005a5e:	607b      	str	r3, [r7, #4]
 8005a60:	f04f 0200 	mov.w	r2, #0
 8005a64:	f04f 0300 	mov.w	r3, #0
 8005a68:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a6c:	4659      	mov	r1, fp
 8005a6e:	00cb      	lsls	r3, r1, #3
 8005a70:	4651      	mov	r1, sl
 8005a72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a76:	4651      	mov	r1, sl
 8005a78:	00ca      	lsls	r2, r1, #3
 8005a7a:	4610      	mov	r0, r2
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4603      	mov	r3, r0
 8005a80:	4642      	mov	r2, r8
 8005a82:	189b      	adds	r3, r3, r2
 8005a84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005a86:	464b      	mov	r3, r9
 8005a88:	460a      	mov	r2, r1
 8005a8a:	eb42 0303 	adc.w	r3, r2, r3
 8005a8e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	2200      	movs	r2, #0
 8005a98:	663b      	str	r3, [r7, #96]	@ 0x60
 8005a9a:	667a      	str	r2, [r7, #100]	@ 0x64
 8005a9c:	f04f 0200 	mov.w	r2, #0
 8005aa0:	f04f 0300 	mov.w	r3, #0
 8005aa4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005aa8:	4649      	mov	r1, r9
 8005aaa:	008b      	lsls	r3, r1, #2
 8005aac:	4641      	mov	r1, r8
 8005aae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ab2:	4641      	mov	r1, r8
 8005ab4:	008a      	lsls	r2, r1, #2
 8005ab6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005aba:	f7fa fb8d 	bl	80001d8 <__aeabi_uldivmod>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	460b      	mov	r3, r1
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	@ (8005af8 <UART_SetConfig+0x4e4>)
 8005ac4:	fba3 1302 	umull	r1, r3, r3, r2
 8005ac8:	095b      	lsrs	r3, r3, #5
 8005aca:	2164      	movs	r1, #100	@ 0x64
 8005acc:	fb01 f303 	mul.w	r3, r1, r3
 8005ad0:	1ad3      	subs	r3, r2, r3
 8005ad2:	011b      	lsls	r3, r3, #4
 8005ad4:	3332      	adds	r3, #50	@ 0x32
 8005ad6:	4a08      	ldr	r2, [pc, #32]	@ (8005af8 <UART_SetConfig+0x4e4>)
 8005ad8:	fba2 2303 	umull	r2, r3, r2, r3
 8005adc:	095b      	lsrs	r3, r3, #5
 8005ade:	f003 020f 	and.w	r2, r3, #15
 8005ae2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4422      	add	r2, r4
 8005aea:	609a      	str	r2, [r3, #8]
}
 8005aec:	bf00      	nop
 8005aee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005af2:	46bd      	mov	sp, r7
 8005af4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005af8:	51eb851f 	.word	0x51eb851f

08005afc <free>:
 8005afc:	4b02      	ldr	r3, [pc, #8]	@ (8005b08 <free+0xc>)
 8005afe:	4601      	mov	r1, r0
 8005b00:	6818      	ldr	r0, [r3, #0]
 8005b02:	f000 b83d 	b.w	8005b80 <_free_r>
 8005b06:	bf00      	nop
 8005b08:	20000010 	.word	0x20000010

08005b0c <__malloc_lock>:
 8005b0c:	4801      	ldr	r0, [pc, #4]	@ (8005b14 <__malloc_lock+0x8>)
 8005b0e:	f000 b835 	b.w	8005b7c <__retarget_lock_acquire_recursive>
 8005b12:	bf00      	nop
 8005b14:	200004bc 	.word	0x200004bc

08005b18 <__malloc_unlock>:
 8005b18:	4801      	ldr	r0, [pc, #4]	@ (8005b20 <__malloc_unlock+0x8>)
 8005b1a:	f000 b830 	b.w	8005b7e <__retarget_lock_release_recursive>
 8005b1e:	bf00      	nop
 8005b20:	200004bc 	.word	0x200004bc

08005b24 <memset>:
 8005b24:	4402      	add	r2, r0
 8005b26:	4603      	mov	r3, r0
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d100      	bne.n	8005b2e <memset+0xa>
 8005b2c:	4770      	bx	lr
 8005b2e:	f803 1b01 	strb.w	r1, [r3], #1
 8005b32:	e7f9      	b.n	8005b28 <memset+0x4>

08005b34 <__libc_init_array>:
 8005b34:	b570      	push	{r4, r5, r6, lr}
 8005b36:	4d0d      	ldr	r5, [pc, #52]	@ (8005b6c <__libc_init_array+0x38>)
 8005b38:	4c0d      	ldr	r4, [pc, #52]	@ (8005b70 <__libc_init_array+0x3c>)
 8005b3a:	1b64      	subs	r4, r4, r5
 8005b3c:	10a4      	asrs	r4, r4, #2
 8005b3e:	2600      	movs	r6, #0
 8005b40:	42a6      	cmp	r6, r4
 8005b42:	d109      	bne.n	8005b58 <__libc_init_array+0x24>
 8005b44:	4d0b      	ldr	r5, [pc, #44]	@ (8005b74 <__libc_init_array+0x40>)
 8005b46:	4c0c      	ldr	r4, [pc, #48]	@ (8005b78 <__libc_init_array+0x44>)
 8005b48:	f000 f864 	bl	8005c14 <_init>
 8005b4c:	1b64      	subs	r4, r4, r5
 8005b4e:	10a4      	asrs	r4, r4, #2
 8005b50:	2600      	movs	r6, #0
 8005b52:	42a6      	cmp	r6, r4
 8005b54:	d105      	bne.n	8005b62 <__libc_init_array+0x2e>
 8005b56:	bd70      	pop	{r4, r5, r6, pc}
 8005b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b5c:	4798      	blx	r3
 8005b5e:	3601      	adds	r6, #1
 8005b60:	e7ee      	b.n	8005b40 <__libc_init_array+0xc>
 8005b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8005b66:	4798      	blx	r3
 8005b68:	3601      	adds	r6, #1
 8005b6a:	e7f2      	b.n	8005b52 <__libc_init_array+0x1e>
 8005b6c:	08005ce0 	.word	0x08005ce0
 8005b70:	08005ce0 	.word	0x08005ce0
 8005b74:	08005ce0 	.word	0x08005ce0
 8005b78:	08005ce4 	.word	0x08005ce4

08005b7c <__retarget_lock_acquire_recursive>:
 8005b7c:	4770      	bx	lr

08005b7e <__retarget_lock_release_recursive>:
 8005b7e:	4770      	bx	lr

08005b80 <_free_r>:
 8005b80:	b538      	push	{r3, r4, r5, lr}
 8005b82:	4605      	mov	r5, r0
 8005b84:	2900      	cmp	r1, #0
 8005b86:	d041      	beq.n	8005c0c <_free_r+0x8c>
 8005b88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005b8c:	1f0c      	subs	r4, r1, #4
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	bfb8      	it	lt
 8005b92:	18e4      	addlt	r4, r4, r3
 8005b94:	f7ff ffba 	bl	8005b0c <__malloc_lock>
 8005b98:	4a1d      	ldr	r2, [pc, #116]	@ (8005c10 <_free_r+0x90>)
 8005b9a:	6813      	ldr	r3, [r2, #0]
 8005b9c:	b933      	cbnz	r3, 8005bac <_free_r+0x2c>
 8005b9e:	6063      	str	r3, [r4, #4]
 8005ba0:	6014      	str	r4, [r2, #0]
 8005ba2:	4628      	mov	r0, r5
 8005ba4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005ba8:	f7ff bfb6 	b.w	8005b18 <__malloc_unlock>
 8005bac:	42a3      	cmp	r3, r4
 8005bae:	d908      	bls.n	8005bc2 <_free_r+0x42>
 8005bb0:	6820      	ldr	r0, [r4, #0]
 8005bb2:	1821      	adds	r1, r4, r0
 8005bb4:	428b      	cmp	r3, r1
 8005bb6:	bf01      	itttt	eq
 8005bb8:	6819      	ldreq	r1, [r3, #0]
 8005bba:	685b      	ldreq	r3, [r3, #4]
 8005bbc:	1809      	addeq	r1, r1, r0
 8005bbe:	6021      	streq	r1, [r4, #0]
 8005bc0:	e7ed      	b.n	8005b9e <_free_r+0x1e>
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	b10b      	cbz	r3, 8005bcc <_free_r+0x4c>
 8005bc8:	42a3      	cmp	r3, r4
 8005bca:	d9fa      	bls.n	8005bc2 <_free_r+0x42>
 8005bcc:	6811      	ldr	r1, [r2, #0]
 8005bce:	1850      	adds	r0, r2, r1
 8005bd0:	42a0      	cmp	r0, r4
 8005bd2:	d10b      	bne.n	8005bec <_free_r+0x6c>
 8005bd4:	6820      	ldr	r0, [r4, #0]
 8005bd6:	4401      	add	r1, r0
 8005bd8:	1850      	adds	r0, r2, r1
 8005bda:	4283      	cmp	r3, r0
 8005bdc:	6011      	str	r1, [r2, #0]
 8005bde:	d1e0      	bne.n	8005ba2 <_free_r+0x22>
 8005be0:	6818      	ldr	r0, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	6053      	str	r3, [r2, #4]
 8005be6:	4408      	add	r0, r1
 8005be8:	6010      	str	r0, [r2, #0]
 8005bea:	e7da      	b.n	8005ba2 <_free_r+0x22>
 8005bec:	d902      	bls.n	8005bf4 <_free_r+0x74>
 8005bee:	230c      	movs	r3, #12
 8005bf0:	602b      	str	r3, [r5, #0]
 8005bf2:	e7d6      	b.n	8005ba2 <_free_r+0x22>
 8005bf4:	6820      	ldr	r0, [r4, #0]
 8005bf6:	1821      	adds	r1, r4, r0
 8005bf8:	428b      	cmp	r3, r1
 8005bfa:	bf04      	itt	eq
 8005bfc:	6819      	ldreq	r1, [r3, #0]
 8005bfe:	685b      	ldreq	r3, [r3, #4]
 8005c00:	6063      	str	r3, [r4, #4]
 8005c02:	bf04      	itt	eq
 8005c04:	1809      	addeq	r1, r1, r0
 8005c06:	6021      	streq	r1, [r4, #0]
 8005c08:	6054      	str	r4, [r2, #4]
 8005c0a:	e7ca      	b.n	8005ba2 <_free_r+0x22>
 8005c0c:	bd38      	pop	{r3, r4, r5, pc}
 8005c0e:	bf00      	nop
 8005c10:	20000380 	.word	0x20000380

08005c14 <_init>:
 8005c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c16:	bf00      	nop
 8005c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c1a:	bc08      	pop	{r3}
 8005c1c:	469e      	mov	lr, r3
 8005c1e:	4770      	bx	lr

08005c20 <_fini>:
 8005c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c22:	bf00      	nop
 8005c24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c26:	bc08      	pop	{r3}
 8005c28:	469e      	mov	lr, r3
 8005c2a:	4770      	bx	lr
