
CEAC_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005b54  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005cdc  08005cdc  00015cdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005cfc  08005cfc  0002002c  2**0
                  CONTENTS
  4 .ARM          00000008  08005cfc  08005cfc  00015cfc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d04  08005d04  0002002c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d04  08005d04  00015d04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d08  08005d08  00015d08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000002c  20000000  08005d0c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002002c  2**0
                  CONTENTS
 10 .bss          00000314  2000002c  2000002c  0002002c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000340  20000340  0002002c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002002c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00010f44  00000000  00000000  0002009f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00002748  00000000  00000000  00030fe3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ec0  00000000  00000000  00033730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000b84  00000000  00000000  000345f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002fa0  00000000  00000000  00035174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000124cd  00000000  00000000  00038114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d7aa0  00000000  00000000  0004a5e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003d64  00000000  00000000  00122084  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  00125de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000002c 	.word	0x2000002c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005cc4 	.word	0x08005cc4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000030 	.word	0x20000030
 80001c4:	08005cc4 	.word	0x08005cc4

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <Motor_Init>:

PWMcontrol servo;
PWMcontrol motor[2];

void Motor_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel1, uint32_t Channel2)
{
 80004c4:	b580      	push	{r7, lr}
 80004c6:	b084      	sub	sp, #16
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
 80004d0:	603b      	str	r3, [r7, #0]
    PWMcontrol->htim = htim;
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	68ba      	ldr	r2, [r7, #8]
 80004d6:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel1;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	b29a      	uxth	r2, r3
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	809a      	strh	r2, [r3, #4]
    PWMcontrol->Channel2 = Channel2;
 80004e0:	683b      	ldr	r3, [r7, #0]
 80004e2:	b29a      	uxth	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	80da      	strh	r2, [r3, #6]
    HAL_TIM_PWM_Start(htim, Channel1);
 80004e8:	6879      	ldr	r1, [r7, #4]
 80004ea:	68b8      	ldr	r0, [r7, #8]
 80004ec:	f003 fa0c 	bl	8003908 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, Channel2);
 80004f0:	6839      	ldr	r1, [r7, #0]
 80004f2:	68b8      	ldr	r0, [r7, #8]
 80004f4:	f003 fa08 	bl	8003908 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 80004f8:	68fb      	ldr	r3, [r7, #12]
 80004fa:	889b      	ldrh	r3, [r3, #4]
 80004fc:	2b00      	cmp	r3, #0
 80004fe:	d105      	bne.n	800050c <Motor_Init+0x48>
 8000500:	68fb      	ldr	r3, [r7, #12]
 8000502:	681b      	ldr	r3, [r3, #0]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2200      	movs	r2, #0
 8000508:	635a      	str	r2, [r3, #52]	; 0x34
 800050a:	e018      	b.n	800053e <Motor_Init+0x7a>
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	889b      	ldrh	r3, [r3, #4]
 8000510:	2b04      	cmp	r3, #4
 8000512:	d105      	bne.n	8000520 <Motor_Init+0x5c>
 8000514:	68fb      	ldr	r3, [r7, #12]
 8000516:	681b      	ldr	r3, [r3, #0]
 8000518:	681a      	ldr	r2, [r3, #0]
 800051a:	2300      	movs	r3, #0
 800051c:	6393      	str	r3, [r2, #56]	; 0x38
 800051e:	e00e      	b.n	800053e <Motor_Init+0x7a>
 8000520:	68fb      	ldr	r3, [r7, #12]
 8000522:	889b      	ldrh	r3, [r3, #4]
 8000524:	2b08      	cmp	r3, #8
 8000526:	d105      	bne.n	8000534 <Motor_Init+0x70>
 8000528:	68fb      	ldr	r3, [r7, #12]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681a      	ldr	r2, [r3, #0]
 800052e:	2300      	movs	r3, #0
 8000530:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000532:	e004      	b.n	800053e <Motor_Init+0x7a>
 8000534:	68fb      	ldr	r3, [r7, #12]
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	681a      	ldr	r2, [r3, #0]
 800053a:	2300      	movs	r3, #0
 800053c:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	88db      	ldrh	r3, [r3, #6]
 8000542:	2b00      	cmp	r3, #0
 8000544:	d105      	bne.n	8000552 <Motor_Init+0x8e>
 8000546:	68fb      	ldr	r3, [r7, #12]
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2200      	movs	r2, #0
 800054e:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8000550:	e019      	b.n	8000586 <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000552:	68fb      	ldr	r3, [r7, #12]
 8000554:	88db      	ldrh	r3, [r3, #6]
 8000556:	2b04      	cmp	r3, #4
 8000558:	d105      	bne.n	8000566 <Motor_Init+0xa2>
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	681a      	ldr	r2, [r3, #0]
 8000560:	2300      	movs	r3, #0
 8000562:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8000564:	e00f      	b.n	8000586 <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	88db      	ldrh	r3, [r3, #6]
 800056a:	2b08      	cmp	r3, #8
 800056c:	d105      	bne.n	800057a <Motor_Init+0xb6>
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	681a      	ldr	r2, [r3, #0]
 8000574:	2300      	movs	r3, #0
 8000576:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 8000578:	e005      	b.n	8000586 <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	681b      	ldr	r3, [r3, #0]
 800057e:	681a      	ldr	r2, [r3, #0]
 8000580:	2300      	movs	r3, #0
 8000582:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8000584:	bf00      	nop
}
 8000586:	3710      	adds	r7, #16
 8000588:	46bd      	mov	sp, r7
 800058a:	bd80      	pop	{r7, pc}

0800058c <Servo_Init>:

void Servo_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t PWM_middle)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b084      	sub	sp, #16
 8000590:	af00      	add	r7, sp, #0
 8000592:	60f8      	str	r0, [r7, #12]
 8000594:	60b9      	str	r1, [r7, #8]
 8000596:	607a      	str	r2, [r7, #4]
 8000598:	807b      	strh	r3, [r7, #2]
    PWMcontrol->htim = htim;
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	68ba      	ldr	r2, [r7, #8]
 800059e:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel;
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	809a      	strh	r2, [r3, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 80005a8:	6879      	ldr	r1, [r7, #4]
 80005aa:	68b8      	ldr	r0, [r7, #8]
 80005ac:	f003 f9ac 	bl	8003908 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	889b      	ldrh	r3, [r3, #4]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d105      	bne.n	80005c4 <Servo_Init+0x38>
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	681b      	ldr	r3, [r3, #0]
 80005be:	887a      	ldrh	r2, [r7, #2]
 80005c0:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 80005c2:	e019      	b.n	80005f8 <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	889b      	ldrh	r3, [r3, #4]
 80005c8:	2b04      	cmp	r3, #4
 80005ca:	d105      	bne.n	80005d8 <Servo_Init+0x4c>
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	681a      	ldr	r2, [r3, #0]
 80005d2:	887b      	ldrh	r3, [r7, #2]
 80005d4:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 80005d6:	e00f      	b.n	80005f8 <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80005d8:	68fb      	ldr	r3, [r7, #12]
 80005da:	889b      	ldrh	r3, [r3, #4]
 80005dc:	2b08      	cmp	r3, #8
 80005de:	d105      	bne.n	80005ec <Servo_Init+0x60>
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	681a      	ldr	r2, [r3, #0]
 80005e6:	887b      	ldrh	r3, [r7, #2]
 80005e8:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 80005ea:	e005      	b.n	80005f8 <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	887b      	ldrh	r3, [r7, #2]
 80005f4:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 80005f6:	bf00      	nop
}
 80005f8:	3710      	adds	r7, #16
 80005fa:	46bd      	mov	sp, r7
 80005fc:	bd80      	pop	{r7, pc}

080005fe <set_motor>:

void set_motor(PWMcontrol *PWMcontrol, int8_t direction, uint16_t PWM)
{
 80005fe:	b480      	push	{r7}
 8000600:	b083      	sub	sp, #12
 8000602:	af00      	add	r7, sp, #0
 8000604:	6078      	str	r0, [r7, #4]
 8000606:	460b      	mov	r3, r1
 8000608:	70fb      	strb	r3, [r7, #3]
 800060a:	4613      	mov	r3, r2
 800060c:	803b      	strh	r3, [r7, #0]
    if (PWM > MAX_PULSE_WIDTH)
 800060e:	883b      	ldrh	r3, [r7, #0]
 8000610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000614:	d302      	bcc.n	800061c <set_motor+0x1e>
    {
        PWM = MAX_PULSE_WIDTH;
 8000616:	f240 33ff 	movw	r3, #1023	; 0x3ff
 800061a:	803b      	strh	r3, [r7, #0]
    else if (PWM < 0)
    {
        PWM = 0;
    }

    if (direction == BACKWARD)
 800061c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000624:	d146      	bne.n	80006b4 <set_motor+0xb6>
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	889b      	ldrh	r3, [r3, #4]
 800062a:	2b00      	cmp	r3, #0
 800062c:	d105      	bne.n	800063a <set_motor+0x3c>
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	883a      	ldrh	r2, [r7, #0]
 8000636:	635a      	str	r2, [r3, #52]	; 0x34
 8000638:	e018      	b.n	800066c <set_motor+0x6e>
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	2b04      	cmp	r3, #4
 8000640:	d105      	bne.n	800064e <set_motor+0x50>
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	681a      	ldr	r2, [r3, #0]
 8000648:	883b      	ldrh	r3, [r7, #0]
 800064a:	6393      	str	r3, [r2, #56]	; 0x38
 800064c:	e00e      	b.n	800066c <set_motor+0x6e>
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	889b      	ldrh	r3, [r3, #4]
 8000652:	2b08      	cmp	r3, #8
 8000654:	d105      	bne.n	8000662 <set_motor+0x64>
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	883b      	ldrh	r3, [r7, #0]
 800065e:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000660:	e004      	b.n	800066c <set_motor+0x6e>
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	681a      	ldr	r2, [r3, #0]
 8000668:	883b      	ldrh	r3, [r7, #0]
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	88db      	ldrh	r3, [r3, #6]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d105      	bne.n	8000680 <set_motor+0x82>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	2200      	movs	r2, #0
 800067c:	635a      	str	r2, [r3, #52]	; 0x34
    else
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
    }
    return;
 800067e:	e0ab      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	88db      	ldrh	r3, [r3, #6]
 8000684:	2b04      	cmp	r3, #4
 8000686:	d105      	bne.n	8000694 <set_motor+0x96>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	2300      	movs	r3, #0
 8000690:	6393      	str	r3, [r2, #56]	; 0x38
 8000692:	e0a0      	b.n	80007d6 <set_motor+0x1d8>
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	88db      	ldrh	r3, [r3, #6]
 8000698:	2b08      	cmp	r3, #8
 800069a:	d105      	bne.n	80006a8 <set_motor+0xaa>
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	681a      	ldr	r2, [r3, #0]
 80006a2:	2300      	movs	r3, #0
 80006a4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006a6:	e096      	b.n	80007d6 <set_motor+0x1d8>
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	2300      	movs	r3, #0
 80006b0:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 80006b2:	e091      	b.n	80007d8 <set_motor+0x1da>
    else if (direction == FORWARD)
 80006b4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80006b8:	2b01      	cmp	r3, #1
 80006ba:	d146      	bne.n	800074a <set_motor+0x14c>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d105      	bne.n	80006d0 <set_motor+0xd2>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	2200      	movs	r2, #0
 80006cc:	635a      	str	r2, [r3, #52]	; 0x34
 80006ce:	e018      	b.n	8000702 <set_motor+0x104>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	2b04      	cmp	r3, #4
 80006d6:	d105      	bne.n	80006e4 <set_motor+0xe6>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	2300      	movs	r3, #0
 80006e0:	6393      	str	r3, [r2, #56]	; 0x38
 80006e2:	e00e      	b.n	8000702 <set_motor+0x104>
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	889b      	ldrh	r3, [r3, #4]
 80006e8:	2b08      	cmp	r3, #8
 80006ea:	d105      	bne.n	80006f8 <set_motor+0xfa>
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	681a      	ldr	r2, [r3, #0]
 80006f2:	2300      	movs	r3, #0
 80006f4:	63d3      	str	r3, [r2, #60]	; 0x3c
 80006f6:	e004      	b.n	8000702 <set_motor+0x104>
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	2300      	movs	r3, #0
 8000700:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 8000702:	687b      	ldr	r3, [r7, #4]
 8000704:	88db      	ldrh	r3, [r3, #6]
 8000706:	2b00      	cmp	r3, #0
 8000708:	d105      	bne.n	8000716 <set_motor+0x118>
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	883a      	ldrh	r2, [r7, #0]
 8000712:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8000714:	e060      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	88db      	ldrh	r3, [r3, #6]
 800071a:	2b04      	cmp	r3, #4
 800071c:	d105      	bne.n	800072a <set_motor+0x12c>
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	681a      	ldr	r2, [r3, #0]
 8000724:	883b      	ldrh	r3, [r7, #0]
 8000726:	6393      	str	r3, [r2, #56]	; 0x38
 8000728:	e055      	b.n	80007d6 <set_motor+0x1d8>
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	88db      	ldrh	r3, [r3, #6]
 800072e:	2b08      	cmp	r3, #8
 8000730:	d105      	bne.n	800073e <set_motor+0x140>
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	681a      	ldr	r2, [r3, #0]
 8000738:	883b      	ldrh	r3, [r7, #0]
 800073a:	63d3      	str	r3, [r2, #60]	; 0x3c
 800073c:	e04b      	b.n	80007d6 <set_motor+0x1d8>
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	883b      	ldrh	r3, [r7, #0]
 8000746:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8000748:	e046      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	889b      	ldrh	r3, [r3, #4]
 800074e:	2b00      	cmp	r3, #0
 8000750:	d105      	bne.n	800075e <set_motor+0x160>
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	681b      	ldr	r3, [r3, #0]
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	2200      	movs	r2, #0
 800075a:	635a      	str	r2, [r3, #52]	; 0x34
 800075c:	e018      	b.n	8000790 <set_motor+0x192>
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	889b      	ldrh	r3, [r3, #4]
 8000762:	2b04      	cmp	r3, #4
 8000764:	d105      	bne.n	8000772 <set_motor+0x174>
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	681a      	ldr	r2, [r3, #0]
 800076c:	2300      	movs	r3, #0
 800076e:	6393      	str	r3, [r2, #56]	; 0x38
 8000770:	e00e      	b.n	8000790 <set_motor+0x192>
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	889b      	ldrh	r3, [r3, #4]
 8000776:	2b08      	cmp	r3, #8
 8000778:	d105      	bne.n	8000786 <set_motor+0x188>
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	2300      	movs	r3, #0
 8000782:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000784:	e004      	b.n	8000790 <set_motor+0x192>
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	2300      	movs	r3, #0
 800078e:	6413      	str	r3, [r2, #64]	; 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	88db      	ldrh	r3, [r3, #6]
 8000794:	2b00      	cmp	r3, #0
 8000796:	d105      	bne.n	80007a4 <set_motor+0x1a6>
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2200      	movs	r2, #0
 80007a0:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 80007a2:	e019      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	88db      	ldrh	r3, [r3, #6]
 80007a8:	2b04      	cmp	r3, #4
 80007aa:	d105      	bne.n	80007b8 <set_motor+0x1ba>
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	2300      	movs	r3, #0
 80007b4:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 80007b6:	e00f      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	88db      	ldrh	r3, [r3, #6]
 80007bc:	2b08      	cmp	r3, #8
 80007be:	d105      	bne.n	80007cc <set_motor+0x1ce>
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	681a      	ldr	r2, [r3, #0]
 80007c6:	2300      	movs	r3, #0
 80007c8:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 80007ca:	e005      	b.n	80007d8 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	681b      	ldr	r3, [r3, #0]
 80007d0:	681a      	ldr	r2, [r3, #0]
 80007d2:	2300      	movs	r3, #0
 80007d4:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 80007d6:	bf00      	nop
}
 80007d8:	370c      	adds	r7, #12
 80007da:	46bd      	mov	sp, r7
 80007dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e0:	4770      	bx	lr

080007e2 <set_servo>:

void set_servo(PWMcontrol *PWMcontrol, uint16_t PWM)
{
 80007e2:	b480      	push	{r7}
 80007e4:	b083      	sub	sp, #12
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	807b      	strh	r3, [r7, #2]
    // }
    // else if (PWM < SERVO_MIN_PULSE)
    // {
    //     PWM = SERVO_MIN_PULSE;
    // }
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d105      	bne.n	8000802 <set_servo+0x20>
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	887a      	ldrh	r2, [r7, #2]
 80007fe:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8000800:	e019      	b.n	8000836 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	889b      	ldrh	r3, [r3, #4]
 8000806:	2b04      	cmp	r3, #4
 8000808:	d105      	bne.n	8000816 <set_servo+0x34>
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	681b      	ldr	r3, [r3, #0]
 800080e:	681a      	ldr	r2, [r3, #0]
 8000810:	887b      	ldrh	r3, [r7, #2]
 8000812:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8000814:	e00f      	b.n	8000836 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	889b      	ldrh	r3, [r3, #4]
 800081a:	2b08      	cmp	r3, #8
 800081c:	d105      	bne.n	800082a <set_servo+0x48>
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	681a      	ldr	r2, [r3, #0]
 8000824:	887b      	ldrh	r3, [r7, #2]
 8000826:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 8000828:	e005      	b.n	8000836 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	681a      	ldr	r2, [r3, #0]
 8000830:	887b      	ldrh	r3, [r7, #2]
 8000832:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8000834:	bf00      	nop
}
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr

08000840 <HC08_Init>:
    "AT+CONT=?"             // Check connection status
};

// Initialize the HC-08 structure
void HC08_Init(HC08 *hc08, UART_HandleTypeDef *huart)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b082      	sub	sp, #8
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
 8000848:	6039      	str	r1, [r7, #0]
    hc08->huart = huart;                                   // Assign the UART handle
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	683a      	ldr	r2, [r7, #0]
 800084e:	601a      	str	r2, [r3, #0]
    memset(hc08->rev_buffer, 0, sizeof(hc08->rev_buffer)); // Clear the receive buffer
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	3304      	adds	r3, #4
 8000854:	2208      	movs	r2, #8
 8000856:	2100      	movs	r1, #0
 8000858:	4618      	mov	r0, r3
 800085a:	f005 fa07 	bl	8005c6c <memset>
    hc08->rev_flag = 0;                                    // Reset the receive flag
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	2200      	movs	r2, #0
 8000862:	731a      	strb	r2, [r3, #12]
    // default setting
    // HC08_SendCommand(hc08, SET_ROLE_SLAVE);
    // HC08_SendCommand(hc08, SET_CONNECT);
    // HC08_SendCommand(hc08, SET_NAME);

    HAL_UART_Receive_IT(hc08->huart, (uint8_t *)hc08->rev_buffer, sizeof(hc08->rev_buffer));
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	6818      	ldr	r0, [r3, #0]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3304      	adds	r3, #4
 800086c:	2208      	movs	r2, #8
 800086e:	4619      	mov	r1, r3
 8000870:	f004 fad1 	bl	8004e16 <HAL_UART_Receive_IT>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <HC08_ReceiveData>:
    }
}

// Receive data from the HC-08 module
void HC08_ReceiveData(HC08 *hc08, char *data)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
 8000884:	6039      	str	r1, [r7, #0]
    HAL_UART_Receive_IT(hc08->huart, (uint8_t *)data, sizeof(data)); // Start receiving in interrupt mode
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	2204      	movs	r2, #4
 800088c:	6839      	ldr	r1, [r7, #0]
 800088e:	4618      	mov	r0, r3
 8000890:	f004 fac1 	bl	8004e16 <HAL_UART_Receive_IT>
}
 8000894:	bf00      	nop
 8000896:	3708      	adds	r7, #8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}

0800089c <reset_state>:

void reset_state()
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
    set_motor(&motor[1], FORWARD, 0);
 80008a0:	2200      	movs	r2, #0
 80008a2:	2101      	movs	r1, #1
 80008a4:	4804      	ldr	r0, [pc, #16]	; (80008b8 <reset_state+0x1c>)
 80008a6:	f7ff feaa 	bl	80005fe <set_motor>
    set_servo(&servo, 530);
 80008aa:	f240 2112 	movw	r1, #530	; 0x212
 80008ae:	4803      	ldr	r0, [pc, #12]	; (80008bc <reset_state+0x20>)
 80008b0:	f7ff ff97 	bl	80007e2 <set_servo>
}
 80008b4:	bf00      	nop
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000058 	.word	0x20000058
 80008bc:	20000048 	.word	0x20000048

080008c0 <run_forward>:
void run_forward()
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	af00      	add	r7, sp, #0
    set_motor(&motor[1], FORWARD, 800);
 80008c4:	f44f 7248 	mov.w	r2, #800	; 0x320
 80008c8:	2101      	movs	r1, #1
 80008ca:	4802      	ldr	r0, [pc, #8]	; (80008d4 <run_forward+0x14>)
 80008cc:	f7ff fe97 	bl	80005fe <set_motor>
}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000058 	.word	0x20000058

080008d8 <run_backward>:
void run_backward()
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
    set_motor(&motor[1], BACKWARD, 800);
 80008dc:	f44f 7248 	mov.w	r2, #800	; 0x320
 80008e0:	f04f 31ff 	mov.w	r1, #4294967295
 80008e4:	4802      	ldr	r0, [pc, #8]	; (80008f0 <run_backward+0x18>)
 80008e6:	f7ff fe8a 	bl	80005fe <set_motor>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20000058 	.word	0x20000058

080008f4 <servo_left>:
void servo_left()
{
 80008f4:	b580      	push	{r7, lr}
 80008f6:	af00      	add	r7, sp, #0
    set_servo(&servo, 630);
 80008f8:	f240 2176 	movw	r1, #630	; 0x276
 80008fc:	4802      	ldr	r0, [pc, #8]	; (8000908 <servo_left+0x14>)
 80008fe:	f7ff ff70 	bl	80007e2 <set_servo>
}
 8000902:	bf00      	nop
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000048 	.word	0x20000048

0800090c <servo_right>:
void servo_right()
{
 800090c:	b580      	push	{r7, lr}
 800090e:	af00      	add	r7, sp, #0
    set_servo(&servo, 430);
 8000910:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8000914:	4802      	ldr	r0, [pc, #8]	; (8000920 <servo_right+0x14>)
 8000916:	f7ff ff64 	bl	80007e2 <set_servo>
}
 800091a:	bf00      	nop
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	20000048 	.word	0x20000048

08000924 <HC08_ProcessData>:
// Process the received data
void HC08_ProcessData(HC08 *hc08)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
    if (hc08->rev_flag)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	7b1b      	ldrb	r3, [r3, #12]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d058      	beq.n	80009e6 <HC08_ProcessData+0xc2>
    { // Check if data is received
        // TODO - Process the received data
        
        uint16_t extract_data = 0;
 8000934:	2300      	movs	r3, #0
 8000936:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 3; i++)
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	e012      	b.n	8000964 <HC08_ProcessData+0x40>
        {
            extract_data |= (hc08->rev_buffer[i]) << (i * 4);
 800093e:	687a      	ldr	r2, [r7, #4]
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	4413      	add	r3, r2
 8000944:	3304      	adds	r3, #4
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	461a      	mov	r2, r3
 800094a:	68bb      	ldr	r3, [r7, #8]
 800094c:	009b      	lsls	r3, r3, #2
 800094e:	fa02 f303 	lsl.w	r3, r2, r3
 8000952:	b21a      	sxth	r2, r3
 8000954:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000958:	4313      	orrs	r3, r2
 800095a:	b21b      	sxth	r3, r3
 800095c:	81fb      	strh	r3, [r7, #14]
        for (int i = 0; i < 3; i++)
 800095e:	68bb      	ldr	r3, [r7, #8]
 8000960:	3301      	adds	r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
 8000966:	2b02      	cmp	r3, #2
 8000968:	dde9      	ble.n	800093e <HC08_ProcessData+0x1a>
        }
        switch (extract_data)
 800096a:	89fb      	ldrh	r3, [r7, #14]
 800096c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000970:	d02c      	beq.n	80009cc <HC08_ProcessData+0xa8>
 8000972:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000976:	dc2f      	bgt.n	80009d8 <HC08_ProcessData+0xb4>
 8000978:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800097c:	d020      	beq.n	80009c0 <HC08_ProcessData+0x9c>
 800097e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000982:	dc29      	bgt.n	80009d8 <HC08_ProcessData+0xb4>
 8000984:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000988:	d014      	beq.n	80009b4 <HC08_ProcessData+0x90>
 800098a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800098e:	dc23      	bgt.n	80009d8 <HC08_ProcessData+0xb4>
 8000990:	2b00      	cmp	r3, #0
 8000992:	d003      	beq.n	800099c <HC08_ProcessData+0x78>
 8000994:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000998:	d006      	beq.n	80009a8 <HC08_ProcessData+0x84>
 800099a:	e01d      	b.n	80009d8 <HC08_ProcessData+0xb4>
        {
        case CTRL_END:
            /* code */
            LED_Toggle(&led_array[0]);
 800099c:	4814      	ldr	r0, [pc, #80]	; (80009f0 <HC08_ProcessData+0xcc>)
 800099e:	f000 f879 	bl	8000a94 <LED_Toggle>
            reset_state();
 80009a2:	f7ff ff7b 	bl	800089c <reset_state>
            break;
 80009a6:	e01b      	b.n	80009e0 <HC08_ProcessData+0xbc>
        case CTRL_UP:
            LED_Toggle(&led_array[1]);
 80009a8:	4812      	ldr	r0, [pc, #72]	; (80009f4 <HC08_ProcessData+0xd0>)
 80009aa:	f000 f873 	bl	8000a94 <LED_Toggle>
            run_forward();
 80009ae:	f7ff ff87 	bl	80008c0 <run_forward>
            break;
 80009b2:	e015      	b.n	80009e0 <HC08_ProcessData+0xbc>

        case CTRL_DOWN:
            LED_Toggle(&led_array[2]);
 80009b4:	4810      	ldr	r0, [pc, #64]	; (80009f8 <HC08_ProcessData+0xd4>)
 80009b6:	f000 f86d 	bl	8000a94 <LED_Toggle>
            run_backward();
 80009ba:	f7ff ff8d 	bl	80008d8 <run_backward>
            break;
 80009be:	e00f      	b.n	80009e0 <HC08_ProcessData+0xbc>

        case CTRL_LEFT:
            LED_Toggle(&led_array[3]);
 80009c0:	480e      	ldr	r0, [pc, #56]	; (80009fc <HC08_ProcessData+0xd8>)
 80009c2:	f000 f867 	bl	8000a94 <LED_Toggle>
            servo_left();
 80009c6:	f7ff ff95 	bl	80008f4 <servo_left>
            break;
 80009ca:	e009      	b.n	80009e0 <HC08_ProcessData+0xbc>

        case CTRL_RIGHT:
            LED_Toggle(&led_array[4]);
 80009cc:	480c      	ldr	r0, [pc, #48]	; (8000a00 <HC08_ProcessData+0xdc>)
 80009ce:	f000 f861 	bl	8000a94 <LED_Toggle>
            servo_right();
 80009d2:	f7ff ff9b 	bl	800090c <servo_right>
            break;
 80009d6:	e003      	b.n	80009e0 <HC08_ProcessData+0xbc>

        case CTRL_SQUARE:
            break;

        default:
            LED_All_Toggle(led_array);
 80009d8:	4805      	ldr	r0, [pc, #20]	; (80009f0 <HC08_ProcessData+0xcc>)
 80009da:	f000 f86b 	bl	8000ab4 <LED_All_Toggle>
            break;
 80009de:	bf00      	nop
        }
        hc08->rev_flag = 0;
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	2200      	movs	r2, #0
 80009e4:	731a      	strb	r2, [r3, #12]
    }
}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000060 	.word	0x20000060
 80009f4:	20000068 	.word	0x20000068
 80009f8:	20000070 	.word	0x20000070
 80009fc:	20000078 	.word	0x20000078
 8000a00:	20000080 	.word	0x20000080

08000a04 <HAL_UART_RxCpltCallback>:

// Callback function called when data reception is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000a04:	b580      	push	{r7, lr}
 8000a06:	b082      	sub	sp, #8
 8000a08:	af00      	add	r7, sp, #0
 8000a0a:	6078      	str	r0, [r7, #4]
    extern HC08 hc08; // External HC-08 instance (declare in the main file)
    if (huart == hc08.huart && hc08.rev_flag == 0)
 8000a0c:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <HAL_UART_RxCpltCallback+0x30>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	687a      	ldr	r2, [r7, #4]
 8000a12:	429a      	cmp	r2, r3
 8000a14:	d10a      	bne.n	8000a2c <HAL_UART_RxCpltCallback+0x28>
 8000a16:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <HAL_UART_RxCpltCallback+0x30>)
 8000a18:	7b1b      	ldrb	r3, [r3, #12]
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d106      	bne.n	8000a2c <HAL_UART_RxCpltCallback+0x28>
    {                                             // Check if the interrupt belongs to HC-08's UART
        hc08.rev_flag = 1;                        // Set the receive flag
 8000a1e:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <HAL_UART_RxCpltCallback+0x30>)
 8000a20:	2201      	movs	r2, #1
 8000a22:	731a      	strb	r2, [r3, #12]
        HC08_ReceiveData(&hc08, hc08.rev_buffer); // Receive data
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <HAL_UART_RxCpltCallback+0x34>)
 8000a26:	4803      	ldr	r0, [pc, #12]	; (8000a34 <HAL_UART_RxCpltCallback+0x30>)
 8000a28:	f7ff ff28 	bl	800087c <HC08_ReceiveData>
    }
}
 8000a2c:	bf00      	nop
 8000a2e:	3708      	adds	r7, #8
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000324 	.word	0x20000324
 8000a38:	20000328 	.word	0x20000328

08000a3c <LED_Init>:
    HAL_Delay(1);
    HAL_GPIO_WritePin(seg->le_port, seg->le_pin, GPIO_PIN_RESET);
}


void LED_Init() {
 8000a3c:	b480      	push	{r7}
 8000a3e:	b083      	sub	sp, #12
 8000a40:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	e014      	b.n	8000a72 <LED_Init+0x36>
        led_array[i].port = ports_led[i];
 8000a48:	4a0f      	ldr	r2, [pc, #60]	; (8000a88 <LED_Init+0x4c>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a50:	490e      	ldr	r1, [pc, #56]	; (8000a8c <LED_Init+0x50>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        led_array[i].pin = pins_led[i];
 8000a58:	4a0d      	ldr	r2, [pc, #52]	; (8000a90 <LED_Init+0x54>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a60:	4a0a      	ldr	r2, [pc, #40]	; (8000a8c <LED_Init+0x50>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	00db      	lsls	r3, r3, #3
 8000a66:	4413      	add	r3, r2
 8000a68:	460a      	mov	r2, r1
 8000a6a:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++) {
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	2b04      	cmp	r3, #4
 8000a76:	dde7      	ble.n	8000a48 <LED_Init+0xc>
    }
}
 8000a78:	bf00      	nop
 8000a7a:	bf00      	nop
 8000a7c:	370c      	adds	r7, #12
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop
 8000a88:	20000000 	.word	0x20000000
 8000a8c:	20000060 	.word	0x20000060
 8000a90:	20000014 	.word	0x20000014

08000a94 <LED_Toggle>:

void LED_Off(LED *led) {
    HAL_GPIO_WritePin(led->port, led->pin, GPIO_PIN_RESET);
}

void LED_Toggle(LED *led) {
 8000a94:	b580      	push	{r7, lr}
 8000a96:	b082      	sub	sp, #8
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
    HAL_GPIO_TogglePin(led->port, led->pin);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681a      	ldr	r2, [r3, #0]
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	889b      	ldrh	r3, [r3, #4]
 8000aa4:	4619      	mov	r1, r3
 8000aa6:	4610      	mov	r0, r2
 8000aa8:	f002 f9a1 	bl	8002dee <HAL_GPIO_TogglePin>
}
 8000aac:	bf00      	nop
 8000aae:	3708      	adds	r7, #8
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <LED_All_Toggle>:
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++) {
        LED_Off(&led_array[i]);
    }
}

void LED_All_Toggle(LED *led_array) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b084      	sub	sp, #16
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++) {
 8000abc:	2300      	movs	r3, #0
 8000abe:	60fb      	str	r3, [r7, #12]
 8000ac0:	e009      	b.n	8000ad6 <LED_All_Toggle+0x22>
        LED_Toggle(&led_array[i]);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	00db      	lsls	r3, r3, #3
 8000ac6:	687a      	ldr	r2, [r7, #4]
 8000ac8:	4413      	add	r3, r2
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff ffe2 	bl	8000a94 <LED_Toggle>
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++) {
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	3301      	adds	r3, #1
 8000ad4:	60fb      	str	r3, [r7, #12]
 8000ad6:	68fb      	ldr	r3, [r7, #12]
 8000ad8:	2b04      	cmp	r3, #4
 8000ada:	ddf2      	ble.n	8000ac2 <LED_All_Toggle+0xe>
    }
 8000adc:	bf00      	nop
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
	...

08000ae8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aec:	f001 f868 	bl	8001bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af0:	f000 f83c 	bl	8000b6c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000af4:	f000 fc04 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 8000af8:	f000 fbe2 	bl	80012c0 <MX_DMA_Init>
  MX_TIM3_Init();
 8000afc:	f000 fa00 	bl	8000f00 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000b00:	f000 faa0 	bl	8001044 <MX_TIM8_Init>
  MX_ADC1_Init();
 8000b04:	f000 f89a 	bl	8000c3c <MX_ADC1_Init>
  MX_ADC2_Init();
 8000b08:	f000 f922 	bl	8000d50 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000b0c:	f000 f972 	bl	8000df4 <MX_TIM2_Init>
  MX_TIM10_Init();
 8000b10:	f000 fb5e 	bl	80011d0 <MX_TIM10_Init>
  MX_TIM4_Init();
 8000b14:	f000 fa48 	bl	8000fa8 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000b18:	f000 fba8 	bl	800126c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
 Scheduler_Init(&htim4);
 8000b1c:	480c      	ldr	r0, [pc, #48]	; (8000b50 <main+0x68>)
 8000b1e:	f000 fd0f 	bl	8001540 <Scheduler_Init>


#ifdef TEST_BOARD
  #ifdef TEST_BLE
  HC08_Init(&hc08, &huart3);
 8000b22:	490c      	ldr	r1, [pc, #48]	; (8000b54 <main+0x6c>)
 8000b24:	480c      	ldr	r0, [pc, #48]	; (8000b58 <main+0x70>)
 8000b26:	f7ff fe8b 	bl	8000840 <HC08_Init>
  LED_Init();
 8000b2a:	f7ff ff87 	bl	8000a3c <LED_Init>
  Servo_Init(&servo, &htim10, TIM_CHANNEL_1, 530);
 8000b2e:	f240 2312 	movw	r3, #530	; 0x212
 8000b32:	2200      	movs	r2, #0
 8000b34:	4909      	ldr	r1, [pc, #36]	; (8000b5c <main+0x74>)
 8000b36:	480a      	ldr	r0, [pc, #40]	; (8000b60 <main+0x78>)
 8000b38:	f7ff fd28 	bl	800058c <Servo_Init>
  Motor_Init(&motor[1], &htim8, TIM_CHANNEL_3, TIM_CHANNEL_4);
 8000b3c:	230c      	movs	r3, #12
 8000b3e:	2208      	movs	r2, #8
 8000b40:	4908      	ldr	r1, [pc, #32]	; (8000b64 <main+0x7c>)
 8000b42:	4809      	ldr	r0, [pc, #36]	; (8000b68 <main+0x80>)
 8000b44:	f7ff fcbe 	bl	80004c4 <Motor_Init>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
#ifdef TEST_BOARD
  	#ifdef TEST_BLE
	  HC08_ProcessData(&hc08);
 8000b48:	4803      	ldr	r0, [pc, #12]	; (8000b58 <main+0x70>)
 8000b4a:	f7ff feeb 	bl	8000924 <HC08_ProcessData>
 8000b4e:	e7fb      	b.n	8000b48 <main+0x60>
 8000b50:	20000208 	.word	0x20000208
 8000b54:	200002e0 	.word	0x200002e0
 8000b58:	20000324 	.word	0x20000324
 8000b5c:	20000298 	.word	0x20000298
 8000b60:	20000048 	.word	0x20000048
 8000b64:	20000250 	.word	0x20000250
 8000b68:	20000058 	.word	0x20000058

08000b6c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	b094      	sub	sp, #80	; 0x50
 8000b70:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	2230      	movs	r2, #48	; 0x30
 8000b78:	2100      	movs	r1, #0
 8000b7a:	4618      	mov	r0, r3
 8000b7c:	f005 f876 	bl	8005c6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b80:	f107 030c 	add.w	r3, r7, #12
 8000b84:	2200      	movs	r2, #0
 8000b86:	601a      	str	r2, [r3, #0]
 8000b88:	605a      	str	r2, [r3, #4]
 8000b8a:	609a      	str	r2, [r3, #8]
 8000b8c:	60da      	str	r2, [r3, #12]
 8000b8e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b90:	2300      	movs	r3, #0
 8000b92:	60bb      	str	r3, [r7, #8]
 8000b94:	4b27      	ldr	r3, [pc, #156]	; (8000c34 <SystemClock_Config+0xc8>)
 8000b96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b98:	4a26      	ldr	r2, [pc, #152]	; (8000c34 <SystemClock_Config+0xc8>)
 8000b9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b9e:	6413      	str	r3, [r2, #64]	; 0x40
 8000ba0:	4b24      	ldr	r3, [pc, #144]	; (8000c34 <SystemClock_Config+0xc8>)
 8000ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ba8:	60bb      	str	r3, [r7, #8]
 8000baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000bac:	2300      	movs	r3, #0
 8000bae:	607b      	str	r3, [r7, #4]
 8000bb0:	4b21      	ldr	r3, [pc, #132]	; (8000c38 <SystemClock_Config+0xcc>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a20      	ldr	r2, [pc, #128]	; (8000c38 <SystemClock_Config+0xcc>)
 8000bb6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bba:	6013      	str	r3, [r2, #0]
 8000bbc:	4b1e      	ldr	r3, [pc, #120]	; (8000c38 <SystemClock_Config+0xcc>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bc4:	607b      	str	r3, [r7, #4]
 8000bc6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bd4:	2302      	movs	r3, #2
 8000bd6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000bdc:	2308      	movs	r3, #8
 8000bde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000be0:	2348      	movs	r3, #72	; 0x48
 8000be2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000be4:	2302      	movs	r3, #2
 8000be6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000be8:	2304      	movs	r3, #4
 8000bea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0320 	add.w	r3, r7, #32
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f002 f917 	bl	8002e24 <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000bfc:	f000 fc9a 	bl	8001534 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c10:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	f107 030c 	add.w	r3, r7, #12
 8000c1a:	2102      	movs	r1, #2
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	f002 fb79 	bl	8003314 <HAL_RCC_ClockConfig>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d001      	beq.n	8000c2c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000c28:	f000 fc84 	bl	8001534 <Error_Handler>
  }
}
 8000c2c:	bf00      	nop
 8000c2e:	3750      	adds	r7, #80	; 0x50
 8000c30:	46bd      	mov	sp, r7
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40023800 	.word	0x40023800
 8000c38:	40007000 	.word	0x40007000

08000c3c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c42:	463b      	mov	r3, r7
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]
 8000c48:	605a      	str	r2, [r3, #4]
 8000c4a:	609a      	str	r2, [r3, #8]
 8000c4c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c4e:	4b3d      	ldr	r3, [pc, #244]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c50:	4a3d      	ldr	r2, [pc, #244]	; (8000d48 <MX_ADC1_Init+0x10c>)
 8000c52:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c54:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c5a:	4b3a      	ldr	r3, [pc, #232]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000c60:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c62:	2201      	movs	r2, #1
 8000c64:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000c66:	4b37      	ldr	r3, [pc, #220]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c68:	2201      	movs	r2, #1
 8000c6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c6c:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c74:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c76:	2200      	movs	r2, #0
 8000c78:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c7c:	4a33      	ldr	r2, [pc, #204]	; (8000d4c <MX_ADC1_Init+0x110>)
 8000c7e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c80:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c88:	2205      	movs	r2, #5
 8000c8a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c8c:	4b2d      	ldr	r3, [pc, #180]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c94:	4b2b      	ldr	r3, [pc, #172]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c96:	2201      	movs	r2, #1
 8000c98:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c9a:	482a      	ldr	r0, [pc, #168]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000c9c:	f001 f802 	bl	8001ca4 <HAL_ADC_Init>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d001      	beq.n	8000caa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000ca6:	f000 fc45 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb6:	463b      	mov	r3, r7
 8000cb8:	4619      	mov	r1, r3
 8000cba:	4822      	ldr	r0, [pc, #136]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000cbc:	f001 f836 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d001      	beq.n	8000cca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000cc6:	f000 fc35 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000cca:	2304      	movs	r3, #4
 8000ccc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000cce:	2302      	movs	r3, #2
 8000cd0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cd2:	463b      	mov	r3, r7
 8000cd4:	4619      	mov	r1, r3
 8000cd6:	481b      	ldr	r0, [pc, #108]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000cd8:	f001 f828 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	d001      	beq.n	8000ce6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000ce2:	f000 fc27 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000ce6:	2305      	movs	r3, #5
 8000ce8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000cea:	2303      	movs	r3, #3
 8000cec:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cee:	463b      	mov	r3, r7
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	4814      	ldr	r0, [pc, #80]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000cf4:	f001 f81a 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000cfe:	f000 fc19 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000d02:	2306      	movs	r3, #6
 8000d04:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000d06:	2304      	movs	r3, #4
 8000d08:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d0a:	463b      	mov	r3, r7
 8000d0c:	4619      	mov	r1, r3
 8000d0e:	480d      	ldr	r0, [pc, #52]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000d10:	f001 f80c 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000d14:	4603      	mov	r3, r0
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d001      	beq.n	8000d1e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000d1a:	f000 fc0b 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000d1e:	2307      	movs	r3, #7
 8000d20:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000d22:	2305      	movs	r3, #5
 8000d24:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d26:	463b      	mov	r3, r7
 8000d28:	4619      	mov	r1, r3
 8000d2a:	4806      	ldr	r0, [pc, #24]	; (8000d44 <MX_ADC1_Init+0x108>)
 8000d2c:	f000 fffe 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000d36:	f000 fbfd 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d3a:	bf00      	nop
 8000d3c:	3710      	adds	r7, #16
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	20000088 	.word	0x20000088
 8000d48:	40012000 	.word	0x40012000
 8000d4c:	0f000001 	.word	0x0f000001

08000d50 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b084      	sub	sp, #16
 8000d54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000d56:	463b      	mov	r3, r7
 8000d58:	2200      	movs	r2, #0
 8000d5a:	601a      	str	r2, [r3, #0]
 8000d5c:	605a      	str	r2, [r3, #4]
 8000d5e:	609a      	str	r2, [r3, #8]
 8000d60:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000d62:	4b21      	ldr	r3, [pc, #132]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d64:	4a21      	ldr	r2, [pc, #132]	; (8000dec <MX_ADC2_Init+0x9c>)
 8000d66:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000d68:	4b1f      	ldr	r3, [pc, #124]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000d6e:	4b1e      	ldr	r3, [pc, #120]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000d74:	4b1c      	ldr	r3, [pc, #112]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d7a:	4b1b      	ldr	r3, [pc, #108]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d80:	4b19      	ldr	r3, [pc, #100]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d88:	4b17      	ldr	r3, [pc, #92]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d8e:	4b16      	ldr	r3, [pc, #88]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d90:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <MX_ADC2_Init+0xa0>)
 8000d92:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d94:	4b14      	ldr	r3, [pc, #80]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d9a:	4b13      	ldr	r3, [pc, #76]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000da0:	4b11      	ldr	r3, [pc, #68]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000da2:	2200      	movs	r2, #0
 8000da4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000da8:	4b0f      	ldr	r3, [pc, #60]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000daa:	2201      	movs	r2, #1
 8000dac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000dae:	480e      	ldr	r0, [pc, #56]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000db0:	f000 ff78 	bl	8001ca4 <HAL_ADC_Init>
 8000db4:	4603      	mov	r3, r0
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d001      	beq.n	8000dbe <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000dba:	f000 fbbb 	bl	8001534 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000dbe:	2308      	movs	r3, #8
 8000dc0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000dca:	463b      	mov	r3, r7
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4806      	ldr	r0, [pc, #24]	; (8000de8 <MX_ADC2_Init+0x98>)
 8000dd0:	f000 ffac 	bl	8001d2c <HAL_ADC_ConfigChannel>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000dda:	f000 fbab 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000dde:	bf00      	nop
 8000de0:	3710      	adds	r7, #16
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000d0 	.word	0x200000d0
 8000dec:	40012100 	.word	0x40012100
 8000df0:	0f000001 	.word	0x0f000001

08000df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b08a      	sub	sp, #40	; 0x28
 8000df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dfa:	f107 0318 	add.w	r3, r7, #24
 8000dfe:	2200      	movs	r2, #0
 8000e00:	601a      	str	r2, [r3, #0]
 8000e02:	605a      	str	r2, [r3, #4]
 8000e04:	609a      	str	r2, [r3, #8]
 8000e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e08:	f107 0310 	add.w	r3, r7, #16
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	601a      	str	r2, [r3, #0]
 8000e10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e12:	463b      	mov	r3, r7
 8000e14:	2200      	movs	r2, #0
 8000e16:	601a      	str	r2, [r3, #0]
 8000e18:	605a      	str	r2, [r3, #4]
 8000e1a:	609a      	str	r2, [r3, #8]
 8000e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e1e:	4b37      	ldr	r3, [pc, #220]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000e26:	4b35      	ldr	r3, [pc, #212]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e28:	2247      	movs	r2, #71	; 0x47
 8000e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2c:	4b33      	ldr	r3, [pc, #204]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000e32:	4b32      	ldr	r3, [pc, #200]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e34:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e3a:	4b30      	ldr	r3, [pc, #192]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e46:	482d      	ldr	r0, [pc, #180]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e48:	f002 fc44 	bl	80036d4 <HAL_TIM_Base_Init>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	d001      	beq.n	8000e56 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000e52:	f000 fb6f 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4826      	ldr	r0, [pc, #152]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e64:	f003 f97e 	bl	8004164 <HAL_TIM_ConfigClockSource>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000e6e:	f000 fb61 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e72:	4822      	ldr	r0, [pc, #136]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e74:	f002 fe10 	bl	8003a98 <HAL_TIM_IC_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e7e:	f000 fb59 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e82:	2300      	movs	r3, #0
 8000e84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e8a:	f107 0310 	add.w	r3, r7, #16
 8000e8e:	4619      	mov	r1, r3
 8000e90:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_TIM2_Init+0x108>)
 8000e92:	f003 fe91 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e9c:	f000 fb4a 	bl	8001534 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000eb0:	463b      	mov	r3, r7
 8000eb2:	2204      	movs	r2, #4
 8000eb4:	4619      	mov	r1, r3
 8000eb6:	4811      	ldr	r0, [pc, #68]	; (8000efc <MX_TIM2_Init+0x108>)
 8000eb8:	f002 fff5 	bl	8003ea6 <HAL_TIM_IC_ConfigChannel>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000ec2:	f000 fb37 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000ec6:	463b      	mov	r3, r7
 8000ec8:	2208      	movs	r2, #8
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_TIM2_Init+0x108>)
 8000ece:	f002 ffea 	bl	8003ea6 <HAL_TIM_IC_ConfigChannel>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000ed8:	f000 fb2c 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000edc:	463b      	mov	r3, r7
 8000ede:	220c      	movs	r2, #12
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	4806      	ldr	r0, [pc, #24]	; (8000efc <MX_TIM2_Init+0x108>)
 8000ee4:	f002 ffdf 	bl	8003ea6 <HAL_TIM_IC_ConfigChannel>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000eee:	f000 fb21 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	; 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000178 	.word	0x20000178

08000f00 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b08c      	sub	sp, #48	; 0x30
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000f06:	f107 030c 	add.w	r3, r7, #12
 8000f0a:	2224      	movs	r2, #36	; 0x24
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f004 feac 	bl	8005c6c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f14:	1d3b      	adds	r3, r7, #4
 8000f16:	2200      	movs	r2, #0
 8000f18:	601a      	str	r2, [r3, #0]
 8000f1a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f1c:	4b20      	ldr	r3, [pc, #128]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f1e:	4a21      	ldr	r2, [pc, #132]	; (8000fa4 <MX_TIM3_Init+0xa4>)
 8000f20:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000f22:	4b1f      	ldr	r3, [pc, #124]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f28:	4b1d      	ldr	r3, [pc, #116]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000f2e:	4b1c      	ldr	r3, [pc, #112]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f30:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000f34:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f36:	4b1a      	ldr	r3, [pc, #104]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f3c:	4b18      	ldr	r3, [pc, #96]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000f42:	2301      	movs	r3, #1
 8000f44:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000f46:	2300      	movs	r3, #0
 8000f48:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000f4a:	2301      	movs	r3, #1
 8000f4c:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000f52:	2300      	movs	r3, #0
 8000f54:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000f56:	2300      	movs	r3, #0
 8000f58:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000f5e:	2300      	movs	r3, #0
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000f66:	f107 030c 	add.w	r3, r7, #12
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	480c      	ldr	r0, [pc, #48]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f6e:	f002 fdec 	bl	8003b4a <HAL_TIM_Encoder_Init>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f78:	f000 fadc 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f80:	2300      	movs	r3, #0
 8000f82:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f84:	1d3b      	adds	r3, r7, #4
 8000f86:	4619      	mov	r1, r3
 8000f88:	4805      	ldr	r0, [pc, #20]	; (8000fa0 <MX_TIM3_Init+0xa0>)
 8000f8a:	f003 fe15 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f94:	f000 face 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	3730      	adds	r7, #48	; 0x30
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}
 8000fa0:	200001c0 	.word	0x200001c0
 8000fa4:	40000400 	.word	0x40000400

08000fa8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b086      	sub	sp, #24
 8000fac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fae:	f107 0308 	add.w	r3, r7, #8
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fbc:	463b      	mov	r3, r7
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc4:	4b1d      	ldr	r3, [pc, #116]	; (800103c <MX_TIM4_Init+0x94>)
 8000fc6:	4a1e      	ldr	r2, [pc, #120]	; (8001040 <MX_TIM4_Init+0x98>)
 8000fc8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8000fca:	4b1c      	ldr	r3, [pc, #112]	; (800103c <MX_TIM4_Init+0x94>)
 8000fcc:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000fd0:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd2:	4b1a      	ldr	r3, [pc, #104]	; (800103c <MX_TIM4_Init+0x94>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000fd8:	4b18      	ldr	r3, [pc, #96]	; (800103c <MX_TIM4_Init+0x94>)
 8000fda:	2263      	movs	r2, #99	; 0x63
 8000fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b17      	ldr	r3, [pc, #92]	; (800103c <MX_TIM4_Init+0x94>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b15      	ldr	r3, [pc, #84]	; (800103c <MX_TIM4_Init+0x94>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000fea:	4814      	ldr	r0, [pc, #80]	; (800103c <MX_TIM4_Init+0x94>)
 8000fec:	f002 fb72 	bl	80036d4 <HAL_TIM_Base_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000ff6:	f000 fa9d 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001000:	f107 0308 	add.w	r3, r7, #8
 8001004:	4619      	mov	r1, r3
 8001006:	480d      	ldr	r0, [pc, #52]	; (800103c <MX_TIM4_Init+0x94>)
 8001008:	f003 f8ac 	bl	8004164 <HAL_TIM_ConfigClockSource>
 800100c:	4603      	mov	r3, r0
 800100e:	2b00      	cmp	r3, #0
 8001010:	d001      	beq.n	8001016 <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001012:	f000 fa8f 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001016:	2300      	movs	r3, #0
 8001018:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101a:	2300      	movs	r3, #0
 800101c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800101e:	463b      	mov	r3, r7
 8001020:	4619      	mov	r1, r3
 8001022:	4806      	ldr	r0, [pc, #24]	; (800103c <MX_TIM4_Init+0x94>)
 8001024:	f003 fdc8 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 800102e:	f000 fa81 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001032:	bf00      	nop
 8001034:	3718      	adds	r7, #24
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	20000208 	.word	0x20000208
 8001040:	40000800 	.word	0x40000800

08001044 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b096      	sub	sp, #88	; 0x58
 8001048:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001058:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800105c:	2200      	movs	r2, #0
 800105e:	601a      	str	r2, [r3, #0]
 8001060:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001062:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001066:	2200      	movs	r2, #0
 8001068:	601a      	str	r2, [r3, #0]
 800106a:	605a      	str	r2, [r3, #4]
 800106c:	609a      	str	r2, [r3, #8]
 800106e:	60da      	str	r2, [r3, #12]
 8001070:	611a      	str	r2, [r3, #16]
 8001072:	615a      	str	r2, [r3, #20]
 8001074:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001076:	1d3b      	adds	r3, r7, #4
 8001078:	2220      	movs	r2, #32
 800107a:	2100      	movs	r1, #0
 800107c:	4618      	mov	r0, r3
 800107e:	f004 fdf5 	bl	8005c6c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001082:	4b51      	ldr	r3, [pc, #324]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001084:	4a51      	ldr	r2, [pc, #324]	; (80011cc <MX_TIM8_Init+0x188>)
 8001086:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8001088:	4b4f      	ldr	r3, [pc, #316]	; (80011c8 <MX_TIM8_Init+0x184>)
 800108a:	f240 22cf 	movw	r2, #719	; 0x2cf
 800108e:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001090:	4b4d      	ldr	r3, [pc, #308]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 8001096:	4b4c      	ldr	r3, [pc, #304]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001098:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800109c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800109e:	4b4a      	ldr	r3, [pc, #296]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80010a4:	4b48      	ldr	r3, [pc, #288]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010aa:	4b47      	ldr	r3, [pc, #284]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80010b0:	4845      	ldr	r0, [pc, #276]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010b2:	f002 fb0f 	bl	80036d4 <HAL_TIM_Base_Init>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d001      	beq.n	80010c0 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 80010bc:	f000 fa3a 	bl	8001534 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010c0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010c4:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80010c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010ca:	4619      	mov	r1, r3
 80010cc:	483e      	ldr	r0, [pc, #248]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010ce:	f003 f849 	bl	8004164 <HAL_TIM_ConfigClockSource>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 80010d8:	f000 fa2c 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80010dc:	483a      	ldr	r0, [pc, #232]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010de:	f002 fbb9 	bl	8003854 <HAL_TIM_PWM_Init>
 80010e2:	4603      	mov	r3, r0
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d001      	beq.n	80010ec <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 80010e8:	f000 fa24 	bl	8001534 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010ec:	2300      	movs	r3, #0
 80010ee:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010f0:	2300      	movs	r3, #0
 80010f2:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80010f4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f8:	4619      	mov	r1, r3
 80010fa:	4833      	ldr	r0, [pc, #204]	; (80011c8 <MX_TIM8_Init+0x184>)
 80010fc:	f003 fd5c 	bl	8004bb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d001      	beq.n	800110a <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 8001106:	f000 fa15 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800110a:	2360      	movs	r3, #96	; 0x60
 800110c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 800110e:	2364      	movs	r3, #100	; 0x64
 8001110:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001112:	2300      	movs	r3, #0
 8001114:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001116:	2300      	movs	r3, #0
 8001118:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800111a:	2300      	movs	r3, #0
 800111c:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800111e:	2300      	movs	r3, #0
 8001120:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001122:	2300      	movs	r3, #0
 8001124:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	2200      	movs	r2, #0
 800112c:	4619      	mov	r1, r3
 800112e:	4826      	ldr	r0, [pc, #152]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001130:	f002 ff56 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8001134:	4603      	mov	r3, r0
 8001136:	2b00      	cmp	r3, #0
 8001138:	d001      	beq.n	800113e <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 800113a:	f000 f9fb 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800113e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001142:	2204      	movs	r2, #4
 8001144:	4619      	mov	r1, r3
 8001146:	4820      	ldr	r0, [pc, #128]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001148:	f002 ff4a 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 800114c:	4603      	mov	r3, r0
 800114e:	2b00      	cmp	r3, #0
 8001150:	d001      	beq.n	8001156 <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 8001152:	f000 f9ef 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001156:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800115a:	2208      	movs	r2, #8
 800115c:	4619      	mov	r1, r3
 800115e:	481a      	ldr	r0, [pc, #104]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001160:	f002 ff3e 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 8001164:	4603      	mov	r3, r0
 8001166:	2b00      	cmp	r3, #0
 8001168:	d001      	beq.n	800116e <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 800116a:	f000 f9e3 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800116e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001172:	220c      	movs	r2, #12
 8001174:	4619      	mov	r1, r3
 8001176:	4814      	ldr	r0, [pc, #80]	; (80011c8 <MX_TIM8_Init+0x184>)
 8001178:	f002 ff32 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001182:	f000 f9d7 	bl	8001534 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800118a:	2300      	movs	r3, #0
 800118c:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001192:	2300      	movs	r3, #0
 8001194:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001196:	2300      	movs	r3, #0
 8001198:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800119a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800119e:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011a0:	2300      	movs	r3, #0
 80011a2:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80011a4:	1d3b      	adds	r3, r7, #4
 80011a6:	4619      	mov	r1, r3
 80011a8:	4807      	ldr	r0, [pc, #28]	; (80011c8 <MX_TIM8_Init+0x184>)
 80011aa:	f003 fd81 	bl	8004cb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 80011b4:	f000 f9be 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80011b8:	4803      	ldr	r0, [pc, #12]	; (80011c8 <MX_TIM8_Init+0x184>)
 80011ba:	f000 fbb5 	bl	8001928 <HAL_TIM_MspPostInit>

}
 80011be:	bf00      	nop
 80011c0:	3758      	adds	r7, #88	; 0x58
 80011c2:	46bd      	mov	sp, r7
 80011c4:	bd80      	pop	{r7, pc}
 80011c6:	bf00      	nop
 80011c8:	20000250 	.word	0x20000250
 80011cc:	40010400 	.word	0x40010400

080011d0 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2200      	movs	r2, #0
 80011da:	601a      	str	r2, [r3, #0]
 80011dc:	605a      	str	r2, [r3, #4]
 80011de:	609a      	str	r2, [r3, #8]
 80011e0:	60da      	str	r2, [r3, #12]
 80011e2:	611a      	str	r2, [r3, #16]
 80011e4:	615a      	str	r2, [r3, #20]
 80011e6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 80011e8:	4b1e      	ldr	r3, [pc, #120]	; (8001264 <MX_TIM10_Init+0x94>)
 80011ea:	4a1f      	ldr	r2, [pc, #124]	; (8001268 <MX_TIM10_Init+0x98>)
 80011ec:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 144-1;
 80011ee:	4b1d      	ldr	r3, [pc, #116]	; (8001264 <MX_TIM10_Init+0x94>)
 80011f0:	228f      	movs	r2, #143	; 0x8f
 80011f2:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011f4:	4b1b      	ldr	r3, [pc, #108]	; (8001264 <MX_TIM10_Init+0x94>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 80011fa:	4b1a      	ldr	r3, [pc, #104]	; (8001264 <MX_TIM10_Init+0x94>)
 80011fc:	f242 720f 	movw	r2, #9999	; 0x270f
 8001200:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <MX_TIM10_Init+0x94>)
 8001204:	2200      	movs	r2, #0
 8001206:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b16      	ldr	r3, [pc, #88]	; (8001264 <MX_TIM10_Init+0x94>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 800120e:	4815      	ldr	r0, [pc, #84]	; (8001264 <MX_TIM10_Init+0x94>)
 8001210:	f002 fa60 	bl	80036d4 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 800121a:	f000 f98b 	bl	8001534 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 800121e:	4811      	ldr	r0, [pc, #68]	; (8001264 <MX_TIM10_Init+0x94>)
 8001220:	f002 fb18 	bl	8003854 <HAL_TIM_PWM_Init>
 8001224:	4603      	mov	r3, r0
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 800122a:	f000 f983 	bl	8001534 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800122e:	2360      	movs	r3, #96	; 0x60
 8001230:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 749;
 8001232:	f240 23ed 	movw	r3, #749	; 0x2ed
 8001236:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001238:	2300      	movs	r3, #0
 800123a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001240:	1d3b      	adds	r3, r7, #4
 8001242:	2200      	movs	r2, #0
 8001244:	4619      	mov	r1, r3
 8001246:	4807      	ldr	r0, [pc, #28]	; (8001264 <MX_TIM10_Init+0x94>)
 8001248:	f002 feca 	bl	8003fe0 <HAL_TIM_PWM_ConfigChannel>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 8001252:	f000 f96f 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 8001256:	4803      	ldr	r0, [pc, #12]	; (8001264 <MX_TIM10_Init+0x94>)
 8001258:	f000 fb66 	bl	8001928 <HAL_TIM_MspPostInit>

}
 800125c:	bf00      	nop
 800125e:	3720      	adds	r7, #32
 8001260:	46bd      	mov	sp, r7
 8001262:	bd80      	pop	{r7, pc}
 8001264:	20000298 	.word	0x20000298
 8001268:	40014400 	.word	0x40014400

0800126c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001272:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_USART3_UART_Init+0x50>)
 8001274:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001276:	4b10      	ldr	r3, [pc, #64]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001278:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800127c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800127e:	4b0e      	ldr	r3, [pc, #56]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001280:	2200      	movs	r2, #0
 8001282:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001284:	4b0c      	ldr	r3, [pc, #48]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001286:	2200      	movs	r2, #0
 8001288:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800128a:	4b0b      	ldr	r3, [pc, #44]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001290:	4b09      	ldr	r3, [pc, #36]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001292:	220c      	movs	r2, #12
 8001294:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001296:	4b08      	ldr	r3, [pc, #32]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 8001298:	2200      	movs	r2, #0
 800129a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800129c:	4b06      	ldr	r3, [pc, #24]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 800129e:	2200      	movs	r2, #0
 80012a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80012a2:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_USART3_UART_Init+0x4c>)
 80012a4:	f003 fd6a 	bl	8004d7c <HAL_UART_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80012ae:	f000 f941 	bl	8001534 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80012b2:	bf00      	nop
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200002e0 	.word	0x200002e0
 80012bc:	40004800 	.word	0x40004800

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2100      	movs	r1, #0
 80012e6:	2038      	movs	r0, #56	; 0x38
 80012e8:	f001 f819 	bl	800231e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80012ec:	2038      	movs	r0, #56	; 0x38
 80012ee:	f001 f832 	bl	8002356 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08c      	sub	sp, #48	; 0x30
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 031c 	add.w	r3, r7, #28
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	61bb      	str	r3, [r7, #24]
 800131a:	4b77      	ldr	r3, [pc, #476]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a76      	ldr	r2, [pc, #472]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001320:	f043 0310 	orr.w	r3, r3, #16
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b74      	ldr	r3, [pc, #464]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0310 	and.w	r3, r3, #16
 800132e:	61bb      	str	r3, [r7, #24]
 8001330:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
 8001336:	4b70      	ldr	r3, [pc, #448]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a6f      	ldr	r2, [pc, #444]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b6d      	ldr	r3, [pc, #436]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	617b      	str	r3, [r7, #20]
 800134c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	4b69      	ldr	r3, [pc, #420]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a68      	ldr	r2, [pc, #416]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001358:	f043 0304 	orr.w	r3, r3, #4
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b66      	ldr	r3, [pc, #408]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0304 	and.w	r3, r3, #4
 8001366:	613b      	str	r3, [r7, #16]
 8001368:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	60fb      	str	r3, [r7, #12]
 800136e:	4b62      	ldr	r3, [pc, #392]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a61      	ldr	r2, [pc, #388]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b5f      	ldr	r3, [pc, #380]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	60fb      	str	r3, [r7, #12]
 8001384:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001386:	2300      	movs	r3, #0
 8001388:	60bb      	str	r3, [r7, #8]
 800138a:	4b5b      	ldr	r3, [pc, #364]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 800138c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138e:	4a5a      	ldr	r2, [pc, #360]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001390:	f043 0302 	orr.w	r3, r3, #2
 8001394:	6313      	str	r3, [r2, #48]	; 0x30
 8001396:	4b58      	ldr	r3, [pc, #352]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 8001398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800139a:	f003 0302 	and.w	r3, r3, #2
 800139e:	60bb      	str	r3, [r7, #8]
 80013a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b54      	ldr	r3, [pc, #336]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a53      	ldr	r2, [pc, #332]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 80013ac:	f043 0308 	orr.w	r3, r3, #8
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b51      	ldr	r3, [pc, #324]	; (80014f8 <MX_GPIO_Init+0x1f8>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f003 0308 	and.w	r3, r3, #8
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 80013be:	2200      	movs	r2, #0
 80013c0:	2108      	movs	r1, #8
 80013c2:	484e      	ldr	r0, [pc, #312]	; (80014fc <MX_GPIO_Init+0x1fc>)
 80013c4:	f001 fcfa 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80013c8:	2200      	movs	r2, #0
 80013ca:	f24f 0104 	movw	r1, #61444	; 0xf004
 80013ce:	484c      	ldr	r0, [pc, #304]	; (8001500 <MX_GPIO_Init+0x200>)
 80013d0:	f001 fcf4 	bl	8002dbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013d4:	2200      	movs	r2, #0
 80013d6:	f64f 7180 	movw	r1, #65408	; 0xff80
 80013da:	484a      	ldr	r0, [pc, #296]	; (8001504 <MX_GPIO_Init+0x204>)
 80013dc:	f001 fcee 	bl	8002dbc <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 80013e0:	2200      	movs	r2, #0
 80013e2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80013e6:	4848      	ldr	r0, [pc, #288]	; (8001508 <MX_GPIO_Init+0x208>)
 80013e8:	f001 fce8 	bl	8002dbc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80013ec:	2200      	movs	r2, #0
 80013ee:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 80013f2:	4846      	ldr	r0, [pc, #280]	; (800150c <MX_GPIO_Init+0x20c>)
 80013f4:	f001 fce2 	bl	8002dbc <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_2_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 80013f8:	231c      	movs	r3, #28
 80013fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013fc:	2300      	movs	r3, #0
 80013fe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001400:	2300      	movs	r3, #0
 8001402:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001404:	f107 031c 	add.w	r3, r7, #28
 8001408:	4619      	mov	r1, r3
 800140a:	483e      	ldr	r0, [pc, #248]	; (8001504 <MX_GPIO_Init+0x204>)
 800140c:	f001 fb3a 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001410:	2302      	movs	r3, #2
 8001412:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001414:	2300      	movs	r3, #0
 8001416:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001418:	2300      	movs	r3, #0
 800141a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 800141c:	f107 031c 	add.w	r3, r7, #28
 8001420:	4619      	mov	r1, r3
 8001422:	4836      	ldr	r0, [pc, #216]	; (80014fc <MX_GPIO_Init+0x1fc>)
 8001424:	f001 fb2e 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : trigger_Pin */
  GPIO_InitStruct.Pin = trigger_Pin;
 8001428:	2308      	movs	r3, #8
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800142c:	2301      	movs	r3, #1
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 8001438:	f107 031c 	add.w	r3, r7, #28
 800143c:	4619      	mov	r1, r3
 800143e:	482f      	ldr	r0, [pc, #188]	; (80014fc <MX_GPIO_Init+0x1fc>)
 8001440:	f001 fb20 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001444:	f24f 0304 	movw	r3, #61444	; 0xf004
 8001448:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800144a:	2301      	movs	r3, #1
 800144c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144e:	2300      	movs	r3, #0
 8001450:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001452:	2300      	movs	r3, #0
 8001454:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001456:	f107 031c 	add.w	r3, r7, #28
 800145a:	4619      	mov	r1, r3
 800145c:	4828      	ldr	r0, [pc, #160]	; (8001500 <MX_GPIO_Init+0x200>)
 800145e:	f001 fb11 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001462:	f64f 7380 	movw	r3, #65408	; 0xff80
 8001466:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001468:	2301      	movs	r3, #1
 800146a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800146c:	2300      	movs	r3, #0
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001470:	2300      	movs	r3, #0
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001474:	f107 031c 	add.w	r3, r7, #28
 8001478:	4619      	mov	r1, r3
 800147a:	4822      	ldr	r0, [pc, #136]	; (8001504 <MX_GPIO_Init+0x204>)
 800147c:	f001 fb02 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001480:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001484:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001486:	2301      	movs	r3, #1
 8001488:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800148a:	2300      	movs	r3, #0
 800148c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800148e:	2300      	movs	r3, #0
 8001490:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001492:	f107 031c 	add.w	r3, r7, #28
 8001496:	4619      	mov	r1, r3
 8001498:	481b      	ldr	r0, [pc, #108]	; (8001508 <MX_GPIO_Init+0x208>)
 800149a:	f001 faf3 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 800149e:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80014a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014a4:	2300      	movs	r3, #0
 80014a6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a8:	2300      	movs	r3, #0
 80014aa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014ac:	f107 031c 	add.w	r3, r7, #28
 80014b0:	4619      	mov	r1, r3
 80014b2:	4815      	ldr	r0, [pc, #84]	; (8001508 <MX_GPIO_Init+0x208>)
 80014b4:	f001 fae6 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 80014b8:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80014bc:	61fb      	str	r3, [r7, #28]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014be:	2301      	movs	r3, #1
 80014c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c2:	2300      	movs	r3, #0
 80014c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	2300      	movs	r3, #0
 80014c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ca:	f107 031c 	add.w	r3, r7, #28
 80014ce:	4619      	mov	r1, r3
 80014d0:	480e      	ldr	r0, [pc, #56]	; (800150c <MX_GPIO_Init+0x20c>)
 80014d2:	f001 fad7 	bl	8002a84 <HAL_GPIO_Init>

  /*Configure GPIO pins : ES_L_Pin ES_R_Pin */
  GPIO_InitStruct.Pin = ES_L_Pin|ES_R_Pin;
 80014d6:	23c0      	movs	r3, #192	; 0xc0
 80014d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014da:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80014e4:	f107 031c 	add.w	r3, r7, #28
 80014e8:	4619      	mov	r1, r3
 80014ea:	4807      	ldr	r0, [pc, #28]	; (8001508 <MX_GPIO_Init+0x208>)
 80014ec:	f001 faca 	bl	8002a84 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80014f0:	bf00      	nop
 80014f2:	3730      	adds	r7, #48	; 0x30
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40023800 	.word	0x40023800
 80014fc:	40020800 	.word	0x40020800
 8001500:	40020400 	.word	0x40020400
 8001504:	40021000 	.word	0x40021000
 8001508:	40020c00 	.word	0x40020c00
 800150c:	40020000 	.word	0x40020000

08001510 <HAL_TIM_PeriodElapsedCallback>:
//  }
//}

// #if defined(TEST_ULTRASONIC) || defined(TEST_ENCODER)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b082      	sub	sp, #8
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim4.Instance) // make sure
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681a      	ldr	r2, [r3, #0]
 800151c:	4b04      	ldr	r3, [pc, #16]	; (8001530 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	429a      	cmp	r2, r3
 8001522:	d101      	bne.n	8001528 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
      Scheduler_Update();
 8001524:	f000 f820 	bl	8001568 <Scheduler_Update>
  //   HAL_TIM_IC_Start_IT((&sensor1)->htim, TIM_CHANNEL_1);
  //   HAL_TIM_IC_Start_IT((&sensor2)->htim, TIM_CHANNEL_2);
  //   HAL_TIM_IC_Start_IT((&sensor3)->htim, TIM_CHANNEL_3);
  //   //		updateEncoder(&enc, ((TIM3->SMCR & 0x3) == 0x3));
  }
}
 8001528:	bf00      	nop
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000208 	.word	0x20000208

08001534 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001534:	b480      	push	{r7}
 8001536:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001538:	b672      	cpsid	i
}
 800153a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800153c:	e7fe      	b.n	800153c <Error_Handler+0x8>
	...

08001540 <Scheduler_Init>:
#include "scheduler.h"

Tasks_t tasks;


void Scheduler_Init(TIM_HandleTypeDef *htim) {
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
    tasks.currentTask = NULL;
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <Scheduler_Init+0x24>)
 800154a:	2200      	movs	r2, #0
 800154c:	601a      	str	r2, [r3, #0]
    tasks.nTasks = 0;
 800154e:	4b05      	ldr	r3, [pc, #20]	; (8001564 <Scheduler_Init+0x24>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
    HAL_TIM_Base_Start_IT(htim);
 8001554:	6878      	ldr	r0, [r7, #4]
 8001556:	f002 f90d 	bl	8003774 <HAL_TIM_Base_Start_IT>
}
 800155a:	bf00      	nop
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	20000334 	.word	0x20000334

08001568 <Scheduler_Update>:
    static uint32_t TaskID = 0;
    return ++TaskID;
}


void Scheduler_Update(void) {
 8001568:	b480      	push	{r7}
 800156a:	af00      	add	r7, sp, #0
    if (tasks.currentTask && tasks.currentTask->runMe == 0) {
 800156c:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <Scheduler_Update+0x48>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d017      	beq.n	80015a4 <Scheduler_Update+0x3c>
 8001574:	4b0e      	ldr	r3, [pc, #56]	; (80015b0 <Scheduler_Update+0x48>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	7c1b      	ldrb	r3, [r3, #16]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d112      	bne.n	80015a4 <Scheduler_Update+0x3c>
		if(tasks.currentTask->delay > 0)
 800157e:	4b0c      	ldr	r3, [pc, #48]	; (80015b0 <Scheduler_Update+0x48>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d004      	beq.n	8001592 <Scheduler_Update+0x2a>
			tasks.currentTask->delay--;
 8001588:	4b09      	ldr	r3, [pc, #36]	; (80015b0 <Scheduler_Update+0x48>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	3a01      	subs	r2, #1
 8001590:	609a      	str	r2, [r3, #8]
		if (tasks.currentTask->delay <= 0) 
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <Scheduler_Update+0x48>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	689b      	ldr	r3, [r3, #8]
 8001598:	2b00      	cmp	r3, #0
 800159a:	d103      	bne.n	80015a4 <Scheduler_Update+0x3c>
			tasks.currentTask->runMe = 1;
 800159c:	4b04      	ldr	r3, [pc, #16]	; (80015b0 <Scheduler_Update+0x48>)
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	2201      	movs	r2, #1
 80015a2:	741a      	strb	r2, [r3, #16]
	}
}
 80015a4:	bf00      	nop
 80015a6:	46bd      	mov	sp, r7
 80015a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ac:	4770      	bx	lr
 80015ae:	bf00      	nop
 80015b0:	20000334 	.word	0x20000334

080015b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	b083      	sub	sp, #12
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015ba:	2300      	movs	r3, #0
 80015bc:	607b      	str	r3, [r7, #4]
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <HAL_MspInit+0x4c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015c2:	4a0f      	ldr	r2, [pc, #60]	; (8001600 <HAL_MspInit+0x4c>)
 80015c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015c8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ca:	4b0d      	ldr	r3, [pc, #52]	; (8001600 <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015d2:	607b      	str	r3, [r7, #4]
 80015d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015d6:	2300      	movs	r3, #0
 80015d8:	603b      	str	r3, [r7, #0]
 80015da:	4b09      	ldr	r3, [pc, #36]	; (8001600 <HAL_MspInit+0x4c>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	4a08      	ldr	r2, [pc, #32]	; (8001600 <HAL_MspInit+0x4c>)
 80015e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015e4:	6413      	str	r3, [r2, #64]	; 0x40
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015ee:	603b      	str	r3, [r7, #0]
 80015f0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015f2:	bf00      	nop
 80015f4:	370c      	adds	r7, #12
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	40023800 	.word	0x40023800

08001604 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b08c      	sub	sp, #48	; 0x30
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800160c:	f107 031c 	add.w	r3, r7, #28
 8001610:	2200      	movs	r2, #0
 8001612:	601a      	str	r2, [r3, #0]
 8001614:	605a      	str	r2, [r3, #4]
 8001616:	609a      	str	r2, [r3, #8]
 8001618:	60da      	str	r2, [r3, #12]
 800161a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a46      	ldr	r2, [pc, #280]	; (800173c <HAL_ADC_MspInit+0x138>)
 8001622:	4293      	cmp	r3, r2
 8001624:	d158      	bne.n	80016d8 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001626:	2300      	movs	r3, #0
 8001628:	61bb      	str	r3, [r7, #24]
 800162a:	4b45      	ldr	r3, [pc, #276]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 800162c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800162e:	4a44      	ldr	r2, [pc, #272]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001630:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001634:	6453      	str	r3, [r2, #68]	; 0x44
 8001636:	4b42      	ldr	r3, [pc, #264]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800163a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800163e:	61bb      	str	r3, [r7, #24]
 8001640:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	2300      	movs	r3, #0
 8001644:	617b      	str	r3, [r7, #20]
 8001646:	4b3e      	ldr	r3, [pc, #248]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164a:	4a3d      	ldr	r2, [pc, #244]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 800164c:	f043 0301 	orr.w	r3, r3, #1
 8001650:	6313      	str	r3, [r2, #48]	; 0x30
 8001652:	4b3b      	ldr	r3, [pc, #236]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001656:	f003 0301 	and.w	r3, r3, #1
 800165a:	617b      	str	r3, [r7, #20]
 800165c:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 800165e:	23f1      	movs	r3, #241	; 0xf1
 8001660:	61fb      	str	r3, [r7, #28]
                          |IR5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001662:	2303      	movs	r3, #3
 8001664:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001666:	2300      	movs	r3, #0
 8001668:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800166a:	f107 031c 	add.w	r3, r7, #28
 800166e:	4619      	mov	r1, r3
 8001670:	4834      	ldr	r0, [pc, #208]	; (8001744 <HAL_ADC_MspInit+0x140>)
 8001672:	f001 fa07 	bl	8002a84 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001676:	4b34      	ldr	r3, [pc, #208]	; (8001748 <HAL_ADC_MspInit+0x144>)
 8001678:	4a34      	ldr	r2, [pc, #208]	; (800174c <HAL_ADC_MspInit+0x148>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 800167c:	4b32      	ldr	r3, [pc, #200]	; (8001748 <HAL_ADC_MspInit+0x144>)
 800167e:	2200      	movs	r2, #0
 8001680:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b31      	ldr	r3, [pc, #196]	; (8001748 <HAL_ADC_MspInit+0x144>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b2f      	ldr	r3, [pc, #188]	; (8001748 <HAL_ADC_MspInit+0x144>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b2e      	ldr	r3, [pc, #184]	; (8001748 <HAL_ADC_MspInit+0x144>)
 8001690:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001694:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001696:	4b2c      	ldr	r3, [pc, #176]	; (8001748 <HAL_ADC_MspInit+0x144>)
 8001698:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800169c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800169e:	4b2a      	ldr	r3, [pc, #168]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016a0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016a4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80016a6:	4b28      	ldr	r3, [pc, #160]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016ac:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80016ae:	4b26      	ldr	r3, [pc, #152]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016b4:	4b24      	ldr	r3, [pc, #144]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80016ba:	4823      	ldr	r0, [pc, #140]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016bc:	f000 fe66 	bl	800238c <HAL_DMA_Init>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 80016c6:	f7ff ff35 	bl	8001534 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	4a1e      	ldr	r2, [pc, #120]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016ce:	639a      	str	r2, [r3, #56]	; 0x38
 80016d0:	4a1d      	ldr	r2, [pc, #116]	; (8001748 <HAL_ADC_MspInit+0x144>)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80016d6:	e02c      	b.n	8001732 <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a1c      	ldr	r2, [pc, #112]	; (8001750 <HAL_ADC_MspInit+0x14c>)
 80016de:	4293      	cmp	r3, r2
 80016e0:	d127      	bne.n	8001732 <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80016e2:	2300      	movs	r3, #0
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	4b16      	ldr	r3, [pc, #88]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 80016e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016ea:	4a15      	ldr	r2, [pc, #84]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 80016ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016f0:	6453      	str	r3, [r2, #68]	; 0x44
 80016f2:	4b13      	ldr	r3, [pc, #76]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 80016f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016f6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80016fa:	613b      	str	r3, [r7, #16]
 80016fc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	60fb      	str	r3, [r7, #12]
 8001702:	4b0f      	ldr	r3, [pc, #60]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001704:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001706:	4a0e      	ldr	r2, [pc, #56]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001708:	f043 0302 	orr.w	r3, r3, #2
 800170c:	6313      	str	r3, [r2, #48]	; 0x30
 800170e:	4b0c      	ldr	r3, [pc, #48]	; (8001740 <HAL_ADC_MspInit+0x13c>)
 8001710:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001712:	f003 0302 	and.w	r3, r3, #2
 8001716:	60fb      	str	r3, [r7, #12]
 8001718:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BATT_Pin;
 800171a:	2301      	movs	r3, #1
 800171c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800171e:	2303      	movs	r3, #3
 8001720:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001722:	2300      	movs	r3, #0
 8001724:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8001726:	f107 031c 	add.w	r3, r7, #28
 800172a:	4619      	mov	r1, r3
 800172c:	4809      	ldr	r0, [pc, #36]	; (8001754 <HAL_ADC_MspInit+0x150>)
 800172e:	f001 f9a9 	bl	8002a84 <HAL_GPIO_Init>
}
 8001732:	bf00      	nop
 8001734:	3730      	adds	r7, #48	; 0x30
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	40012000 	.word	0x40012000
 8001740:	40023800 	.word	0x40023800
 8001744:	40020000 	.word	0x40020000
 8001748:	20000118 	.word	0x20000118
 800174c:	40026410 	.word	0x40026410
 8001750:	40012100 	.word	0x40012100
 8001754:	40020400 	.word	0x40020400

08001758 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b08c      	sub	sp, #48	; 0x30
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
 800176a:	609a      	str	r2, [r3, #8]
 800176c:	60da      	str	r2, [r3, #12]
 800176e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001778:	d134      	bne.n	80017e4 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800177a:	2300      	movs	r3, #0
 800177c:	61bb      	str	r3, [r7, #24]
 800177e:	4b3d      	ldr	r3, [pc, #244]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001782:	4a3c      	ldr	r2, [pc, #240]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001784:	f043 0301 	orr.w	r3, r3, #1
 8001788:	6413      	str	r3, [r2, #64]	; 0x40
 800178a:	4b3a      	ldr	r3, [pc, #232]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 800178c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178e:	f003 0301 	and.w	r3, r3, #1
 8001792:	61bb      	str	r3, [r7, #24]
 8001794:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
 800179a:	4b36      	ldr	r3, [pc, #216]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 800179c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179e:	4a35      	ldr	r2, [pc, #212]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	6313      	str	r3, [r2, #48]	; 0x30
 80017a6:	4b33      	ldr	r3, [pc, #204]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	617b      	str	r3, [r7, #20]
 80017b0:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ECHO_L_Pin|ECHO_M_Pin|ECHO_R_Pin;
 80017b2:	230e      	movs	r3, #14
 80017b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b6:	2302      	movs	r3, #2
 80017b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017be:	2300      	movs	r3, #0
 80017c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017c2:	2301      	movs	r3, #1
 80017c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c6:	f107 031c 	add.w	r3, r7, #28
 80017ca:	4619      	mov	r1, r3
 80017cc:	482a      	ldr	r0, [pc, #168]	; (8001878 <HAL_TIM_Base_MspInit+0x120>)
 80017ce:	f001 f959 	bl	8002a84 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017d2:	2200      	movs	r2, #0
 80017d4:	2100      	movs	r1, #0
 80017d6:	201c      	movs	r0, #28
 80017d8:	f000 fda1 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80017dc:	201c      	movs	r0, #28
 80017de:	f000 fdba 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80017e2:	e042      	b.n	800186a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	4a24      	ldr	r2, [pc, #144]	; (800187c <HAL_TIM_Base_MspInit+0x124>)
 80017ea:	4293      	cmp	r3, r2
 80017ec:	d116      	bne.n	800181c <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017ee:	2300      	movs	r3, #0
 80017f0:	613b      	str	r3, [r7, #16]
 80017f2:	4b20      	ldr	r3, [pc, #128]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 80017f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f6:	4a1f      	ldr	r2, [pc, #124]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 80017f8:	f043 0304 	orr.w	r3, r3, #4
 80017fc:	6413      	str	r3, [r2, #64]	; 0x40
 80017fe:	4b1d      	ldr	r3, [pc, #116]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001802:	f003 0304 	and.w	r3, r3, #4
 8001806:	613b      	str	r3, [r7, #16]
 8001808:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800180a:	2200      	movs	r2, #0
 800180c:	2100      	movs	r1, #0
 800180e:	201e      	movs	r0, #30
 8001810:	f000 fd85 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001814:	201e      	movs	r0, #30
 8001816:	f000 fd9e 	bl	8002356 <HAL_NVIC_EnableIRQ>
}
 800181a:	e026      	b.n	800186a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <HAL_TIM_Base_MspInit+0x128>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d10e      	bne.n	8001844 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001826:	2300      	movs	r3, #0
 8001828:	60fb      	str	r3, [r7, #12]
 800182a:	4b12      	ldr	r3, [pc, #72]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 800182c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800182e:	4a11      	ldr	r2, [pc, #68]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001830:	f043 0302 	orr.w	r3, r3, #2
 8001834:	6453      	str	r3, [r2, #68]	; 0x44
 8001836:	4b0f      	ldr	r3, [pc, #60]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001838:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800183a:	f003 0302 	and.w	r3, r3, #2
 800183e:	60fb      	str	r3, [r7, #12]
 8001840:	68fb      	ldr	r3, [r7, #12]
}
 8001842:	e012      	b.n	800186a <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a0e      	ldr	r2, [pc, #56]	; (8001884 <HAL_TIM_Base_MspInit+0x12c>)
 800184a:	4293      	cmp	r3, r2
 800184c:	d10d      	bne.n	800186a <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60bb      	str	r3, [r7, #8]
 8001852:	4b08      	ldr	r3, [pc, #32]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001856:	4a07      	ldr	r2, [pc, #28]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800185c:	6453      	str	r3, [r2, #68]	; 0x44
 800185e:	4b05      	ldr	r3, [pc, #20]	; (8001874 <HAL_TIM_Base_MspInit+0x11c>)
 8001860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001866:	60bb      	str	r3, [r7, #8]
 8001868:	68bb      	ldr	r3, [r7, #8]
}
 800186a:	bf00      	nop
 800186c:	3730      	adds	r7, #48	; 0x30
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	40023800 	.word	0x40023800
 8001878:	40020000 	.word	0x40020000
 800187c:	40000800 	.word	0x40000800
 8001880:	40010400 	.word	0x40010400
 8001884:	40014400 	.word	0x40014400

08001888 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b08a      	sub	sp, #40	; 0x28
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001890:	f107 0314 	add.w	r3, r7, #20
 8001894:	2200      	movs	r2, #0
 8001896:	601a      	str	r2, [r3, #0]
 8001898:	605a      	str	r2, [r3, #4]
 800189a:	609a      	str	r2, [r3, #8]
 800189c:	60da      	str	r2, [r3, #12]
 800189e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a1d      	ldr	r2, [pc, #116]	; (800191c <HAL_TIM_Encoder_MspInit+0x94>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d133      	bne.n	8001912 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	613b      	str	r3, [r7, #16]
 80018ae:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a1b      	ldr	r2, [pc, #108]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b19      	ldr	r3, [pc, #100]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	613b      	str	r3, [r7, #16]
 80018c4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	4b15      	ldr	r3, [pc, #84]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ce:	4a14      	ldr	r2, [pc, #80]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018d0:	f043 0302 	orr.w	r3, r3, #2
 80018d4:	6313      	str	r3, [r2, #48]	; 0x30
 80018d6:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_TIM_Encoder_MspInit+0x98>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	60fb      	str	r3, [r7, #12]
 80018e0:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_L1_Pin|EN_L0_Pin;
 80018e2:	2330      	movs	r3, #48	; 0x30
 80018e4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	2302      	movs	r3, #2
 80018e8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ea:	2300      	movs	r3, #0
 80018ec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ee:	2300      	movs	r3, #0
 80018f0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018f2:	2302      	movs	r3, #2
 80018f4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018f6:	f107 0314 	add.w	r3, r7, #20
 80018fa:	4619      	mov	r1, r3
 80018fc:	4809      	ldr	r0, [pc, #36]	; (8001924 <HAL_TIM_Encoder_MspInit+0x9c>)
 80018fe:	f001 f8c1 	bl	8002a84 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	201d      	movs	r0, #29
 8001908:	f000 fd09 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800190c:	201d      	movs	r0, #29
 800190e:	f000 fd22 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001912:	bf00      	nop
 8001914:	3728      	adds	r7, #40	; 0x28
 8001916:	46bd      	mov	sp, r7
 8001918:	bd80      	pop	{r7, pc}
 800191a:	bf00      	nop
 800191c:	40000400 	.word	0x40000400
 8001920:	40023800 	.word	0x40023800
 8001924:	40020400 	.word	0x40020400

08001928 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08a      	sub	sp, #40	; 0x28
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001930:	f107 0314 	add.w	r3, r7, #20
 8001934:	2200      	movs	r2, #0
 8001936:	601a      	str	r2, [r3, #0]
 8001938:	605a      	str	r2, [r3, #4]
 800193a:	609a      	str	r2, [r3, #8]
 800193c:	60da      	str	r2, [r3, #12]
 800193e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a25      	ldr	r2, [pc, #148]	; (80019dc <HAL_TIM_MspPostInit+0xb4>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d11f      	bne.n	800198a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	613b      	str	r3, [r7, #16]
 800194e:	4b24      	ldr	r3, [pc, #144]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a23      	ldr	r2, [pc, #140]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 8001954:	f043 0304 	orr.w	r3, r3, #4
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b21      	ldr	r3, [pc, #132]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0304 	and.w	r3, r3, #4
 8001962:	613b      	str	r3, [r7, #16]
 8001964:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_R1_Pin|MOTOR_R0_Pin|MOTOR_L1_Pin|MOTOR_L0_Pin;
 8001966:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800196a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800196c:	2302      	movs	r3, #2
 800196e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001970:	2300      	movs	r3, #0
 8001972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001974:	2300      	movs	r3, #0
 8001976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001978:	2303      	movs	r3, #3
 800197a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800197c:	f107 0314 	add.w	r3, r7, #20
 8001980:	4619      	mov	r1, r3
 8001982:	4818      	ldr	r0, [pc, #96]	; (80019e4 <HAL_TIM_MspPostInit+0xbc>)
 8001984:	f001 f87e 	bl	8002a84 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001988:	e023      	b.n	80019d2 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	4a16      	ldr	r2, [pc, #88]	; (80019e8 <HAL_TIM_MspPostInit+0xc0>)
 8001990:	4293      	cmp	r3, r2
 8001992:	d11e      	bne.n	80019d2 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001994:	2300      	movs	r3, #0
 8001996:	60fb      	str	r3, [r7, #12]
 8001998:	4b11      	ldr	r3, [pc, #68]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 800199a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800199c:	4a10      	ldr	r2, [pc, #64]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	6313      	str	r3, [r2, #48]	; 0x30
 80019a4:	4b0e      	ldr	r3, [pc, #56]	; (80019e0 <HAL_TIM_MspPostInit+0xb8>)
 80019a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a8:	f003 0302 	and.w	r3, r3, #2
 80019ac:	60fb      	str	r3, [r7, #12]
 80019ae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 80019b0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80019b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b6:	2302      	movs	r3, #2
 80019b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ba:	2300      	movs	r3, #0
 80019bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80019c2:	2303      	movs	r3, #3
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 80019c6:	f107 0314 	add.w	r3, r7, #20
 80019ca:	4619      	mov	r1, r3
 80019cc:	4807      	ldr	r0, [pc, #28]	; (80019ec <HAL_TIM_MspPostInit+0xc4>)
 80019ce:	f001 f859 	bl	8002a84 <HAL_GPIO_Init>
}
 80019d2:	bf00      	nop
 80019d4:	3728      	adds	r7, #40	; 0x28
 80019d6:	46bd      	mov	sp, r7
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	40010400 	.word	0x40010400
 80019e0:	40023800 	.word	0x40023800
 80019e4:	40020800 	.word	0x40020800
 80019e8:	40014400 	.word	0x40014400
 80019ec:	40020400 	.word	0x40020400

080019f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	b08a      	sub	sp, #40	; 0x28
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f8:	f107 0314 	add.w	r3, r7, #20
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a1d      	ldr	r2, [pc, #116]	; (8001a84 <HAL_UART_MspInit+0x94>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d134      	bne.n	8001a7c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001a12:	2300      	movs	r3, #0
 8001a14:	613b      	str	r3, [r7, #16]
 8001a16:	4b1c      	ldr	r3, [pc, #112]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1a:	4a1b      	ldr	r2, [pc, #108]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a1c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a20:	6413      	str	r3, [r2, #64]	; 0x40
 8001a22:	4b19      	ldr	r3, [pc, #100]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a2a:	613b      	str	r3, [r7, #16]
 8001a2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a2e:	2300      	movs	r3, #0
 8001a30:	60fb      	str	r3, [r7, #12]
 8001a32:	4b15      	ldr	r3, [pc, #84]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a36:	4a14      	ldr	r2, [pc, #80]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a38:	f043 0302 	orr.w	r3, r3, #2
 8001a3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001a3e:	4b12      	ldr	r3, [pc, #72]	; (8001a88 <HAL_UART_MspInit+0x98>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001a4a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001a4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a50:	2302      	movs	r3, #2
 8001a52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a54:	2300      	movs	r3, #0
 8001a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a58:	2303      	movs	r3, #3
 8001a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001a5c:	2307      	movs	r3, #7
 8001a5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a60:	f107 0314 	add.w	r3, r7, #20
 8001a64:	4619      	mov	r1, r3
 8001a66:	4809      	ldr	r0, [pc, #36]	; (8001a8c <HAL_UART_MspInit+0x9c>)
 8001a68:	f001 f80c 	bl	8002a84 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	2100      	movs	r1, #0
 8001a70:	2027      	movs	r0, #39	; 0x27
 8001a72:	f000 fc54 	bl	800231e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001a76:	2027      	movs	r0, #39	; 0x27
 8001a78:	f000 fc6d 	bl	8002356 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001a7c:	bf00      	nop
 8001a7e:	3728      	adds	r7, #40	; 0x28
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	40004800 	.word	0x40004800
 8001a88:	40023800 	.word	0x40023800
 8001a8c:	40020400 	.word	0x40020400

08001a90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a94:	e7fe      	b.n	8001a94 <NMI_Handler+0x4>

08001a96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a96:	b480      	push	{r7}
 8001a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a9a:	e7fe      	b.n	8001a9a <HardFault_Handler+0x4>

08001a9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001aa0:	e7fe      	b.n	8001aa0 <MemManage_Handler+0x4>

08001aa2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001aa2:	b480      	push	{r7}
 8001aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001aa6:	e7fe      	b.n	8001aa6 <BusFault_Handler+0x4>

08001aa8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001aac:	e7fe      	b.n	8001aac <UsageFault_Handler+0x4>

08001aae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001aae:	b480      	push	{r7}
 8001ab0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001ab2:	bf00      	nop
 8001ab4:	46bd      	mov	sp, r7
 8001ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aba:	4770      	bx	lr

08001abc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001abc:	b480      	push	{r7}
 8001abe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ac0:	bf00      	nop
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr

08001aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001aca:	b480      	push	{r7}
 8001acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001ace:	bf00      	nop
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad6:	4770      	bx	lr

08001ad8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001adc:	f000 f8c2 	bl	8001c64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ae0:	bf00      	nop
 8001ae2:	bd80      	pop	{r7, pc}

08001ae4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001ae8:	4802      	ldr	r0, [pc, #8]	; (8001af4 <TIM2_IRQHandler+0x10>)
 8001aea:	f002 f8d4 	bl	8003c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001aee:	bf00      	nop
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000178 	.word	0x20000178

08001af8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001afc:	4802      	ldr	r0, [pc, #8]	; (8001b08 <TIM3_IRQHandler+0x10>)
 8001afe:	f002 f8ca 	bl	8003c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	200001c0 	.word	0x200001c0

08001b0c <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b10:	4802      	ldr	r0, [pc, #8]	; (8001b1c <TIM4_IRQHandler+0x10>)
 8001b12:	f002 f8c0 	bl	8003c96 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b16:	bf00      	nop
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	20000208 	.word	0x20000208

08001b20 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b24:	4802      	ldr	r0, [pc, #8]	; (8001b30 <USART3_IRQHandler+0x10>)
 8001b26:	f003 f9a7 	bl	8004e78 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b2a:	bf00      	nop
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	200002e0 	.word	0x200002e0

08001b34 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001b38:	4802      	ldr	r0, [pc, #8]	; (8001b44 <DMA2_Stream0_IRQHandler+0x10>)
 8001b3a:	f000 fd67 	bl	800260c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001b3e:	bf00      	nop
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	20000118 	.word	0x20000118

08001b48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <SystemInit+0x20>)
 8001b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b52:	4a05      	ldr	r2, [pc, #20]	; (8001b68 <SystemInit+0x20>)
 8001b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b5c:	bf00      	nop
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr
 8001b66:	bf00      	nop
 8001b68:	e000ed00 	.word	0xe000ed00

08001b6c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ba4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b70:	480d      	ldr	r0, [pc, #52]	; (8001ba8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b72:	490e      	ldr	r1, [pc, #56]	; (8001bac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b74:	4a0e      	ldr	r2, [pc, #56]	; (8001bb0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b78:	e002      	b.n	8001b80 <LoopCopyDataInit>

08001b7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7e:	3304      	adds	r3, #4

08001b80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b84:	d3f9      	bcc.n	8001b7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b88:	4c0b      	ldr	r4, [pc, #44]	; (8001bb8 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b8c:	e001      	b.n	8001b92 <LoopFillZerobss>

08001b8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b90:	3204      	adds	r2, #4

08001b92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b94:	d3fb      	bcc.n	8001b8e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b96:	f7ff ffd7 	bl	8001b48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b9a:	f004 f86f 	bl	8005c7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b9e:	f7fe ffa3 	bl	8000ae8 <main>
  bx  lr    
 8001ba2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ba4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ba8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bac:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001bb0:	08005d0c 	.word	0x08005d0c
  ldr r2, =_sbss
 8001bb4:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001bb8:	20000340 	.word	0x20000340

08001bbc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bbc:	e7fe      	b.n	8001bbc <ADC_IRQHandler>
	...

08001bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001bc4:	4b0e      	ldr	r3, [pc, #56]	; (8001c00 <HAL_Init+0x40>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4a0d      	ldr	r2, [pc, #52]	; (8001c00 <HAL_Init+0x40>)
 8001bca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bd0:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <HAL_Init+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a0a      	ldr	r2, [pc, #40]	; (8001c00 <HAL_Init+0x40>)
 8001bd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bdc:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <HAL_Init+0x40>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a07      	ldr	r2, [pc, #28]	; (8001c00 <HAL_Init+0x40>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001be8:	2003      	movs	r0, #3
 8001bea:	f000 fb8d 	bl	8002308 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bee:	200f      	movs	r0, #15
 8001bf0:	f000 f808 	bl	8001c04 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bf4:	f7ff fcde 	bl	80015b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001bf8:	2300      	movs	r3, #0
}
 8001bfa:	4618      	mov	r0, r3
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	40023c00 	.word	0x40023c00

08001c04 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c0c:	4b12      	ldr	r3, [pc, #72]	; (8001c58 <HAL_InitTick+0x54>)
 8001c0e:	681a      	ldr	r2, [r3, #0]
 8001c10:	4b12      	ldr	r3, [pc, #72]	; (8001c5c <HAL_InitTick+0x58>)
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	4619      	mov	r1, r3
 8001c16:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c1a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c22:	4618      	mov	r0, r3
 8001c24:	f000 fba5 	bl	8002372 <HAL_SYSTICK_Config>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e00e      	b.n	8001c50 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2b0f      	cmp	r3, #15
 8001c36:	d80a      	bhi.n	8001c4e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c38:	2200      	movs	r2, #0
 8001c3a:	6879      	ldr	r1, [r7, #4]
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c40:	f000 fb6d 	bl	800231e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c44:	4a06      	ldr	r2, [pc, #24]	; (8001c60 <HAL_InitTick+0x5c>)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	e000      	b.n	8001c50 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c4e:	2301      	movs	r3, #1
}
 8001c50:	4618      	mov	r0, r3
 8001c52:	3708      	adds	r7, #8
 8001c54:	46bd      	mov	sp, r7
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	20000020 	.word	0x20000020
 8001c5c:	20000028 	.word	0x20000028
 8001c60:	20000024 	.word	0x20000024

08001c64 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c64:	b480      	push	{r7}
 8001c66:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c68:	4b06      	ldr	r3, [pc, #24]	; (8001c84 <HAL_IncTick+0x20>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4b06      	ldr	r3, [pc, #24]	; (8001c88 <HAL_IncTick+0x24>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	4a04      	ldr	r2, [pc, #16]	; (8001c88 <HAL_IncTick+0x24>)
 8001c76:	6013      	str	r3, [r2, #0]
}
 8001c78:	bf00      	nop
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c80:	4770      	bx	lr
 8001c82:	bf00      	nop
 8001c84:	20000028 	.word	0x20000028
 8001c88:	2000033c 	.word	0x2000033c

08001c8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c90:	4b03      	ldr	r3, [pc, #12]	; (8001ca0 <HAL_GetTick+0x14>)
 8001c92:	681b      	ldr	r3, [r3, #0]
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	2000033c 	.word	0x2000033c

08001ca4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b084      	sub	sp, #16
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e033      	b.n	8001d22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001cc2:	6878      	ldr	r0, [r7, #4]
 8001cc4:	f7ff fc9e 	bl	8001604 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2200      	movs	r2, #0
 8001ccc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d118      	bne.n	8001d14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001cea:	f023 0302 	bic.w	r3, r3, #2
 8001cee:	f043 0202 	orr.w	r2, r3, #2
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f000 f93a 	bl	8001f70 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d06:	f023 0303 	bic.w	r3, r3, #3
 8001d0a:	f043 0201 	orr.w	r2, r3, #1
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	641a      	str	r2, [r3, #64]	; 0x40
 8001d12:	e001      	b.n	8001d18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001d14:	2301      	movs	r3, #1
 8001d16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001d20:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3710      	adds	r7, #16
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
	...

08001d2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b085      	sub	sp, #20
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001d36:	2300      	movs	r3, #0
 8001d38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001d40:	2b01      	cmp	r3, #1
 8001d42:	d101      	bne.n	8001d48 <HAL_ADC_ConfigChannel+0x1c>
 8001d44:	2302      	movs	r3, #2
 8001d46:	e105      	b.n	8001f54 <HAL_ADC_ConfigChannel+0x228>
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	2b09      	cmp	r3, #9
 8001d56:	d925      	bls.n	8001da4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	68d9      	ldr	r1, [r3, #12]
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	b29b      	uxth	r3, r3
 8001d64:	461a      	mov	r2, r3
 8001d66:	4613      	mov	r3, r2
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4413      	add	r3, r2
 8001d6c:	3b1e      	subs	r3, #30
 8001d6e:	2207      	movs	r2, #7
 8001d70:	fa02 f303 	lsl.w	r3, r2, r3
 8001d74:	43da      	mvns	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	400a      	ands	r2, r1
 8001d7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	68d9      	ldr	r1, [r3, #12]
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	b29b      	uxth	r3, r3
 8001d8e:	4618      	mov	r0, r3
 8001d90:	4603      	mov	r3, r0
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	4403      	add	r3, r0
 8001d96:	3b1e      	subs	r3, #30
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	430a      	orrs	r2, r1
 8001da0:	60da      	str	r2, [r3, #12]
 8001da2:	e022      	b.n	8001dea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6919      	ldr	r1, [r3, #16]
 8001daa:	683b      	ldr	r3, [r7, #0]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	b29b      	uxth	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	4613      	mov	r3, r2
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	4413      	add	r3, r2
 8001db8:	2207      	movs	r2, #7
 8001dba:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbe:	43da      	mvns	r2, r3
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	400a      	ands	r2, r1
 8001dc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	6919      	ldr	r1, [r3, #16]
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	689a      	ldr	r2, [r3, #8]
 8001dd2:	683b      	ldr	r3, [r7, #0]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	4618      	mov	r0, r3
 8001dda:	4603      	mov	r3, r0
 8001ddc:	005b      	lsls	r3, r3, #1
 8001dde:	4403      	add	r3, r0
 8001de0:	409a      	lsls	r2, r3
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	430a      	orrs	r2, r1
 8001de8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b06      	cmp	r3, #6
 8001df0:	d824      	bhi.n	8001e3c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	685a      	ldr	r2, [r3, #4]
 8001dfc:	4613      	mov	r3, r2
 8001dfe:	009b      	lsls	r3, r3, #2
 8001e00:	4413      	add	r3, r2
 8001e02:	3b05      	subs	r3, #5
 8001e04:	221f      	movs	r2, #31
 8001e06:	fa02 f303 	lsl.w	r3, r2, r3
 8001e0a:	43da      	mvns	r2, r3
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	400a      	ands	r2, r1
 8001e12:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	4618      	mov	r0, r3
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	4613      	mov	r3, r2
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	4413      	add	r3, r2
 8001e2c:	3b05      	subs	r3, #5
 8001e2e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	430a      	orrs	r2, r1
 8001e38:	635a      	str	r2, [r3, #52]	; 0x34
 8001e3a:	e04c      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	2b0c      	cmp	r3, #12
 8001e42:	d824      	bhi.n	8001e8e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685a      	ldr	r2, [r3, #4]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	009b      	lsls	r3, r3, #2
 8001e52:	4413      	add	r3, r2
 8001e54:	3b23      	subs	r3, #35	; 0x23
 8001e56:	221f      	movs	r2, #31
 8001e58:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5c:	43da      	mvns	r2, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	400a      	ands	r2, r1
 8001e64:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	4618      	mov	r0, r3
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	4413      	add	r3, r2
 8001e7e:	3b23      	subs	r3, #35	; 0x23
 8001e80:	fa00 f203 	lsl.w	r2, r0, r3
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	631a      	str	r2, [r3, #48]	; 0x30
 8001e8c:	e023      	b.n	8001ed6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685a      	ldr	r2, [r3, #4]
 8001e98:	4613      	mov	r3, r2
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	4413      	add	r3, r2
 8001e9e:	3b41      	subs	r3, #65	; 0x41
 8001ea0:	221f      	movs	r2, #31
 8001ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ea6:	43da      	mvns	r2, r3
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	400a      	ands	r2, r1
 8001eae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	3b41      	subs	r3, #65	; 0x41
 8001eca:	fa00 f203 	lsl.w	r2, r0, r3
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	430a      	orrs	r2, r1
 8001ed4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001ed6:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <HAL_ADC_ConfigChannel+0x234>)
 8001ed8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4a21      	ldr	r2, [pc, #132]	; (8001f64 <HAL_ADC_ConfigChannel+0x238>)
 8001ee0:	4293      	cmp	r3, r2
 8001ee2:	d109      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1cc>
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2b12      	cmp	r3, #18
 8001eea:	d105      	bne.n	8001ef8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a19      	ldr	r2, [pc, #100]	; (8001f64 <HAL_ADC_ConfigChannel+0x238>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d123      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	2b10      	cmp	r3, #16
 8001f08:	d003      	beq.n	8001f12 <HAL_ADC_ConfigChannel+0x1e6>
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	2b11      	cmp	r3, #17
 8001f10:	d11b      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	2b10      	cmp	r3, #16
 8001f24:	d111      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001f26:	4b10      	ldr	r3, [pc, #64]	; (8001f68 <HAL_ADC_ConfigChannel+0x23c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a10      	ldr	r2, [pc, #64]	; (8001f6c <HAL_ADC_ConfigChannel+0x240>)
 8001f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001f30:	0c9a      	lsrs	r2, r3, #18
 8001f32:	4613      	mov	r3, r2
 8001f34:	009b      	lsls	r3, r3, #2
 8001f36:	4413      	add	r3, r2
 8001f38:	005b      	lsls	r3, r3, #1
 8001f3a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f3c:	e002      	b.n	8001f44 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001f3e:	68bb      	ldr	r3, [r7, #8]
 8001f40:	3b01      	subs	r3, #1
 8001f42:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d1f9      	bne.n	8001f3e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001f52:	2300      	movs	r3, #0
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3714      	adds	r7, #20
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5e:	4770      	bx	lr
 8001f60:	40012300 	.word	0x40012300
 8001f64:	40012000 	.word	0x40012000
 8001f68:	20000020 	.word	0x20000020
 8001f6c:	431bde83 	.word	0x431bde83

08001f70 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f78:	4b79      	ldr	r3, [pc, #484]	; (8002160 <ADC_Init+0x1f0>)
 8001f7a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	685b      	ldr	r3, [r3, #4]
 8001f80:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	685a      	ldr	r2, [r3, #4]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	431a      	orrs	r2, r3
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	685a      	ldr	r2, [r3, #4]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fa4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	6859      	ldr	r1, [r3, #4]
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	691b      	ldr	r3, [r3, #16]
 8001fb0:	021a      	lsls	r2, r3, #8
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	430a      	orrs	r2, r1
 8001fb8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	685a      	ldr	r2, [r3, #4]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001fc8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	6859      	ldr	r1, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689a      	ldr	r2, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	689a      	ldr	r2, [r3, #8]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	6899      	ldr	r1, [r3, #8]
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	68da      	ldr	r2, [r3, #12]
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	430a      	orrs	r2, r1
 8001ffc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002002:	4a58      	ldr	r2, [pc, #352]	; (8002164 <ADC_Init+0x1f4>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d022      	beq.n	800204e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	689a      	ldr	r2, [r3, #8]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002016:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6899      	ldr	r1, [r3, #8]
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	430a      	orrs	r2, r1
 8002028:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002038:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	6899      	ldr	r1, [r3, #8]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	430a      	orrs	r2, r1
 800204a:	609a      	str	r2, [r3, #8]
 800204c:	e00f      	b.n	800206e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	689a      	ldr	r2, [r3, #8]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800205c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	689a      	ldr	r2, [r3, #8]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800206c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f022 0202 	bic.w	r2, r2, #2
 800207c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	6899      	ldr	r1, [r3, #8]
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	7e1b      	ldrb	r3, [r3, #24]
 8002088:	005a      	lsls	r2, r3, #1
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	430a      	orrs	r2, r1
 8002090:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002098:	2b00      	cmp	r3, #0
 800209a:	d01b      	beq.n	80020d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	685a      	ldr	r2, [r3, #4]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80020aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	685a      	ldr	r2, [r3, #4]
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80020ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	6859      	ldr	r1, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020c6:	3b01      	subs	r3, #1
 80020c8:	035a      	lsls	r2, r3, #13
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	430a      	orrs	r2, r1
 80020d0:	605a      	str	r2, [r3, #4]
 80020d2:	e007      	b.n	80020e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	685a      	ldr	r2, [r3, #4]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80020e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80020f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	69db      	ldr	r3, [r3, #28]
 80020fe:	3b01      	subs	r3, #1
 8002100:	051a      	lsls	r2, r3, #20
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	430a      	orrs	r2, r1
 8002108:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	689a      	ldr	r2, [r3, #8]
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002118:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	6899      	ldr	r1, [r3, #8]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002126:	025a      	lsls	r2, r3, #9
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689a      	ldr	r2, [r3, #8]
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800213e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	6899      	ldr	r1, [r3, #8]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	695b      	ldr	r3, [r3, #20]
 800214a:	029a      	lsls	r2, r3, #10
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	430a      	orrs	r2, r1
 8002152:	609a      	str	r2, [r3, #8]
}
 8002154:	bf00      	nop
 8002156:	3714      	adds	r7, #20
 8002158:	46bd      	mov	sp, r7
 800215a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215e:	4770      	bx	lr
 8002160:	40012300 	.word	0x40012300
 8002164:	0f000001 	.word	0x0f000001

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021aa:	4770      	bx	lr
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4907      	ldr	r1, [pc, #28]	; (8002204 <__NVIC_EnableIRQ+0x38>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	e000e100 	.word	0xe000e100

08002208 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
 800220e:	4603      	mov	r3, r0
 8002210:	6039      	str	r1, [r7, #0]
 8002212:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002214:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002218:	2b00      	cmp	r3, #0
 800221a:	db0a      	blt.n	8002232 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	b2da      	uxtb	r2, r3
 8002220:	490c      	ldr	r1, [pc, #48]	; (8002254 <__NVIC_SetPriority+0x4c>)
 8002222:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002226:	0112      	lsls	r2, r2, #4
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	440b      	add	r3, r1
 800222c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002230:	e00a      	b.n	8002248 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	b2da      	uxtb	r2, r3
 8002236:	4908      	ldr	r1, [pc, #32]	; (8002258 <__NVIC_SetPriority+0x50>)
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	f003 030f 	and.w	r3, r3, #15
 800223e:	3b04      	subs	r3, #4
 8002240:	0112      	lsls	r2, r2, #4
 8002242:	b2d2      	uxtb	r2, r2
 8002244:	440b      	add	r3, r1
 8002246:	761a      	strb	r2, [r3, #24]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr
 8002254:	e000e100 	.word	0xe000e100
 8002258:	e000ed00 	.word	0xe000ed00

0800225c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800225c:	b480      	push	{r7}
 800225e:	b089      	sub	sp, #36	; 0x24
 8002260:	af00      	add	r7, sp, #0
 8002262:	60f8      	str	r0, [r7, #12]
 8002264:	60b9      	str	r1, [r7, #8]
 8002266:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	f003 0307 	and.w	r3, r3, #7
 800226e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002270:	69fb      	ldr	r3, [r7, #28]
 8002272:	f1c3 0307 	rsb	r3, r3, #7
 8002276:	2b04      	cmp	r3, #4
 8002278:	bf28      	it	cs
 800227a:	2304      	movcs	r3, #4
 800227c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	3304      	adds	r3, #4
 8002282:	2b06      	cmp	r3, #6
 8002284:	d902      	bls.n	800228c <NVIC_EncodePriority+0x30>
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	3b03      	subs	r3, #3
 800228a:	e000      	b.n	800228e <NVIC_EncodePriority+0x32>
 800228c:	2300      	movs	r3, #0
 800228e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002290:	f04f 32ff 	mov.w	r2, #4294967295
 8002294:	69bb      	ldr	r3, [r7, #24]
 8002296:	fa02 f303 	lsl.w	r3, r2, r3
 800229a:	43da      	mvns	r2, r3
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	401a      	ands	r2, r3
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a4:	f04f 31ff 	mov.w	r1, #4294967295
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	fa01 f303 	lsl.w	r3, r1, r3
 80022ae:	43d9      	mvns	r1, r3
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b4:	4313      	orrs	r3, r2
         );
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3724      	adds	r7, #36	; 0x24
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr
	...

080022c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b082      	sub	sp, #8
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3b01      	subs	r3, #1
 80022d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022d4:	d301      	bcc.n	80022da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022d6:	2301      	movs	r3, #1
 80022d8:	e00f      	b.n	80022fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022da:	4a0a      	ldr	r2, [pc, #40]	; (8002304 <SysTick_Config+0x40>)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3b01      	subs	r3, #1
 80022e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022e2:	210f      	movs	r1, #15
 80022e4:	f04f 30ff 	mov.w	r0, #4294967295
 80022e8:	f7ff ff8e 	bl	8002208 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022ec:	4b05      	ldr	r3, [pc, #20]	; (8002304 <SysTick_Config+0x40>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022f2:	4b04      	ldr	r3, [pc, #16]	; (8002304 <SysTick_Config+0x40>)
 80022f4:	2207      	movs	r2, #7
 80022f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f8:	2300      	movs	r3, #0
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3708      	adds	r7, #8
 80022fe:	46bd      	mov	sp, r7
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	e000e010 	.word	0xe000e010

08002308 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b082      	sub	sp, #8
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002310:	6878      	ldr	r0, [r7, #4]
 8002312:	f7ff ff29 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 8002316:	bf00      	nop
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}

0800231e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800231e:	b580      	push	{r7, lr}
 8002320:	b086      	sub	sp, #24
 8002322:	af00      	add	r7, sp, #0
 8002324:	4603      	mov	r3, r0
 8002326:	60b9      	str	r1, [r7, #8]
 8002328:	607a      	str	r2, [r7, #4]
 800232a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002330:	f7ff ff3e 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 8002334:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	68b9      	ldr	r1, [r7, #8]
 800233a:	6978      	ldr	r0, [r7, #20]
 800233c:	f7ff ff8e 	bl	800225c <NVIC_EncodePriority>
 8002340:	4602      	mov	r2, r0
 8002342:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002346:	4611      	mov	r1, r2
 8002348:	4618      	mov	r0, r3
 800234a:	f7ff ff5d 	bl	8002208 <__NVIC_SetPriority>
}
 800234e:	bf00      	nop
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002356:	b580      	push	{r7, lr}
 8002358:	b082      	sub	sp, #8
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002360:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002364:	4618      	mov	r0, r3
 8002366:	f7ff ff31 	bl	80021cc <__NVIC_EnableIRQ>
}
 800236a:	bf00      	nop
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002372:	b580      	push	{r7, lr}
 8002374:	b082      	sub	sp, #8
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800237a:	6878      	ldr	r0, [r7, #4]
 800237c:	f7ff ffa2 	bl	80022c4 <SysTick_Config>
 8002380:	4603      	mov	r3, r0
}
 8002382:	4618      	mov	r0, r3
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
	...

0800238c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800238c:	b580      	push	{r7, lr}
 800238e:	b086      	sub	sp, #24
 8002390:	af00      	add	r7, sp, #0
 8002392:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002394:	2300      	movs	r3, #0
 8002396:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fc78 	bl	8001c8c <HAL_GetTick>
 800239c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e099      	b.n	80024dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2202      	movs	r2, #2
 80023ac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	2200      	movs	r2, #0
 80023b4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	681a      	ldr	r2, [r3, #0]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f022 0201 	bic.w	r2, r2, #1
 80023c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023c8:	e00f      	b.n	80023ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80023ca:	f7ff fc5f 	bl	8001c8c <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b05      	cmp	r3, #5
 80023d6:	d908      	bls.n	80023ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2220      	movs	r2, #32
 80023dc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	2203      	movs	r2, #3
 80023e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e078      	b.n	80024dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f003 0301 	and.w	r3, r3, #1
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d1e8      	bne.n	80023ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002400:	697a      	ldr	r2, [r7, #20]
 8002402:	4b38      	ldr	r3, [pc, #224]	; (80024e4 <HAL_DMA_Init+0x158>)
 8002404:	4013      	ands	r3, r2
 8002406:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002416:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002422:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	699b      	ldr	r3, [r3, #24]
 8002428:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800242e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002436:	697a      	ldr	r2, [r7, #20]
 8002438:	4313      	orrs	r3, r2
 800243a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002440:	2b04      	cmp	r3, #4
 8002442:	d107      	bne.n	8002454 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800244c:	4313      	orrs	r3, r2
 800244e:	697a      	ldr	r2, [r7, #20]
 8002450:	4313      	orrs	r3, r2
 8002452:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	697a      	ldr	r2, [r7, #20]
 800245a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	695b      	ldr	r3, [r3, #20]
 8002462:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	f023 0307 	bic.w	r3, r3, #7
 800246a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002470:	697a      	ldr	r2, [r7, #20]
 8002472:	4313      	orrs	r3, r2
 8002474:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	2b04      	cmp	r3, #4
 800247c:	d117      	bne.n	80024ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	4313      	orrs	r3, r2
 8002486:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002490:	6878      	ldr	r0, [r7, #4]
 8002492:	f000 fa7b 	bl	800298c <DMA_CheckFifoParam>
 8002496:	4603      	mov	r3, r0
 8002498:	2b00      	cmp	r3, #0
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2240      	movs	r2, #64	; 0x40
 80024a0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2201      	movs	r2, #1
 80024a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80024aa:	2301      	movs	r3, #1
 80024ac:	e016      	b.n	80024dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	697a      	ldr	r2, [r7, #20]
 80024b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80024b6:	6878      	ldr	r0, [r7, #4]
 80024b8:	f000 fa32 	bl	8002920 <DMA_CalcBaseAndBitshift>
 80024bc:	4603      	mov	r3, r0
 80024be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024c4:	223f      	movs	r2, #63	; 0x3f
 80024c6:	409a      	lsls	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	2200      	movs	r2, #0
 80024d0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2201      	movs	r2, #1
 80024d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80024da:	2300      	movs	r3, #0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3718      	adds	r7, #24
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	f010803f 	.word	0xf010803f

080024e8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b084      	sub	sp, #16
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80024f6:	f7ff fbc9 	bl	8001c8c <HAL_GetTick>
 80024fa:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002502:	b2db      	uxtb	r3, r3
 8002504:	2b02      	cmp	r3, #2
 8002506:	d008      	beq.n	800251a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	2280      	movs	r2, #128	; 0x80
 800250c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2200      	movs	r2, #0
 8002512:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e052      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f022 0216 	bic.w	r2, r2, #22
 8002528:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	695a      	ldr	r2, [r3, #20]
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002538:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	2b00      	cmp	r3, #0
 8002540:	d103      	bne.n	800254a <HAL_DMA_Abort+0x62>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002546:	2b00      	cmp	r3, #0
 8002548:	d007      	beq.n	800255a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	681a      	ldr	r2, [r3, #0]
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f022 0208 	bic.w	r2, r2, #8
 8002558:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	681a      	ldr	r2, [r3, #0]
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f022 0201 	bic.w	r2, r2, #1
 8002568:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800256a:	e013      	b.n	8002594 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800256c:	f7ff fb8e 	bl	8001c8c <HAL_GetTick>
 8002570:	4602      	mov	r2, r0
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b05      	cmp	r3, #5
 8002578:	d90c      	bls.n	8002594 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2220      	movs	r2, #32
 800257e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	2203      	movs	r2, #3
 8002584:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002590:	2303      	movs	r3, #3
 8002592:	e015      	b.n	80025c0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0301 	and.w	r3, r3, #1
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d1e4      	bne.n	800256c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025a6:	223f      	movs	r2, #63	; 0x3f
 80025a8:	409a      	lsls	r2, r3
 80025aa:	68fb      	ldr	r3, [r7, #12]
 80025ac:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	2200      	movs	r2, #0
 80025ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80025be:	2300      	movs	r3, #0
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3710      	adds	r7, #16
 80025c4:	46bd      	mov	sp, r7
 80025c6:	bd80      	pop	{r7, pc}

080025c8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	2b02      	cmp	r3, #2
 80025da:	d004      	beq.n	80025e6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2280      	movs	r2, #128	; 0x80
 80025e0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e00c      	b.n	8002600 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2205      	movs	r2, #5
 80025ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	681a      	ldr	r2, [r3, #0]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f022 0201 	bic.w	r2, r2, #1
 80025fc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80025fe:	2300      	movs	r3, #0
}
 8002600:	4618      	mov	r0, r3
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002614:	2300      	movs	r3, #0
 8002616:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002618:	4b8e      	ldr	r3, [pc, #568]	; (8002854 <HAL_DMA_IRQHandler+0x248>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a8e      	ldr	r2, [pc, #568]	; (8002858 <HAL_DMA_IRQHandler+0x24c>)
 800261e:	fba2 2303 	umull	r2, r3, r2, r3
 8002622:	0a9b      	lsrs	r3, r3, #10
 8002624:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800262a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002636:	2208      	movs	r2, #8
 8002638:	409a      	lsls	r2, r3
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	4013      	ands	r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d01a      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f003 0304 	and.w	r3, r3, #4
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f022 0204 	bic.w	r2, r2, #4
 800265e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002664:	2208      	movs	r2, #8
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002670:	f043 0201 	orr.w	r2, r3, #1
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267c:	2201      	movs	r2, #1
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d012      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	695b      	ldr	r3, [r3, #20]
 800268e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002692:	2b00      	cmp	r3, #0
 8002694:	d00b      	beq.n	80026ae <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800269a:	2201      	movs	r2, #1
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026a6:	f043 0202 	orr.w	r2, r3, #2
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026b2:	2204      	movs	r2, #4
 80026b4:	409a      	lsls	r2, r3
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	4013      	ands	r3, r2
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d012      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f003 0302 	and.w	r3, r3, #2
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d00b      	beq.n	80026e4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d0:	2204      	movs	r2, #4
 80026d2:	409a      	lsls	r2, r3
 80026d4:	693b      	ldr	r3, [r7, #16]
 80026d6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026dc:	f043 0204 	orr.w	r2, r3, #4
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	2210      	movs	r2, #16
 80026ea:	409a      	lsls	r2, r3
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	4013      	ands	r3, r2
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d043      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d03c      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002706:	2210      	movs	r2, #16
 8002708:	409a      	lsls	r2, r3
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d018      	beq.n	800274e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002726:	2b00      	cmp	r3, #0
 8002728:	d108      	bne.n	800273c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800272e:	2b00      	cmp	r3, #0
 8002730:	d024      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	4798      	blx	r3
 800273a:	e01f      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002740:	2b00      	cmp	r3, #0
 8002742:	d01b      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002748:	6878      	ldr	r0, [r7, #4]
 800274a:	4798      	blx	r3
 800274c:	e016      	b.n	800277c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002758:	2b00      	cmp	r3, #0
 800275a:	d107      	bne.n	800276c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f022 0208 	bic.w	r2, r2, #8
 800276a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002770:	2b00      	cmp	r3, #0
 8002772:	d003      	beq.n	800277c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002780:	2220      	movs	r2, #32
 8002782:	409a      	lsls	r2, r3
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	4013      	ands	r3, r2
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 808f 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f003 0310 	and.w	r3, r3, #16
 8002798:	2b00      	cmp	r3, #0
 800279a:	f000 8087 	beq.w	80028ac <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027a2:	2220      	movs	r2, #32
 80027a4:	409a      	lsls	r2, r3
 80027a6:	693b      	ldr	r3, [r7, #16]
 80027a8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027b0:	b2db      	uxtb	r3, r3
 80027b2:	2b05      	cmp	r3, #5
 80027b4:	d136      	bne.n	8002824 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	681a      	ldr	r2, [r3, #0]
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f022 0216 	bic.w	r2, r2, #22
 80027c4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80027d4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d103      	bne.n	80027e6 <HAL_DMA_IRQHandler+0x1da>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d007      	beq.n	80027f6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	681a      	ldr	r2, [r3, #0]
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f022 0208 	bic.w	r2, r2, #8
 80027f4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027fa:	223f      	movs	r2, #63	; 0x3f
 80027fc:	409a      	lsls	r2, r3
 80027fe:	693b      	ldr	r3, [r7, #16]
 8002800:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2201      	movs	r2, #1
 8002806:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002816:	2b00      	cmp	r3, #0
 8002818:	d07e      	beq.n	8002918 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800281e:	6878      	ldr	r0, [r7, #4]
 8002820:	4798      	blx	r3
        }
        return;
 8002822:	e079      	b.n	8002918 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d01d      	beq.n	800286e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10d      	bne.n	800285c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002844:	2b00      	cmp	r3, #0
 8002846:	d031      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	4798      	blx	r3
 8002850:	e02c      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
 8002852:	bf00      	nop
 8002854:	20000020 	.word	0x20000020
 8002858:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d023      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
 800286c:	e01e      	b.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002878:	2b00      	cmp	r3, #0
 800287a:	d10f      	bne.n	800289c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	681a      	ldr	r2, [r3, #0]
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f022 0210 	bic.w	r2, r2, #16
 800288a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a0:	2b00      	cmp	r3, #0
 80028a2:	d003      	beq.n	80028ac <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d032      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b8:	f003 0301 	and.w	r3, r3, #1
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d022      	beq.n	8002906 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2205      	movs	r2, #5
 80028c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f022 0201 	bic.w	r2, r2, #1
 80028d6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	3301      	adds	r3, #1
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	697a      	ldr	r2, [r7, #20]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d307      	bcc.n	80028f4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d1f2      	bne.n	80028d8 <HAL_DMA_IRQHandler+0x2cc>
 80028f2:	e000      	b.n	80028f6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80028f4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2201      	movs	r2, #1
 80028fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800290a:	2b00      	cmp	r3, #0
 800290c:	d005      	beq.n	800291a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002912:	6878      	ldr	r0, [r7, #4]
 8002914:	4798      	blx	r3
 8002916:	e000      	b.n	800291a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002918:	bf00      	nop
    }
  }
}
 800291a:	3718      	adds	r7, #24
 800291c:	46bd      	mov	sp, r7
 800291e:	bd80      	pop	{r7, pc}

08002920 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	b2db      	uxtb	r3, r3
 800292e:	3b10      	subs	r3, #16
 8002930:	4a14      	ldr	r2, [pc, #80]	; (8002984 <DMA_CalcBaseAndBitshift+0x64>)
 8002932:	fba2 2303 	umull	r2, r3, r2, r3
 8002936:	091b      	lsrs	r3, r3, #4
 8002938:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800293a:	4a13      	ldr	r2, [pc, #76]	; (8002988 <DMA_CalcBaseAndBitshift+0x68>)
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	4413      	add	r3, r2
 8002940:	781b      	ldrb	r3, [r3, #0]
 8002942:	461a      	mov	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	2b03      	cmp	r3, #3
 800294c:	d909      	bls.n	8002962 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002956:	f023 0303 	bic.w	r3, r3, #3
 800295a:	1d1a      	adds	r2, r3, #4
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	659a      	str	r2, [r3, #88]	; 0x58
 8002960:	e007      	b.n	8002972 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800296a:	f023 0303 	bic.w	r3, r3, #3
 800296e:	687a      	ldr	r2, [r7, #4]
 8002970:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002976:	4618      	mov	r0, r3
 8002978:	3714      	adds	r7, #20
 800297a:	46bd      	mov	sp, r7
 800297c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002980:	4770      	bx	lr
 8002982:	bf00      	nop
 8002984:	aaaaaaab 	.word	0xaaaaaaab
 8002988:	08005cf4 	.word	0x08005cf4

0800298c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800298c:	b480      	push	{r7}
 800298e:	b085      	sub	sp, #20
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002994:	2300      	movs	r3, #0
 8002996:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800299c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	699b      	ldr	r3, [r3, #24]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d11f      	bne.n	80029e6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	2b03      	cmp	r3, #3
 80029aa:	d856      	bhi.n	8002a5a <DMA_CheckFifoParam+0xce>
 80029ac:	a201      	add	r2, pc, #4	; (adr r2, 80029b4 <DMA_CheckFifoParam+0x28>)
 80029ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029b2:	bf00      	nop
 80029b4:	080029c5 	.word	0x080029c5
 80029b8:	080029d7 	.word	0x080029d7
 80029bc:	080029c5 	.word	0x080029c5
 80029c0:	08002a5b 	.word	0x08002a5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d046      	beq.n	8002a5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029d4:	e043      	b.n	8002a5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80029da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80029de:	d140      	bne.n	8002a62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80029e0:	2301      	movs	r3, #1
 80029e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029e4:	e03d      	b.n	8002a62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	699b      	ldr	r3, [r3, #24]
 80029ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ee:	d121      	bne.n	8002a34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b03      	cmp	r3, #3
 80029f4:	d837      	bhi.n	8002a66 <DMA_CheckFifoParam+0xda>
 80029f6:	a201      	add	r2, pc, #4	; (adr r2, 80029fc <DMA_CheckFifoParam+0x70>)
 80029f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029fc:	08002a0d 	.word	0x08002a0d
 8002a00:	08002a13 	.word	0x08002a13
 8002a04:	08002a0d 	.word	0x08002a0d
 8002a08:	08002a25 	.word	0x08002a25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002a0c:	2301      	movs	r3, #1
 8002a0e:	73fb      	strb	r3, [r7, #15]
      break;
 8002a10:	e030      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d025      	beq.n	8002a6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a22:	e022      	b.n	8002a6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002a2c:	d11f      	bne.n	8002a6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
 8002a30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002a32:	e01c      	b.n	8002a6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2b02      	cmp	r3, #2
 8002a38:	d903      	bls.n	8002a42 <DMA_CheckFifoParam+0xb6>
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2b03      	cmp	r3, #3
 8002a3e:	d003      	beq.n	8002a48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002a40:	e018      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	73fb      	strb	r3, [r7, #15]
      break;
 8002a46:	e015      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00e      	beq.n	8002a72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002a54:	2301      	movs	r3, #1
 8002a56:	73fb      	strb	r3, [r7, #15]
      break;
 8002a58:	e00b      	b.n	8002a72 <DMA_CheckFifoParam+0xe6>
      break;
 8002a5a:	bf00      	nop
 8002a5c:	e00a      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a5e:	bf00      	nop
 8002a60:	e008      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a62:	bf00      	nop
 8002a64:	e006      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a66:	bf00      	nop
 8002a68:	e004      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a6a:	bf00      	nop
 8002a6c:	e002      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a6e:	bf00      	nop
 8002a70:	e000      	b.n	8002a74 <DMA_CheckFifoParam+0xe8>
      break;
 8002a72:	bf00      	nop
    }
  } 
  
  return status; 
 8002a74:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a76:	4618      	mov	r0, r3
 8002a78:	3714      	adds	r7, #20
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop

08002a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a84:	b480      	push	{r7}
 8002a86:	b089      	sub	sp, #36	; 0x24
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
 8002a8c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	61fb      	str	r3, [r7, #28]
 8002a9e:	e16b      	b.n	8002d78 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	697a      	ldr	r2, [r7, #20]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002ab4:	693a      	ldr	r2, [r7, #16]
 8002ab6:	697b      	ldr	r3, [r7, #20]
 8002ab8:	429a      	cmp	r2, r3
 8002aba:	f040 815a 	bne.w	8002d72 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f003 0303 	and.w	r3, r3, #3
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d005      	beq.n	8002ad6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002ad2:	2b02      	cmp	r3, #2
 8002ad4:	d130      	bne.n	8002b38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	689b      	ldr	r3, [r3, #8]
 8002ada:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002adc:	69fb      	ldr	r3, [r7, #28]
 8002ade:	005b      	lsls	r3, r3, #1
 8002ae0:	2203      	movs	r2, #3
 8002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae6:	43db      	mvns	r3, r3
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4013      	ands	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	fa02 f303 	lsl.w	r3, r2, r3
 8002afa:	69ba      	ldr	r2, [r7, #24]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	69ba      	ldr	r2, [r7, #24]
 8002b04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	43db      	mvns	r3, r3
 8002b16:	69ba      	ldr	r2, [r7, #24]
 8002b18:	4013      	ands	r3, r2
 8002b1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	091b      	lsrs	r3, r3, #4
 8002b22:	f003 0201 	and.w	r2, r3, #1
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	fa02 f303 	lsl.w	r3, r2, r3
 8002b2c:	69ba      	ldr	r2, [r7, #24]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	69ba      	ldr	r2, [r7, #24]
 8002b36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	f003 0303 	and.w	r3, r3, #3
 8002b40:	2b03      	cmp	r3, #3
 8002b42:	d017      	beq.n	8002b74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	68db      	ldr	r3, [r3, #12]
 8002b48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	005b      	lsls	r3, r3, #1
 8002b4e:	2203      	movs	r2, #3
 8002b50:	fa02 f303 	lsl.w	r3, r2, r3
 8002b54:	43db      	mvns	r3, r3
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	4013      	ands	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	689a      	ldr	r2, [r3, #8]
 8002b60:	69fb      	ldr	r3, [r7, #28]
 8002b62:	005b      	lsls	r3, r3, #1
 8002b64:	fa02 f303 	lsl.w	r3, r2, r3
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	69ba      	ldr	r2, [r7, #24]
 8002b72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0303 	and.w	r3, r3, #3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d123      	bne.n	8002bc8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	08da      	lsrs	r2, r3, #3
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	3208      	adds	r2, #8
 8002b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	f003 0307 	and.w	r3, r3, #7
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	220f      	movs	r2, #15
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	43db      	mvns	r3, r3
 8002b9e:	69ba      	ldr	r2, [r7, #24]
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	691a      	ldr	r2, [r3, #16]
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	f003 0307 	and.w	r3, r3, #7
 8002bae:	009b      	lsls	r3, r3, #2
 8002bb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb4:	69ba      	ldr	r2, [r7, #24]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002bba:	69fb      	ldr	r3, [r7, #28]
 8002bbc:	08da      	lsrs	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	3208      	adds	r2, #8
 8002bc2:	69b9      	ldr	r1, [r7, #24]
 8002bc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bce:	69fb      	ldr	r3, [r7, #28]
 8002bd0:	005b      	lsls	r3, r3, #1
 8002bd2:	2203      	movs	r2, #3
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	43db      	mvns	r3, r3
 8002bda:	69ba      	ldr	r2, [r7, #24]
 8002bdc:	4013      	ands	r3, r2
 8002bde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002be0:	683b      	ldr	r3, [r7, #0]
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	f003 0203 	and.w	r2, r3, #3
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	005b      	lsls	r3, r3, #1
 8002bec:	fa02 f303 	lsl.w	r3, r2, r3
 8002bf0:	69ba      	ldr	r2, [r7, #24]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	69ba      	ldr	r2, [r7, #24]
 8002bfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	685b      	ldr	r3, [r3, #4]
 8002c00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	f000 80b4 	beq.w	8002d72 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	60fb      	str	r3, [r7, #12]
 8002c0e:	4b60      	ldr	r3, [pc, #384]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c12:	4a5f      	ldr	r2, [pc, #380]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002c18:	6453      	str	r3, [r2, #68]	; 0x44
 8002c1a:	4b5d      	ldr	r3, [pc, #372]	; (8002d90 <HAL_GPIO_Init+0x30c>)
 8002c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002c22:	60fb      	str	r3, [r7, #12]
 8002c24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c26:	4a5b      	ldr	r2, [pc, #364]	; (8002d94 <HAL_GPIO_Init+0x310>)
 8002c28:	69fb      	ldr	r3, [r7, #28]
 8002c2a:	089b      	lsrs	r3, r3, #2
 8002c2c:	3302      	adds	r3, #2
 8002c2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	f003 0303 	and.w	r3, r3, #3
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	220f      	movs	r2, #15
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a52      	ldr	r2, [pc, #328]	; (8002d98 <HAL_GPIO_Init+0x314>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d02b      	beq.n	8002caa <HAL_GPIO_Init+0x226>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a51      	ldr	r2, [pc, #324]	; (8002d9c <HAL_GPIO_Init+0x318>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d025      	beq.n	8002ca6 <HAL_GPIO_Init+0x222>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a50      	ldr	r2, [pc, #320]	; (8002da0 <HAL_GPIO_Init+0x31c>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d01f      	beq.n	8002ca2 <HAL_GPIO_Init+0x21e>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4f      	ldr	r2, [pc, #316]	; (8002da4 <HAL_GPIO_Init+0x320>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d019      	beq.n	8002c9e <HAL_GPIO_Init+0x21a>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4e      	ldr	r2, [pc, #312]	; (8002da8 <HAL_GPIO_Init+0x324>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d013      	beq.n	8002c9a <HAL_GPIO_Init+0x216>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	4a4d      	ldr	r2, [pc, #308]	; (8002dac <HAL_GPIO_Init+0x328>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d00d      	beq.n	8002c96 <HAL_GPIO_Init+0x212>
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	4a4c      	ldr	r2, [pc, #304]	; (8002db0 <HAL_GPIO_Init+0x32c>)
 8002c7e:	4293      	cmp	r3, r2
 8002c80:	d007      	beq.n	8002c92 <HAL_GPIO_Init+0x20e>
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	4a4b      	ldr	r2, [pc, #300]	; (8002db4 <HAL_GPIO_Init+0x330>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d101      	bne.n	8002c8e <HAL_GPIO_Init+0x20a>
 8002c8a:	2307      	movs	r3, #7
 8002c8c:	e00e      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c8e:	2308      	movs	r3, #8
 8002c90:	e00c      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c92:	2306      	movs	r3, #6
 8002c94:	e00a      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c96:	2305      	movs	r3, #5
 8002c98:	e008      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c9a:	2304      	movs	r3, #4
 8002c9c:	e006      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002c9e:	2303      	movs	r3, #3
 8002ca0:	e004      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002ca2:	2302      	movs	r3, #2
 8002ca4:	e002      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002ca6:	2301      	movs	r3, #1
 8002ca8:	e000      	b.n	8002cac <HAL_GPIO_Init+0x228>
 8002caa:	2300      	movs	r3, #0
 8002cac:	69fa      	ldr	r2, [r7, #28]
 8002cae:	f002 0203 	and.w	r2, r2, #3
 8002cb2:	0092      	lsls	r2, r2, #2
 8002cb4:	4093      	lsls	r3, r2
 8002cb6:	69ba      	ldr	r2, [r7, #24]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002cbc:	4935      	ldr	r1, [pc, #212]	; (8002d94 <HAL_GPIO_Init+0x310>)
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	089b      	lsrs	r3, r3, #2
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cca:	4b3b      	ldr	r3, [pc, #236]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	43db      	mvns	r3, r3
 8002cd4:	69ba      	ldr	r2, [r7, #24]
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d003      	beq.n	8002cee <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	693b      	ldr	r3, [r7, #16]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cee:	4a32      	ldr	r2, [pc, #200]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cf0:	69bb      	ldr	r3, [r7, #24]
 8002cf2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cf4:	4b30      	ldr	r3, [pc, #192]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	43db      	mvns	r3, r3
 8002cfe:	69ba      	ldr	r2, [r7, #24]
 8002d00:	4013      	ands	r3, r2
 8002d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d003      	beq.n	8002d18 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	4313      	orrs	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d18:	4a27      	ldr	r2, [pc, #156]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d1a:	69bb      	ldr	r3, [r7, #24]
 8002d1c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d1e:	4b26      	ldr	r3, [pc, #152]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	43db      	mvns	r3, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4013      	ands	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	693b      	ldr	r3, [r7, #16]
 8002d3e:	4313      	orrs	r3, r2
 8002d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d42:	4a1d      	ldr	r2, [pc, #116]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d48:	4b1b      	ldr	r3, [pc, #108]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	43db      	mvns	r3, r3
 8002d52:	69ba      	ldr	r2, [r7, #24]
 8002d54:	4013      	ands	r3, r2
 8002d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d003      	beq.n	8002d6c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	693b      	ldr	r3, [r7, #16]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <HAL_GPIO_Init+0x334>)
 8002d6e:	69bb      	ldr	r3, [r7, #24]
 8002d70:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	3301      	adds	r3, #1
 8002d76:	61fb      	str	r3, [r7, #28]
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	2b0f      	cmp	r3, #15
 8002d7c:	f67f ae90 	bls.w	8002aa0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d80:	bf00      	nop
 8002d82:	bf00      	nop
 8002d84:	3724      	adds	r7, #36	; 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	40023800 	.word	0x40023800
 8002d94:	40013800 	.word	0x40013800
 8002d98:	40020000 	.word	0x40020000
 8002d9c:	40020400 	.word	0x40020400
 8002da0:	40020800 	.word	0x40020800
 8002da4:	40020c00 	.word	0x40020c00
 8002da8:	40021000 	.word	0x40021000
 8002dac:	40021400 	.word	0x40021400
 8002db0:	40021800 	.word	0x40021800
 8002db4:	40021c00 	.word	0x40021c00
 8002db8:	40013c00 	.word	0x40013c00

08002dbc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	b083      	sub	sp, #12
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	6078      	str	r0, [r7, #4]
 8002dc4:	460b      	mov	r3, r1
 8002dc6:	807b      	strh	r3, [r7, #2]
 8002dc8:	4613      	mov	r3, r2
 8002dca:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002dcc:	787b      	ldrb	r3, [r7, #1]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d003      	beq.n	8002dda <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dd2:	887a      	ldrh	r2, [r7, #2]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dd8:	e003      	b.n	8002de2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dda:	887b      	ldrh	r3, [r7, #2]
 8002ddc:	041a      	lsls	r2, r3, #16
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	619a      	str	r2, [r3, #24]
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr

08002dee <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002dee:	b480      	push	{r7}
 8002df0:	b085      	sub	sp, #20
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	6078      	str	r0, [r7, #4]
 8002df6:	460b      	mov	r3, r1
 8002df8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	695b      	ldr	r3, [r3, #20]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002e00:	887a      	ldrh	r2, [r7, #2]
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4013      	ands	r3, r2
 8002e06:	041a      	lsls	r2, r3, #16
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	43d9      	mvns	r1, r3
 8002e0c:	887b      	ldrh	r3, [r7, #2]
 8002e0e:	400b      	ands	r3, r1
 8002e10:	431a      	orrs	r2, r3
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	619a      	str	r2, [r3, #24]
}
 8002e16:	bf00      	nop
 8002e18:	3714      	adds	r7, #20
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e20:	4770      	bx	lr
	...

08002e24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d101      	bne.n	8002e36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e32:	2301      	movs	r3, #1
 8002e34:	e267      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f003 0301 	and.w	r3, r3, #1
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d075      	beq.n	8002f2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e42:	4b88      	ldr	r3, [pc, #544]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e44:	689b      	ldr	r3, [r3, #8]
 8002e46:	f003 030c 	and.w	r3, r3, #12
 8002e4a:	2b04      	cmp	r3, #4
 8002e4c:	d00c      	beq.n	8002e68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4e:	4b85      	ldr	r3, [pc, #532]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d112      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e5a:	4b82      	ldr	r3, [pc, #520]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002e66:	d10b      	bne.n	8002e80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e68:	4b7e      	ldr	r3, [pc, #504]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d05b      	beq.n	8002f2c <HAL_RCC_OscConfig+0x108>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	685b      	ldr	r3, [r3, #4]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d157      	bne.n	8002f2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e242      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002e88:	d106      	bne.n	8002e98 <HAL_RCC_OscConfig+0x74>
 8002e8a:	4b76      	ldr	r3, [pc, #472]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a75      	ldr	r2, [pc, #468]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002e90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e94:	6013      	str	r3, [r2, #0]
 8002e96:	e01d      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ea0:	d10c      	bne.n	8002ebc <HAL_RCC_OscConfig+0x98>
 8002ea2:	4b70      	ldr	r3, [pc, #448]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	4a6f      	ldr	r2, [pc, #444]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002eac:	6013      	str	r3, [r2, #0]
 8002eae:	4b6d      	ldr	r3, [pc, #436]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a6c      	ldr	r2, [pc, #432]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002eb8:	6013      	str	r3, [r2, #0]
 8002eba:	e00b      	b.n	8002ed4 <HAL_RCC_OscConfig+0xb0>
 8002ebc:	4b69      	ldr	r3, [pc, #420]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a68      	ldr	r2, [pc, #416]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002ec6:	6013      	str	r3, [r2, #0]
 8002ec8:	4b66      	ldr	r3, [pc, #408]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4a65      	ldr	r2, [pc, #404]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ece:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002ed2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d013      	beq.n	8002f04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002edc:	f7fe fed6 	bl	8001c8c <HAL_GetTick>
 8002ee0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ee2:	e008      	b.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ee4:	f7fe fed2 	bl	8001c8c <HAL_GetTick>
 8002ee8:	4602      	mov	r2, r0
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	1ad3      	subs	r3, r2, r3
 8002eee:	2b64      	cmp	r3, #100	; 0x64
 8002ef0:	d901      	bls.n	8002ef6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ef2:	2303      	movs	r3, #3
 8002ef4:	e207      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef6:	4b5b      	ldr	r3, [pc, #364]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d0f0      	beq.n	8002ee4 <HAL_RCC_OscConfig+0xc0>
 8002f02:	e014      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f04:	f7fe fec2 	bl	8001c8c <HAL_GetTick>
 8002f08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f0a:	e008      	b.n	8002f1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002f0c:	f7fe febe 	bl	8001c8c <HAL_GetTick>
 8002f10:	4602      	mov	r2, r0
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	1ad3      	subs	r3, r2, r3
 8002f16:	2b64      	cmp	r3, #100	; 0x64
 8002f18:	d901      	bls.n	8002f1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	e1f3      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1e:	4b51      	ldr	r3, [pc, #324]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d1f0      	bne.n	8002f0c <HAL_RCC_OscConfig+0xe8>
 8002f2a:	e000      	b.n	8002f2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d063      	beq.n	8003002 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f3a:	4b4a      	ldr	r3, [pc, #296]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f003 030c 	and.w	r3, r3, #12
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d00b      	beq.n	8002f5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f46:	4b47      	ldr	r3, [pc, #284]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002f4e:	2b08      	cmp	r3, #8
 8002f50:	d11c      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f52:	4b44      	ldr	r3, [pc, #272]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f54:	685b      	ldr	r3, [r3, #4]
 8002f56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d116      	bne.n	8002f8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5e:	4b41      	ldr	r3, [pc, #260]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0302 	and.w	r3, r3, #2
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68db      	ldr	r3, [r3, #12]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d001      	beq.n	8002f76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e1c7      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f76:	4b3b      	ldr	r3, [pc, #236]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	00db      	lsls	r3, r3, #3
 8002f84:	4937      	ldr	r1, [pc, #220]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002f86:	4313      	orrs	r3, r2
 8002f88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f8a:	e03a      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d020      	beq.n	8002fd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f94:	4b34      	ldr	r3, [pc, #208]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002f96:	2201      	movs	r2, #1
 8002f98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f9a:	f7fe fe77 	bl	8001c8c <HAL_GetTick>
 8002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fa0:	e008      	b.n	8002fb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fa2:	f7fe fe73 	bl	8001c8c <HAL_GetTick>
 8002fa6:	4602      	mov	r2, r0
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	1ad3      	subs	r3, r2, r3
 8002fac:	2b02      	cmp	r3, #2
 8002fae:	d901      	bls.n	8002fb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fb0:	2303      	movs	r3, #3
 8002fb2:	e1a8      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb4:	4b2b      	ldr	r3, [pc, #172]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0302 	and.w	r3, r3, #2
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d0f0      	beq.n	8002fa2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fc0:	4b28      	ldr	r3, [pc, #160]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	00db      	lsls	r3, r3, #3
 8002fce:	4925      	ldr	r1, [pc, #148]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002fd0:	4313      	orrs	r3, r2
 8002fd2:	600b      	str	r3, [r1, #0]
 8002fd4:	e015      	b.n	8003002 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd6:	4b24      	ldr	r3, [pc, #144]	; (8003068 <HAL_RCC_OscConfig+0x244>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fdc:	f7fe fe56 	bl	8001c8c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002fe4:	f7fe fe52 	bl	8001c8c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b02      	cmp	r3, #2
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e187      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff6:	4b1b      	ldr	r3, [pc, #108]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f003 0302 	and.w	r3, r3, #2
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d1f0      	bne.n	8002fe4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0308 	and.w	r3, r3, #8
 800300a:	2b00      	cmp	r3, #0
 800300c:	d036      	beq.n	800307c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	695b      	ldr	r3, [r3, #20]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d016      	beq.n	8003044 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003016:	4b15      	ldr	r3, [pc, #84]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003018:	2201      	movs	r2, #1
 800301a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe fe36 	bl	8001c8c <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003022:	e008      	b.n	8003036 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003024:	f7fe fe32 	bl	8001c8c <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	2b02      	cmp	r3, #2
 8003030:	d901      	bls.n	8003036 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003032:	2303      	movs	r3, #3
 8003034:	e167      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003036:	4b0b      	ldr	r3, [pc, #44]	; (8003064 <HAL_RCC_OscConfig+0x240>)
 8003038:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800303a:	f003 0302 	and.w	r3, r3, #2
 800303e:	2b00      	cmp	r3, #0
 8003040:	d0f0      	beq.n	8003024 <HAL_RCC_OscConfig+0x200>
 8003042:	e01b      	b.n	800307c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003044:	4b09      	ldr	r3, [pc, #36]	; (800306c <HAL_RCC_OscConfig+0x248>)
 8003046:	2200      	movs	r2, #0
 8003048:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800304a:	f7fe fe1f 	bl	8001c8c <HAL_GetTick>
 800304e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003050:	e00e      	b.n	8003070 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003052:	f7fe fe1b 	bl	8001c8c <HAL_GetTick>
 8003056:	4602      	mov	r2, r0
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	1ad3      	subs	r3, r2, r3
 800305c:	2b02      	cmp	r3, #2
 800305e:	d907      	bls.n	8003070 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e150      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003064:	40023800 	.word	0x40023800
 8003068:	42470000 	.word	0x42470000
 800306c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003070:	4b88      	ldr	r3, [pc, #544]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003072:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003074:	f003 0302 	and.w	r3, r3, #2
 8003078:	2b00      	cmp	r3, #0
 800307a:	d1ea      	bne.n	8003052 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0304 	and.w	r3, r3, #4
 8003084:	2b00      	cmp	r3, #0
 8003086:	f000 8097 	beq.w	80031b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800308a:	2300      	movs	r3, #0
 800308c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308e:	4b81      	ldr	r3, [pc, #516]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003096:	2b00      	cmp	r3, #0
 8003098:	d10f      	bne.n	80030ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	60bb      	str	r3, [r7, #8]
 800309e:	4b7d      	ldr	r3, [pc, #500]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a7c      	ldr	r2, [pc, #496]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b7a      	ldr	r3, [pc, #488]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030b2:	60bb      	str	r3, [r7, #8]
 80030b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b6:	2301      	movs	r3, #1
 80030b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ba:	4b77      	ldr	r3, [pc, #476]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d118      	bne.n	80030f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c6:	4b74      	ldr	r3, [pc, #464]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a73      	ldr	r2, [pc, #460]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80030d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030d2:	f7fe fddb 	bl	8001c8c <HAL_GetTick>
 80030d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d8:	e008      	b.n	80030ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030da:	f7fe fdd7 	bl	8001c8c <HAL_GetTick>
 80030de:	4602      	mov	r2, r0
 80030e0:	693b      	ldr	r3, [r7, #16]
 80030e2:	1ad3      	subs	r3, r2, r3
 80030e4:	2b02      	cmp	r3, #2
 80030e6:	d901      	bls.n	80030ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e8:	2303      	movs	r3, #3
 80030ea:	e10c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030ec:	4b6a      	ldr	r3, [pc, #424]	; (8003298 <HAL_RCC_OscConfig+0x474>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d0f0      	beq.n	80030da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d106      	bne.n	800310e <HAL_RCC_OscConfig+0x2ea>
 8003100:	4b64      	ldr	r3, [pc, #400]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003102:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003104:	4a63      	ldr	r2, [pc, #396]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003106:	f043 0301 	orr.w	r3, r3, #1
 800310a:	6713      	str	r3, [r2, #112]	; 0x70
 800310c:	e01c      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b05      	cmp	r3, #5
 8003114:	d10c      	bne.n	8003130 <HAL_RCC_OscConfig+0x30c>
 8003116:	4b5f      	ldr	r3, [pc, #380]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003118:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800311a:	4a5e      	ldr	r2, [pc, #376]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800311c:	f043 0304 	orr.w	r3, r3, #4
 8003120:	6713      	str	r3, [r2, #112]	; 0x70
 8003122:	4b5c      	ldr	r3, [pc, #368]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003126:	4a5b      	ldr	r2, [pc, #364]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6713      	str	r3, [r2, #112]	; 0x70
 800312e:	e00b      	b.n	8003148 <HAL_RCC_OscConfig+0x324>
 8003130:	4b58      	ldr	r3, [pc, #352]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003132:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003134:	4a57      	ldr	r2, [pc, #348]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003136:	f023 0301 	bic.w	r3, r3, #1
 800313a:	6713      	str	r3, [r2, #112]	; 0x70
 800313c:	4b55      	ldr	r3, [pc, #340]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800313e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003140:	4a54      	ldr	r2, [pc, #336]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003142:	f023 0304 	bic.w	r3, r3, #4
 8003146:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d015      	beq.n	800317c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003150:	f7fe fd9c 	bl	8001c8c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003156:	e00a      	b.n	800316e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003158:	f7fe fd98 	bl	8001c8c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	f241 3288 	movw	r2, #5000	; 0x1388
 8003166:	4293      	cmp	r3, r2
 8003168:	d901      	bls.n	800316e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800316a:	2303      	movs	r3, #3
 800316c:	e0cb      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316e:	4b49      	ldr	r3, [pc, #292]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003170:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003172:	f003 0302 	and.w	r3, r3, #2
 8003176:	2b00      	cmp	r3, #0
 8003178:	d0ee      	beq.n	8003158 <HAL_RCC_OscConfig+0x334>
 800317a:	e014      	b.n	80031a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800317c:	f7fe fd86 	bl	8001c8c <HAL_GetTick>
 8003180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003182:	e00a      	b.n	800319a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003184:	f7fe fd82 	bl	8001c8c <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003192:	4293      	cmp	r3, r2
 8003194:	d901      	bls.n	800319a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003196:	2303      	movs	r3, #3
 8003198:	e0b5      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800319a:	4b3e      	ldr	r3, [pc, #248]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800319c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800319e:	f003 0302 	and.w	r3, r3, #2
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d1ee      	bne.n	8003184 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80031a6:	7dfb      	ldrb	r3, [r7, #23]
 80031a8:	2b01      	cmp	r3, #1
 80031aa:	d105      	bne.n	80031b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031ac:	4b39      	ldr	r3, [pc, #228]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b0:	4a38      	ldr	r2, [pc, #224]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80031b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	699b      	ldr	r3, [r3, #24]
 80031bc:	2b00      	cmp	r3, #0
 80031be:	f000 80a1 	beq.w	8003304 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031c2:	4b34      	ldr	r3, [pc, #208]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	f003 030c 	and.w	r3, r3, #12
 80031ca:	2b08      	cmp	r3, #8
 80031cc:	d05c      	beq.n	8003288 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d141      	bne.n	800325a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d6:	4b31      	ldr	r3, [pc, #196]	; (800329c <HAL_RCC_OscConfig+0x478>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7fe fd56 	bl	8001c8c <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031e4:	f7fe fd52 	bl	8001c8c <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e087      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f6:	4b27      	ldr	r3, [pc, #156]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	69da      	ldr	r2, [r3, #28]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	431a      	orrs	r2, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003218:	085b      	lsrs	r3, r3, #1
 800321a:	3b01      	subs	r3, #1
 800321c:	041b      	lsls	r3, r3, #16
 800321e:	431a      	orrs	r2, r3
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	061b      	lsls	r3, r3, #24
 8003226:	491b      	ldr	r1, [pc, #108]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 8003228:	4313      	orrs	r3, r2
 800322a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800322c:	4b1b      	ldr	r3, [pc, #108]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800322e:	2201      	movs	r2, #1
 8003230:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003232:	f7fe fd2b 	bl	8001c8c <HAL_GetTick>
 8003236:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003238:	e008      	b.n	800324c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800323a:	f7fe fd27 	bl	8001c8c <HAL_GetTick>
 800323e:	4602      	mov	r2, r0
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	1ad3      	subs	r3, r2, r3
 8003244:	2b02      	cmp	r3, #2
 8003246:	d901      	bls.n	800324c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003248:	2303      	movs	r3, #3
 800324a:	e05c      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800324c:	4b11      	ldr	r3, [pc, #68]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d0f0      	beq.n	800323a <HAL_RCC_OscConfig+0x416>
 8003258:	e054      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800325a:	4b10      	ldr	r3, [pc, #64]	; (800329c <HAL_RCC_OscConfig+0x478>)
 800325c:	2200      	movs	r2, #0
 800325e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003260:	f7fe fd14 	bl	8001c8c <HAL_GetTick>
 8003264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003266:	e008      	b.n	800327a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003268:	f7fe fd10 	bl	8001c8c <HAL_GetTick>
 800326c:	4602      	mov	r2, r0
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	1ad3      	subs	r3, r2, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d901      	bls.n	800327a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003276:	2303      	movs	r3, #3
 8003278:	e045      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800327a:	4b06      	ldr	r3, [pc, #24]	; (8003294 <HAL_RCC_OscConfig+0x470>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f0      	bne.n	8003268 <HAL_RCC_OscConfig+0x444>
 8003286:	e03d      	b.n	8003304 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	699b      	ldr	r3, [r3, #24]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d107      	bne.n	80032a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e038      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
 8003294:	40023800 	.word	0x40023800
 8003298:	40007000 	.word	0x40007000
 800329c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_RCC_OscConfig+0x4ec>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	699b      	ldr	r3, [r3, #24]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d028      	beq.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d121      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c6:	429a      	cmp	r2, r3
 80032c8:	d11a      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ca:	68fa      	ldr	r2, [r7, #12]
 80032cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80032d0:	4013      	ands	r3, r2
 80032d2:	687a      	ldr	r2, [r7, #4]
 80032d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80032d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d8:	4293      	cmp	r3, r2
 80032da:	d111      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	085b      	lsrs	r3, r3, #1
 80032e8:	3b01      	subs	r3, #1
 80032ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d107      	bne.n	8003300 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d001      	beq.n	8003304 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003300:	2301      	movs	r3, #1
 8003302:	e000      	b.n	8003306 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003304:	2300      	movs	r3, #0
}
 8003306:	4618      	mov	r0, r3
 8003308:	3718      	adds	r7, #24
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800

08003314 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b084      	sub	sp, #16
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d101      	bne.n	8003328 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e0cc      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003328:	4b68      	ldr	r3, [pc, #416]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0307 	and.w	r3, r3, #7
 8003330:	683a      	ldr	r2, [r7, #0]
 8003332:	429a      	cmp	r2, r3
 8003334:	d90c      	bls.n	8003350 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003336:	4b65      	ldr	r3, [pc, #404]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003338:	683a      	ldr	r2, [r7, #0]
 800333a:	b2d2      	uxtb	r2, r2
 800333c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800333e:	4b63      	ldr	r3, [pc, #396]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0307 	and.w	r3, r3, #7
 8003346:	683a      	ldr	r2, [r7, #0]
 8003348:	429a      	cmp	r2, r3
 800334a:	d001      	beq.n	8003350 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0b8      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 0302 	and.w	r3, r3, #2
 8003358:	2b00      	cmp	r3, #0
 800335a:	d020      	beq.n	800339e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 0304 	and.w	r3, r3, #4
 8003364:	2b00      	cmp	r3, #0
 8003366:	d005      	beq.n	8003374 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003368:	4b59      	ldr	r3, [pc, #356]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	4a58      	ldr	r2, [pc, #352]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003372:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b00      	cmp	r3, #0
 800337e:	d005      	beq.n	800338c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003380:	4b53      	ldr	r3, [pc, #332]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	4a52      	ldr	r2, [pc, #328]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003386:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800338a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800338c:	4b50      	ldr	r3, [pc, #320]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	689b      	ldr	r3, [r3, #8]
 8003398:	494d      	ldr	r1, [pc, #308]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800339a:	4313      	orrs	r3, r2
 800339c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	f003 0301 	and.w	r3, r3, #1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d044      	beq.n	8003434 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	685b      	ldr	r3, [r3, #4]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d107      	bne.n	80033c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	4b47      	ldr	r3, [pc, #284]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d119      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e07f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	d107      	bne.n	80033e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033d2:	4b3f      	ldr	r3, [pc, #252]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d109      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e06f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e2:	4b3b      	ldr	r3, [pc, #236]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f003 0302 	and.w	r3, r3, #2
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d101      	bne.n	80033f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ee:	2301      	movs	r3, #1
 80033f0:	e067      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80033f4:	689b      	ldr	r3, [r3, #8]
 80033f6:	f023 0203 	bic.w	r2, r3, #3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	685b      	ldr	r3, [r3, #4]
 80033fe:	4934      	ldr	r1, [pc, #208]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003400:	4313      	orrs	r3, r2
 8003402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003404:	f7fe fc42 	bl	8001c8c <HAL_GetTick>
 8003408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800340a:	e00a      	b.n	8003422 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800340c:	f7fe fc3e 	bl	8001c8c <HAL_GetTick>
 8003410:	4602      	mov	r2, r0
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1ad3      	subs	r3, r2, r3
 8003416:	f241 3288 	movw	r2, #5000	; 0x1388
 800341a:	4293      	cmp	r3, r2
 800341c:	d901      	bls.n	8003422 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341e:	2303      	movs	r3, #3
 8003420:	e04f      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003422:	4b2b      	ldr	r3, [pc, #172]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 020c 	and.w	r2, r3, #12
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	685b      	ldr	r3, [r3, #4]
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	429a      	cmp	r2, r3
 8003432:	d1eb      	bne.n	800340c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003434:	4b25      	ldr	r3, [pc, #148]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0307 	and.w	r3, r3, #7
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d20c      	bcs.n	800345c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003442:	4b22      	ldr	r3, [pc, #136]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	683a      	ldr	r2, [r7, #0]
 8003446:	b2d2      	uxtb	r2, r2
 8003448:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800344a:	4b20      	ldr	r3, [pc, #128]	; (80034cc <HAL_RCC_ClockConfig+0x1b8>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f003 0307 	and.w	r3, r3, #7
 8003452:	683a      	ldr	r2, [r7, #0]
 8003454:	429a      	cmp	r2, r3
 8003456:	d001      	beq.n	800345c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e032      	b.n	80034c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d008      	beq.n	800347a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003468:	4b19      	ldr	r3, [pc, #100]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 800346a:	689b      	ldr	r3, [r3, #8]
 800346c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	68db      	ldr	r3, [r3, #12]
 8003474:	4916      	ldr	r1, [pc, #88]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	4313      	orrs	r3, r2
 8003478:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d009      	beq.n	800349a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003486:	4b12      	ldr	r3, [pc, #72]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003488:	689b      	ldr	r3, [r3, #8]
 800348a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	00db      	lsls	r3, r3, #3
 8003494:	490e      	ldr	r1, [pc, #56]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 8003496:	4313      	orrs	r3, r2
 8003498:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800349a:	f000 f821 	bl	80034e0 <HAL_RCC_GetSysClockFreq>
 800349e:	4602      	mov	r2, r0
 80034a0:	4b0b      	ldr	r3, [pc, #44]	; (80034d0 <HAL_RCC_ClockConfig+0x1bc>)
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	091b      	lsrs	r3, r3, #4
 80034a6:	f003 030f 	and.w	r3, r3, #15
 80034aa:	490a      	ldr	r1, [pc, #40]	; (80034d4 <HAL_RCC_ClockConfig+0x1c0>)
 80034ac:	5ccb      	ldrb	r3, [r1, r3]
 80034ae:	fa22 f303 	lsr.w	r3, r2, r3
 80034b2:	4a09      	ldr	r2, [pc, #36]	; (80034d8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80034b6:	4b09      	ldr	r3, [pc, #36]	; (80034dc <HAL_RCC_ClockConfig+0x1c8>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4618      	mov	r0, r3
 80034bc:	f7fe fba2 	bl	8001c04 <HAL_InitTick>

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	3710      	adds	r7, #16
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	40023c00 	.word	0x40023c00
 80034d0:	40023800 	.word	0x40023800
 80034d4:	08005cdc 	.word	0x08005cdc
 80034d8:	20000020 	.word	0x20000020
 80034dc:	20000024 	.word	0x20000024

080034e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e4:	b090      	sub	sp, #64	; 0x40
 80034e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	637b      	str	r3, [r7, #52]	; 0x34
 80034ec:	2300      	movs	r3, #0
 80034ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034f0:	2300      	movs	r3, #0
 80034f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80034f4:	2300      	movs	r3, #0
 80034f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f8:	4b59      	ldr	r3, [pc, #356]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	f003 030c 	and.w	r3, r3, #12
 8003500:	2b08      	cmp	r3, #8
 8003502:	d00d      	beq.n	8003520 <HAL_RCC_GetSysClockFreq+0x40>
 8003504:	2b08      	cmp	r3, #8
 8003506:	f200 80a1 	bhi.w	800364c <HAL_RCC_GetSysClockFreq+0x16c>
 800350a:	2b00      	cmp	r3, #0
 800350c:	d002      	beq.n	8003514 <HAL_RCC_GetSysClockFreq+0x34>
 800350e:	2b04      	cmp	r3, #4
 8003510:	d003      	beq.n	800351a <HAL_RCC_GetSysClockFreq+0x3a>
 8003512:	e09b      	b.n	800364c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003514:	4b53      	ldr	r3, [pc, #332]	; (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 8003516:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003518:	e09b      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800351a:	4b53      	ldr	r3, [pc, #332]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800351c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800351e:	e098      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003520:	4b4f      	ldr	r3, [pc, #316]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003528:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800352a:	4b4d      	ldr	r3, [pc, #308]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d028      	beq.n	8003588 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b4a      	ldr	r3, [pc, #296]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	627a      	str	r2, [r7, #36]	; 0x24
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003548:	2100      	movs	r1, #0
 800354a:	4b47      	ldr	r3, [pc, #284]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800354c:	fb03 f201 	mul.w	r2, r3, r1
 8003550:	2300      	movs	r3, #0
 8003552:	fb00 f303 	mul.w	r3, r0, r3
 8003556:	4413      	add	r3, r2
 8003558:	4a43      	ldr	r2, [pc, #268]	; (8003668 <HAL_RCC_GetSysClockFreq+0x188>)
 800355a:	fba0 1202 	umull	r1, r2, r0, r2
 800355e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003560:	460a      	mov	r2, r1
 8003562:	62ba      	str	r2, [r7, #40]	; 0x28
 8003564:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003566:	4413      	add	r3, r2
 8003568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800356a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800356c:	2200      	movs	r2, #0
 800356e:	61bb      	str	r3, [r7, #24]
 8003570:	61fa      	str	r2, [r7, #28]
 8003572:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003576:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800357a:	f7fc fe25 	bl	80001c8 <__aeabi_uldivmod>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4613      	mov	r3, r2
 8003584:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003586:	e053      	b.n	8003630 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003588:	4b35      	ldr	r3, [pc, #212]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	099b      	lsrs	r3, r3, #6
 800358e:	2200      	movs	r2, #0
 8003590:	613b      	str	r3, [r7, #16]
 8003592:	617a      	str	r2, [r7, #20]
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800359a:	f04f 0b00 	mov.w	fp, #0
 800359e:	4652      	mov	r2, sl
 80035a0:	465b      	mov	r3, fp
 80035a2:	f04f 0000 	mov.w	r0, #0
 80035a6:	f04f 0100 	mov.w	r1, #0
 80035aa:	0159      	lsls	r1, r3, #5
 80035ac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80035b0:	0150      	lsls	r0, r2, #5
 80035b2:	4602      	mov	r2, r0
 80035b4:	460b      	mov	r3, r1
 80035b6:	ebb2 080a 	subs.w	r8, r2, sl
 80035ba:	eb63 090b 	sbc.w	r9, r3, fp
 80035be:	f04f 0200 	mov.w	r2, #0
 80035c2:	f04f 0300 	mov.w	r3, #0
 80035c6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80035ca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80035ce:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80035d2:	ebb2 0408 	subs.w	r4, r2, r8
 80035d6:	eb63 0509 	sbc.w	r5, r3, r9
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	00eb      	lsls	r3, r5, #3
 80035e4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80035e8:	00e2      	lsls	r2, r4, #3
 80035ea:	4614      	mov	r4, r2
 80035ec:	461d      	mov	r5, r3
 80035ee:	eb14 030a 	adds.w	r3, r4, sl
 80035f2:	603b      	str	r3, [r7, #0]
 80035f4:	eb45 030b 	adc.w	r3, r5, fp
 80035f8:	607b      	str	r3, [r7, #4]
 80035fa:	f04f 0200 	mov.w	r2, #0
 80035fe:	f04f 0300 	mov.w	r3, #0
 8003602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003606:	4629      	mov	r1, r5
 8003608:	028b      	lsls	r3, r1, #10
 800360a:	4621      	mov	r1, r4
 800360c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003610:	4621      	mov	r1, r4
 8003612:	028a      	lsls	r2, r1, #10
 8003614:	4610      	mov	r0, r2
 8003616:	4619      	mov	r1, r3
 8003618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800361a:	2200      	movs	r2, #0
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	60fa      	str	r2, [r7, #12]
 8003620:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003624:	f7fc fdd0 	bl	80001c8 <__aeabi_uldivmod>
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4613      	mov	r3, r2
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003630:	4b0b      	ldr	r3, [pc, #44]	; (8003660 <HAL_RCC_GetSysClockFreq+0x180>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	0c1b      	lsrs	r3, r3, #16
 8003636:	f003 0303 	and.w	r3, r3, #3
 800363a:	3301      	adds	r3, #1
 800363c:	005b      	lsls	r3, r3, #1
 800363e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003640:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003642:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003644:	fbb2 f3f3 	udiv	r3, r2, r3
 8003648:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800364a:	e002      	b.n	8003652 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800364c:	4b05      	ldr	r3, [pc, #20]	; (8003664 <HAL_RCC_GetSysClockFreq+0x184>)
 800364e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003654:	4618      	mov	r0, r3
 8003656:	3740      	adds	r7, #64	; 0x40
 8003658:	46bd      	mov	sp, r7
 800365a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800365e:	bf00      	nop
 8003660:	40023800 	.word	0x40023800
 8003664:	00f42400 	.word	0x00f42400
 8003668:	017d7840 	.word	0x017d7840

0800366c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800366c:	b480      	push	{r7}
 800366e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003670:	4b03      	ldr	r3, [pc, #12]	; (8003680 <HAL_RCC_GetHCLKFreq+0x14>)
 8003672:	681b      	ldr	r3, [r3, #0]
}
 8003674:	4618      	mov	r0, r3
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000020 	.word	0x20000020

08003684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003688:	f7ff fff0 	bl	800366c <HAL_RCC_GetHCLKFreq>
 800368c:	4602      	mov	r2, r0
 800368e:	4b05      	ldr	r3, [pc, #20]	; (80036a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	0a9b      	lsrs	r3, r3, #10
 8003694:	f003 0307 	and.w	r3, r3, #7
 8003698:	4903      	ldr	r1, [pc, #12]	; (80036a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	bd80      	pop	{r7, pc}
 80036a4:	40023800 	.word	0x40023800
 80036a8:	08005cec 	.word	0x08005cec

080036ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80036b0:	f7ff ffdc 	bl	800366c <HAL_RCC_GetHCLKFreq>
 80036b4:	4602      	mov	r2, r0
 80036b6:	4b05      	ldr	r3, [pc, #20]	; (80036cc <HAL_RCC_GetPCLK2Freq+0x20>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	0b5b      	lsrs	r3, r3, #13
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	4903      	ldr	r1, [pc, #12]	; (80036d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80036c2:	5ccb      	ldrb	r3, [r1, r3]
 80036c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	bd80      	pop	{r7, pc}
 80036cc:	40023800 	.word	0x40023800
 80036d0:	08005cec 	.word	0x08005cec

080036d4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80036d4:	b580      	push	{r7, lr}
 80036d6:	b082      	sub	sp, #8
 80036d8:	af00      	add	r7, sp, #0
 80036da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d101      	bne.n	80036e6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80036e2:	2301      	movs	r3, #1
 80036e4:	e041      	b.n	800376a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d106      	bne.n	8003700 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	2200      	movs	r2, #0
 80036f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80036fa:	6878      	ldr	r0, [r7, #4]
 80036fc:	f7fe f82c 	bl	8001758 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	3304      	adds	r3, #4
 8003710:	4619      	mov	r1, r3
 8003712:	4610      	mov	r0, r2
 8003714:	f000 fe16 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	2201      	movs	r2, #1
 800371c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2201      	movs	r2, #1
 800372c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2201      	movs	r2, #1
 800373c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2201      	movs	r2, #1
 8003744:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2201      	movs	r2, #1
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2201      	movs	r2, #1
 8003754:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3708      	adds	r7, #8
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
	...

08003774 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003782:	b2db      	uxtb	r3, r3
 8003784:	2b01      	cmp	r3, #1
 8003786:	d001      	beq.n	800378c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003788:	2301      	movs	r3, #1
 800378a:	e04e      	b.n	800382a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2202      	movs	r2, #2
 8003790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	68da      	ldr	r2, [r3, #12]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	f042 0201 	orr.w	r2, r2, #1
 80037a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	4a23      	ldr	r2, [pc, #140]	; (8003838 <HAL_TIM_Base_Start_IT+0xc4>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d022      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037b6:	d01d      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <HAL_TIM_Base_Start_IT+0xc8>)
 80037be:	4293      	cmp	r3, r2
 80037c0:	d018      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a1e      	ldr	r2, [pc, #120]	; (8003840 <HAL_TIM_Base_Start_IT+0xcc>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d013      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	4a1c      	ldr	r2, [pc, #112]	; (8003844 <HAL_TIM_Base_Start_IT+0xd0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d00e      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4a1b      	ldr	r2, [pc, #108]	; (8003848 <HAL_TIM_Base_Start_IT+0xd4>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d009      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	4a19      	ldr	r2, [pc, #100]	; (800384c <HAL_TIM_Base_Start_IT+0xd8>)
 80037e6:	4293      	cmp	r3, r2
 80037e8:	d004      	beq.n	80037f4 <HAL_TIM_Base_Start_IT+0x80>
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	4a18      	ldr	r2, [pc, #96]	; (8003850 <HAL_TIM_Base_Start_IT+0xdc>)
 80037f0:	4293      	cmp	r3, r2
 80037f2:	d111      	bne.n	8003818 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f003 0307 	and.w	r3, r3, #7
 80037fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	2b06      	cmp	r3, #6
 8003804:	d010      	beq.n	8003828 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	681a      	ldr	r2, [r3, #0]
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f042 0201 	orr.w	r2, r2, #1
 8003814:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	e007      	b.n	8003828 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	681a      	ldr	r2, [r3, #0]
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	f042 0201 	orr.w	r2, r2, #1
 8003826:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003828:	2300      	movs	r3, #0
}
 800382a:	4618      	mov	r0, r3
 800382c:	3714      	adds	r7, #20
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40010000 	.word	0x40010000
 800383c:	40000400 	.word	0x40000400
 8003840:	40000800 	.word	0x40000800
 8003844:	40000c00 	.word	0x40000c00
 8003848:	40010400 	.word	0x40010400
 800384c:	40014000 	.word	0x40014000
 8003850:	40001800 	.word	0x40001800

08003854 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003854:	b580      	push	{r7, lr}
 8003856:	b082      	sub	sp, #8
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2b00      	cmp	r3, #0
 8003860:	d101      	bne.n	8003866 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003862:	2301      	movs	r3, #1
 8003864:	e041      	b.n	80038ea <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800386c:	b2db      	uxtb	r3, r3
 800386e:	2b00      	cmp	r3, #0
 8003870:	d106      	bne.n	8003880 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	2200      	movs	r2, #0
 8003876:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800387a:	6878      	ldr	r0, [r7, #4]
 800387c:	f000 f839 	bl	80038f2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2202      	movs	r2, #2
 8003884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	3304      	adds	r3, #4
 8003890:	4619      	mov	r1, r3
 8003892:	4610      	mov	r0, r2
 8003894:	f000 fd56 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	2201      	movs	r2, #1
 800389c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	2201      	movs	r2, #1
 80038a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	2201      	movs	r2, #1
 80038ac:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2201      	movs	r2, #1
 80038bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2201      	movs	r2, #1
 80038cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2201      	movs	r2, #1
 80038d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2201      	movs	r2, #1
 80038dc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2201      	movs	r2, #1
 80038e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3708      	adds	r7, #8
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b083      	sub	sp, #12
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80038fa:	bf00      	nop
 80038fc:	370c      	adds	r7, #12
 80038fe:	46bd      	mov	sp, r7
 8003900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003904:	4770      	bx	lr
	...

08003908 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b00      	cmp	r3, #0
 8003916:	d109      	bne.n	800392c <HAL_TIM_PWM_Start+0x24>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800391e:	b2db      	uxtb	r3, r3
 8003920:	2b01      	cmp	r3, #1
 8003922:	bf14      	ite	ne
 8003924:	2301      	movne	r3, #1
 8003926:	2300      	moveq	r3, #0
 8003928:	b2db      	uxtb	r3, r3
 800392a:	e022      	b.n	8003972 <HAL_TIM_PWM_Start+0x6a>
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	2b04      	cmp	r3, #4
 8003930:	d109      	bne.n	8003946 <HAL_TIM_PWM_Start+0x3e>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003938:	b2db      	uxtb	r3, r3
 800393a:	2b01      	cmp	r3, #1
 800393c:	bf14      	ite	ne
 800393e:	2301      	movne	r3, #1
 8003940:	2300      	moveq	r3, #0
 8003942:	b2db      	uxtb	r3, r3
 8003944:	e015      	b.n	8003972 <HAL_TIM_PWM_Start+0x6a>
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	2b08      	cmp	r3, #8
 800394a:	d109      	bne.n	8003960 <HAL_TIM_PWM_Start+0x58>
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003952:	b2db      	uxtb	r3, r3
 8003954:	2b01      	cmp	r3, #1
 8003956:	bf14      	ite	ne
 8003958:	2301      	movne	r3, #1
 800395a:	2300      	moveq	r3, #0
 800395c:	b2db      	uxtb	r3, r3
 800395e:	e008      	b.n	8003972 <HAL_TIM_PWM_Start+0x6a>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b01      	cmp	r3, #1
 800396a:	bf14      	ite	ne
 800396c:	2301      	movne	r3, #1
 800396e:	2300      	moveq	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d001      	beq.n	800397a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003976:	2301      	movs	r3, #1
 8003978:	e07c      	b.n	8003a74 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d104      	bne.n	800398a <HAL_TIM_PWM_Start+0x82>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2202      	movs	r2, #2
 8003984:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003988:	e013      	b.n	80039b2 <HAL_TIM_PWM_Start+0xaa>
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	2b04      	cmp	r3, #4
 800398e:	d104      	bne.n	800399a <HAL_TIM_PWM_Start+0x92>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2202      	movs	r2, #2
 8003994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003998:	e00b      	b.n	80039b2 <HAL_TIM_PWM_Start+0xaa>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d104      	bne.n	80039aa <HAL_TIM_PWM_Start+0xa2>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2202      	movs	r2, #2
 80039a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039a8:	e003      	b.n	80039b2 <HAL_TIM_PWM_Start+0xaa>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2202      	movs	r2, #2
 80039ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	2201      	movs	r2, #1
 80039b8:	6839      	ldr	r1, [r7, #0]
 80039ba:	4618      	mov	r0, r3
 80039bc:	f001 f8d6 	bl	8004b6c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a2d      	ldr	r2, [pc, #180]	; (8003a7c <HAL_TIM_PWM_Start+0x174>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d004      	beq.n	80039d4 <HAL_TIM_PWM_Start+0xcc>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	4a2c      	ldr	r2, [pc, #176]	; (8003a80 <HAL_TIM_PWM_Start+0x178>)
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d101      	bne.n	80039d8 <HAL_TIM_PWM_Start+0xd0>
 80039d4:	2301      	movs	r3, #1
 80039d6:	e000      	b.n	80039da <HAL_TIM_PWM_Start+0xd2>
 80039d8:	2300      	movs	r3, #0
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4a22      	ldr	r2, [pc, #136]	; (8003a7c <HAL_TIM_PWM_Start+0x174>)
 80039f4:	4293      	cmp	r3, r2
 80039f6:	d022      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a00:	d01d      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	4a1f      	ldr	r2, [pc, #124]	; (8003a84 <HAL_TIM_PWM_Start+0x17c>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d018      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	4a1d      	ldr	r2, [pc, #116]	; (8003a88 <HAL_TIM_PWM_Start+0x180>)
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d013      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	4a1c      	ldr	r2, [pc, #112]	; (8003a8c <HAL_TIM_PWM_Start+0x184>)
 8003a1c:	4293      	cmp	r3, r2
 8003a1e:	d00e      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	4a16      	ldr	r2, [pc, #88]	; (8003a80 <HAL_TIM_PWM_Start+0x178>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a18      	ldr	r2, [pc, #96]	; (8003a90 <HAL_TIM_PWM_Start+0x188>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <HAL_TIM_PWM_Start+0x136>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a16      	ldr	r2, [pc, #88]	; (8003a94 <HAL_TIM_PWM_Start+0x18c>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d111      	bne.n	8003a62 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d010      	beq.n	8003a72 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f042 0201 	orr.w	r2, r2, #1
 8003a5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a60:	e007      	b.n	8003a72 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681a      	ldr	r2, [r3, #0]
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f042 0201 	orr.w	r2, r2, #1
 8003a70:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a72:	2300      	movs	r3, #0
}
 8003a74:	4618      	mov	r0, r3
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}
 8003a7c:	40010000 	.word	0x40010000
 8003a80:	40010400 	.word	0x40010400
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40014000 	.word	0x40014000
 8003a94:	40001800 	.word	0x40001800

08003a98 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b082      	sub	sp, #8
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	e041      	b.n	8003b2e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d106      	bne.n	8003ac4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	2200      	movs	r2, #0
 8003aba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 f839 	bl	8003b36 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2202      	movs	r2, #2
 8003ac8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681a      	ldr	r2, [r3, #0]
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	3304      	adds	r3, #4
 8003ad4:	4619      	mov	r1, r3
 8003ad6:	4610      	mov	r0, r2
 8003ad8:	f000 fc34 	bl	8004344 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2201      	movs	r2, #1
 8003ae0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3708      	adds	r7, #8
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}

08003b36 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003b36:	b480      	push	{r7}
 8003b38:	b083      	sub	sp, #12
 8003b3a:	af00      	add	r7, sp, #0
 8003b3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003b3e:	bf00      	nop
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr

08003b4a <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b086      	sub	sp, #24
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	6078      	str	r0, [r7, #4]
 8003b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d101      	bne.n	8003b5e <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e097      	b.n	8003c8e <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b64:	b2db      	uxtb	r3, r3
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d106      	bne.n	8003b78 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f7fd fe88 	bl	8001888 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2202      	movs	r2, #2
 8003b7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	687a      	ldr	r2, [r7, #4]
 8003b88:	6812      	ldr	r2, [r2, #0]
 8003b8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b8e:	f023 0307 	bic.w	r3, r3, #7
 8003b92:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	3304      	adds	r3, #4
 8003b9c:	4619      	mov	r1, r3
 8003b9e:	4610      	mov	r0, r2
 8003ba0:	f000 fbd0 	bl	8004344 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6a1b      	ldr	r3, [r3, #32]
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	697a      	ldr	r2, [r7, #20]
 8003bc2:	4313      	orrs	r3, r2
 8003bc4:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bcc:	f023 0303 	bic.w	r3, r3, #3
 8003bd0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003bd2:	683b      	ldr	r3, [r7, #0]
 8003bd4:	689a      	ldr	r2, [r3, #8]
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	021b      	lsls	r3, r3, #8
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	693a      	ldr	r2, [r7, #16]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003bea:	f023 030c 	bic.w	r3, r3, #12
 8003bee:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003bf0:	693b      	ldr	r3, [r7, #16]
 8003bf2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003bfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68da      	ldr	r2, [r3, #12]
 8003c00:	683b      	ldr	r3, [r7, #0]
 8003c02:	69db      	ldr	r3, [r3, #28]
 8003c04:	021b      	lsls	r3, r3, #8
 8003c06:	4313      	orrs	r3, r2
 8003c08:	693a      	ldr	r2, [r7, #16]
 8003c0a:	4313      	orrs	r3, r2
 8003c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	691b      	ldr	r3, [r3, #16]
 8003c12:	011a      	lsls	r2, r3, #4
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	6a1b      	ldr	r3, [r3, #32]
 8003c18:	031b      	lsls	r3, r3, #12
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003c28:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003c30:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	683b      	ldr	r3, [r7, #0]
 8003c38:	695b      	ldr	r3, [r3, #20]
 8003c3a:	011b      	lsls	r3, r3, #4
 8003c3c:	4313      	orrs	r3, r2
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	4313      	orrs	r3, r2
 8003c42:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	697a      	ldr	r2, [r7, #20]
 8003c4a:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	693a      	ldr	r2, [r7, #16]
 8003c52:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68fa      	ldr	r2, [r7, #12]
 8003c5a:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	2201      	movs	r2, #1
 8003c60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2201      	movs	r2, #1
 8003c68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2201      	movs	r2, #1
 8003c70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	2201      	movs	r2, #1
 8003c78:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2201      	movs	r2, #1
 8003c80:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2201      	movs	r2, #1
 8003c88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003c8c:	2300      	movs	r3, #0
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	3718      	adds	r7, #24
 8003c92:	46bd      	mov	sp, r7
 8003c94:	bd80      	pop	{r7, pc}

08003c96 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c96:	b580      	push	{r7, lr}
 8003c98:	b082      	sub	sp, #8
 8003c9a:	af00      	add	r7, sp, #0
 8003c9c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	691b      	ldr	r3, [r3, #16]
 8003ca4:	f003 0302 	and.w	r3, r3, #2
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d122      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	f003 0302 	and.w	r3, r3, #2
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d11b      	bne.n	8003cf2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f06f 0202 	mvn.w	r2, #2
 8003cc2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	699b      	ldr	r3, [r3, #24]
 8003cd0:	f003 0303 	and.w	r3, r3, #3
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d003      	beq.n	8003ce0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cd8:	6878      	ldr	r0, [r7, #4]
 8003cda:	f000 fb14 	bl	8004306 <HAL_TIM_IC_CaptureCallback>
 8003cde:	e005      	b.n	8003cec <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f000 fb06 	bl	80042f2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fb17 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0304 	and.w	r3, r3, #4
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d122      	bne.n	8003d46 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	f003 0304 	and.w	r3, r3, #4
 8003d0a:	2b04      	cmp	r3, #4
 8003d0c:	d11b      	bne.n	8003d46 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f06f 0204 	mvn.w	r2, #4
 8003d16:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	699b      	ldr	r3, [r3, #24]
 8003d24:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d003      	beq.n	8003d34 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d2c:	6878      	ldr	r0, [r7, #4]
 8003d2e:	f000 faea 	bl	8004306 <HAL_TIM_IC_CaptureCallback>
 8003d32:	e005      	b.n	8003d40 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 fadc 	bl	80042f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 faed 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2200      	movs	r2, #0
 8003d44:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	691b      	ldr	r3, [r3, #16]
 8003d4c:	f003 0308 	and.w	r3, r3, #8
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	d122      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	f003 0308 	and.w	r3, r3, #8
 8003d5e:	2b08      	cmp	r3, #8
 8003d60:	d11b      	bne.n	8003d9a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f06f 0208 	mvn.w	r2, #8
 8003d6a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2204      	movs	r2, #4
 8003d70:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	69db      	ldr	r3, [r3, #28]
 8003d78:	f003 0303 	and.w	r3, r3, #3
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d003      	beq.n	8003d88 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 fac0 	bl	8004306 <HAL_TIM_IC_CaptureCallback>
 8003d86:	e005      	b.n	8003d94 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 fab2 	bl	80042f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	f000 fac3 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2200      	movs	r2, #0
 8003d98:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	691b      	ldr	r3, [r3, #16]
 8003da0:	f003 0310 	and.w	r3, r3, #16
 8003da4:	2b10      	cmp	r3, #16
 8003da6:	d122      	bne.n	8003dee <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	68db      	ldr	r3, [r3, #12]
 8003dae:	f003 0310 	and.w	r3, r3, #16
 8003db2:	2b10      	cmp	r3, #16
 8003db4:	d11b      	bne.n	8003dee <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f06f 0210 	mvn.w	r2, #16
 8003dbe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2208      	movs	r2, #8
 8003dc4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69db      	ldr	r3, [r3, #28]
 8003dcc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d003      	beq.n	8003ddc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f000 fa96 	bl	8004306 <HAL_TIM_IC_CaptureCallback>
 8003dda:	e005      	b.n	8003de8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ddc:	6878      	ldr	r0, [r7, #4]
 8003dde:	f000 fa88 	bl	80042f2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 fa99 	bl	800431a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	f003 0301 	and.w	r3, r3, #1
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d10e      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	68db      	ldr	r3, [r3, #12]
 8003e02:	f003 0301 	and.w	r3, r3, #1
 8003e06:	2b01      	cmp	r3, #1
 8003e08:	d107      	bne.n	8003e1a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f06f 0201 	mvn.w	r2, #1
 8003e12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e14:	6878      	ldr	r0, [r7, #4]
 8003e16:	f7fd fb7b 	bl	8001510 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	691b      	ldr	r3, [r3, #16]
 8003e20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e24:	2b80      	cmp	r3, #128	; 0x80
 8003e26:	d10e      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e32:	2b80      	cmp	r3, #128	; 0x80
 8003e34:	d107      	bne.n	8003e46 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e40:	6878      	ldr	r0, [r7, #4]
 8003e42:	f000 ff91 	bl	8004d68 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e50:	2b40      	cmp	r3, #64	; 0x40
 8003e52:	d10e      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e5e:	2b40      	cmp	r3, #64	; 0x40
 8003e60:	d107      	bne.n	8003e72 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e6c:	6878      	ldr	r0, [r7, #4]
 8003e6e:	f000 fa5e 	bl	800432e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	691b      	ldr	r3, [r3, #16]
 8003e78:	f003 0320 	and.w	r3, r3, #32
 8003e7c:	2b20      	cmp	r3, #32
 8003e7e:	d10e      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	f003 0320 	and.w	r3, r3, #32
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d107      	bne.n	8003e9e <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	f06f 0220 	mvn.w	r2, #32
 8003e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e98:	6878      	ldr	r0, [r7, #4]
 8003e9a:	f000 ff5b 	bl	8004d54 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e9e:	bf00      	nop
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b086      	sub	sp, #24
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eb2:	2300      	movs	r3, #0
 8003eb4:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d101      	bne.n	8003ec4 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003ec0:	2302      	movs	r3, #2
 8003ec2:	e088      	b.n	8003fd6 <HAL_TIM_IC_ConfigChannel+0x130>
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d11b      	bne.n	8003f0a <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6818      	ldr	r0, [r3, #0]
 8003ed6:	68bb      	ldr	r3, [r7, #8]
 8003ed8:	6819      	ldr	r1, [r3, #0]
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	685a      	ldr	r2, [r3, #4]
 8003ede:	68bb      	ldr	r3, [r7, #8]
 8003ee0:	68db      	ldr	r3, [r3, #12]
 8003ee2:	f000 fc7f 	bl	80047e4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	699a      	ldr	r2, [r3, #24]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f022 020c 	bic.w	r2, r2, #12
 8003ef4:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	6999      	ldr	r1, [r3, #24]
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	689a      	ldr	r2, [r3, #8]
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	430a      	orrs	r2, r1
 8003f06:	619a      	str	r2, [r3, #24]
 8003f08:	e060      	b.n	8003fcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2b04      	cmp	r3, #4
 8003f0e:	d11c      	bne.n	8003f4a <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6818      	ldr	r0, [r3, #0]
 8003f14:	68bb      	ldr	r3, [r7, #8]
 8003f16:	6819      	ldr	r1, [r3, #0]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	685a      	ldr	r2, [r3, #4]
 8003f1c:	68bb      	ldr	r3, [r7, #8]
 8003f1e:	68db      	ldr	r3, [r3, #12]
 8003f20:	f000 fd03 	bl	800492a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	699a      	ldr	r2, [r3, #24]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003f32:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	6999      	ldr	r1, [r3, #24]
 8003f3a:	68bb      	ldr	r3, [r7, #8]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	021a      	lsls	r2, r3, #8
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	430a      	orrs	r2, r1
 8003f46:	619a      	str	r2, [r3, #24]
 8003f48:	e040      	b.n	8003fcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	2b08      	cmp	r3, #8
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	6818      	ldr	r0, [r3, #0]
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	6819      	ldr	r1, [r3, #0]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	68db      	ldr	r3, [r3, #12]
 8003f60:	f000 fd50 	bl	8004a04 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	69da      	ldr	r2, [r3, #28]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f022 020c 	bic.w	r2, r2, #12
 8003f72:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	69d9      	ldr	r1, [r3, #28]
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	689a      	ldr	r2, [r3, #8]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	430a      	orrs	r2, r1
 8003f84:	61da      	str	r2, [r3, #28]
 8003f86:	e021      	b.n	8003fcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b0c      	cmp	r3, #12
 8003f8c:	d11c      	bne.n	8003fc8 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	6818      	ldr	r0, [r3, #0]
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	6819      	ldr	r1, [r3, #0]
 8003f96:	68bb      	ldr	r3, [r7, #8]
 8003f98:	685a      	ldr	r2, [r3, #4]
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f000 fd6d 	bl	8004a7c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69da      	ldr	r2, [r3, #28]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003fb0:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	69d9      	ldr	r1, [r3, #28]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
 8003fba:	689b      	ldr	r3, [r3, #8]
 8003fbc:	021a      	lsls	r2, r3, #8
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	430a      	orrs	r2, r1
 8003fc4:	61da      	str	r2, [r3, #28]
 8003fc6:	e001      	b.n	8003fcc <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003fc8:	2301      	movs	r3, #1
 8003fca:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003fd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	3718      	adds	r7, #24
 8003fda:	46bd      	mov	sp, r7
 8003fdc:	bd80      	pop	{r7, pc}
	...

08003fe0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003fe0:	b580      	push	{r7, lr}
 8003fe2:	b086      	sub	sp, #24
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	60f8      	str	r0, [r7, #12]
 8003fe8:	60b9      	str	r1, [r7, #8]
 8003fea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003fec:	2300      	movs	r3, #0
 8003fee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ff6:	2b01      	cmp	r3, #1
 8003ff8:	d101      	bne.n	8003ffe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003ffa:	2302      	movs	r3, #2
 8003ffc:	e0ae      	b.n	800415c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b0c      	cmp	r3, #12
 800400a:	f200 809f 	bhi.w	800414c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800400e:	a201      	add	r2, pc, #4	; (adr r2, 8004014 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004014:	08004049 	.word	0x08004049
 8004018:	0800414d 	.word	0x0800414d
 800401c:	0800414d 	.word	0x0800414d
 8004020:	0800414d 	.word	0x0800414d
 8004024:	08004089 	.word	0x08004089
 8004028:	0800414d 	.word	0x0800414d
 800402c:	0800414d 	.word	0x0800414d
 8004030:	0800414d 	.word	0x0800414d
 8004034:	080040cb 	.word	0x080040cb
 8004038:	0800414d 	.word	0x0800414d
 800403c:	0800414d 	.word	0x0800414d
 8004040:	0800414d 	.word	0x0800414d
 8004044:	0800410b 	.word	0x0800410b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	68b9      	ldr	r1, [r7, #8]
 800404e:	4618      	mov	r0, r3
 8004050:	f000 fa18 	bl	8004484 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	699a      	ldr	r2, [r3, #24]
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	f042 0208 	orr.w	r2, r2, #8
 8004062:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699a      	ldr	r2, [r3, #24]
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f022 0204 	bic.w	r2, r2, #4
 8004072:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6999      	ldr	r1, [r3, #24]
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	691a      	ldr	r2, [r3, #16]
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	430a      	orrs	r2, r1
 8004084:	619a      	str	r2, [r3, #24]
      break;
 8004086:	e064      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	68b9      	ldr	r1, [r7, #8]
 800408e:	4618      	mov	r0, r3
 8004090:	f000 fa68 	bl	8004564 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	699a      	ldr	r2, [r3, #24]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80040a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	699a      	ldr	r2, [r3, #24]
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6999      	ldr	r1, [r3, #24]
 80040ba:	68bb      	ldr	r3, [r7, #8]
 80040bc:	691b      	ldr	r3, [r3, #16]
 80040be:	021a      	lsls	r2, r3, #8
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	430a      	orrs	r2, r1
 80040c6:	619a      	str	r2, [r3, #24]
      break;
 80040c8:	e043      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	68b9      	ldr	r1, [r7, #8]
 80040d0:	4618      	mov	r0, r3
 80040d2:	f000 fabd 	bl	8004650 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	69da      	ldr	r2, [r3, #28]
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f042 0208 	orr.w	r2, r2, #8
 80040e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f022 0204 	bic.w	r2, r2, #4
 80040f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	69d9      	ldr	r1, [r3, #28]
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	691a      	ldr	r2, [r3, #16]
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	430a      	orrs	r2, r1
 8004106:	61da      	str	r2, [r3, #28]
      break;
 8004108:	e023      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68b9      	ldr	r1, [r7, #8]
 8004110:	4618      	mov	r0, r3
 8004112:	f000 fb11 	bl	8004738 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	69da      	ldr	r2, [r3, #28]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004124:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69da      	ldr	r2, [r3, #28]
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004134:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	69d9      	ldr	r1, [r3, #28]
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	691b      	ldr	r3, [r3, #16]
 8004140:	021a      	lsls	r2, r3, #8
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	430a      	orrs	r2, r1
 8004148:	61da      	str	r2, [r3, #28]
      break;
 800414a:	e002      	b.n	8004152 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	75fb      	strb	r3, [r7, #23]
      break;
 8004150:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800415a:	7dfb      	ldrb	r3, [r7, #23]
}
 800415c:	4618      	mov	r0, r3
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b084      	sub	sp, #16
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
 800416c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800416e:	2300      	movs	r3, #0
 8004170:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004178:	2b01      	cmp	r3, #1
 800417a:	d101      	bne.n	8004180 <HAL_TIM_ConfigClockSource+0x1c>
 800417c:	2302      	movs	r3, #2
 800417e:	e0b4      	b.n	80042ea <HAL_TIM_ConfigClockSource+0x186>
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2202      	movs	r2, #2
 800418c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	689b      	ldr	r3, [r3, #8]
 8004196:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004198:	68bb      	ldr	r3, [r7, #8]
 800419a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800419e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80041a0:	68bb      	ldr	r3, [r7, #8]
 80041a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80041a6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	68ba      	ldr	r2, [r7, #8]
 80041ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041b8:	d03e      	beq.n	8004238 <HAL_TIM_ConfigClockSource+0xd4>
 80041ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80041be:	f200 8087 	bhi.w	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041c6:	f000 8086 	beq.w	80042d6 <HAL_TIM_ConfigClockSource+0x172>
 80041ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80041ce:	d87f      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d0:	2b70      	cmp	r3, #112	; 0x70
 80041d2:	d01a      	beq.n	800420a <HAL_TIM_ConfigClockSource+0xa6>
 80041d4:	2b70      	cmp	r3, #112	; 0x70
 80041d6:	d87b      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041d8:	2b60      	cmp	r3, #96	; 0x60
 80041da:	d050      	beq.n	800427e <HAL_TIM_ConfigClockSource+0x11a>
 80041dc:	2b60      	cmp	r3, #96	; 0x60
 80041de:	d877      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e0:	2b50      	cmp	r3, #80	; 0x50
 80041e2:	d03c      	beq.n	800425e <HAL_TIM_ConfigClockSource+0xfa>
 80041e4:	2b50      	cmp	r3, #80	; 0x50
 80041e6:	d873      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041e8:	2b40      	cmp	r3, #64	; 0x40
 80041ea:	d058      	beq.n	800429e <HAL_TIM_ConfigClockSource+0x13a>
 80041ec:	2b40      	cmp	r3, #64	; 0x40
 80041ee:	d86f      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f0:	2b30      	cmp	r3, #48	; 0x30
 80041f2:	d064      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 80041f4:	2b30      	cmp	r3, #48	; 0x30
 80041f6:	d86b      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 80041f8:	2b20      	cmp	r3, #32
 80041fa:	d060      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 80041fc:	2b20      	cmp	r3, #32
 80041fe:	d867      	bhi.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
 8004200:	2b00      	cmp	r3, #0
 8004202:	d05c      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 8004204:	2b10      	cmp	r3, #16
 8004206:	d05a      	beq.n	80042be <HAL_TIM_ConfigClockSource+0x15a>
 8004208:	e062      	b.n	80042d0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6818      	ldr	r0, [r3, #0]
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	6899      	ldr	r1, [r3, #8]
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	68db      	ldr	r3, [r3, #12]
 800421a:	f000 fc87 	bl	8004b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800422c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	609a      	str	r2, [r3, #8]
      break;
 8004236:	e04f      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	6818      	ldr	r0, [r3, #0]
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	685a      	ldr	r2, [r3, #4]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	f000 fc70 	bl	8004b2c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	681b      	ldr	r3, [r3, #0]
 8004250:	689a      	ldr	r2, [r3, #8]
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800425a:	609a      	str	r2, [r3, #8]
      break;
 800425c:	e03c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6818      	ldr	r0, [r3, #0]
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	6859      	ldr	r1, [r3, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	461a      	mov	r2, r3
 800426c:	f000 fb2e 	bl	80048cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2150      	movs	r1, #80	; 0x50
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fc3d 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 800427c:	e02c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6818      	ldr	r0, [r3, #0]
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	461a      	mov	r2, r3
 800428c:	f000 fb8a 	bl	80049a4 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2160      	movs	r1, #96	; 0x60
 8004296:	4618      	mov	r0, r3
 8004298:	f000 fc2d 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 800429c:	e01c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	6818      	ldr	r0, [r3, #0]
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	6859      	ldr	r1, [r3, #4]
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	68db      	ldr	r3, [r3, #12]
 80042aa:	461a      	mov	r2, r3
 80042ac:	f000 fb0e 	bl	80048cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	2140      	movs	r1, #64	; 0x40
 80042b6:	4618      	mov	r0, r3
 80042b8:	f000 fc1d 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 80042bc:	e00c      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681a      	ldr	r2, [r3, #0]
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	4619      	mov	r1, r3
 80042c8:	4610      	mov	r0, r2
 80042ca:	f000 fc14 	bl	8004af6 <TIM_ITRx_SetConfig>
      break;
 80042ce:	e003      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80042d0:	2301      	movs	r3, #1
 80042d2:	73fb      	strb	r3, [r7, #15]
      break;
 80042d4:	e000      	b.n	80042d8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80042d6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2201      	movs	r2, #1
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3710      	adds	r7, #16
 80042ee:	46bd      	mov	sp, r7
 80042f0:	bd80      	pop	{r7, pc}

080042f2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80042f2:	b480      	push	{r7}
 80042f4:	b083      	sub	sp, #12
 80042f6:	af00      	add	r7, sp, #0
 80042f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80042fa:	bf00      	nop
 80042fc:	370c      	adds	r7, #12
 80042fe:	46bd      	mov	sp, r7
 8004300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004304:	4770      	bx	lr

08004306 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004306:	b480      	push	{r7}
 8004308:	b083      	sub	sp, #12
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800430e:	bf00      	nop
 8004310:	370c      	adds	r7, #12
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr

0800431a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800431a:	b480      	push	{r7}
 800431c:	b083      	sub	sp, #12
 800431e:	af00      	add	r7, sp, #0
 8004320:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004322:	bf00      	nop
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004336:	bf00      	nop
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004340:	4770      	bx	lr
	...

08004344 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004344:	b480      	push	{r7}
 8004346:	b085      	sub	sp, #20
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	4a40      	ldr	r2, [pc, #256]	; (8004458 <TIM_Base_SetConfig+0x114>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d013      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004362:	d00f      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	4a3d      	ldr	r2, [pc, #244]	; (800445c <TIM_Base_SetConfig+0x118>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d00b      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4a3c      	ldr	r2, [pc, #240]	; (8004460 <TIM_Base_SetConfig+0x11c>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d007      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	4a3b      	ldr	r2, [pc, #236]	; (8004464 <TIM_Base_SetConfig+0x120>)
 8004378:	4293      	cmp	r3, r2
 800437a:	d003      	beq.n	8004384 <TIM_Base_SetConfig+0x40>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	4a3a      	ldr	r2, [pc, #232]	; (8004468 <TIM_Base_SetConfig+0x124>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800438a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	4a2f      	ldr	r2, [pc, #188]	; (8004458 <TIM_Base_SetConfig+0x114>)
 800439a:	4293      	cmp	r3, r2
 800439c:	d02b      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043a4:	d027      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a2c      	ldr	r2, [pc, #176]	; (800445c <TIM_Base_SetConfig+0x118>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d023      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a2b      	ldr	r2, [pc, #172]	; (8004460 <TIM_Base_SetConfig+0x11c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d01f      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	4a2a      	ldr	r2, [pc, #168]	; (8004464 <TIM_Base_SetConfig+0x120>)
 80043ba:	4293      	cmp	r3, r2
 80043bc:	d01b      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	4a29      	ldr	r2, [pc, #164]	; (8004468 <TIM_Base_SetConfig+0x124>)
 80043c2:	4293      	cmp	r3, r2
 80043c4:	d017      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	4a28      	ldr	r2, [pc, #160]	; (800446c <TIM_Base_SetConfig+0x128>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d013      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a27      	ldr	r2, [pc, #156]	; (8004470 <TIM_Base_SetConfig+0x12c>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d00f      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	4a26      	ldr	r2, [pc, #152]	; (8004474 <TIM_Base_SetConfig+0x130>)
 80043da:	4293      	cmp	r3, r2
 80043dc:	d00b      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a25      	ldr	r2, [pc, #148]	; (8004478 <TIM_Base_SetConfig+0x134>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d007      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a24      	ldr	r2, [pc, #144]	; (800447c <TIM_Base_SetConfig+0x138>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d003      	beq.n	80043f6 <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a23      	ldr	r2, [pc, #140]	; (8004480 <TIM_Base_SetConfig+0x13c>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d108      	bne.n	8004408 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	68fa      	ldr	r2, [r7, #12]
 8004404:	4313      	orrs	r3, r2
 8004406:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	695b      	ldr	r3, [r3, #20]
 8004412:	4313      	orrs	r3, r2
 8004414:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004424:	683b      	ldr	r3, [r7, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	4a0a      	ldr	r2, [pc, #40]	; (8004458 <TIM_Base_SetConfig+0x114>)
 8004430:	4293      	cmp	r3, r2
 8004432:	d003      	beq.n	800443c <TIM_Base_SetConfig+0xf8>
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a0c      	ldr	r2, [pc, #48]	; (8004468 <TIM_Base_SetConfig+0x124>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d103      	bne.n	8004444 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691a      	ldr	r2, [r3, #16]
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	615a      	str	r2, [r3, #20]
}
 800444a:	bf00      	nop
 800444c:	3714      	adds	r7, #20
 800444e:	46bd      	mov	sp, r7
 8004450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004454:	4770      	bx	lr
 8004456:	bf00      	nop
 8004458:	40010000 	.word	0x40010000
 800445c:	40000400 	.word	0x40000400
 8004460:	40000800 	.word	0x40000800
 8004464:	40000c00 	.word	0x40000c00
 8004468:	40010400 	.word	0x40010400
 800446c:	40014000 	.word	0x40014000
 8004470:	40014400 	.word	0x40014400
 8004474:	40014800 	.word	0x40014800
 8004478:	40001800 	.word	0x40001800
 800447c:	40001c00 	.word	0x40001c00
 8004480:	40002000 	.word	0x40002000

08004484 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004484:	b480      	push	{r7}
 8004486:	b087      	sub	sp, #28
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
 800448c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	6a1b      	ldr	r3, [r3, #32]
 8004492:	f023 0201 	bic.w	r2, r3, #1
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	f023 0303 	bic.w	r3, r3, #3
 80044ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	f023 0302 	bic.w	r3, r3, #2
 80044cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	697a      	ldr	r2, [r7, #20]
 80044d4:	4313      	orrs	r3, r2
 80044d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a20      	ldr	r2, [pc, #128]	; (800455c <TIM_OC1_SetConfig+0xd8>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d003      	beq.n	80044e8 <TIM_OC1_SetConfig+0x64>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a1f      	ldr	r2, [pc, #124]	; (8004560 <TIM_OC1_SetConfig+0xdc>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d10c      	bne.n	8004502 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80044e8:	697b      	ldr	r3, [r7, #20]
 80044ea:	f023 0308 	bic.w	r3, r3, #8
 80044ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	68db      	ldr	r3, [r3, #12]
 80044f4:	697a      	ldr	r2, [r7, #20]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f023 0304 	bic.w	r3, r3, #4
 8004500:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a15      	ldr	r2, [pc, #84]	; (800455c <TIM_OC1_SetConfig+0xd8>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d003      	beq.n	8004512 <TIM_OC1_SetConfig+0x8e>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC1_SetConfig+0xdc>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d111      	bne.n	8004536 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	693a      	ldr	r2, [r7, #16]
 8004528:	4313      	orrs	r3, r2
 800452a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800452c:	683b      	ldr	r3, [r7, #0]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	68fa      	ldr	r2, [r7, #12]
 8004540:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685a      	ldr	r2, [r3, #4]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	697a      	ldr	r2, [r7, #20]
 800454e:	621a      	str	r2, [r3, #32]
}
 8004550:	bf00      	nop
 8004552:	371c      	adds	r7, #28
 8004554:	46bd      	mov	sp, r7
 8004556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455a:	4770      	bx	lr
 800455c:	40010000 	.word	0x40010000
 8004560:	40010400 	.word	0x40010400

08004564 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f023 0210 	bic.w	r2, r3, #16
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	699b      	ldr	r3, [r3, #24]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045a8:	697b      	ldr	r3, [r7, #20]
 80045aa:	f023 0320 	bic.w	r3, r3, #32
 80045ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	011b      	lsls	r3, r3, #4
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a22      	ldr	r2, [pc, #136]	; (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d003      	beq.n	80045cc <TIM_OC2_SetConfig+0x68>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	4a21      	ldr	r2, [pc, #132]	; (800464c <TIM_OC2_SetConfig+0xe8>)
 80045c8:	4293      	cmp	r3, r2
 80045ca:	d10d      	bne.n	80045e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80045d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	68db      	ldr	r3, [r3, #12]
 80045d8:	011b      	lsls	r3, r3, #4
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	4313      	orrs	r3, r2
 80045de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80045e0:	697b      	ldr	r3, [r7, #20]
 80045e2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045e6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <TIM_OC2_SetConfig+0xe4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d003      	beq.n	80045f8 <TIM_OC2_SetConfig+0x94>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <TIM_OC2_SetConfig+0xe8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d113      	bne.n	8004620 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80045f8:	693b      	ldr	r3, [r7, #16]
 80045fa:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80045fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004606:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004608:	683b      	ldr	r3, [r7, #0]
 800460a:	695b      	ldr	r3, [r3, #20]
 800460c:	009b      	lsls	r3, r3, #2
 800460e:	693a      	ldr	r2, [r7, #16]
 8004610:	4313      	orrs	r3, r2
 8004612:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	699b      	ldr	r3, [r3, #24]
 8004618:	009b      	lsls	r3, r3, #2
 800461a:	693a      	ldr	r2, [r7, #16]
 800461c:	4313      	orrs	r3, r2
 800461e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	693a      	ldr	r2, [r7, #16]
 8004624:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	68fa      	ldr	r2, [r7, #12]
 800462a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	685a      	ldr	r2, [r3, #4]
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	697a      	ldr	r2, [r7, #20]
 8004638:	621a      	str	r2, [r3, #32]
}
 800463a:	bf00      	nop
 800463c:	371c      	adds	r7, #28
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
 8004646:	bf00      	nop
 8004648:	40010000 	.word	0x40010000
 800464c:	40010400 	.word	0x40010400

08004650 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	6078      	str	r0, [r7, #4]
 8004658:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	685b      	ldr	r3, [r3, #4]
 8004670:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	69db      	ldr	r3, [r3, #28]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800467e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	f023 0303 	bic.w	r3, r3, #3
 8004686:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	4313      	orrs	r3, r2
 8004690:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004692:	697b      	ldr	r3, [r7, #20]
 8004694:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004698:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	689b      	ldr	r3, [r3, #8]
 800469e:	021b      	lsls	r3, r3, #8
 80046a0:	697a      	ldr	r2, [r7, #20]
 80046a2:	4313      	orrs	r3, r2
 80046a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	4a21      	ldr	r2, [pc, #132]	; (8004730 <TIM_OC3_SetConfig+0xe0>)
 80046aa:	4293      	cmp	r3, r2
 80046ac:	d003      	beq.n	80046b6 <TIM_OC3_SetConfig+0x66>
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	4a20      	ldr	r2, [pc, #128]	; (8004734 <TIM_OC3_SetConfig+0xe4>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d10d      	bne.n	80046d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	68db      	ldr	r3, [r3, #12]
 80046c2:	021b      	lsls	r3, r3, #8
 80046c4:	697a      	ldr	r2, [r7, #20]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80046d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a16      	ldr	r2, [pc, #88]	; (8004730 <TIM_OC3_SetConfig+0xe0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d003      	beq.n	80046e2 <TIM_OC3_SetConfig+0x92>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	4a15      	ldr	r2, [pc, #84]	; (8004734 <TIM_OC3_SetConfig+0xe4>)
 80046de:	4293      	cmp	r3, r2
 80046e0:	d113      	bne.n	800470a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046e2:	693b      	ldr	r3, [r7, #16]
 80046e4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80046e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80046f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	695b      	ldr	r3, [r3, #20]
 80046f6:	011b      	lsls	r3, r3, #4
 80046f8:	693a      	ldr	r2, [r7, #16]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	011b      	lsls	r3, r3, #4
 8004704:	693a      	ldr	r2, [r7, #16]
 8004706:	4313      	orrs	r3, r2
 8004708:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	693a      	ldr	r2, [r7, #16]
 800470e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	68fa      	ldr	r2, [r7, #12]
 8004714:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	685a      	ldr	r2, [r3, #4]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	621a      	str	r2, [r3, #32]
}
 8004724:	bf00      	nop
 8004726:	371c      	adds	r7, #28
 8004728:	46bd      	mov	sp, r7
 800472a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472e:	4770      	bx	lr
 8004730:	40010000 	.word	0x40010000
 8004734:	40010400 	.word	0x40010400

08004738 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
 8004740:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6a1b      	ldr	r3, [r3, #32]
 8004746:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6a1b      	ldr	r3, [r3, #32]
 8004752:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004766:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800476e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	021b      	lsls	r3, r3, #8
 8004776:	68fa      	ldr	r2, [r7, #12]
 8004778:	4313      	orrs	r3, r2
 800477a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004782:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004784:	683b      	ldr	r3, [r7, #0]
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	031b      	lsls	r3, r3, #12
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	4313      	orrs	r3, r2
 800478e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	4a12      	ldr	r2, [pc, #72]	; (80047dc <TIM_OC4_SetConfig+0xa4>)
 8004794:	4293      	cmp	r3, r2
 8004796:	d003      	beq.n	80047a0 <TIM_OC4_SetConfig+0x68>
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	4a11      	ldr	r2, [pc, #68]	; (80047e0 <TIM_OC4_SetConfig+0xa8>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d109      	bne.n	80047b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047a0:	697b      	ldr	r3, [r7, #20]
 80047a2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80047a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	695b      	ldr	r3, [r3, #20]
 80047ac:	019b      	lsls	r3, r3, #6
 80047ae:	697a      	ldr	r2, [r7, #20]
 80047b0:	4313      	orrs	r3, r2
 80047b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	697a      	ldr	r2, [r7, #20]
 80047b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	68fa      	ldr	r2, [r7, #12]
 80047be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	685a      	ldr	r2, [r3, #4]
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	693a      	ldr	r2, [r7, #16]
 80047cc:	621a      	str	r2, [r3, #32]
}
 80047ce:	bf00      	nop
 80047d0:	371c      	adds	r7, #28
 80047d2:	46bd      	mov	sp, r7
 80047d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40010000 	.word	0x40010000
 80047e0:	40010400 	.word	0x40010400

080047e4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80047f2:	68fb      	ldr	r3, [r7, #12]
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	f023 0201 	bic.w	r2, r3, #1
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	699b      	ldr	r3, [r3, #24]
 8004802:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	6a1b      	ldr	r3, [r3, #32]
 8004808:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	4a28      	ldr	r2, [pc, #160]	; (80048b0 <TIM_TI1_SetConfig+0xcc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d01b      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004818:	d017      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4a25      	ldr	r2, [pc, #148]	; (80048b4 <TIM_TI1_SetConfig+0xd0>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d013      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	4a24      	ldr	r2, [pc, #144]	; (80048b8 <TIM_TI1_SetConfig+0xd4>)
 8004826:	4293      	cmp	r3, r2
 8004828:	d00f      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a23      	ldr	r2, [pc, #140]	; (80048bc <TIM_TI1_SetConfig+0xd8>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d00b      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4a22      	ldr	r2, [pc, #136]	; (80048c0 <TIM_TI1_SetConfig+0xdc>)
 8004836:	4293      	cmp	r3, r2
 8004838:	d007      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	4a21      	ldr	r2, [pc, #132]	; (80048c4 <TIM_TI1_SetConfig+0xe0>)
 800483e:	4293      	cmp	r3, r2
 8004840:	d003      	beq.n	800484a <TIM_TI1_SetConfig+0x66>
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4a20      	ldr	r2, [pc, #128]	; (80048c8 <TIM_TI1_SetConfig+0xe4>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d101      	bne.n	800484e <TIM_TI1_SetConfig+0x6a>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <TIM_TI1_SetConfig+0x6c>
 800484e:	2300      	movs	r3, #0
 8004850:	2b00      	cmp	r3, #0
 8004852:	d008      	beq.n	8004866 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0303 	bic.w	r3, r3, #3
 800485a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800485c:	697a      	ldr	r2, [r7, #20]
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]
 8004864:	e003      	b.n	800486e <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004866:	697b      	ldr	r3, [r7, #20]
 8004868:	f043 0301 	orr.w	r3, r3, #1
 800486c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004874:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	011b      	lsls	r3, r3, #4
 800487a:	b2db      	uxtb	r3, r3
 800487c:	697a      	ldr	r2, [r7, #20]
 800487e:	4313      	orrs	r3, r2
 8004880:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	f023 030a 	bic.w	r3, r3, #10
 8004888:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800488a:	68bb      	ldr	r3, [r7, #8]
 800488c:	f003 030a 	and.w	r3, r3, #10
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	697a      	ldr	r2, [r7, #20]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	693a      	ldr	r2, [r7, #16]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr
 80048ae:	bf00      	nop
 80048b0:	40010000 	.word	0x40010000
 80048b4:	40000400 	.word	0x40000400
 80048b8:	40000800 	.word	0x40000800
 80048bc:	40000c00 	.word	0x40000c00
 80048c0:	40010400 	.word	0x40010400
 80048c4:	40014000 	.word	0x40014000
 80048c8:	40001800 	.word	0x40001800

080048cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b087      	sub	sp, #28
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	6a1b      	ldr	r3, [r3, #32]
 80048dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f023 0201 	bic.w	r2, r3, #1
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	699b      	ldr	r3, [r3, #24]
 80048ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80048f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	011b      	lsls	r3, r3, #4
 80048fc:	693a      	ldr	r2, [r7, #16]
 80048fe:	4313      	orrs	r3, r2
 8004900:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004902:	697b      	ldr	r3, [r7, #20]
 8004904:	f023 030a 	bic.w	r3, r3, #10
 8004908:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800490a:	697a      	ldr	r2, [r7, #20]
 800490c:	68bb      	ldr	r3, [r7, #8]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	693a      	ldr	r2, [r7, #16]
 8004916:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	621a      	str	r2, [r3, #32]
}
 800491e:	bf00      	nop
 8004920:	371c      	adds	r7, #28
 8004922:	46bd      	mov	sp, r7
 8004924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004928:	4770      	bx	lr

0800492a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800492a:	b480      	push	{r7}
 800492c:	b087      	sub	sp, #28
 800492e:	af00      	add	r7, sp, #0
 8004930:	60f8      	str	r0, [r7, #12]
 8004932:	60b9      	str	r1, [r7, #8]
 8004934:	607a      	str	r2, [r7, #4]
 8004936:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	6a1b      	ldr	r3, [r3, #32]
 800493c:	f023 0210 	bic.w	r2, r3, #16
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	699b      	ldr	r3, [r3, #24]
 8004948:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	6a1b      	ldr	r3, [r3, #32]
 800494e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004950:	697b      	ldr	r3, [r7, #20]
 8004952:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004956:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	021b      	lsls	r3, r3, #8
 800495c:	697a      	ldr	r2, [r7, #20]
 800495e:	4313      	orrs	r3, r2
 8004960:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004962:	697b      	ldr	r3, [r7, #20]
 8004964:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004968:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	031b      	lsls	r3, r3, #12
 800496e:	b29b      	uxth	r3, r3
 8004970:	697a      	ldr	r2, [r7, #20]
 8004972:	4313      	orrs	r3, r2
 8004974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800497c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	011b      	lsls	r3, r3, #4
 8004982:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	4313      	orrs	r3, r2
 800498a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	693a      	ldr	r2, [r7, #16]
 8004996:	621a      	str	r2, [r3, #32]
}
 8004998:	bf00      	nop
 800499a:	371c      	adds	r7, #28
 800499c:	46bd      	mov	sp, r7
 800499e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a2:	4770      	bx	lr

080049a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049a4:	b480      	push	{r7}
 80049a6:	b087      	sub	sp, #28
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	60f8      	str	r0, [r7, #12]
 80049ac:	60b9      	str	r1, [r7, #8]
 80049ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	6a1b      	ldr	r3, [r3, #32]
 80049b4:	f023 0210 	bic.w	r2, r3, #16
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1b      	ldr	r3, [r3, #32]
 80049c6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049ce:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	031b      	lsls	r3, r3, #12
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049e0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	011b      	lsls	r3, r3, #4
 80049e6:	693a      	ldr	r2, [r7, #16]
 80049e8:	4313      	orrs	r3, r2
 80049ea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	697a      	ldr	r2, [r7, #20]
 80049f0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	693a      	ldr	r2, [r7, #16]
 80049f6:	621a      	str	r2, [r3, #32]
}
 80049f8:	bf00      	nop
 80049fa:	371c      	adds	r7, #28
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a04:	b480      	push	{r7}
 8004a06:	b087      	sub	sp, #28
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	6a1b      	ldr	r3, [r3, #32]
 8004a16:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	69db      	ldr	r3, [r3, #28]
 8004a22:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	6a1b      	ldr	r3, [r3, #32]
 8004a28:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004a2a:	697b      	ldr	r3, [r7, #20]
 8004a2c:	f023 0303 	bic.w	r3, r3, #3
 8004a30:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004a32:	697a      	ldr	r2, [r7, #20]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004a3a:	697b      	ldr	r3, [r7, #20]
 8004a3c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a40:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	011b      	lsls	r3, r3, #4
 8004a46:	b2db      	uxtb	r3, r3
 8004a48:	697a      	ldr	r2, [r7, #20]
 8004a4a:	4313      	orrs	r3, r2
 8004a4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004a54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004a56:	68bb      	ldr	r3, [r7, #8]
 8004a58:	021b      	lsls	r3, r3, #8
 8004a5a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	697a      	ldr	r2, [r7, #20]
 8004a68:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	621a      	str	r2, [r3, #32]
}
 8004a70:	bf00      	nop
 8004a72:	371c      	adds	r7, #28
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004a7c:	b480      	push	{r7}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	60b9      	str	r1, [r7, #8]
 8004a86:	607a      	str	r2, [r7, #4]
 8004a88:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	69db      	ldr	r3, [r3, #28]
 8004a9a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a9c:	68fb      	ldr	r3, [r7, #12]
 8004a9e:	6a1b      	ldr	r3, [r3, #32]
 8004aa0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aa8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	021b      	lsls	r3, r3, #8
 8004aae:	697a      	ldr	r2, [r7, #20]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004ab4:	697b      	ldr	r3, [r7, #20]
 8004ab6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004aba:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	031b      	lsls	r3, r3, #12
 8004ac0:	b29b      	uxth	r3, r3
 8004ac2:	697a      	ldr	r2, [r7, #20]
 8004ac4:	4313      	orrs	r3, r2
 8004ac6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ac8:	693b      	ldr	r3, [r7, #16]
 8004aca:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ace:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ad0:	68bb      	ldr	r3, [r7, #8]
 8004ad2:	031b      	lsls	r3, r3, #12
 8004ad4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004ad8:	693a      	ldr	r2, [r7, #16]
 8004ada:	4313      	orrs	r3, r2
 8004adc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	697a      	ldr	r2, [r7, #20]
 8004ae2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	693a      	ldr	r2, [r7, #16]
 8004ae8:	621a      	str	r2, [r3, #32]
}
 8004aea:	bf00      	nop
 8004aec:	371c      	adds	r7, #28
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr

08004af6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004af6:	b480      	push	{r7}
 8004af8:	b085      	sub	sp, #20
 8004afa:	af00      	add	r7, sp, #0
 8004afc:	6078      	str	r0, [r7, #4]
 8004afe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	689b      	ldr	r3, [r3, #8]
 8004b04:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004b0e:	683a      	ldr	r2, [r7, #0]
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	4313      	orrs	r3, r2
 8004b14:	f043 0307 	orr.w	r3, r3, #7
 8004b18:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	68fa      	ldr	r2, [r7, #12]
 8004b1e:	609a      	str	r2, [r3, #8]
}
 8004b20:	bf00      	nop
 8004b22:	3714      	adds	r7, #20
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004b2c:	b480      	push	{r7}
 8004b2e:	b087      	sub	sp, #28
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	689b      	ldr	r3, [r3, #8]
 8004b3e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b40:	697b      	ldr	r3, [r7, #20]
 8004b42:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b46:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b48:	683b      	ldr	r3, [r7, #0]
 8004b4a:	021a      	lsls	r2, r3, #8
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	431a      	orrs	r2, r3
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	4313      	orrs	r3, r2
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	697a      	ldr	r2, [r7, #20]
 8004b5e:	609a      	str	r2, [r3, #8]
}
 8004b60:	bf00      	nop
 8004b62:	371c      	adds	r7, #28
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr

08004b6c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	b087      	sub	sp, #28
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	60f8      	str	r0, [r7, #12]
 8004b74:	60b9      	str	r1, [r7, #8]
 8004b76:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2201      	movs	r2, #1
 8004b80:	fa02 f303 	lsl.w	r3, r2, r3
 8004b84:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6a1a      	ldr	r2, [r3, #32]
 8004b8a:	697b      	ldr	r3, [r7, #20]
 8004b8c:	43db      	mvns	r3, r3
 8004b8e:	401a      	ands	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6a1a      	ldr	r2, [r3, #32]
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	f003 031f 	and.w	r3, r3, #31
 8004b9e:	6879      	ldr	r1, [r7, #4]
 8004ba0:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba4:	431a      	orrs	r2, r3
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	621a      	str	r2, [r3, #32]
}
 8004baa:	bf00      	nop
 8004bac:	371c      	adds	r7, #28
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb4:	4770      	bx	lr
	...

08004bb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004bb8:	b480      	push	{r7}
 8004bba:	b085      	sub	sp, #20
 8004bbc:	af00      	add	r7, sp, #0
 8004bbe:	6078      	str	r0, [r7, #4]
 8004bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bc8:	2b01      	cmp	r3, #1
 8004bca:	d101      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004bcc:	2302      	movs	r3, #2
 8004bce:	e05a      	b.n	8004c86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2202      	movs	r2, #2
 8004bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	685b      	ldr	r3, [r3, #4]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004bf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	68fa      	ldr	r2, [r7, #12]
 8004bfe:	4313      	orrs	r3, r2
 8004c00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68fa      	ldr	r2, [r7, #12]
 8004c08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	4a21      	ldr	r2, [pc, #132]	; (8004c94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004c10:	4293      	cmp	r3, r2
 8004c12:	d022      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d01d      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4a1d      	ldr	r2, [pc, #116]	; (8004c98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d018      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	4a1b      	ldr	r2, [pc, #108]	; (8004c9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d013      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a1a      	ldr	r2, [pc, #104]	; (8004ca0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004c38:	4293      	cmp	r3, r2
 8004c3a:	d00e      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	4a18      	ldr	r2, [pc, #96]	; (8004ca4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d009      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a17      	ldr	r2, [pc, #92]	; (8004ca8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d004      	beq.n	8004c5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	4a15      	ldr	r2, [pc, #84]	; (8004cac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d10c      	bne.n	8004c74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004c60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	685b      	ldr	r3, [r3, #4]
 8004c66:	68ba      	ldr	r2, [r7, #8]
 8004c68:	4313      	orrs	r3, r2
 8004c6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	68ba      	ldr	r2, [r7, #8]
 8004c72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2200      	movs	r2, #0
 8004c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004c84:	2300      	movs	r3, #0
}
 8004c86:	4618      	mov	r0, r3
 8004c88:	3714      	adds	r7, #20
 8004c8a:	46bd      	mov	sp, r7
 8004c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c90:	4770      	bx	lr
 8004c92:	bf00      	nop
 8004c94:	40010000 	.word	0x40010000
 8004c98:	40000400 	.word	0x40000400
 8004c9c:	40000800 	.word	0x40000800
 8004ca0:	40000c00 	.word	0x40000c00
 8004ca4:	40010400 	.word	0x40010400
 8004ca8:	40014000 	.word	0x40014000
 8004cac:	40001800 	.word	0x40001800

08004cb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d101      	bne.n	8004ccc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004cc8:	2302      	movs	r3, #2
 8004cca:	e03d      	b.n	8004d48 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	2201      	movs	r2, #1
 8004cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004cda:	683b      	ldr	r3, [r7, #0]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	4313      	orrs	r3, r2
 8004ce0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	689b      	ldr	r3, [r3, #8]
 8004cec:	4313      	orrs	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004cf6:	683b      	ldr	r3, [r7, #0]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	4313      	orrs	r3, r2
 8004cfc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	4313      	orrs	r3, r2
 8004d0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	695b      	ldr	r3, [r3, #20]
 8004d24:	4313      	orrs	r3, r2
 8004d26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	69db      	ldr	r3, [r3, #28]
 8004d32:	4313      	orrs	r3, r2
 8004d34:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68fa      	ldr	r2, [r7, #12]
 8004d3c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2200      	movs	r2, #0
 8004d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3714      	adds	r7, #20
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004d54:	b480      	push	{r7}
 8004d56:	b083      	sub	sp, #12
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004d5c:	bf00      	nop
 8004d5e:	370c      	adds	r7, #12
 8004d60:	46bd      	mov	sp, r7
 8004d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d66:	4770      	bx	lr

08004d68 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b083      	sub	sp, #12
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d101      	bne.n	8004d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	e03f      	b.n	8004e0e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d106      	bne.n	8004da8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	2200      	movs	r2, #0
 8004d9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f7fc fe24 	bl	80019f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2224      	movs	r2, #36	; 0x24
 8004dac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004dbe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004dc0:	6878      	ldr	r0, [r7, #4]
 8004dc2:	f000 fcdf 	bl	8005784 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	691a      	ldr	r2, [r3, #16]
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004dd4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	695a      	ldr	r2, [r3, #20]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004de4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	68da      	ldr	r2, [r3, #12]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004df4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2200      	movs	r2, #0
 8004dfa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2220      	movs	r2, #32
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2220      	movs	r2, #32
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004e0c:	2300      	movs	r3, #0
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3708      	adds	r7, #8
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}

08004e16 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004e16:	b580      	push	{r7, lr}
 8004e18:	b084      	sub	sp, #16
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	60f8      	str	r0, [r7, #12]
 8004e1e:	60b9      	str	r1, [r7, #8]
 8004e20:	4613      	mov	r3, r2
 8004e22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e2a:	b2db      	uxtb	r3, r3
 8004e2c:	2b20      	cmp	r3, #32
 8004e2e:	d11d      	bne.n	8004e6c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d002      	beq.n	8004e3c <HAL_UART_Receive_IT+0x26>
 8004e36:	88fb      	ldrh	r3, [r7, #6]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d101      	bne.n	8004e40 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	e016      	b.n	8004e6e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e46:	2b01      	cmp	r3, #1
 8004e48:	d101      	bne.n	8004e4e <HAL_UART_Receive_IT+0x38>
 8004e4a:	2302      	movs	r3, #2
 8004e4c:	e00f      	b.n	8004e6e <HAL_UART_Receive_IT+0x58>
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	2201      	movs	r2, #1
 8004e52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004e5c:	88fb      	ldrh	r3, [r7, #6]
 8004e5e:	461a      	mov	r2, r3
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fab6 	bl	80053d4 <UART_Start_Receive_IT>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	e000      	b.n	8004e6e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004e6c:	2302      	movs	r3, #2
  }
}
 8004e6e:	4618      	mov	r0, r3
 8004e70:	3710      	adds	r7, #16
 8004e72:	46bd      	mov	sp, r7
 8004e74:	bd80      	pop	{r7, pc}
	...

08004e78 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004e78:	b580      	push	{r7, lr}
 8004e7a:	b0ba      	sub	sp, #232	; 0xe8
 8004e7c:	af00      	add	r7, sp, #0
 8004e7e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	695b      	ldr	r3, [r3, #20]
 8004e9a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004e9e:	2300      	movs	r3, #0
 8004ea0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eae:	f003 030f 	and.w	r3, r3, #15
 8004eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004eb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d10f      	bne.n	8004ede <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ebe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ec2:	f003 0320 	and.w	r3, r3, #32
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d009      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
 8004eca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ece:	f003 0320 	and.w	r3, r3, #32
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d003      	beq.n	8004ede <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ed6:	6878      	ldr	r0, [r7, #4]
 8004ed8:	f000 fb99 	bl	800560e <UART_Receive_IT>
      return;
 8004edc:	e256      	b.n	800538c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004ede:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	f000 80de 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
 8004ee8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004eec:	f003 0301 	and.w	r3, r3, #1
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d106      	bne.n	8004f02 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ef4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ef8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	f000 80d1 	beq.w	80050a4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004f02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d00b      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
 8004f0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f1e:	f043 0201 	orr.w	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f2a:	f003 0304 	and.w	r3, r3, #4
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d00b      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
 8004f32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f36:	f003 0301 	and.w	r3, r3, #1
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d005      	beq.n	8004f4a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f42:	f043 0202 	orr.w	r2, r3, #2
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004f4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f4e:	f003 0302 	and.w	r3, r3, #2
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d00b      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
 8004f56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f66:	f043 0204 	orr.w	r2, r3, #4
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004f6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f72:	f003 0308 	and.w	r3, r3, #8
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d011      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
 8004f7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f7e:	f003 0320 	and.w	r3, r3, #32
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d105      	bne.n	8004f92 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004f86:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004f8a:	f003 0301 	and.w	r3, r3, #1
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d005      	beq.n	8004f9e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f96:	f043 0208 	orr.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	f000 81ed 	beq.w	8005382 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004fac:	f003 0320 	and.w	r3, r3, #32
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d008      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
 8004fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004fb8:	f003 0320 	and.w	r3, r3, #32
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d002      	beq.n	8004fc6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004fc0:	6878      	ldr	r0, [r7, #4]
 8004fc2:	f000 fb24 	bl	800560e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	695b      	ldr	r3, [r3, #20]
 8004fcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fd0:	2b40      	cmp	r3, #64	; 0x40
 8004fd2:	bf0c      	ite	eq
 8004fd4:	2301      	moveq	r3, #1
 8004fd6:	2300      	movne	r3, #0
 8004fd8:	b2db      	uxtb	r3, r3
 8004fda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe2:	f003 0308 	and.w	r3, r3, #8
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d103      	bne.n	8004ff2 <HAL_UART_IRQHandler+0x17a>
 8004fea:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d04f      	beq.n	8005092 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fa2c 	bl	8005450 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	695b      	ldr	r3, [r3, #20]
 8004ffe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005002:	2b40      	cmp	r3, #64	; 0x40
 8005004:	d141      	bne.n	800508a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	3314      	adds	r3, #20
 800500c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005010:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005014:	e853 3f00 	ldrex	r3, [r3]
 8005018:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800501c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005020:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005024:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	3314      	adds	r3, #20
 800502e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005032:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005036:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800503e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005042:	e841 2300 	strex	r3, r2, [r1]
 8005046:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800504a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1d9      	bne.n	8005006 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d013      	beq.n	8005082 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800505e:	4a7d      	ldr	r2, [pc, #500]	; (8005254 <HAL_UART_IRQHandler+0x3dc>)
 8005060:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005066:	4618      	mov	r0, r3
 8005068:	f7fd faae 	bl	80025c8 <HAL_DMA_Abort_IT>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d016      	beq.n	80050a0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005076:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005078:	687a      	ldr	r2, [r7, #4]
 800507a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800507c:	4610      	mov	r0, r2
 800507e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005080:	e00e      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	f000 f990 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005088:	e00a      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f000 f98c 	bl	80053a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005090:	e006      	b.n	80050a0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 f988 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800509e:	e170      	b.n	8005382 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050a0:	bf00      	nop
    return;
 80050a2:	e16e      	b.n	8005382 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050a8:	2b01      	cmp	r3, #1
 80050aa:	f040 814a 	bne.w	8005342 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80050ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050b2:	f003 0310 	and.w	r3, r3, #16
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	f000 8143 	beq.w	8005342 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050c0:	f003 0310 	and.w	r3, r3, #16
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	f000 813c 	beq.w	8005342 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80050ca:	2300      	movs	r3, #0
 80050cc:	60bb      	str	r3, [r7, #8]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	60bb      	str	r3, [r7, #8]
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	60bb      	str	r3, [r7, #8]
 80050de:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	695b      	ldr	r3, [r3, #20]
 80050e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ea:	2b40      	cmp	r3, #64	; 0x40
 80050ec:	f040 80b4 	bne.w	8005258 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80050fc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005100:	2b00      	cmp	r3, #0
 8005102:	f000 8140 	beq.w	8005386 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800510a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800510e:	429a      	cmp	r2, r3
 8005110:	f080 8139 	bcs.w	8005386 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800511a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005120:	69db      	ldr	r3, [r3, #28]
 8005122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005126:	f000 8088 	beq.w	800523a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	330c      	adds	r3, #12
 8005130:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005134:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005138:	e853 3f00 	ldrex	r3, [r3]
 800513c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005148:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	330c      	adds	r3, #12
 8005152:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8005156:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800515a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800515e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8005162:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8005166:	e841 2300 	strex	r3, r2, [r1]
 800516a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800516e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005172:	2b00      	cmp	r3, #0
 8005174:	d1d9      	bne.n	800512a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3314      	adds	r3, #20
 800517c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800517e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005180:	e853 3f00 	ldrex	r3, [r3]
 8005184:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8005186:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005188:	f023 0301 	bic.w	r3, r3, #1
 800518c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	3314      	adds	r3, #20
 8005196:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800519a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800519e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051a0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80051a2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80051a6:	e841 2300 	strex	r3, r2, [r1]
 80051aa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80051ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d1e1      	bne.n	8005176 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	3314      	adds	r3, #20
 80051b8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80051bc:	e853 3f00 	ldrex	r3, [r3]
 80051c0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80051c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051c4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80051c8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	3314      	adds	r3, #20
 80051d2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80051d6:	66fa      	str	r2, [r7, #108]	; 0x6c
 80051d8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051da:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80051dc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80051de:	e841 2300 	strex	r3, r2, [r1]
 80051e2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80051e4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d1e3      	bne.n	80051b2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2220      	movs	r2, #32
 80051ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2200      	movs	r2, #0
 80051f6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	330c      	adds	r3, #12
 80051fe:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005200:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005202:	e853 3f00 	ldrex	r3, [r3]
 8005206:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005208:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800520a:	f023 0310 	bic.w	r3, r3, #16
 800520e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	330c      	adds	r3, #12
 8005218:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800521c:	65ba      	str	r2, [r7, #88]	; 0x58
 800521e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005220:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005222:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005224:	e841 2300 	strex	r3, r2, [r1]
 8005228:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800522a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1e3      	bne.n	80051f8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005234:	4618      	mov	r0, r3
 8005236:	f7fd f957 	bl	80024e8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005242:	b29b      	uxth	r3, r3
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	b29b      	uxth	r3, r3
 8005248:	4619      	mov	r1, r3
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f8b6 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005250:	e099      	b.n	8005386 <HAL_UART_IRQHandler+0x50e>
 8005252:	bf00      	nop
 8005254:	08005517 	.word	0x08005517
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005260:	b29b      	uxth	r3, r3
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800526c:	b29b      	uxth	r3, r3
 800526e:	2b00      	cmp	r3, #0
 8005270:	f000 808b 	beq.w	800538a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005274:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005278:	2b00      	cmp	r3, #0
 800527a:	f000 8086 	beq.w	800538a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	330c      	adds	r3, #12
 8005284:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005288:	e853 3f00 	ldrex	r3, [r3]
 800528c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800528e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005290:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005294:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80052a2:	647a      	str	r2, [r7, #68]	; 0x44
 80052a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052a6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80052a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052aa:	e841 2300 	strex	r3, r2, [r1]
 80052ae:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80052b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d1e3      	bne.n	800527e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	3314      	adds	r3, #20
 80052bc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	623b      	str	r3, [r7, #32]
   return(result);
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	f023 0301 	bic.w	r3, r3, #1
 80052cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	3314      	adds	r3, #20
 80052d6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80052da:	633a      	str	r2, [r7, #48]	; 0x30
 80052dc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80052e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80052e2:	e841 2300 	strex	r3, r2, [r1]
 80052e6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80052e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d1e3      	bne.n	80052b6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2220      	movs	r2, #32
 80052f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	330c      	adds	r3, #12
 8005302:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005304:	693b      	ldr	r3, [r7, #16]
 8005306:	e853 3f00 	ldrex	r3, [r3]
 800530a:	60fb      	str	r3, [r7, #12]
   return(result);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	f023 0310 	bic.w	r3, r3, #16
 8005312:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005324:	69b9      	ldr	r1, [r7, #24]
 8005326:	69fa      	ldr	r2, [r7, #28]
 8005328:	e841 2300 	strex	r3, r2, [r1]
 800532c:	617b      	str	r3, [r7, #20]
   return(result);
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	2b00      	cmp	r3, #0
 8005332:	d1e3      	bne.n	80052fc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005334:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 f83e 	bl	80053bc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005340:	e023      	b.n	800538a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005342:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_UART_IRQHandler+0x4ea>
 800534e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005352:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005356:	2b00      	cmp	r3, #0
 8005358:	d003      	beq.n	8005362 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800535a:	6878      	ldr	r0, [r7, #4]
 800535c:	f000 f8ef 	bl	800553e <UART_Transmit_IT>
    return;
 8005360:	e014      	b.n	800538c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005366:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00e      	beq.n	800538c <HAL_UART_IRQHandler+0x514>
 800536e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005372:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005376:	2b00      	cmp	r3, #0
 8005378:	d008      	beq.n	800538c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800537a:	6878      	ldr	r0, [r7, #4]
 800537c:	f000 f92f 	bl	80055de <UART_EndTransmit_IT>
    return;
 8005380:	e004      	b.n	800538c <HAL_UART_IRQHandler+0x514>
    return;
 8005382:	bf00      	nop
 8005384:	e002      	b.n	800538c <HAL_UART_IRQHandler+0x514>
      return;
 8005386:	bf00      	nop
 8005388:	e000      	b.n	800538c <HAL_UART_IRQHandler+0x514>
      return;
 800538a:	bf00      	nop
  }
}
 800538c:	37e8      	adds	r7, #232	; 0xe8
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop

08005394 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]
 80053c4:	460b      	mov	r3, r1
 80053c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80053c8:	bf00      	nop
 80053ca:	370c      	adds	r7, #12
 80053cc:	46bd      	mov	sp, r7
 80053ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d2:	4770      	bx	lr

080053d4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80053d4:	b480      	push	{r7}
 80053d6:	b085      	sub	sp, #20
 80053d8:	af00      	add	r7, sp, #0
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	4613      	mov	r3, r2
 80053e0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	68ba      	ldr	r2, [r7, #8]
 80053e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	88fa      	ldrh	r2, [r7, #6]
 80053ec:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	88fa      	ldrh	r2, [r7, #6]
 80053f2:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053f4:	68fb      	ldr	r3, [r7, #12]
 80053f6:	2200      	movs	r2, #0
 80053f8:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	2222      	movs	r2, #34	; 0x22
 80053fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2200      	movs	r2, #0
 8005406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	691b      	ldr	r3, [r3, #16]
 800540e:	2b00      	cmp	r3, #0
 8005410:	d007      	beq.n	8005422 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68da      	ldr	r2, [r3, #12]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005420:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	695a      	ldr	r2, [r3, #20]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f042 0201 	orr.w	r2, r2, #1
 8005430:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68da      	ldr	r2, [r3, #12]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f042 0220 	orr.w	r2, r2, #32
 8005440:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005442:	2300      	movs	r3, #0
}
 8005444:	4618      	mov	r0, r3
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr

08005450 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005450:	b480      	push	{r7}
 8005452:	b095      	sub	sp, #84	; 0x54
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	330c      	adds	r3, #12
 800545e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005460:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005462:	e853 3f00 	ldrex	r3, [r3]
 8005466:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800546a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800546e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005478:	643a      	str	r2, [r7, #64]	; 0x40
 800547a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800547c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800547e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005480:	e841 2300 	strex	r3, r2, [r1]
 8005484:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005486:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005488:	2b00      	cmp	r3, #0
 800548a:	d1e5      	bne.n	8005458 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3314      	adds	r3, #20
 8005492:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005494:	6a3b      	ldr	r3, [r7, #32]
 8005496:	e853 3f00 	ldrex	r3, [r3]
 800549a:	61fb      	str	r3, [r7, #28]
   return(result);
 800549c:	69fb      	ldr	r3, [r7, #28]
 800549e:	f023 0301 	bic.w	r3, r3, #1
 80054a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	3314      	adds	r3, #20
 80054aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80054ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80054ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80054b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80054b4:	e841 2300 	strex	r3, r2, [r1]
 80054b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1e5      	bne.n	800548c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d119      	bne.n	80054fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	330c      	adds	r3, #12
 80054ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	e853 3f00 	ldrex	r3, [r3]
 80054d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80054d8:	68bb      	ldr	r3, [r7, #8]
 80054da:	f023 0310 	bic.w	r3, r3, #16
 80054de:	647b      	str	r3, [r7, #68]	; 0x44
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	330c      	adds	r3, #12
 80054e6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054e8:	61ba      	str	r2, [r7, #24]
 80054ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80054ec:	6979      	ldr	r1, [r7, #20]
 80054ee:	69ba      	ldr	r2, [r7, #24]
 80054f0:	e841 2300 	strex	r3, r2, [r1]
 80054f4:	613b      	str	r3, [r7, #16]
   return(result);
 80054f6:	693b      	ldr	r3, [r7, #16]
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d1e5      	bne.n	80054c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2220      	movs	r2, #32
 8005500:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	631a      	str	r2, [r3, #48]	; 0x30
}
 800550a:	bf00      	nop
 800550c:	3754      	adds	r7, #84	; 0x54
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005516:	b580      	push	{r7, lr}
 8005518:	b084      	sub	sp, #16
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005522:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	2200      	movs	r2, #0
 8005528:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	2200      	movs	r2, #0
 800552e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005530:	68f8      	ldr	r0, [r7, #12]
 8005532:	f7ff ff39 	bl	80053a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005536:	bf00      	nop
 8005538:	3710      	adds	r7, #16
 800553a:	46bd      	mov	sp, r7
 800553c:	bd80      	pop	{r7, pc}

0800553e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800553e:	b480      	push	{r7}
 8005540:	b085      	sub	sp, #20
 8005542:	af00      	add	r7, sp, #0
 8005544:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800554c:	b2db      	uxtb	r3, r3
 800554e:	2b21      	cmp	r3, #33	; 0x21
 8005550:	d13e      	bne.n	80055d0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	689b      	ldr	r3, [r3, #8]
 8005556:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800555a:	d114      	bne.n	8005586 <UART_Transmit_IT+0x48>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	691b      	ldr	r3, [r3, #16]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d110      	bne.n	8005586 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6a1b      	ldr	r3, [r3, #32]
 8005568:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	881b      	ldrh	r3, [r3, #0]
 800556e:	461a      	mov	r2, r3
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005578:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6a1b      	ldr	r3, [r3, #32]
 800557e:	1c9a      	adds	r2, r3, #2
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	621a      	str	r2, [r3, #32]
 8005584:	e008      	b.n	8005598 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	6a1b      	ldr	r3, [r3, #32]
 800558a:	1c59      	adds	r1, r3, #1
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6211      	str	r1, [r2, #32]
 8005590:	781a      	ldrb	r2, [r3, #0]
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800559c:	b29b      	uxth	r3, r3
 800559e:	3b01      	subs	r3, #1
 80055a0:	b29b      	uxth	r3, r3
 80055a2:	687a      	ldr	r2, [r7, #4]
 80055a4:	4619      	mov	r1, r3
 80055a6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d10f      	bne.n	80055cc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	68da      	ldr	r2, [r3, #12]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80055ba:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	68da      	ldr	r2, [r3, #12]
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80055ca:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80055cc:	2300      	movs	r3, #0
 80055ce:	e000      	b.n	80055d2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80055d0:	2302      	movs	r3, #2
  }
}
 80055d2:	4618      	mov	r0, r3
 80055d4:	3714      	adds	r7, #20
 80055d6:	46bd      	mov	sp, r7
 80055d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055dc:	4770      	bx	lr

080055de <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80055de:	b580      	push	{r7, lr}
 80055e0:	b082      	sub	sp, #8
 80055e2:	af00      	add	r7, sp, #0
 80055e4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	68da      	ldr	r2, [r3, #12]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055f4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2220      	movs	r2, #32
 80055fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80055fe:	6878      	ldr	r0, [r7, #4]
 8005600:	f7ff fec8 	bl	8005394 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005604:	2300      	movs	r3, #0
}
 8005606:	4618      	mov	r0, r3
 8005608:	3708      	adds	r7, #8
 800560a:	46bd      	mov	sp, r7
 800560c:	bd80      	pop	{r7, pc}

0800560e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800560e:	b580      	push	{r7, lr}
 8005610:	b08c      	sub	sp, #48	; 0x30
 8005612:	af00      	add	r7, sp, #0
 8005614:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800561c:	b2db      	uxtb	r3, r3
 800561e:	2b22      	cmp	r3, #34	; 0x22
 8005620:	f040 80ab 	bne.w	800577a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800562c:	d117      	bne.n	800565e <UART_Receive_IT+0x50>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	691b      	ldr	r3, [r3, #16]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d113      	bne.n	800565e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005636:	2300      	movs	r3, #0
 8005638:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800563e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	b29b      	uxth	r3, r3
 8005648:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800564c:	b29a      	uxth	r2, r3
 800564e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005650:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005656:	1c9a      	adds	r2, r3, #2
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	629a      	str	r2, [r3, #40]	; 0x28
 800565c:	e026      	b.n	80056ac <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005662:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005664:	2300      	movs	r3, #0
 8005666:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	689b      	ldr	r3, [r3, #8]
 800566c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005670:	d007      	beq.n	8005682 <UART_Receive_IT+0x74>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	689b      	ldr	r3, [r3, #8]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <UART_Receive_IT+0x82>
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	691b      	ldr	r3, [r3, #16]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d106      	bne.n	8005690 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	685b      	ldr	r3, [r3, #4]
 8005688:	b2da      	uxtb	r2, r3
 800568a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800568c:	701a      	strb	r2, [r3, #0]
 800568e:	e008      	b.n	80056a2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800569c:	b2da      	uxtb	r2, r3
 800569e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80056a0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056a6:	1c5a      	adds	r2, r3, #1
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80056b0:	b29b      	uxth	r3, r3
 80056b2:	3b01      	subs	r3, #1
 80056b4:	b29b      	uxth	r3, r3
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	4619      	mov	r1, r3
 80056ba:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d15a      	bne.n	8005776 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f022 0220 	bic.w	r2, r2, #32
 80056ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68da      	ldr	r2, [r3, #12]
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	695a      	ldr	r2, [r3, #20]
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f022 0201 	bic.w	r2, r2, #1
 80056ee:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2220      	movs	r2, #32
 80056f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	2b01      	cmp	r3, #1
 80056fe:	d135      	bne.n	800576c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	330c      	adds	r3, #12
 800570c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800570e:	697b      	ldr	r3, [r7, #20]
 8005710:	e853 3f00 	ldrex	r3, [r3]
 8005714:	613b      	str	r3, [r7, #16]
   return(result);
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f023 0310 	bic.w	r3, r3, #16
 800571c:	627b      	str	r3, [r7, #36]	; 0x24
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	330c      	adds	r3, #12
 8005724:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005726:	623a      	str	r2, [r7, #32]
 8005728:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800572a:	69f9      	ldr	r1, [r7, #28]
 800572c:	6a3a      	ldr	r2, [r7, #32]
 800572e:	e841 2300 	strex	r3, r2, [r1]
 8005732:	61bb      	str	r3, [r7, #24]
   return(result);
 8005734:	69bb      	ldr	r3, [r7, #24]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d1e5      	bne.n	8005706 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f003 0310 	and.w	r3, r3, #16
 8005744:	2b10      	cmp	r3, #16
 8005746:	d10a      	bne.n	800575e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005748:	2300      	movs	r3, #0
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005762:	4619      	mov	r1, r3
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fe29 	bl	80053bc <HAL_UARTEx_RxEventCallback>
 800576a:	e002      	b.n	8005772 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800576c:	6878      	ldr	r0, [r7, #4]
 800576e:	f7fb f949 	bl	8000a04 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005772:	2300      	movs	r3, #0
 8005774:	e002      	b.n	800577c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005776:	2300      	movs	r3, #0
 8005778:	e000      	b.n	800577c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800577a:	2302      	movs	r3, #2
  }
}
 800577c:	4618      	mov	r0, r3
 800577e:	3730      	adds	r7, #48	; 0x30
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}

08005784 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005788:	b0c0      	sub	sp, #256	; 0x100
 800578a:	af00      	add	r7, sp, #0
 800578c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005790:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	691b      	ldr	r3, [r3, #16]
 8005798:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800579c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a0:	68d9      	ldr	r1, [r3, #12]
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	681a      	ldr	r2, [r3, #0]
 80057a8:	ea40 0301 	orr.w	r3, r0, r1
 80057ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b2:	689a      	ldr	r2, [r3, #8]
 80057b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	431a      	orrs	r2, r3
 80057bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c0:	695b      	ldr	r3, [r3, #20]
 80057c2:	431a      	orrs	r2, r3
 80057c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057c8:	69db      	ldr	r3, [r3, #28]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80057dc:	f021 010c 	bic.w	r1, r1, #12
 80057e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e4:	681a      	ldr	r2, [r3, #0]
 80057e6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80057ea:	430b      	orrs	r3, r1
 80057ec:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80057ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	695b      	ldr	r3, [r3, #20]
 80057f6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80057fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057fe:	6999      	ldr	r1, [r3, #24]
 8005800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005804:	681a      	ldr	r2, [r3, #0]
 8005806:	ea40 0301 	orr.w	r3, r0, r1
 800580a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800580c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005810:	681a      	ldr	r2, [r3, #0]
 8005812:	4b8f      	ldr	r3, [pc, #572]	; (8005a50 <UART_SetConfig+0x2cc>)
 8005814:	429a      	cmp	r2, r3
 8005816:	d005      	beq.n	8005824 <UART_SetConfig+0xa0>
 8005818:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800581c:	681a      	ldr	r2, [r3, #0]
 800581e:	4b8d      	ldr	r3, [pc, #564]	; (8005a54 <UART_SetConfig+0x2d0>)
 8005820:	429a      	cmp	r2, r3
 8005822:	d104      	bne.n	800582e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005824:	f7fd ff42 	bl	80036ac <HAL_RCC_GetPCLK2Freq>
 8005828:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800582c:	e003      	b.n	8005836 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800582e:	f7fd ff29 	bl	8003684 <HAL_RCC_GetPCLK1Freq>
 8005832:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005836:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800583a:	69db      	ldr	r3, [r3, #28]
 800583c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005840:	f040 810c 	bne.w	8005a5c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005844:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005848:	2200      	movs	r2, #0
 800584a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800584e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005852:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005856:	4622      	mov	r2, r4
 8005858:	462b      	mov	r3, r5
 800585a:	1891      	adds	r1, r2, r2
 800585c:	65b9      	str	r1, [r7, #88]	; 0x58
 800585e:	415b      	adcs	r3, r3
 8005860:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005862:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005866:	4621      	mov	r1, r4
 8005868:	eb12 0801 	adds.w	r8, r2, r1
 800586c:	4629      	mov	r1, r5
 800586e:	eb43 0901 	adc.w	r9, r3, r1
 8005872:	f04f 0200 	mov.w	r2, #0
 8005876:	f04f 0300 	mov.w	r3, #0
 800587a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800587e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005882:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005886:	4690      	mov	r8, r2
 8005888:	4699      	mov	r9, r3
 800588a:	4623      	mov	r3, r4
 800588c:	eb18 0303 	adds.w	r3, r8, r3
 8005890:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005894:	462b      	mov	r3, r5
 8005896:	eb49 0303 	adc.w	r3, r9, r3
 800589a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800589e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	2200      	movs	r2, #0
 80058a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80058aa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80058ae:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80058b2:	460b      	mov	r3, r1
 80058b4:	18db      	adds	r3, r3, r3
 80058b6:	653b      	str	r3, [r7, #80]	; 0x50
 80058b8:	4613      	mov	r3, r2
 80058ba:	eb42 0303 	adc.w	r3, r2, r3
 80058be:	657b      	str	r3, [r7, #84]	; 0x54
 80058c0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80058c4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80058c8:	f7fa fc7e 	bl	80001c8 <__aeabi_uldivmod>
 80058cc:	4602      	mov	r2, r0
 80058ce:	460b      	mov	r3, r1
 80058d0:	4b61      	ldr	r3, [pc, #388]	; (8005a58 <UART_SetConfig+0x2d4>)
 80058d2:	fba3 2302 	umull	r2, r3, r3, r2
 80058d6:	095b      	lsrs	r3, r3, #5
 80058d8:	011c      	lsls	r4, r3, #4
 80058da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058de:	2200      	movs	r2, #0
 80058e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80058e4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80058e8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80058ec:	4642      	mov	r2, r8
 80058ee:	464b      	mov	r3, r9
 80058f0:	1891      	adds	r1, r2, r2
 80058f2:	64b9      	str	r1, [r7, #72]	; 0x48
 80058f4:	415b      	adcs	r3, r3
 80058f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80058f8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80058fc:	4641      	mov	r1, r8
 80058fe:	eb12 0a01 	adds.w	sl, r2, r1
 8005902:	4649      	mov	r1, r9
 8005904:	eb43 0b01 	adc.w	fp, r3, r1
 8005908:	f04f 0200 	mov.w	r2, #0
 800590c:	f04f 0300 	mov.w	r3, #0
 8005910:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005914:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005918:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800591c:	4692      	mov	sl, r2
 800591e:	469b      	mov	fp, r3
 8005920:	4643      	mov	r3, r8
 8005922:	eb1a 0303 	adds.w	r3, sl, r3
 8005926:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800592a:	464b      	mov	r3, r9
 800592c:	eb4b 0303 	adc.w	r3, fp, r3
 8005930:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005934:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005938:	685b      	ldr	r3, [r3, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005940:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005944:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005948:	460b      	mov	r3, r1
 800594a:	18db      	adds	r3, r3, r3
 800594c:	643b      	str	r3, [r7, #64]	; 0x40
 800594e:	4613      	mov	r3, r2
 8005950:	eb42 0303 	adc.w	r3, r2, r3
 8005954:	647b      	str	r3, [r7, #68]	; 0x44
 8005956:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800595a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800595e:	f7fa fc33 	bl	80001c8 <__aeabi_uldivmod>
 8005962:	4602      	mov	r2, r0
 8005964:	460b      	mov	r3, r1
 8005966:	4611      	mov	r1, r2
 8005968:	4b3b      	ldr	r3, [pc, #236]	; (8005a58 <UART_SetConfig+0x2d4>)
 800596a:	fba3 2301 	umull	r2, r3, r3, r1
 800596e:	095b      	lsrs	r3, r3, #5
 8005970:	2264      	movs	r2, #100	; 0x64
 8005972:	fb02 f303 	mul.w	r3, r2, r3
 8005976:	1acb      	subs	r3, r1, r3
 8005978:	00db      	lsls	r3, r3, #3
 800597a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800597e:	4b36      	ldr	r3, [pc, #216]	; (8005a58 <UART_SetConfig+0x2d4>)
 8005980:	fba3 2302 	umull	r2, r3, r3, r2
 8005984:	095b      	lsrs	r3, r3, #5
 8005986:	005b      	lsls	r3, r3, #1
 8005988:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800598c:	441c      	add	r4, r3
 800598e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005992:	2200      	movs	r2, #0
 8005994:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005998:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800599c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80059a0:	4642      	mov	r2, r8
 80059a2:	464b      	mov	r3, r9
 80059a4:	1891      	adds	r1, r2, r2
 80059a6:	63b9      	str	r1, [r7, #56]	; 0x38
 80059a8:	415b      	adcs	r3, r3
 80059aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80059b0:	4641      	mov	r1, r8
 80059b2:	1851      	adds	r1, r2, r1
 80059b4:	6339      	str	r1, [r7, #48]	; 0x30
 80059b6:	4649      	mov	r1, r9
 80059b8:	414b      	adcs	r3, r1
 80059ba:	637b      	str	r3, [r7, #52]	; 0x34
 80059bc:	f04f 0200 	mov.w	r2, #0
 80059c0:	f04f 0300 	mov.w	r3, #0
 80059c4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80059c8:	4659      	mov	r1, fp
 80059ca:	00cb      	lsls	r3, r1, #3
 80059cc:	4651      	mov	r1, sl
 80059ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80059d2:	4651      	mov	r1, sl
 80059d4:	00ca      	lsls	r2, r1, #3
 80059d6:	4610      	mov	r0, r2
 80059d8:	4619      	mov	r1, r3
 80059da:	4603      	mov	r3, r0
 80059dc:	4642      	mov	r2, r8
 80059de:	189b      	adds	r3, r3, r2
 80059e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80059e4:	464b      	mov	r3, r9
 80059e6:	460a      	mov	r2, r1
 80059e8:	eb42 0303 	adc.w	r3, r2, r3
 80059ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80059fc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005a00:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005a04:	460b      	mov	r3, r1
 8005a06:	18db      	adds	r3, r3, r3
 8005a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8005a0a:	4613      	mov	r3, r2
 8005a0c:	eb42 0303 	adc.w	r3, r2, r3
 8005a10:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a12:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005a16:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005a1a:	f7fa fbd5 	bl	80001c8 <__aeabi_uldivmod>
 8005a1e:	4602      	mov	r2, r0
 8005a20:	460b      	mov	r3, r1
 8005a22:	4b0d      	ldr	r3, [pc, #52]	; (8005a58 <UART_SetConfig+0x2d4>)
 8005a24:	fba3 1302 	umull	r1, r3, r3, r2
 8005a28:	095b      	lsrs	r3, r3, #5
 8005a2a:	2164      	movs	r1, #100	; 0x64
 8005a2c:	fb01 f303 	mul.w	r3, r1, r3
 8005a30:	1ad3      	subs	r3, r2, r3
 8005a32:	00db      	lsls	r3, r3, #3
 8005a34:	3332      	adds	r3, #50	; 0x32
 8005a36:	4a08      	ldr	r2, [pc, #32]	; (8005a58 <UART_SetConfig+0x2d4>)
 8005a38:	fba2 2303 	umull	r2, r3, r2, r3
 8005a3c:	095b      	lsrs	r3, r3, #5
 8005a3e:	f003 0207 	and.w	r2, r3, #7
 8005a42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	4422      	add	r2, r4
 8005a4a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005a4c:	e106      	b.n	8005c5c <UART_SetConfig+0x4d8>
 8005a4e:	bf00      	nop
 8005a50:	40011000 	.word	0x40011000
 8005a54:	40011400 	.word	0x40011400
 8005a58:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a5c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a60:	2200      	movs	r2, #0
 8005a62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005a66:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005a6a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005a6e:	4642      	mov	r2, r8
 8005a70:	464b      	mov	r3, r9
 8005a72:	1891      	adds	r1, r2, r2
 8005a74:	6239      	str	r1, [r7, #32]
 8005a76:	415b      	adcs	r3, r3
 8005a78:	627b      	str	r3, [r7, #36]	; 0x24
 8005a7a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005a7e:	4641      	mov	r1, r8
 8005a80:	1854      	adds	r4, r2, r1
 8005a82:	4649      	mov	r1, r9
 8005a84:	eb43 0501 	adc.w	r5, r3, r1
 8005a88:	f04f 0200 	mov.w	r2, #0
 8005a8c:	f04f 0300 	mov.w	r3, #0
 8005a90:	00eb      	lsls	r3, r5, #3
 8005a92:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005a96:	00e2      	lsls	r2, r4, #3
 8005a98:	4614      	mov	r4, r2
 8005a9a:	461d      	mov	r5, r3
 8005a9c:	4643      	mov	r3, r8
 8005a9e:	18e3      	adds	r3, r4, r3
 8005aa0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005aa4:	464b      	mov	r3, r9
 8005aa6:	eb45 0303 	adc.w	r3, r5, r3
 8005aaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005aae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	2200      	movs	r2, #0
 8005ab6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005aba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005abe:	f04f 0200 	mov.w	r2, #0
 8005ac2:	f04f 0300 	mov.w	r3, #0
 8005ac6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005aca:	4629      	mov	r1, r5
 8005acc:	008b      	lsls	r3, r1, #2
 8005ace:	4621      	mov	r1, r4
 8005ad0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005ad4:	4621      	mov	r1, r4
 8005ad6:	008a      	lsls	r2, r1, #2
 8005ad8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005adc:	f7fa fb74 	bl	80001c8 <__aeabi_uldivmod>
 8005ae0:	4602      	mov	r2, r0
 8005ae2:	460b      	mov	r3, r1
 8005ae4:	4b60      	ldr	r3, [pc, #384]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8005aea:	095b      	lsrs	r3, r3, #5
 8005aec:	011c      	lsls	r4, r3, #4
 8005aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005af2:	2200      	movs	r2, #0
 8005af4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005af8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005afc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005b00:	4642      	mov	r2, r8
 8005b02:	464b      	mov	r3, r9
 8005b04:	1891      	adds	r1, r2, r2
 8005b06:	61b9      	str	r1, [r7, #24]
 8005b08:	415b      	adcs	r3, r3
 8005b0a:	61fb      	str	r3, [r7, #28]
 8005b0c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005b10:	4641      	mov	r1, r8
 8005b12:	1851      	adds	r1, r2, r1
 8005b14:	6139      	str	r1, [r7, #16]
 8005b16:	4649      	mov	r1, r9
 8005b18:	414b      	adcs	r3, r1
 8005b1a:	617b      	str	r3, [r7, #20]
 8005b1c:	f04f 0200 	mov.w	r2, #0
 8005b20:	f04f 0300 	mov.w	r3, #0
 8005b24:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005b28:	4659      	mov	r1, fp
 8005b2a:	00cb      	lsls	r3, r1, #3
 8005b2c:	4651      	mov	r1, sl
 8005b2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005b32:	4651      	mov	r1, sl
 8005b34:	00ca      	lsls	r2, r1, #3
 8005b36:	4610      	mov	r0, r2
 8005b38:	4619      	mov	r1, r3
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	4642      	mov	r2, r8
 8005b3e:	189b      	adds	r3, r3, r2
 8005b40:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005b44:	464b      	mov	r3, r9
 8005b46:	460a      	mov	r2, r1
 8005b48:	eb42 0303 	adc.w	r3, r2, r3
 8005b4c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2200      	movs	r2, #0
 8005b58:	67bb      	str	r3, [r7, #120]	; 0x78
 8005b5a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005b5c:	f04f 0200 	mov.w	r2, #0
 8005b60:	f04f 0300 	mov.w	r3, #0
 8005b64:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005b68:	4649      	mov	r1, r9
 8005b6a:	008b      	lsls	r3, r1, #2
 8005b6c:	4641      	mov	r1, r8
 8005b6e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005b72:	4641      	mov	r1, r8
 8005b74:	008a      	lsls	r2, r1, #2
 8005b76:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005b7a:	f7fa fb25 	bl	80001c8 <__aeabi_uldivmod>
 8005b7e:	4602      	mov	r2, r0
 8005b80:	460b      	mov	r3, r1
 8005b82:	4611      	mov	r1, r2
 8005b84:	4b38      	ldr	r3, [pc, #224]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005b86:	fba3 2301 	umull	r2, r3, r3, r1
 8005b8a:	095b      	lsrs	r3, r3, #5
 8005b8c:	2264      	movs	r2, #100	; 0x64
 8005b8e:	fb02 f303 	mul.w	r3, r2, r3
 8005b92:	1acb      	subs	r3, r1, r3
 8005b94:	011b      	lsls	r3, r3, #4
 8005b96:	3332      	adds	r3, #50	; 0x32
 8005b98:	4a33      	ldr	r2, [pc, #204]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005b9a:	fba2 2303 	umull	r2, r3, r2, r3
 8005b9e:	095b      	lsrs	r3, r3, #5
 8005ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005ba4:	441c      	add	r4, r3
 8005ba6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005baa:	2200      	movs	r2, #0
 8005bac:	673b      	str	r3, [r7, #112]	; 0x70
 8005bae:	677a      	str	r2, [r7, #116]	; 0x74
 8005bb0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005bb4:	4642      	mov	r2, r8
 8005bb6:	464b      	mov	r3, r9
 8005bb8:	1891      	adds	r1, r2, r2
 8005bba:	60b9      	str	r1, [r7, #8]
 8005bbc:	415b      	adcs	r3, r3
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005bc4:	4641      	mov	r1, r8
 8005bc6:	1851      	adds	r1, r2, r1
 8005bc8:	6039      	str	r1, [r7, #0]
 8005bca:	4649      	mov	r1, r9
 8005bcc:	414b      	adcs	r3, r1
 8005bce:	607b      	str	r3, [r7, #4]
 8005bd0:	f04f 0200 	mov.w	r2, #0
 8005bd4:	f04f 0300 	mov.w	r3, #0
 8005bd8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005bdc:	4659      	mov	r1, fp
 8005bde:	00cb      	lsls	r3, r1, #3
 8005be0:	4651      	mov	r1, sl
 8005be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005be6:	4651      	mov	r1, sl
 8005be8:	00ca      	lsls	r2, r1, #3
 8005bea:	4610      	mov	r0, r2
 8005bec:	4619      	mov	r1, r3
 8005bee:	4603      	mov	r3, r0
 8005bf0:	4642      	mov	r2, r8
 8005bf2:	189b      	adds	r3, r3, r2
 8005bf4:	66bb      	str	r3, [r7, #104]	; 0x68
 8005bf6:	464b      	mov	r3, r9
 8005bf8:	460a      	mov	r2, r1
 8005bfa:	eb42 0303 	adc.w	r3, r2, r3
 8005bfe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005c00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c04:	685b      	ldr	r3, [r3, #4]
 8005c06:	2200      	movs	r2, #0
 8005c08:	663b      	str	r3, [r7, #96]	; 0x60
 8005c0a:	667a      	str	r2, [r7, #100]	; 0x64
 8005c0c:	f04f 0200 	mov.w	r2, #0
 8005c10:	f04f 0300 	mov.w	r3, #0
 8005c14:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005c18:	4649      	mov	r1, r9
 8005c1a:	008b      	lsls	r3, r1, #2
 8005c1c:	4641      	mov	r1, r8
 8005c1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005c22:	4641      	mov	r1, r8
 8005c24:	008a      	lsls	r2, r1, #2
 8005c26:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005c2a:	f7fa facd 	bl	80001c8 <__aeabi_uldivmod>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	460b      	mov	r3, r1
 8005c32:	4b0d      	ldr	r3, [pc, #52]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005c34:	fba3 1302 	umull	r1, r3, r3, r2
 8005c38:	095b      	lsrs	r3, r3, #5
 8005c3a:	2164      	movs	r1, #100	; 0x64
 8005c3c:	fb01 f303 	mul.w	r3, r1, r3
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	011b      	lsls	r3, r3, #4
 8005c44:	3332      	adds	r3, #50	; 0x32
 8005c46:	4a08      	ldr	r2, [pc, #32]	; (8005c68 <UART_SetConfig+0x4e4>)
 8005c48:	fba2 2303 	umull	r2, r3, r2, r3
 8005c4c:	095b      	lsrs	r3, r3, #5
 8005c4e:	f003 020f 	and.w	r2, r3, #15
 8005c52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4422      	add	r2, r4
 8005c5a:	609a      	str	r2, [r3, #8]
}
 8005c5c:	bf00      	nop
 8005c5e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005c62:	46bd      	mov	sp, r7
 8005c64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c68:	51eb851f 	.word	0x51eb851f

08005c6c <memset>:
 8005c6c:	4402      	add	r2, r0
 8005c6e:	4603      	mov	r3, r0
 8005c70:	4293      	cmp	r3, r2
 8005c72:	d100      	bne.n	8005c76 <memset+0xa>
 8005c74:	4770      	bx	lr
 8005c76:	f803 1b01 	strb.w	r1, [r3], #1
 8005c7a:	e7f9      	b.n	8005c70 <memset+0x4>

08005c7c <__libc_init_array>:
 8005c7c:	b570      	push	{r4, r5, r6, lr}
 8005c7e:	4d0d      	ldr	r5, [pc, #52]	; (8005cb4 <__libc_init_array+0x38>)
 8005c80:	4c0d      	ldr	r4, [pc, #52]	; (8005cb8 <__libc_init_array+0x3c>)
 8005c82:	1b64      	subs	r4, r4, r5
 8005c84:	10a4      	asrs	r4, r4, #2
 8005c86:	2600      	movs	r6, #0
 8005c88:	42a6      	cmp	r6, r4
 8005c8a:	d109      	bne.n	8005ca0 <__libc_init_array+0x24>
 8005c8c:	4d0b      	ldr	r5, [pc, #44]	; (8005cbc <__libc_init_array+0x40>)
 8005c8e:	4c0c      	ldr	r4, [pc, #48]	; (8005cc0 <__libc_init_array+0x44>)
 8005c90:	f000 f818 	bl	8005cc4 <_init>
 8005c94:	1b64      	subs	r4, r4, r5
 8005c96:	10a4      	asrs	r4, r4, #2
 8005c98:	2600      	movs	r6, #0
 8005c9a:	42a6      	cmp	r6, r4
 8005c9c:	d105      	bne.n	8005caa <__libc_init_array+0x2e>
 8005c9e:	bd70      	pop	{r4, r5, r6, pc}
 8005ca0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005ca4:	4798      	blx	r3
 8005ca6:	3601      	adds	r6, #1
 8005ca8:	e7ee      	b.n	8005c88 <__libc_init_array+0xc>
 8005caa:	f855 3b04 	ldr.w	r3, [r5], #4
 8005cae:	4798      	blx	r3
 8005cb0:	3601      	adds	r6, #1
 8005cb2:	e7f2      	b.n	8005c9a <__libc_init_array+0x1e>
 8005cb4:	08005d04 	.word	0x08005d04
 8005cb8:	08005d04 	.word	0x08005d04
 8005cbc:	08005d04 	.word	0x08005d04
 8005cc0:	08005d08 	.word	0x08005d08

08005cc4 <_init>:
 8005cc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cc6:	bf00      	nop
 8005cc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cca:	bc08      	pop	{r3}
 8005ccc:	469e      	mov	lr, r3
 8005cce:	4770      	bx	lr

08005cd0 <_fini>:
 8005cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cd2:	bf00      	nop
 8005cd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005cd6:	bc08      	pop	{r3}
 8005cd8:	469e      	mov	lr, r3
 8005cda:	4770      	bx	lr
