
CEAC_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006398  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08006520  08006520  00016520  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065b0  080065b0  000200dc  2**0
                  CONTENTS
  4 .ARM          00000008  080065b0  080065b0  000165b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065b8  080065b8  000200dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065b8  080065b8  000165b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080065bc  080065bc  000165bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000dc  20000000  080065c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200dc  2**0
                  CONTENTS
 10 .bss          000005c8  200000e0  200000e0  000200e0  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200006a8  200006a8  000200e0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002010c  2**0
                  CONTENTS, READONLY
 14 .debug_info   000138cc  00000000  00000000  0002014f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003332  00000000  00000000  00033a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001048  00000000  00000000  00036d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000c87  00000000  00000000  00037d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00025091  00000000  00000000  00038a1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000176f1  00000000  00000000  0005dab0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d83dd  00000000  00000000  000751a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000044f0  00000000  00000000  0014d580  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000099  00000000  00000000  00151a70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	200000e0 	.word	0x200000e0
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08006508 	.word	0x08006508

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	200000e4 	.word	0x200000e4
 80001c4:	08006508 	.word	0x08006508

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b970 	b.w	80004c0 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	460d      	mov	r5, r1
 8000200:	4604      	mov	r4, r0
 8000202:	460f      	mov	r7, r1
 8000204:	2b00      	cmp	r3, #0
 8000206:	d14a      	bne.n	800029e <__udivmoddi4+0xa6>
 8000208:	428a      	cmp	r2, r1
 800020a:	4694      	mov	ip, r2
 800020c:	d965      	bls.n	80002da <__udivmoddi4+0xe2>
 800020e:	fab2 f382 	clz	r3, r2
 8000212:	b143      	cbz	r3, 8000226 <__udivmoddi4+0x2e>
 8000214:	fa02 fc03 	lsl.w	ip, r2, r3
 8000218:	f1c3 0220 	rsb	r2, r3, #32
 800021c:	409f      	lsls	r7, r3
 800021e:	fa20 f202 	lsr.w	r2, r0, r2
 8000222:	4317      	orrs	r7, r2
 8000224:	409c      	lsls	r4, r3
 8000226:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800022a:	fa1f f58c 	uxth.w	r5, ip
 800022e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000232:	0c22      	lsrs	r2, r4, #16
 8000234:	fb0e 7711 	mls	r7, lr, r1, r7
 8000238:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800023c:	fb01 f005 	mul.w	r0, r1, r5
 8000240:	4290      	cmp	r0, r2
 8000242:	d90a      	bls.n	800025a <__udivmoddi4+0x62>
 8000244:	eb1c 0202 	adds.w	r2, ip, r2
 8000248:	f101 37ff 	add.w	r7, r1, #4294967295
 800024c:	f080 811c 	bcs.w	8000488 <__udivmoddi4+0x290>
 8000250:	4290      	cmp	r0, r2
 8000252:	f240 8119 	bls.w	8000488 <__udivmoddi4+0x290>
 8000256:	3902      	subs	r1, #2
 8000258:	4462      	add	r2, ip
 800025a:	1a12      	subs	r2, r2, r0
 800025c:	b2a4      	uxth	r4, r4
 800025e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000262:	fb0e 2210 	mls	r2, lr, r0, r2
 8000266:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800026a:	fb00 f505 	mul.w	r5, r0, r5
 800026e:	42a5      	cmp	r5, r4
 8000270:	d90a      	bls.n	8000288 <__udivmoddi4+0x90>
 8000272:	eb1c 0404 	adds.w	r4, ip, r4
 8000276:	f100 32ff 	add.w	r2, r0, #4294967295
 800027a:	f080 8107 	bcs.w	800048c <__udivmoddi4+0x294>
 800027e:	42a5      	cmp	r5, r4
 8000280:	f240 8104 	bls.w	800048c <__udivmoddi4+0x294>
 8000284:	4464      	add	r4, ip
 8000286:	3802      	subs	r0, #2
 8000288:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800028c:	1b64      	subs	r4, r4, r5
 800028e:	2100      	movs	r1, #0
 8000290:	b11e      	cbz	r6, 800029a <__udivmoddi4+0xa2>
 8000292:	40dc      	lsrs	r4, r3
 8000294:	2300      	movs	r3, #0
 8000296:	e9c6 4300 	strd	r4, r3, [r6]
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d908      	bls.n	80002b4 <__udivmoddi4+0xbc>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80ed 	beq.w	8000482 <__udivmoddi4+0x28a>
 80002a8:	2100      	movs	r1, #0
 80002aa:	e9c6 0500 	strd	r0, r5, [r6]
 80002ae:	4608      	mov	r0, r1
 80002b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b4:	fab3 f183 	clz	r1, r3
 80002b8:	2900      	cmp	r1, #0
 80002ba:	d149      	bne.n	8000350 <__udivmoddi4+0x158>
 80002bc:	42ab      	cmp	r3, r5
 80002be:	d302      	bcc.n	80002c6 <__udivmoddi4+0xce>
 80002c0:	4282      	cmp	r2, r0
 80002c2:	f200 80f8 	bhi.w	80004b6 <__udivmoddi4+0x2be>
 80002c6:	1a84      	subs	r4, r0, r2
 80002c8:	eb65 0203 	sbc.w	r2, r5, r3
 80002cc:	2001      	movs	r0, #1
 80002ce:	4617      	mov	r7, r2
 80002d0:	2e00      	cmp	r6, #0
 80002d2:	d0e2      	beq.n	800029a <__udivmoddi4+0xa2>
 80002d4:	e9c6 4700 	strd	r4, r7, [r6]
 80002d8:	e7df      	b.n	800029a <__udivmoddi4+0xa2>
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xe6>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f382 	clz	r3, r2
 80002e2:	2b00      	cmp	r3, #0
 80002e4:	f040 8090 	bne.w	8000408 <__udivmoddi4+0x210>
 80002e8:	1a8a      	subs	r2, r1, r2
 80002ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002ee:	fa1f fe8c 	uxth.w	lr, ip
 80002f2:	2101      	movs	r1, #1
 80002f4:	fbb2 f5f7 	udiv	r5, r2, r7
 80002f8:	fb07 2015 	mls	r0, r7, r5, r2
 80002fc:	0c22      	lsrs	r2, r4, #16
 80002fe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000302:	fb0e f005 	mul.w	r0, lr, r5
 8000306:	4290      	cmp	r0, r2
 8000308:	d908      	bls.n	800031c <__udivmoddi4+0x124>
 800030a:	eb1c 0202 	adds.w	r2, ip, r2
 800030e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4290      	cmp	r0, r2
 8000316:	f200 80cb 	bhi.w	80004b0 <__udivmoddi4+0x2b8>
 800031a:	4645      	mov	r5, r8
 800031c:	1a12      	subs	r2, r2, r0
 800031e:	b2a4      	uxth	r4, r4
 8000320:	fbb2 f0f7 	udiv	r0, r2, r7
 8000324:	fb07 2210 	mls	r2, r7, r0, r2
 8000328:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800032c:	fb0e fe00 	mul.w	lr, lr, r0
 8000330:	45a6      	cmp	lr, r4
 8000332:	d908      	bls.n	8000346 <__udivmoddi4+0x14e>
 8000334:	eb1c 0404 	adds.w	r4, ip, r4
 8000338:	f100 32ff 	add.w	r2, r0, #4294967295
 800033c:	d202      	bcs.n	8000344 <__udivmoddi4+0x14c>
 800033e:	45a6      	cmp	lr, r4
 8000340:	f200 80bb 	bhi.w	80004ba <__udivmoddi4+0x2c2>
 8000344:	4610      	mov	r0, r2
 8000346:	eba4 040e 	sub.w	r4, r4, lr
 800034a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800034e:	e79f      	b.n	8000290 <__udivmoddi4+0x98>
 8000350:	f1c1 0720 	rsb	r7, r1, #32
 8000354:	408b      	lsls	r3, r1
 8000356:	fa22 fc07 	lsr.w	ip, r2, r7
 800035a:	ea4c 0c03 	orr.w	ip, ip, r3
 800035e:	fa05 f401 	lsl.w	r4, r5, r1
 8000362:	fa20 f307 	lsr.w	r3, r0, r7
 8000366:	40fd      	lsrs	r5, r7
 8000368:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800036c:	4323      	orrs	r3, r4
 800036e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000372:	fa1f fe8c 	uxth.w	lr, ip
 8000376:	fb09 5518 	mls	r5, r9, r8, r5
 800037a:	0c1c      	lsrs	r4, r3, #16
 800037c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000380:	fb08 f50e 	mul.w	r5, r8, lr
 8000384:	42a5      	cmp	r5, r4
 8000386:	fa02 f201 	lsl.w	r2, r2, r1
 800038a:	fa00 f001 	lsl.w	r0, r0, r1
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1c 0404 	adds.w	r4, ip, r4
 8000394:	f108 3aff 	add.w	sl, r8, #4294967295
 8000398:	f080 8088 	bcs.w	80004ac <__udivmoddi4+0x2b4>
 800039c:	42a5      	cmp	r5, r4
 800039e:	f240 8085 	bls.w	80004ac <__udivmoddi4+0x2b4>
 80003a2:	f1a8 0802 	sub.w	r8, r8, #2
 80003a6:	4464      	add	r4, ip
 80003a8:	1b64      	subs	r4, r4, r5
 80003aa:	b29d      	uxth	r5, r3
 80003ac:	fbb4 f3f9 	udiv	r3, r4, r9
 80003b0:	fb09 4413 	mls	r4, r9, r3, r4
 80003b4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003b8:	fb03 fe0e 	mul.w	lr, r3, lr
 80003bc:	45a6      	cmp	lr, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1c 0404 	adds.w	r4, ip, r4
 80003c4:	f103 35ff 	add.w	r5, r3, #4294967295
 80003c8:	d26c      	bcs.n	80004a4 <__udivmoddi4+0x2ac>
 80003ca:	45a6      	cmp	lr, r4
 80003cc:	d96a      	bls.n	80004a4 <__udivmoddi4+0x2ac>
 80003ce:	3b02      	subs	r3, #2
 80003d0:	4464      	add	r4, ip
 80003d2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003d6:	fba3 9502 	umull	r9, r5, r3, r2
 80003da:	eba4 040e 	sub.w	r4, r4, lr
 80003de:	42ac      	cmp	r4, r5
 80003e0:	46c8      	mov	r8, r9
 80003e2:	46ae      	mov	lr, r5
 80003e4:	d356      	bcc.n	8000494 <__udivmoddi4+0x29c>
 80003e6:	d053      	beq.n	8000490 <__udivmoddi4+0x298>
 80003e8:	b156      	cbz	r6, 8000400 <__udivmoddi4+0x208>
 80003ea:	ebb0 0208 	subs.w	r2, r0, r8
 80003ee:	eb64 040e 	sbc.w	r4, r4, lr
 80003f2:	fa04 f707 	lsl.w	r7, r4, r7
 80003f6:	40ca      	lsrs	r2, r1
 80003f8:	40cc      	lsrs	r4, r1
 80003fa:	4317      	orrs	r7, r2
 80003fc:	e9c6 7400 	strd	r7, r4, [r6]
 8000400:	4618      	mov	r0, r3
 8000402:	2100      	movs	r1, #0
 8000404:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000408:	f1c3 0120 	rsb	r1, r3, #32
 800040c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000410:	fa20 f201 	lsr.w	r2, r0, r1
 8000414:	fa25 f101 	lsr.w	r1, r5, r1
 8000418:	409d      	lsls	r5, r3
 800041a:	432a      	orrs	r2, r5
 800041c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000420:	fa1f fe8c 	uxth.w	lr, ip
 8000424:	fbb1 f0f7 	udiv	r0, r1, r7
 8000428:	fb07 1510 	mls	r5, r7, r0, r1
 800042c:	0c11      	lsrs	r1, r2, #16
 800042e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000432:	fb00 f50e 	mul.w	r5, r0, lr
 8000436:	428d      	cmp	r5, r1
 8000438:	fa04 f403 	lsl.w	r4, r4, r3
 800043c:	d908      	bls.n	8000450 <__udivmoddi4+0x258>
 800043e:	eb1c 0101 	adds.w	r1, ip, r1
 8000442:	f100 38ff 	add.w	r8, r0, #4294967295
 8000446:	d22f      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 8000448:	428d      	cmp	r5, r1
 800044a:	d92d      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800044c:	3802      	subs	r0, #2
 800044e:	4461      	add	r1, ip
 8000450:	1b49      	subs	r1, r1, r5
 8000452:	b292      	uxth	r2, r2
 8000454:	fbb1 f5f7 	udiv	r5, r1, r7
 8000458:	fb07 1115 	mls	r1, r7, r5, r1
 800045c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000460:	fb05 f10e 	mul.w	r1, r5, lr
 8000464:	4291      	cmp	r1, r2
 8000466:	d908      	bls.n	800047a <__udivmoddi4+0x282>
 8000468:	eb1c 0202 	adds.w	r2, ip, r2
 800046c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000470:	d216      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 8000472:	4291      	cmp	r1, r2
 8000474:	d914      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000476:	3d02      	subs	r5, #2
 8000478:	4462      	add	r2, ip
 800047a:	1a52      	subs	r2, r2, r1
 800047c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000480:	e738      	b.n	80002f4 <__udivmoddi4+0xfc>
 8000482:	4631      	mov	r1, r6
 8000484:	4630      	mov	r0, r6
 8000486:	e708      	b.n	800029a <__udivmoddi4+0xa2>
 8000488:	4639      	mov	r1, r7
 800048a:	e6e6      	b.n	800025a <__udivmoddi4+0x62>
 800048c:	4610      	mov	r0, r2
 800048e:	e6fb      	b.n	8000288 <__udivmoddi4+0x90>
 8000490:	4548      	cmp	r0, r9
 8000492:	d2a9      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000494:	ebb9 0802 	subs.w	r8, r9, r2
 8000498:	eb65 0e0c 	sbc.w	lr, r5, ip
 800049c:	3b01      	subs	r3, #1
 800049e:	e7a3      	b.n	80003e8 <__udivmoddi4+0x1f0>
 80004a0:	4645      	mov	r5, r8
 80004a2:	e7ea      	b.n	800047a <__udivmoddi4+0x282>
 80004a4:	462b      	mov	r3, r5
 80004a6:	e794      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a8:	4640      	mov	r0, r8
 80004aa:	e7d1      	b.n	8000450 <__udivmoddi4+0x258>
 80004ac:	46d0      	mov	r8, sl
 80004ae:	e77b      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004b0:	3d02      	subs	r5, #2
 80004b2:	4462      	add	r2, ip
 80004b4:	e732      	b.n	800031c <__udivmoddi4+0x124>
 80004b6:	4608      	mov	r0, r1
 80004b8:	e70a      	b.n	80002d0 <__udivmoddi4+0xd8>
 80004ba:	4464      	add	r4, ip
 80004bc:	3802      	subs	r0, #2
 80004be:	e742      	b.n	8000346 <__udivmoddi4+0x14e>

080004c0 <__aeabi_idiv0>:
 80004c0:	4770      	bx	lr
 80004c2:	bf00      	nop

080004c4 <flash_read32>:
{
    FLASH->CR |= FLASH_CR_LOCK;
}

static void flash_read32(uint32_t addrs, uint32_t *rd32, uint32_t len)
{
 80004c4:	b480      	push	{r7}
 80004c6:	b087      	sub	sp, #28
 80004c8:	af00      	add	r7, sp, #0
 80004ca:	60f8      	str	r0, [r7, #12]
 80004cc:	60b9      	str	r1, [r7, #8]
 80004ce:	607a      	str	r2, [r7, #4]
    // Read data can be accessed straight away
    uint32_t tempAddrs = addrs;
 80004d0:	68fb      	ldr	r3, [r7, #12]
 80004d2:	617b      	str	r3, [r7, #20]

    for (uint32_t i = 0; i < len; i++)
 80004d4:	2300      	movs	r3, #0
 80004d6:	613b      	str	r3, [r7, #16]
 80004d8:	e00c      	b.n	80004f4 <flash_read32+0x30>
    {
        rd32[i] = *(__IO uint32_t *)tempAddrs;
 80004da:	697a      	ldr	r2, [r7, #20]
 80004dc:	693b      	ldr	r3, [r7, #16]
 80004de:	009b      	lsls	r3, r3, #2
 80004e0:	68b9      	ldr	r1, [r7, #8]
 80004e2:	440b      	add	r3, r1
 80004e4:	6812      	ldr	r2, [r2, #0]
 80004e6:	601a      	str	r2, [r3, #0]
        tempAddrs += 4;
 80004e8:	697b      	ldr	r3, [r7, #20]
 80004ea:	3304      	adds	r3, #4
 80004ec:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < len; i++)
 80004ee:	693b      	ldr	r3, [r7, #16]
 80004f0:	3301      	adds	r3, #1
 80004f2:	613b      	str	r3, [r7, #16]
 80004f4:	693a      	ldr	r2, [r7, #16]
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	429a      	cmp	r2, r3
 80004fa:	d3ee      	bcc.n	80004da <flash_read32+0x16>
    }
}
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	371c      	adds	r7, #28
 8000502:	46bd      	mov	sp, r7
 8000504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000508:	4770      	bx	lr
	...

0800050c <eeprom_init>:
    // Disable PG bit
    FLASH->CR &= ~FLASH_CR_PG;
}

void eeprom_init(uint32_t begin, uint16_t size)
{
 800050c:	b480      	push	{r7}
 800050e:	b083      	sub	sp, #12
 8000510:	af00      	add	r7, sp, #0
 8000512:	6078      	str	r0, [r7, #4]
 8000514:	460b      	mov	r3, r1
 8000516:	807b      	strh	r3, [r7, #2]
    // 4 bytes per an instance
    end_address = begin + (uint32_t)(size << 2);
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	009b      	lsls	r3, r3, #2
 800051c:	461a      	mov	r2, r3
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	4413      	add	r3, r2
 8000522:	4a07      	ldr	r2, [pc, #28]	; (8000540 <eeprom_init+0x34>)
 8000524:	6013      	str	r3, [r2, #0]
    start_address = begin;
 8000526:	4a07      	ldr	r2, [pc, #28]	; (8000544 <eeprom_init+0x38>)
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	6013      	str	r3, [r2, #0]
    e_size = size;
 800052c:	4a06      	ldr	r2, [pc, #24]	; (8000548 <eeprom_init+0x3c>)
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	8013      	strh	r3, [r2, #0]
}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
 800053e:	bf00      	nop
 8000540:	20000104 	.word	0x20000104
 8000544:	20000100 	.word	0x20000100
 8000548:	200000fc 	.word	0x200000fc

0800054c <eeprom_read>:
{
    return (uint32_t)e_size;
}

EEPROM_STATUS eeprom_read(uint16_t offset, uint32_t *pData)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	6039      	str	r1, [r7, #0]
 8000556:	80fb      	strh	r3, [r7, #6]
    if (offset < 0 && offset >= e_size)
    {
        return EEPROM_ERROR;
    }
    // 4 bytes per an instance
    uint32_t addr = start_address + (uint32_t)(offset << 2);
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	009b      	lsls	r3, r3, #2
 800055c:	461a      	mov	r2, r3
 800055e:	4b07      	ldr	r3, [pc, #28]	; (800057c <eeprom_read+0x30>)
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	4413      	add	r3, r2
 8000564:	60fb      	str	r3, [r7, #12]
    flash_read32(addr, pData, 1);
 8000566:	2201      	movs	r2, #1
 8000568:	6839      	ldr	r1, [r7, #0]
 800056a:	68f8      	ldr	r0, [r7, #12]
 800056c:	f7ff ffaa 	bl	80004c4 <flash_read32>
    return EEPROM_OK;
 8000570:	2300      	movs	r3, #0
}
 8000572:	4618      	mov	r0, r3
 8000574:	3710      	adds	r7, #16
 8000576:	46bd      	mov	sp, r7
 8000578:	bd80      	pop	{r7, pc}
 800057a:	bf00      	nop
 800057c:	20000100 	.word	0x20000100

08000580 <fsm_init>:
        }
    }
}

uint8_t fsm_init()
{
 8000580:	b480      	push	{r7}
 8000582:	af00      	add	r7, sp, #0
    fsm_state = CONFIG;
 8000584:	4b04      	ldr	r3, [pc, #16]	; (8000598 <fsm_init+0x18>)
 8000586:	2200      	movs	r2, #0
 8000588:	701a      	strb	r2, [r3, #0]
}
 800058a:	bf00      	nop
 800058c:	4618      	mov	r0, r3
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	20000108 	.word	0x20000108

0800059c <IR_Init>:
#include "IR.h"

void IR_Init(IR *ir, ADC_HandleTypeDef *hadc)
{
 800059c:	b480      	push	{r7}
 800059e:	b085      	sub	sp, #20
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	6078      	str	r0, [r7, #4]
 80005a4:	6039      	str	r1, [r7, #0]
    ir->ADC_t = hadc;
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	683a      	ldr	r2, [r7, #0]
 80005aa:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < NUMS_OF_IR; i++)
 80005ac:	2300      	movs	r3, #0
 80005ae:	60fb      	str	r3, [r7, #12]
 80005b0:	e008      	b.n	80005c4 <IR_Init+0x28>
    {
        ir->data[i] = 0;
 80005b2:	687a      	ldr	r2, [r7, #4]
 80005b4:	68fb      	ldr	r3, [r7, #12]
 80005b6:	005b      	lsls	r3, r3, #1
 80005b8:	4413      	add	r3, r2
 80005ba:	2200      	movs	r2, #0
 80005bc:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < NUMS_OF_IR; i++)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	3301      	adds	r3, #1
 80005c2:	60fb      	str	r3, [r7, #12]
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	2b04      	cmp	r3, #4
 80005c8:	ddf3      	ble.n	80005b2 <IR_Init+0x16>
    }
}
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	3714      	adds	r7, #20
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <Motor_Init>:
PWMcontrol motor[2];
uint16_t speed = DEFAULT_SPEED;
uint16_t servo_middle = SERVO_MIDDLE_DEFAULT;

void Motor_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel1, uint32_t Channel2)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b084      	sub	sp, #16
 80005dc:	af00      	add	r7, sp, #0
 80005de:	60f8      	str	r0, [r7, #12]
 80005e0:	60b9      	str	r1, [r7, #8]
 80005e2:	607a      	str	r2, [r7, #4]
 80005e4:	603b      	str	r3, [r7, #0]
    PWMcontrol->htim = htim;
 80005e6:	68fb      	ldr	r3, [r7, #12]
 80005e8:	68ba      	ldr	r2, [r7, #8]
 80005ea:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel1;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	809a      	strh	r2, [r3, #4]
    PWMcontrol->Channel2 = Channel2;
 80005f4:	683b      	ldr	r3, [r7, #0]
 80005f6:	b29a      	uxth	r2, r3
 80005f8:	68fb      	ldr	r3, [r7, #12]
 80005fa:	80da      	strh	r2, [r3, #6]
    HAL_TIM_PWM_Start(htim, Channel1);
 80005fc:	6879      	ldr	r1, [r7, #4]
 80005fe:	68b8      	ldr	r0, [r7, #8]
 8000600:	f003 faf6 	bl	8003bf0 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(htim, Channel2);
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	68b8      	ldr	r0, [r7, #8]
 8000608:	f003 faf2 	bl	8003bf0 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 800060c:	68fb      	ldr	r3, [r7, #12]
 800060e:	889b      	ldrh	r3, [r3, #4]
 8000610:	2b00      	cmp	r3, #0
 8000612:	d105      	bne.n	8000620 <Motor_Init+0x48>
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	681b      	ldr	r3, [r3, #0]
 800061a:	2200      	movs	r2, #0
 800061c:	635a      	str	r2, [r3, #52]	; 0x34
 800061e:	e018      	b.n	8000652 <Motor_Init+0x7a>
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	889b      	ldrh	r3, [r3, #4]
 8000624:	2b04      	cmp	r3, #4
 8000626:	d105      	bne.n	8000634 <Motor_Init+0x5c>
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	681a      	ldr	r2, [r3, #0]
 800062e:	2300      	movs	r3, #0
 8000630:	6393      	str	r3, [r2, #56]	; 0x38
 8000632:	e00e      	b.n	8000652 <Motor_Init+0x7a>
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	889b      	ldrh	r3, [r3, #4]
 8000638:	2b08      	cmp	r3, #8
 800063a:	d105      	bne.n	8000648 <Motor_Init+0x70>
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	681a      	ldr	r2, [r3, #0]
 8000642:	2300      	movs	r3, #0
 8000644:	63d3      	str	r3, [r2, #60]	; 0x3c
 8000646:	e004      	b.n	8000652 <Motor_Init+0x7a>
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	681a      	ldr	r2, [r3, #0]
 800064e:	2300      	movs	r3, #0
 8000650:	6413      	str	r3, [r2, #64]	; 0x40
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000652:	68fb      	ldr	r3, [r7, #12]
 8000654:	88db      	ldrh	r3, [r3, #6]
 8000656:	2b00      	cmp	r3, #0
 8000658:	d105      	bne.n	8000666 <Motor_Init+0x8e>
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	2200      	movs	r2, #0
 8000662:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 8000664:	e019      	b.n	800069a <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000666:	68fb      	ldr	r3, [r7, #12]
 8000668:	88db      	ldrh	r3, [r3, #6]
 800066a:	2b04      	cmp	r3, #4
 800066c:	d105      	bne.n	800067a <Motor_Init+0xa2>
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	681a      	ldr	r2, [r3, #0]
 8000674:	2300      	movs	r3, #0
 8000676:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 8000678:	e00f      	b.n	800069a <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800067a:	68fb      	ldr	r3, [r7, #12]
 800067c:	88db      	ldrh	r3, [r3, #6]
 800067e:	2b08      	cmp	r3, #8
 8000680:	d105      	bne.n	800068e <Motor_Init+0xb6>
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	681b      	ldr	r3, [r3, #0]
 8000686:	681a      	ldr	r2, [r3, #0]
 8000688:	2300      	movs	r3, #0
 800068a:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 800068c:	e005      	b.n	800069a <Motor_Init+0xc2>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800068e:	68fb      	ldr	r3, [r7, #12]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	681a      	ldr	r2, [r3, #0]
 8000694:	2300      	movs	r3, #0
 8000696:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 8000698:	bf00      	nop
}
 800069a:	3710      	adds	r7, #16
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <Servo_Init>:

void Servo_Init(PWMcontrol *PWMcontrol, TIM_HandleTypeDef *htim, uint32_t Channel, uint16_t PWM_middle)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b084      	sub	sp, #16
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	60f8      	str	r0, [r7, #12]
 80006a8:	60b9      	str	r1, [r7, #8]
 80006aa:	607a      	str	r2, [r7, #4]
 80006ac:	807b      	strh	r3, [r7, #2]
    PWMcontrol->htim = htim;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	68ba      	ldr	r2, [r7, #8]
 80006b2:	601a      	str	r2, [r3, #0]
    PWMcontrol->Channel1 = Channel;
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	b29a      	uxth	r2, r3
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	809a      	strh	r2, [r3, #4]
	HAL_TIM_PWM_Start(htim, Channel);
 80006bc:	6879      	ldr	r1, [r7, #4]
 80006be:	68b8      	ldr	r0, [r7, #8]
 80006c0:	f003 fa96 	bl	8003bf0 <HAL_TIM_PWM_Start>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	889b      	ldrh	r3, [r3, #4]
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d105      	bne.n	80006d8 <Servo_Init+0x38>
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	887a      	ldrh	r2, [r7, #2]
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
    return;
 80006d6:	e019      	b.n	800070c <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	889b      	ldrh	r3, [r3, #4]
 80006dc:	2b04      	cmp	r3, #4
 80006de:	d105      	bne.n	80006ec <Servo_Init+0x4c>
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	681a      	ldr	r2, [r3, #0]
 80006e6:	887b      	ldrh	r3, [r7, #2]
 80006e8:	6393      	str	r3, [r2, #56]	; 0x38
    return;
 80006ea:	e00f      	b.n	800070c <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 80006ec:	68fb      	ldr	r3, [r7, #12]
 80006ee:	889b      	ldrh	r3, [r3, #4]
 80006f0:	2b08      	cmp	r3, #8
 80006f2:	d105      	bne.n	8000700 <Servo_Init+0x60>
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	681a      	ldr	r2, [r3, #0]
 80006fa:	887b      	ldrh	r3, [r7, #2]
 80006fc:	63d3      	str	r3, [r2, #60]	; 0x3c
    return;
 80006fe:	e005      	b.n	800070c <Servo_Init+0x6c>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
 8000700:	68fb      	ldr	r3, [r7, #12]
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	681a      	ldr	r2, [r3, #0]
 8000706:	887b      	ldrh	r3, [r7, #2]
 8000708:	6413      	str	r3, [r2, #64]	; 0x40
    return;
 800070a:	bf00      	nop
}
 800070c:	3710      	adds	r7, #16
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}

08000712 <reset_buffer>:
#include "average_filter.h"

void reset_buffer(average_filter *filter)
{
 8000712:	b480      	push	{r7}
 8000714:	b085      	sub	sp, #20
 8000716:	af00      	add	r7, sp, #0
 8000718:	6078      	str	r0, [r7, #4]
    filter->sum = 0;
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	2200      	movs	r2, #0
 800071e:	615a      	str	r2, [r3, #20]
    filter->out = 0.0;
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f04f 0200 	mov.w	r2, #0
 8000726:	619a      	str	r2, [r3, #24]
    filter->count = 0;
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	2200      	movs	r2, #0
 800072c:	839a      	strh	r2, [r3, #28]
    
    for (int i = 0; i < AVERAGE_LENGTH; i++)
 800072e:	2300      	movs	r3, #0
 8000730:	60fb      	str	r3, [r7, #12]
 8000732:	e007      	b.n	8000744 <reset_buffer+0x32>
    {
        filter->buffer[i] = 0;
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	68fa      	ldr	r2, [r7, #12]
 8000738:	2100      	movs	r1, #0
 800073a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < AVERAGE_LENGTH; i++)
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	3301      	adds	r3, #1
 8000742:	60fb      	str	r3, [r7, #12]
 8000744:	68fb      	ldr	r3, [r7, #12]
 8000746:	2b09      	cmp	r3, #9
 8000748:	ddf4      	ble.n	8000734 <reset_buffer+0x22>
    }
    return;
 800074a:	bf00      	nop
}
 800074c:	3714      	adds	r7, #20
 800074e:	46bd      	mov	sp, r7
 8000750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000754:	4770      	bx	lr

08000756 <HC08_Init>:
};

uint32_t extract_data = 0;
// Initialize the HC-08 structure
void HC08_Init(HC08 *hc08, UART_HandleTypeDef *huart)
{
 8000756:	b580      	push	{r7, lr}
 8000758:	b082      	sub	sp, #8
 800075a:	af00      	add	r7, sp, #0
 800075c:	6078      	str	r0, [r7, #4]
 800075e:	6039      	str	r1, [r7, #0]
	hc08->huart = huart;					  // Assign the UART handle
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	683a      	ldr	r2, [r7, #0]
 8000764:	601a      	str	r2, [r3, #0]
	memset(hc08->rev_buffer, 0, SIZE_BUFFER); // Clear the receive buffer
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	3304      	adds	r3, #4
 800076a:	2208      	movs	r2, #8
 800076c:	2100      	movs	r1, #0
 800076e:	4618      	mov	r0, r3
 8000770:	f005 fe3a 	bl	80063e8 <memset>
	hc08->rev_flag = 0;						  // Reset the receive flag
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	2200      	movs	r2, #0
 8000778:	731a      	strb	r2, [r3, #12]
	// default setting
	HC08_SendCommand(hc08, SET_ROLE_SLAVE);
 800077a:	2102      	movs	r1, #2
 800077c:	6878      	ldr	r0, [r7, #4]
 800077e:	f000 f815 	bl	80007ac <HC08_SendCommand>
	HC08_SendCommand(hc08, SET_CONNECT);
 8000782:	2104      	movs	r1, #4
 8000784:	6878      	ldr	r0, [r7, #4]
 8000786:	f000 f811 	bl	80007ac <HC08_SendCommand>
	HC08_SendCommand(hc08, SET_NAME);
 800078a:	2105      	movs	r1, #5
 800078c:	6878      	ldr	r0, [r7, #4]
 800078e:	f000 f80d 	bl	80007ac <HC08_SendCommand>

	HAL_UART_Receive_IT(hc08->huart, hc08->rev_buffer, SIZE_BUFFER);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	6818      	ldr	r0, [r3, #0]
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	3304      	adds	r3, #4
 800079a:	2208      	movs	r2, #8
 800079c:	4619      	mov	r1, r3
 800079e:	f004 fdce 	bl	800533e <HAL_UART_Receive_IT>
}
 80007a2:	bf00      	nop
 80007a4:	3708      	adds	r7, #8
 80007a6:	46bd      	mov	sp, r7
 80007a8:	bd80      	pop	{r7, pc}
	...

080007ac <HC08_SendCommand>:

// Send an AT command to the HC-08 module
void HC08_SendCommand(HC08 *hc08, uint8_t command_id)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b084      	sub	sp, #16
 80007b0:	af00      	add	r7, sp, #0
 80007b2:	6078      	str	r0, [r7, #4]
 80007b4:	460b      	mov	r3, r1
 80007b6:	70fb      	strb	r3, [r7, #3]
	if (command_id >= 0 && command_id < NO_OF_COMMANDS) // Ensure command_id is valid
 80007b8:	78fb      	ldrb	r3, [r7, #3]
 80007ba:	2b07      	cmp	r3, #7
 80007bc:	d812      	bhi.n	80007e4 <HC08_SendCommand+0x38>
	{
		char *command = send_command[command_id];		   // Get the command from the array
 80007be:	78fb      	ldrb	r3, [r7, #3]
 80007c0:	4a0a      	ldr	r2, [pc, #40]	; (80007ec <HC08_SendCommand+0x40>)
 80007c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007c6:	60fb      	str	r3, [r7, #12]
		HAL_UART_Transmit(hc08->huart, (uint8_t *)command, // Transmit the command
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6818      	ldr	r0, [r3, #0]
 80007cc:	2364      	movs	r3, #100	; 0x64
 80007ce:	2204      	movs	r2, #4
 80007d0:	68f9      	ldr	r1, [r7, #12]
 80007d2:	f004 fd22 	bl	800521a <HAL_UART_Transmit>
						  sizeof(command), 100);
		HAL_UART_Transmit(hc08->huart, (uint8_t *)"\r\n", 2, 100); // Transmit end-of-line characters
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	6818      	ldr	r0, [r3, #0]
 80007da:	2364      	movs	r3, #100	; 0x64
 80007dc:	2202      	movs	r2, #2
 80007de:	4904      	ldr	r1, [pc, #16]	; (80007f0 <HC08_SendCommand+0x44>)
 80007e0:	f004 fd1b 	bl	800521a <HAL_UART_Transmit>
	}
}
 80007e4:	bf00      	nop
 80007e6:	3710      	adds	r7, #16
 80007e8:	46bd      	mov	sp, r7
 80007ea:	bd80      	pop	{r7, pc}
 80007ec:	20000004 	.word	0x20000004
 80007f0:	0800658c 	.word	0x0800658c

080007f4 <HAL_UART_RxCpltCallback>:
	}
}

// Callback function called when data reception is complete
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
	extern HC08 hc08; // External HC-08 instance (declare in the main file)
	if (huart == hc08.huart)
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <HAL_UART_RxCpltCallback+0x30>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	687a      	ldr	r2, [r7, #4]
 8000802:	429a      	cmp	r2, r3
 8000804:	d109      	bne.n	800081a <HAL_UART_RxCpltCallback+0x26>
	{					   // Check if the interrupt belongs to HC-08's UART
		hc08.rev_flag = 1; // Set the receive flag
 8000806:	4b07      	ldr	r3, [pc, #28]	; (8000824 <HAL_UART_RxCpltCallback+0x30>)
 8000808:	2201      	movs	r2, #1
 800080a:	731a      	strb	r2, [r3, #12]
		HAL_UART_Receive_IT(hc08.huart, hc08.rev_buffer, SIZE_BUFFER);
 800080c:	4b05      	ldr	r3, [pc, #20]	; (8000824 <HAL_UART_RxCpltCallback+0x30>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	2208      	movs	r2, #8
 8000812:	4905      	ldr	r1, [pc, #20]	; (8000828 <HAL_UART_RxCpltCallback+0x34>)
 8000814:	4618      	mov	r0, r3
 8000816:	f004 fd92 	bl	800533e <HAL_UART_Receive_IT>
	}
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	20000124 	.word	0x20000124
 8000828:	20000128 	.word	0x20000128

0800082c <Encoder_Init>:
    else if (enc->_RPM > 0) enc->Direction = FORWARD;
    else enc->Direction = STOP;
}

void Encoder_Init(Encoder *p1, TIM_HandleTypeDef *h_time)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b082      	sub	sp, #8
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
 8000834:	6039      	str	r1, [r7, #0]
    p1->_RPM = 0;
 8000836:	6879      	ldr	r1, [r7, #4]
 8000838:	f04f 0200 	mov.w	r2, #0
 800083c:	f04f 0300 	mov.w	r3, #0
 8000840:	e9c1 2300 	strd	r2, r3, [r1]
    p1->_PWM = 0;
 8000844:	6879      	ldr	r1, [r7, #4]
 8000846:	f04f 0200 	mov.w	r2, #0
 800084a:	f04f 0300 	mov.w	r3, #0
 800084e:	e9c1 2302 	strd	r2, r3, [r1, #8]
    p1->pre_counter = 0;
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	2200      	movs	r2, #0
 8000856:	611a      	str	r2, [r3, #16]
    p1->htim = h_time;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	683a      	ldr	r2, [r7, #0]
 800085c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Encoder_Start(p1->htim, TIM_CHANNEL_ALL) != HAL_OK)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	699b      	ldr	r3, [r3, #24]
 8000862:	213c      	movs	r1, #60	; 0x3c
 8000864:	4618      	mov	r0, r3
 8000866:	f003 fb8a 	bl	8003f7e <HAL_TIM_Encoder_Start>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <Encoder_Init+0x48>
        Error_Handler(); // write in main.c, maybe turn some led on?
 8000870:	f000 fe24 	bl	80014bc <Error_Handler>
}
 8000874:	bf00      	nop
 8000876:	3708      	adds	r7, #8
 8000878:	46bd      	mov	sp, r7
 800087a:	bd80      	pop	{r7, pc}

0800087c <init_system>:
average_filter filter2;
average_filter filter3;
IR ir;

void init_system(void)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b084      	sub	sp, #16
 8000880:	af02      	add	r7, sp, #8
    // Initialize the HC08
    HC08_Init(&hc08, &huart3);
 8000882:	4929      	ldr	r1, [pc, #164]	; (8000928 <init_system+0xac>)
 8000884:	4829      	ldr	r0, [pc, #164]	; (800092c <init_system+0xb0>)
 8000886:	f7ff ff66 	bl	8000756 <HC08_Init>
    // Initialize the encoder
    Encoder_Init(&enc, &htim3);
 800088a:	4929      	ldr	r1, [pc, #164]	; (8000930 <init_system+0xb4>)
 800088c:	4829      	ldr	r0, [pc, #164]	; (8000934 <init_system+0xb8>)
 800088e:	f7ff ffcd 	bl	800082c <Encoder_Init>
    // Initialize the ultrasonic sensors
    ultraSonic_Init(&sensor1, &htim2, &filter1, ECHO_L_GPIO_Port, ECHO_L_Pin);
 8000892:	2302      	movs	r3, #2
 8000894:	9300      	str	r3, [sp, #0]
 8000896:	4b28      	ldr	r3, [pc, #160]	; (8000938 <init_system+0xbc>)
 8000898:	4a28      	ldr	r2, [pc, #160]	; (800093c <init_system+0xc0>)
 800089a:	4929      	ldr	r1, [pc, #164]	; (8000940 <init_system+0xc4>)
 800089c:	4829      	ldr	r0, [pc, #164]	; (8000944 <init_system+0xc8>)
 800089e:	f001 fac1 	bl	8001e24 <ultraSonic_Init>
    ultraSonic_Init(&sensor2, &htim2, &filter2, ECHO_M_GPIO_Port, ECHO_M_Pin);
 80008a2:	2304      	movs	r3, #4
 80008a4:	9300      	str	r3, [sp, #0]
 80008a6:	4b24      	ldr	r3, [pc, #144]	; (8000938 <init_system+0xbc>)
 80008a8:	4a27      	ldr	r2, [pc, #156]	; (8000948 <init_system+0xcc>)
 80008aa:	4925      	ldr	r1, [pc, #148]	; (8000940 <init_system+0xc4>)
 80008ac:	4827      	ldr	r0, [pc, #156]	; (800094c <init_system+0xd0>)
 80008ae:	f001 fab9 	bl	8001e24 <ultraSonic_Init>
    ultraSonic_Init(&sensor3, &htim2, &filter3, ECHO_R_GPIO_Port, ECHO_R_Pin);
 80008b2:	2308      	movs	r3, #8
 80008b4:	9300      	str	r3, [sp, #0]
 80008b6:	4b20      	ldr	r3, [pc, #128]	; (8000938 <init_system+0xbc>)
 80008b8:	4a25      	ldr	r2, [pc, #148]	; (8000950 <init_system+0xd4>)
 80008ba:	4921      	ldr	r1, [pc, #132]	; (8000940 <init_system+0xc4>)
 80008bc:	4825      	ldr	r0, [pc, #148]	; (8000954 <init_system+0xd8>)
 80008be:	f001 fab1 	bl	8001e24 <ultraSonic_Init>
    // Initialize the IR sensor
    IR_Init(&ir, &hadc1);
 80008c2:	4925      	ldr	r1, [pc, #148]	; (8000958 <init_system+0xdc>)
 80008c4:	4825      	ldr	r0, [pc, #148]	; (800095c <init_system+0xe0>)
 80008c6:	f7ff fe69 	bl	800059c <IR_Init>
    // Initialize the Display
    sSeg_init();
 80008ca:	f000 f887 	bl	80009dc <sSeg_init>
    LED_Init();
 80008ce:	f000 f8b9 	bl	8000a44 <LED_Init>
    // Initialize the EEPROM emulation
    eeprom_init(EEPROM_BEGIN, EEPROM_SIZE);
 80008d2:	210a      	movs	r1, #10
 80008d4:	4822      	ldr	r0, [pc, #136]	; (8000960 <init_system+0xe4>)
 80008d6:	f7ff fe19 	bl	800050c <eeprom_init>
    // Initialize the Motor
    Motor_Init(&motor[1], &htim8, TIM_CHANNEL_3, TIM_CHANNEL_4);
 80008da:	230c      	movs	r3, #12
 80008dc:	2208      	movs	r2, #8
 80008de:	4921      	ldr	r1, [pc, #132]	; (8000964 <init_system+0xe8>)
 80008e0:	4821      	ldr	r0, [pc, #132]	; (8000968 <init_system+0xec>)
 80008e2:	f7ff fe79 	bl	80005d8 <Motor_Init>
    // Initialize the Servo
    uint16_t pulse_middle;
    eeprom_read(EEPROM_SERVO, &pulse_middle);
 80008e6:	1dbb      	adds	r3, r7, #6
 80008e8:	4619      	mov	r1, r3
 80008ea:	2000      	movs	r0, #0
 80008ec:	f7ff fe2e 	bl	800054c <eeprom_read>
    servo_middle = pulse_middle < SERVO_RIGHT 
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	f5b3 7fd7 	cmp.w	r3, #430	; 0x1ae
 80008f6:	d204      	bcs.n	8000902 <init_system+0x86>
                && pulse_middle > SERVO_LEFT ? 
 80008f8:	88fb      	ldrh	r3, [r7, #6]
 80008fa:	f240 2276 	movw	r2, #630	; 0x276
 80008fe:	4293      	cmp	r3, r2
 8000900:	d801      	bhi.n	8000906 <init_system+0x8a>
    servo_middle = pulse_middle < SERVO_RIGHT 
 8000902:	88fb      	ldrh	r3, [r7, #6]
 8000904:	e001      	b.n	800090a <init_system+0x8e>
 8000906:	f240 2312 	movw	r3, #530	; 0x212
 800090a:	4a18      	ldr	r2, [pc, #96]	; (800096c <init_system+0xf0>)
 800090c:	8013      	strh	r3, [r2, #0]
                SERVO_MIDDLE_DEFAULT : pulse_middle;
    Servo_Init(&servo, &htim10, TIM_CHANNEL_1, servo_middle);
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <init_system+0xf0>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	2200      	movs	r2, #0
 8000914:	4916      	ldr	r1, [pc, #88]	; (8000970 <init_system+0xf4>)
 8000916:	4817      	ldr	r0, [pc, #92]	; (8000974 <init_system+0xf8>)
 8000918:	f7ff fec2 	bl	80006a0 <Servo_Init>
    // Intro message
    // led display "HELLO" ***
    // Initialize the FSM
    fsm_init();
 800091c:	f7ff fe30 	bl	8000580 <fsm_init>
 8000920:	bf00      	nop
 8000922:	3708      	adds	r7, #8
 8000924:	46bd      	mov	sp, r7
 8000926:	bd80      	pop	{r7, pc}
 8000928:	20000508 	.word	0x20000508
 800092c:	20000124 	.word	0x20000124
 8000930:	200003e8 	.word	0x200003e8
 8000934:	20000138 	.word	0x20000138
 8000938:	40020000 	.word	0x40020000
 800093c:	200001b8 	.word	0x200001b8
 8000940:	200003a0 	.word	0x200003a0
 8000944:	20000158 	.word	0x20000158
 8000948:	200001d8 	.word	0x200001d8
 800094c:	20000178 	.word	0x20000178
 8000950:	200001f8 	.word	0x200001f8
 8000954:	20000198 	.word	0x20000198
 8000958:	200002b0 	.word	0x200002b0
 800095c:	20000218 	.word	0x20000218
 8000960:	08080000 	.word	0x08080000
 8000964:	20000478 	.word	0x20000478
 8000968:	2000011c 	.word	0x2000011c
 800096c:	20000000 	.word	0x20000000
 8000970:	200004c0 	.word	0x200004c0
 8000974:	2000010c 	.word	0x2000010c

08000978 <sSeg_init_config>:
LED led_array[NUMS_OF_SINGLE_LED];

// Function to initialize the 7-segment display
static void sSeg_init_config(sSeg_t *seg, GPIO_TypeDef *data_ports, 
    uint16_t data_pins[4], GPIO_TypeDef *le_port, uint16_t le_pin)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b086      	sub	sp, #24
 800097c:	af00      	add	r7, sp, #0
 800097e:	60f8      	str	r0, [r7, #12]
 8000980:	60b9      	str	r1, [r7, #8]
 8000982:	607a      	str	r2, [r7, #4]
 8000984:	603b      	str	r3, [r7, #0]
    // Assign GPIO ports and pins for D0-D3
    for (int i = 0; i < 4; i++)
 8000986:	2300      	movs	r3, #0
 8000988:	617b      	str	r3, [r7, #20]
 800098a:	e011      	b.n	80009b0 <sSeg_init_config+0x38>
    {
        seg->data_port[i] = data_ports;
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	697a      	ldr	r2, [r7, #20]
 8000990:	68b9      	ldr	r1, [r7, #8]
 8000992:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        seg->data_pin[i] = data_pins[i];
 8000996:	697b      	ldr	r3, [r7, #20]
 8000998:	005b      	lsls	r3, r3, #1
 800099a:	687a      	ldr	r2, [r7, #4]
 800099c:	4413      	add	r3, r2
 800099e:	8819      	ldrh	r1, [r3, #0]
 80009a0:	68fb      	ldr	r3, [r7, #12]
 80009a2:	697a      	ldr	r2, [r7, #20]
 80009a4:	3208      	adds	r2, #8
 80009a6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (int i = 0; i < 4; i++)
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	3301      	adds	r3, #1
 80009ae:	617b      	str	r3, [r7, #20]
 80009b0:	697b      	ldr	r3, [r7, #20]
 80009b2:	2b03      	cmp	r3, #3
 80009b4:	ddea      	ble.n	800098c <sSeg_init_config+0x14>
    }
    // Assign GPIO port and pin for LE
    seg->le_port = le_port;
 80009b6:	68fb      	ldr	r3, [r7, #12]
 80009b8:	683a      	ldr	r2, [r7, #0]
 80009ba:	619a      	str	r2, [r3, #24]
    seg->le_pin = le_pin;
 80009bc:	68fb      	ldr	r3, [r7, #12]
 80009be:	8c3a      	ldrh	r2, [r7, #32]
 80009c0:	839a      	strh	r2, [r3, #28]

    // Set default state of LE to LOW
    HAL_GPIO_WritePin(seg->le_port, seg->le_pin, GPIO_PIN_RESET);
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	6998      	ldr	r0, [r3, #24]
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	8b9b      	ldrh	r3, [r3, #28]
 80009ca:	2200      	movs	r2, #0
 80009cc:	4619      	mov	r1, r3
 80009ce:	f002 fb83 	bl	80030d8 <HAL_GPIO_WritePin>
}
 80009d2:	bf00      	nop
 80009d4:	3718      	adds	r7, #24
 80009d6:	46bd      	mov	sp, r7
 80009d8:	bd80      	pop	{r7, pc}
	...

080009dc <sSeg_init>:

void sSeg_init()
{
 80009dc:	b5b0      	push	{r4, r5, r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af02      	add	r7, sp, #8
    for (int i = 0; i < NUMS_OF_SEG; i++)
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	e01a      	b.n	8000a1e <sSeg_init+0x42>
        sSeg_init_config(&seg[i], ports_seg[i], pins_seg[i], le_ports[i], le_pins[i]);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	015b      	lsls	r3, r3, #5
 80009ec:	4a10      	ldr	r2, [pc, #64]	; (8000a30 <sSeg_init+0x54>)
 80009ee:	1898      	adds	r0, r3, r2
 80009f0:	4a10      	ldr	r2, [pc, #64]	; (8000a34 <sSeg_init+0x58>)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	00db      	lsls	r3, r3, #3
 80009fc:	4a0e      	ldr	r2, [pc, #56]	; (8000a38 <sSeg_init+0x5c>)
 80009fe:	441a      	add	r2, r3
 8000a00:	4c0e      	ldr	r4, [pc, #56]	; (8000a3c <sSeg_init+0x60>)
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8000a08:	4d0d      	ldr	r5, [pc, #52]	; (8000a40 <sSeg_init+0x64>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	f835 3013 	ldrh.w	r3, [r5, r3, lsl #1]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	4623      	mov	r3, r4
 8000a14:	f7ff ffb0 	bl	8000978 <sSeg_init_config>
    for (int i = 0; i < NUMS_OF_SEG; i++)
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	607b      	str	r3, [r7, #4]
 8000a1e:	687b      	ldr	r3, [r7, #4]
 8000a20:	2b02      	cmp	r3, #2
 8000a22:	dde1      	ble.n	80009e8 <sSeg_init+0xc>
}
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	3708      	adds	r7, #8
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bdb0      	pop	{r4, r5, r7, pc}
 8000a2e:	bf00      	nop
 8000a30:	20000228 	.word	0x20000228
 8000a34:	20000058 	.word	0x20000058
 8000a38:	20000064 	.word	0x20000064
 8000a3c:	20000044 	.word	0x20000044
 8000a40:	20000050 	.word	0x20000050

08000a44 <LED_Init>:
    HAL_Delay(1);
    HAL_GPIO_WritePin(seg.le_port, seg.le_pin, GPIO_PIN_RESET);
}

void LED_Init()
{
 8000a44:	b480      	push	{r7}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++)
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	e014      	b.n	8000a7a <LED_Init+0x36>
    {
        led_array[i].port = ports_led[i];
 8000a50:	4a0f      	ldr	r2, [pc, #60]	; (8000a90 <LED_Init+0x4c>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a58:	490e      	ldr	r1, [pc, #56]	; (8000a94 <LED_Init+0x50>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
        led_array[i].pin = pins_led[i];
 8000a60:	4a0d      	ldr	r2, [pc, #52]	; (8000a98 <LED_Init+0x54>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f832 1013 	ldrh.w	r1, [r2, r3, lsl #1]
 8000a68:	4a0a      	ldr	r2, [pc, #40]	; (8000a94 <LED_Init+0x50>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	460a      	mov	r2, r1
 8000a72:	809a      	strh	r2, [r3, #4]
    for (int i = 0; i < NUMS_OF_SINGLE_LED; i++)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	3301      	adds	r3, #1
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	687b      	ldr	r3, [r7, #4]
 8000a7c:	2b04      	cmp	r3, #4
 8000a7e:	dde7      	ble.n	8000a50 <LED_Init+0xc>
    }
}
 8000a80:	bf00      	nop
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop
 8000a90:	20000024 	.word	0x20000024
 8000a94:	20000288 	.word	0x20000288
 8000a98:	20000038 	.word	0x20000038

08000a9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aa0:	f001 fa1c 	bl	8001edc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000aa4:	f000 f826 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aa8:	f000 fbee 	bl	8001288 <MX_GPIO_Init>
  MX_DMA_Init();
 8000aac:	f000 fbcc 	bl	8001248 <MX_DMA_Init>
  MX_TIM3_Init();
 8000ab0:	f000 f9ea 	bl	8000e88 <MX_TIM3_Init>
  MX_TIM8_Init();
 8000ab4:	f000 fa8a 	bl	8000fcc <MX_TIM8_Init>
  MX_ADC1_Init();
 8000ab8:	f000 f884 	bl	8000bc4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000abc:	f000 f90c 	bl	8000cd8 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000ac0:	f000 f95c 	bl	8000d7c <MX_TIM2_Init>
  MX_TIM10_Init();
 8000ac4:	f000 fb48 	bl	8001158 <MX_TIM10_Init>
  MX_TIM4_Init();
 8000ac8:	f000 fa32 	bl	8000f30 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8000acc:	f000 fb92 	bl	80011f4 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim4);
 8000ad0:	4806      	ldr	r0, [pc, #24]	; (8000aec <main+0x50>)
 8000ad2:	f002 ffc3 	bl	8003a5c <HAL_TIM_Base_Start_IT>
  Scheduler_Init();
 8000ad6:	f000 fcf7 	bl	80014c8 <Scheduler_Init>
  Scheduler_Add_Task(&init_system, 0, 100);
 8000ada:	2264      	movs	r2, #100	; 0x64
 8000adc:	2100      	movs	r1, #0
 8000ade:	4804      	ldr	r0, [pc, #16]	; (8000af0 <main+0x54>)
 8000ae0:	f000 fd4a 	bl	8001578 <Scheduler_Add_Task>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    Scheduler_Dispatch_Tasks();
 8000ae4:	f000 fe14 	bl	8001710 <Scheduler_Dispatch_Tasks>
 8000ae8:	e7fc      	b.n	8000ae4 <main+0x48>
 8000aea:	bf00      	nop
 8000aec:	20000430 	.word	0x20000430
 8000af0:	0800087d 	.word	0x0800087d

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b094      	sub	sp, #80	; 0x50
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	f107 0320 	add.w	r3, r7, #32
 8000afe:	2230      	movs	r2, #48	; 0x30
 8000b00:	2100      	movs	r1, #0
 8000b02:	4618      	mov	r0, r3
 8000b04:	f005 fc70 	bl	80063e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b08:	f107 030c 	add.w	r3, r7, #12
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60bb      	str	r3, [r7, #8]
 8000b1c:	4b27      	ldr	r3, [pc, #156]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b20:	4a26      	ldr	r2, [pc, #152]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b22:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b26:	6413      	str	r3, [r2, #64]	; 0x40
 8000b28:	4b24      	ldr	r3, [pc, #144]	; (8000bbc <SystemClock_Config+0xc8>)
 8000b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b30:	60bb      	str	r3, [r7, #8]
 8000b32:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b34:	2300      	movs	r3, #0
 8000b36:	607b      	str	r3, [r7, #4]
 8000b38:	4b21      	ldr	r3, [pc, #132]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a20      	ldr	r2, [pc, #128]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b3e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b42:	6013      	str	r3, [r2, #0]
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <SystemClock_Config+0xcc>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b4c:	607b      	str	r3, [r7, #4]
 8000b4e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b50:	2302      	movs	r3, #2
 8000b52:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b54:	2301      	movs	r3, #1
 8000b56:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b58:	2310      	movs	r3, #16
 8000b5a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b60:	2300      	movs	r3, #0
 8000b62:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b64:	2308      	movs	r3, #8
 8000b66:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000b68:	2348      	movs	r3, #72	; 0x48
 8000b6a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b6c:	2302      	movs	r3, #2
 8000b6e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b70:	2304      	movs	r3, #4
 8000b72:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b74:	f107 0320 	add.w	r3, r7, #32
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f002 fac7 	bl	800310c <HAL_RCC_OscConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000b84:	f000 fc9a 	bl	80014bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b88:	230f      	movs	r3, #15
 8000b8a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8c:	2302      	movs	r3, #2
 8000b8e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b90:	2300      	movs	r3, #0
 8000b92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b94:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b98:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9e:	f107 030c 	add.w	r3, r7, #12
 8000ba2:	2102      	movs	r1, #2
 8000ba4:	4618      	mov	r0, r3
 8000ba6:	f002 fd29 	bl	80035fc <HAL_RCC_ClockConfig>
 8000baa:	4603      	mov	r3, r0
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d001      	beq.n	8000bb4 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000bb0:	f000 fc84 	bl	80014bc <Error_Handler>
  }
}
 8000bb4:	bf00      	nop
 8000bb6:	3750      	adds	r7, #80	; 0x50
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bd6:	4b3d      	ldr	r3, [pc, #244]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bd8:	4a3d      	ldr	r2, [pc, #244]	; (8000cd0 <MX_ADC1_Init+0x10c>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000bdc:	4b3b      	ldr	r3, [pc, #236]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bde:	2200      	movs	r2, #0
 8000be0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be2:	4b3a      	ldr	r3, [pc, #232]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000be8:	4b38      	ldr	r3, [pc, #224]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bee:	4b37      	ldr	r3, [pc, #220]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bf0:	2201      	movs	r2, #1
 8000bf2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b35      	ldr	r3, [pc, #212]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfc:	4b33      	ldr	r3, [pc, #204]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c02:	4b32      	ldr	r3, [pc, #200]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c04:	4a33      	ldr	r2, [pc, #204]	; (8000cd4 <MX_ADC1_Init+0x110>)
 8000c06:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c08:	4b30      	ldr	r3, [pc, #192]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 5;
 8000c0e:	4b2f      	ldr	r3, [pc, #188]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c10:	2205      	movs	r2, #5
 8000c12:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c14:	4b2d      	ldr	r3, [pc, #180]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c22:	482a      	ldr	r0, [pc, #168]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c24:	f001 f9cc 	bl	8001fc0 <HAL_ADC_Init>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d001      	beq.n	8000c32 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 8000c2e:	f000 fc45 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c32:	2300      	movs	r3, #0
 8000c34:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c36:	2301      	movs	r3, #1
 8000c38:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000c3a:	2300      	movs	r3, #0
 8000c3c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c3e:	463b      	mov	r3, r7
 8000c40:	4619      	mov	r1, r3
 8000c42:	4822      	ldr	r0, [pc, #136]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c44:	f001 fa00 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	d001      	beq.n	8000c52 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000c4e:	f000 fc35 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c52:	2304      	movs	r3, #4
 8000c54:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c56:	2302      	movs	r3, #2
 8000c58:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c5a:	463b      	mov	r3, r7
 8000c5c:	4619      	mov	r1, r3
 8000c5e:	481b      	ldr	r0, [pc, #108]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c60:	f001 f9f2 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000c64:	4603      	mov	r3, r0
 8000c66:	2b00      	cmp	r3, #0
 8000c68:	d001      	beq.n	8000c6e <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 8000c6a:	f000 fc27 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c6e:	2305      	movs	r3, #5
 8000c70:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c72:	2303      	movs	r3, #3
 8000c74:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c76:	463b      	mov	r3, r7
 8000c78:	4619      	mov	r1, r3
 8000c7a:	4814      	ldr	r0, [pc, #80]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c7c:	f001 f9e4 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000c80:	4603      	mov	r3, r0
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d001      	beq.n	8000c8a <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000c86:	f000 fc19 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000c8a:	2306      	movs	r3, #6
 8000c8c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c8e:	2304      	movs	r3, #4
 8000c90:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c92:	463b      	mov	r3, r7
 8000c94:	4619      	mov	r1, r3
 8000c96:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000c98:	f001 f9d6 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ca2:	f000 fc0b 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000ca6:	2307      	movs	r3, #7
 8000ca8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8000caa:	2305      	movs	r3, #5
 8000cac:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	4806      	ldr	r0, [pc, #24]	; (8000ccc <MX_ADC1_Init+0x108>)
 8000cb4:	f001 f9c8 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000cbe:	f000 fbfd 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc2:	bf00      	nop
 8000cc4:	3710      	adds	r7, #16
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	200002b0 	.word	0x200002b0
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	0f000001 	.word	0x0f000001

08000cd8 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b084      	sub	sp, #16
 8000cdc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000cde:	463b      	mov	r3, r7
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	601a      	str	r2, [r3, #0]
 8000ce4:	605a      	str	r2, [r3, #4]
 8000ce6:	609a      	str	r2, [r3, #8]
 8000ce8:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000cea:	4b21      	ldr	r3, [pc, #132]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000cec:	4a21      	ldr	r2, [pc, #132]	; (8000d74 <MX_ADC2_Init+0x9c>)
 8000cee:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000cf0:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000cf6:	4b1e      	ldr	r3, [pc, #120]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8000cfc:	4b1c      	ldr	r3, [pc, #112]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000d08:	4b19      	ldr	r3, [pc, #100]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d10:	4b17      	ldr	r3, [pc, #92]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d16:	4b16      	ldr	r3, [pc, #88]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d18:	4a17      	ldr	r2, [pc, #92]	; (8000d78 <MX_ADC2_Init+0xa0>)
 8000d1a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d1c:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000d22:	4b13      	ldr	r3, [pc, #76]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d24:	2201      	movs	r2, #1
 8000d26:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000d28:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d30:	4b0f      	ldr	r3, [pc, #60]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000d36:	480e      	ldr	r0, [pc, #56]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d38:	f001 f942 	bl	8001fc0 <HAL_ADC_Init>
 8000d3c:	4603      	mov	r3, r0
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d001      	beq.n	8000d46 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 8000d42:	f000 fbbb 	bl	80014bc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000d46:	2308      	movs	r3, #8
 8000d48:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000d52:	463b      	mov	r3, r7
 8000d54:	4619      	mov	r1, r3
 8000d56:	4806      	ldr	r0, [pc, #24]	; (8000d70 <MX_ADC2_Init+0x98>)
 8000d58:	f001 f976 	bl	8002048 <HAL_ADC_ConfigChannel>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	d001      	beq.n	8000d66 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8000d62:	f000 fbab 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000d66:	bf00      	nop
 8000d68:	3710      	adds	r7, #16
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	bd80      	pop	{r7, pc}
 8000d6e:	bf00      	nop
 8000d70:	200002f8 	.word	0x200002f8
 8000d74:	40012100 	.word	0x40012100
 8000d78:	0f000001 	.word	0x0f000001

08000d7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b08a      	sub	sp, #40	; 0x28
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d82:	f107 0318 	add.w	r3, r7, #24
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d90:	f107 0310 	add.w	r3, r7, #16
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d9a:	463b      	mov	r3, r7
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	601a      	str	r2, [r3, #0]
 8000da0:	605a      	str	r2, [r3, #4]
 8000da2:	609a      	str	r2, [r3, #8]
 8000da4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000da6:	4b37      	ldr	r3, [pc, #220]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000da8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000dac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 72-1;
 8000dae:	4b35      	ldr	r3, [pc, #212]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000db0:	2247      	movs	r2, #71	; 0x47
 8000db2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000db4:	4b33      	ldr	r3, [pc, #204]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000dba:	4b32      	ldr	r3, [pc, #200]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dbc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dc0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dc2:	4b30      	ldr	r3, [pc, #192]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dc8:	4b2e      	ldr	r3, [pc, #184]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000dce:	482d      	ldr	r0, [pc, #180]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dd0:	f002 fdf4 	bl	80039bc <HAL_TIM_Base_Init>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000dda:	f000 fb6f 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000de2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000de4:	f107 0318 	add.w	r3, r7, #24
 8000de8:	4619      	mov	r1, r3
 8000dea:	4826      	ldr	r0, [pc, #152]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dec:	f003 fbbc 	bl	8004568 <HAL_TIM_ConfigClockSource>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8000df6:	f000 fb61 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000dfa:	4822      	ldr	r0, [pc, #136]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000dfc:	f002 ffc0 	bl	8003d80 <HAL_TIM_IC_Init>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d001      	beq.n	8000e0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000e06:	f000 fb59 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e12:	f107 0310 	add.w	r3, r7, #16
 8000e16:	4619      	mov	r1, r3
 8000e18:	481a      	ldr	r0, [pc, #104]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000e1a:	f004 f8cf 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8000e24:	f000 fb4a 	bl	80014bc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e2c:	2301      	movs	r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e34:	2300      	movs	r3, #0
 8000e36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e38:	463b      	mov	r3, r7
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	4619      	mov	r1, r3
 8000e3e:	4811      	ldr	r0, [pc, #68]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000e40:	f003 fa33 	bl	80042aa <HAL_TIM_IC_ConfigChannel>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8000e4a:	f000 fb37 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e4e:	463b      	mov	r3, r7
 8000e50:	2208      	movs	r2, #8
 8000e52:	4619      	mov	r1, r3
 8000e54:	480b      	ldr	r0, [pc, #44]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000e56:	f003 fa28 	bl	80042aa <HAL_TIM_IC_ConfigChannel>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8000e60:	f000 fb2c 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e64:	463b      	mov	r3, r7
 8000e66:	220c      	movs	r2, #12
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4806      	ldr	r0, [pc, #24]	; (8000e84 <MX_TIM2_Init+0x108>)
 8000e6c:	f003 fa1d 	bl	80042aa <HAL_TIM_IC_ConfigChannel>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d001      	beq.n	8000e7a <MX_TIM2_Init+0xfe>
  {
    Error_Handler();
 8000e76:	f000 fb21 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000e7a:	bf00      	nop
 8000e7c:	3728      	adds	r7, #40	; 0x28
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	200003a0 	.word	0x200003a0

08000e88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b08c      	sub	sp, #48	; 0x30
 8000e8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8000e8e:	f107 030c 	add.w	r3, r7, #12
 8000e92:	2224      	movs	r2, #36	; 0x24
 8000e94:	2100      	movs	r1, #0
 8000e96:	4618      	mov	r0, r3
 8000e98:	f005 faa6 	bl	80063e8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	601a      	str	r2, [r3, #0]
 8000ea2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ea4:	4b20      	ldr	r3, [pc, #128]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ea6:	4a21      	ldr	r2, [pc, #132]	; (8000f2c <MX_TIM3_Init+0xa4>)
 8000ea8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000eb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000ebc:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ebe:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ec4:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000ee2:	2301      	movs	r3, #1
 8000ee4:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8000eea:	2300      	movs	r3, #0
 8000eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8000eee:	f107 030c 	add.w	r3, r7, #12
 8000ef2:	4619      	mov	r1, r3
 8000ef4:	480c      	ldr	r0, [pc, #48]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000ef6:	f002 ff9c 	bl	8003e32 <HAL_TIM_Encoder_Init>
 8000efa:	4603      	mov	r3, r0
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d001      	beq.n	8000f04 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8000f00:	f000 fadc 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f04:	2300      	movs	r3, #0
 8000f06:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f0c:	1d3b      	adds	r3, r7, #4
 8000f0e:	4619      	mov	r1, r3
 8000f10:	4805      	ldr	r0, [pc, #20]	; (8000f28 <MX_TIM3_Init+0xa0>)
 8000f12:	f004 f853 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000f16:	4603      	mov	r3, r0
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	d001      	beq.n	8000f20 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8000f1c:	f000 face 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f20:	bf00      	nop
 8000f22:	3730      	adds	r7, #48	; 0x30
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	200003e8 	.word	0x200003e8
 8000f2c:	40000400 	.word	0x40000400

08000f30 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b086      	sub	sp, #24
 8000f34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f36:	f107 0308 	add.w	r3, r7, #8
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	601a      	str	r2, [r3, #0]
 8000f3e:	605a      	str	r2, [r3, #4]
 8000f40:	609a      	str	r2, [r3, #8]
 8000f42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f44:	463b      	mov	r3, r7
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f4e:	4a1e      	ldr	r2, [pc, #120]	; (8000fc8 <MX_TIM4_Init+0x98>)
 8000f50:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 720-1;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f54:	f240 22cf 	movw	r2, #719	; 0x2cf
 8000f58:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f5a:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000f60:	4b18      	ldr	r3, [pc, #96]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f62:	2263      	movs	r2, #99	; 0x63
 8000f64:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000f72:	4814      	ldr	r0, [pc, #80]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f74:	f002 fd22 	bl	80039bc <HAL_TIM_Base_Init>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8000f7e:	f000 fa9d 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f82:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f86:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000f88:	f107 0308 	add.w	r3, r7, #8
 8000f8c:	4619      	mov	r1, r3
 8000f8e:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000f90:	f003 faea 	bl	8004568 <HAL_TIM_ConfigClockSource>
 8000f94:	4603      	mov	r3, r0
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d001      	beq.n	8000f9e <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8000f9a:	f000 fa8f 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000fa6:	463b      	mov	r3, r7
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4806      	ldr	r0, [pc, #24]	; (8000fc4 <MX_TIM4_Init+0x94>)
 8000fac:	f004 f806 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8000fb6:	f000 fa81 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}
 8000fc2:	bf00      	nop
 8000fc4:	20000430 	.word	0x20000430
 8000fc8:	40000800 	.word	0x40000800

08000fcc <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b096      	sub	sp, #88	; 0x58
 8000fd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd2:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	601a      	str	r2, [r3, #0]
 8000fda:	605a      	str	r2, [r3, #4]
 8000fdc:	609a      	str	r2, [r3, #8]
 8000fde:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe0:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]
 8000ffa:	615a      	str	r2, [r3, #20]
 8000ffc:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000ffe:	1d3b      	adds	r3, r7, #4
 8001000:	2220      	movs	r2, #32
 8001002:	2100      	movs	r1, #0
 8001004:	4618      	mov	r0, r3
 8001006:	f005 f9ef 	bl	80063e8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100a:	4b51      	ldr	r3, [pc, #324]	; (8001150 <MX_TIM8_Init+0x184>)
 800100c:	4a51      	ldr	r2, [pc, #324]	; (8001154 <MX_TIM8_Init+0x188>)
 800100e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 720-1;
 8001010:	4b4f      	ldr	r3, [pc, #316]	; (8001150 <MX_TIM8_Init+0x184>)
 8001012:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001016:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001018:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_TIM8_Init+0x184>)
 800101a:	2200      	movs	r2, #0
 800101c:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 1023;
 800101e:	4b4c      	ldr	r3, [pc, #304]	; (8001150 <MX_TIM8_Init+0x184>)
 8001020:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001024:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001026:	4b4a      	ldr	r3, [pc, #296]	; (8001150 <MX_TIM8_Init+0x184>)
 8001028:	2200      	movs	r2, #0
 800102a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102c:	4b48      	ldr	r3, [pc, #288]	; (8001150 <MX_TIM8_Init+0x184>)
 800102e:	2200      	movs	r2, #0
 8001030:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b47      	ldr	r3, [pc, #284]	; (8001150 <MX_TIM8_Init+0x184>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001038:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_TIM8_Init+0x184>)
 800103a:	f002 fcbf 	bl	80039bc <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM8_Init+0x7c>
  {
    Error_Handler();
 8001044:	f000 fa3a 	bl	80014bc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001052:	4619      	mov	r1, r3
 8001054:	483e      	ldr	r0, [pc, #248]	; (8001150 <MX_TIM8_Init+0x184>)
 8001056:	f003 fa87 	bl	8004568 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM8_Init+0x98>
  {
    Error_Handler();
 8001060:	f000 fa2c 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001064:	483a      	ldr	r0, [pc, #232]	; (8001150 <MX_TIM8_Init+0x184>)
 8001066:	f002 fd69 	bl	8003b3c <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM8_Init+0xa8>
  {
    Error_Handler();
 8001070:	f000 fa24 	bl	80014bc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001080:	4619      	mov	r1, r3
 8001082:	4833      	ldr	r0, [pc, #204]	; (8001150 <MX_TIM8_Init+0x184>)
 8001084:	f003 ff9a 	bl	8004fbc <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM8_Init+0xc6>
  {
    Error_Handler();
 800108e:	f000 fa15 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	; 0x60
 8001094:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 100;
 8001096:	2364      	movs	r3, #100	; 0x64
 8001098:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109a:	2300      	movs	r3, #0
 800109c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800109e:	2300      	movs	r3, #0
 80010a0:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a2:	2300      	movs	r3, #0
 80010a4:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a6:	2300      	movs	r3, #0
 80010a8:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010aa:	2300      	movs	r3, #0
 80010ac:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010ae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4826      	ldr	r0, [pc, #152]	; (8001150 <MX_TIM8_Init+0x184>)
 80010b8:	f003 f994 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_TIM8_Init+0xfa>
  {
    Error_Handler();
 80010c2:	f000 f9fb 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010ca:	2204      	movs	r2, #4
 80010cc:	4619      	mov	r1, r3
 80010ce:	4820      	ldr	r0, [pc, #128]	; (8001150 <MX_TIM8_Init+0x184>)
 80010d0:	f003 f988 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM8_Init+0x112>
  {
    Error_Handler();
 80010da:	f000 f9ef 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e2:	2208      	movs	r2, #8
 80010e4:	4619      	mov	r1, r3
 80010e6:	481a      	ldr	r0, [pc, #104]	; (8001150 <MX_TIM8_Init+0x184>)
 80010e8:	f003 f97c 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM8_Init+0x12a>
  {
    Error_Handler();
 80010f2:	f000 f9e3 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	220c      	movs	r2, #12
 80010fc:	4619      	mov	r1, r3
 80010fe:	4814      	ldr	r0, [pc, #80]	; (8001150 <MX_TIM8_Init+0x184>)
 8001100:	f003 f970 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 800110a:	f000 f9d7 	bl	80014bc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001112:	2300      	movs	r3, #0
 8001114:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001116:	2300      	movs	r3, #0
 8001118:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111a:	2300      	movs	r3, #0
 800111c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001122:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001126:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001128:	2300      	movs	r3, #0
 800112a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	4619      	mov	r1, r3
 8001130:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM8_Init+0x184>)
 8001132:	f003 ffbf 	bl	80050b4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_TIM8_Init+0x174>
  {
    Error_Handler();
 800113c:	f000 f9be 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001140:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM8_Init+0x184>)
 8001142:	f000 fd17 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 8001146:	bf00      	nop
 8001148:	3758      	adds	r7, #88	; 0x58
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	20000478 	.word	0x20000478
 8001154:	40010400 	.word	0x40010400

08001158 <MX_TIM10_Init>:
  * @brief TIM10 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM10_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM10_Init 0 */

  /* USER CODE END TIM10_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001170:	4b1e      	ldr	r3, [pc, #120]	; (80011ec <MX_TIM10_Init+0x94>)
 8001172:	4a1f      	ldr	r2, [pc, #124]	; (80011f0 <MX_TIM10_Init+0x98>)
 8001174:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 144-1;
 8001176:	4b1d      	ldr	r3, [pc, #116]	; (80011ec <MX_TIM10_Init+0x94>)
 8001178:	228f      	movs	r2, #143	; 0x8f
 800117a:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1b      	ldr	r3, [pc, #108]	; (80011ec <MX_TIM10_Init+0x94>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 9999;
 8001182:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <MX_TIM10_Init+0x94>)
 8001184:	f242 720f 	movw	r2, #9999	; 0x270f
 8001188:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b18      	ldr	r3, [pc, #96]	; (80011ec <MX_TIM10_Init+0x94>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b16      	ldr	r3, [pc, #88]	; (80011ec <MX_TIM10_Init+0x94>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001196:	4815      	ldr	r0, [pc, #84]	; (80011ec <MX_TIM10_Init+0x94>)
 8001198:	f002 fc10 	bl	80039bc <HAL_TIM_Base_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM10_Init+0x4e>
  {
    Error_Handler();
 80011a2:	f000 f98b 	bl	80014bc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim10) != HAL_OK)
 80011a6:	4811      	ldr	r0, [pc, #68]	; (80011ec <MX_TIM10_Init+0x94>)
 80011a8:	f002 fcc8 	bl	8003b3c <HAL_TIM_PWM_Init>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <MX_TIM10_Init+0x5e>
  {
    Error_Handler();
 80011b2:	f000 f983 	bl	80014bc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011b6:	2360      	movs	r3, #96	; 0x60
 80011b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 749;
 80011ba:	f240 23ed 	movw	r3, #749	; 0x2ed
 80011be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011c0:	2300      	movs	r3, #0
 80011c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011c4:	2300      	movs	r3, #0
 80011c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	2200      	movs	r2, #0
 80011cc:	4619      	mov	r1, r3
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM10_Init+0x94>)
 80011d0:	f003 f908 	bl	80043e4 <HAL_TIM_PWM_ConfigChannel>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_TIM10_Init+0x86>
  {
    Error_Handler();
 80011da:	f000 f96f 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */
  HAL_TIM_MspPostInit(&htim10);
 80011de:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM10_Init+0x94>)
 80011e0:	f000 fcc8 	bl	8001b74 <HAL_TIM_MspPostInit>

}
 80011e4:	bf00      	nop
 80011e6:	3720      	adds	r7, #32
 80011e8:	46bd      	mov	sp, r7
 80011ea:	bd80      	pop	{r7, pc}
 80011ec:	200004c0 	.word	0x200004c0
 80011f0:	40014400 	.word	0x40014400

080011f4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011f8:	4b11      	ldr	r3, [pc, #68]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 80011fa:	4a12      	ldr	r2, [pc, #72]	; (8001244 <MX_USART3_UART_Init+0x50>)
 80011fc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80011fe:	4b10      	ldr	r3, [pc, #64]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 8001200:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001204:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001206:	4b0e      	ldr	r3, [pc, #56]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 8001208:	2200      	movs	r2, #0
 800120a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800120c:	4b0c      	ldr	r3, [pc, #48]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 800120e:	2200      	movs	r2, #0
 8001210:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 8001214:	2200      	movs	r2, #0
 8001216:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 800121a:	220c      	movs	r2, #12
 800121c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800121e:	4b08      	ldr	r3, [pc, #32]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 8001220:	2200      	movs	r2, #0
 8001222:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001224:	4b06      	ldr	r3, [pc, #24]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 8001226:	2200      	movs	r2, #0
 8001228:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800122a:	4805      	ldr	r0, [pc, #20]	; (8001240 <MX_USART3_UART_Init+0x4c>)
 800122c:	f003 ffa8 	bl	8005180 <HAL_UART_Init>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001236:	f000 f941 	bl	80014bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800123a:	bf00      	nop
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	20000508 	.word	0x20000508
 8001244:	40004800 	.word	0x40004800

08001248 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b082      	sub	sp, #8
 800124c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800124e:	2300      	movs	r3, #0
 8001250:	607b      	str	r3, [r7, #4]
 8001252:	4b0c      	ldr	r3, [pc, #48]	; (8001284 <MX_DMA_Init+0x3c>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <MX_DMA_Init+0x3c>)
 8001258:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800125c:	6313      	str	r3, [r2, #48]	; 0x30
 800125e:	4b09      	ldr	r3, [pc, #36]	; (8001284 <MX_DMA_Init+0x3c>)
 8001260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001262:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001266:	607b      	str	r3, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800126a:	2200      	movs	r2, #0
 800126c:	2100      	movs	r1, #0
 800126e:	2038      	movs	r0, #56	; 0x38
 8001270:	f001 f9e3 	bl	800263a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001274:	2038      	movs	r0, #56	; 0x38
 8001276:	f001 f9fc 	bl	8002672 <HAL_NVIC_EnableIRQ>

}
 800127a:	bf00      	nop
 800127c:	3708      	adds	r7, #8
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	40023800 	.word	0x40023800

08001288 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128e:	f107 031c 	add.w	r3, r7, #28
 8001292:	2200      	movs	r2, #0
 8001294:	601a      	str	r2, [r3, #0]
 8001296:	605a      	str	r2, [r3, #4]
 8001298:	609a      	str	r2, [r3, #8]
 800129a:	60da      	str	r2, [r3, #12]
 800129c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129e:	2300      	movs	r3, #0
 80012a0:	61bb      	str	r3, [r7, #24]
 80012a2:	4b77      	ldr	r3, [pc, #476]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	4a76      	ldr	r2, [pc, #472]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012a8:	f043 0310 	orr.w	r3, r3, #16
 80012ac:	6313      	str	r3, [r2, #48]	; 0x30
 80012ae:	4b74      	ldr	r3, [pc, #464]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	61bb      	str	r3, [r7, #24]
 80012b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	4b70      	ldr	r3, [pc, #448]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c2:	4a6f      	ldr	r2, [pc, #444]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012c8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ca:	4b6d      	ldr	r3, [pc, #436]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	2300      	movs	r3, #0
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	4b69      	ldr	r3, [pc, #420]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012de:	4a68      	ldr	r2, [pc, #416]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012e0:	f043 0304 	orr.w	r3, r3, #4
 80012e4:	6313      	str	r3, [r2, #48]	; 0x30
 80012e6:	4b66      	ldr	r3, [pc, #408]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ea:	f003 0304 	and.w	r3, r3, #4
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f2:	2300      	movs	r3, #0
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	4b62      	ldr	r3, [pc, #392]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fa:	4a61      	ldr	r2, [pc, #388]	; (8001480 <MX_GPIO_Init+0x1f8>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	6313      	str	r3, [r2, #48]	; 0x30
 8001302:	4b5f      	ldr	r3, [pc, #380]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001304:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001306:	f003 0301 	and.w	r3, r3, #1
 800130a:	60fb      	str	r3, [r7, #12]
 800130c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800130e:	2300      	movs	r3, #0
 8001310:	60bb      	str	r3, [r7, #8]
 8001312:	4b5b      	ldr	r3, [pc, #364]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001316:	4a5a      	ldr	r2, [pc, #360]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001318:	f043 0302 	orr.w	r3, r3, #2
 800131c:	6313      	str	r3, [r2, #48]	; 0x30
 800131e:	4b58      	ldr	r3, [pc, #352]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001322:	f003 0302 	and.w	r3, r3, #2
 8001326:	60bb      	str	r3, [r7, #8]
 8001328:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800132a:	2300      	movs	r3, #0
 800132c:	607b      	str	r3, [r7, #4]
 800132e:	4b54      	ldr	r3, [pc, #336]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001332:	4a53      	ldr	r2, [pc, #332]	; (8001480 <MX_GPIO_Init+0x1f8>)
 8001334:	f043 0308 	orr.w	r3, r3, #8
 8001338:	6313      	str	r3, [r2, #48]	; 0x30
 800133a:	4b51      	ldr	r3, [pc, #324]	; (8001480 <MX_GPIO_Init+0x1f8>)
 800133c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133e:	f003 0308 	and.w	r3, r3, #8
 8001342:	607b      	str	r3, [r7, #4]
 8001344:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 8001346:	2200      	movs	r2, #0
 8001348:	2108      	movs	r1, #8
 800134a:	484e      	ldr	r0, [pc, #312]	; (8001484 <MX_GPIO_Init+0x1fc>)
 800134c:	f001 fec4 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 8001350:	2200      	movs	r2, #0
 8001352:	f24f 0104 	movw	r1, #61444	; 0xf004
 8001356:	484c      	ldr	r0, [pc, #304]	; (8001488 <MX_GPIO_Init+0x200>)
 8001358:	f001 febe 	bl	80030d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800135c:	2200      	movs	r2, #0
 800135e:	f64f 7180 	movw	r1, #65408	; 0xff80
 8001362:	484a      	ldr	r0, [pc, #296]	; (800148c <MX_GPIO_Init+0x204>)
 8001364:	f001 feb8 	bl	80030d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 8001368:	2200      	movs	r2, #0
 800136a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800136e:	4848      	ldr	r0, [pc, #288]	; (8001490 <MX_GPIO_Init+0x208>)
 8001370:	f001 feb2 	bl	80030d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001374:	2200      	movs	r2, #0
 8001376:	f44f 51f8 	mov.w	r1, #7936	; 0x1f00
 800137a:	4846      	ldr	r0, [pc, #280]	; (8001494 <MX_GPIO_Init+0x20c>)
 800137c:	f001 feac 	bl	80030d8 <HAL_GPIO_WritePin>
                          |LED_5_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : BTN_2_Pin BTN_3_Pin BTN_4_Pin */
  GPIO_InitStruct.Pin = BTN_2_Pin|BTN_3_Pin|BTN_4_Pin;
 8001380:	231c      	movs	r3, #28
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001384:	2300      	movs	r3, #0
 8001386:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800138c:	f107 031c 	add.w	r3, r7, #28
 8001390:	4619      	mov	r1, r3
 8001392:	483e      	ldr	r0, [pc, #248]	; (800148c <MX_GPIO_Init+0x204>)
 8001394:	f001 fd04 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001398:	2302      	movs	r3, #2
 800139a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800139c:	2300      	movs	r3, #0
 800139e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f107 031c 	add.w	r3, r7, #28
 80013a8:	4619      	mov	r1, r3
 80013aa:	4836      	ldr	r0, [pc, #216]	; (8001484 <MX_GPIO_Init+0x1fc>)
 80013ac:	f001 fcf8 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : trigger_Pin */
  GPIO_InitStruct.Pin = trigger_Pin;
 80013b0:	2308      	movs	r3, #8
 80013b2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b4:	2301      	movs	r3, #1
 80013b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b8:	2300      	movs	r3, #0
 80013ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013bc:	2300      	movs	r3, #0
 80013be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 80013c0:	f107 031c 	add.w	r3, r7, #28
 80013c4:	4619      	mov	r1, r3
 80013c6:	482f      	ldr	r0, [pc, #188]	; (8001484 <MX_GPIO_Init+0x1fc>)
 80013c8:	f001 fcea 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB12 PB13 PB14
                           PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
 80013cc:	f24f 0304 	movw	r3, #61444	; 0xf004
 80013d0:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013d2:	2301      	movs	r3, #1
 80013d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d6:	2300      	movs	r3, #0
 80013d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013da:	2300      	movs	r3, #0
 80013dc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013de:	f107 031c 	add.w	r3, r7, #28
 80013e2:	4619      	mov	r1, r3
 80013e4:	4828      	ldr	r0, [pc, #160]	; (8001488 <MX_GPIO_Init+0x200>)
 80013e6:	f001 fcdb 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 PE14
                           PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80013ea:	f64f 7380 	movw	r3, #65408	; 0xff80
 80013ee:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f0:	2301      	movs	r3, #1
 80013f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f4:	2300      	movs	r3, #0
 80013f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f8:	2300      	movs	r3, #0
 80013fa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013fc:	f107 031c 	add.w	r3, r7, #28
 8001400:	4619      	mov	r1, r3
 8001402:	4822      	ldr	r0, [pc, #136]	; (800148c <MX_GPIO_Init+0x204>)
 8001404:	f001 fccc 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001408:	f44f 7380 	mov.w	r3, #256	; 0x100
 800140c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800140e:	2301      	movs	r3, #1
 8001410:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001412:	2300      	movs	r3, #0
 8001414:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001416:	2300      	movs	r3, #0
 8001418:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800141a:	f107 031c 	add.w	r3, r7, #28
 800141e:	4619      	mov	r1, r3
 8001420:	481b      	ldr	r0, [pc, #108]	; (8001490 <MX_GPIO_Init+0x208>)
 8001422:	f001 fcbd 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : SW_1_Pin SW_2_Pin */
  GPIO_InitStruct.Pin = SW_1_Pin|SW_2_Pin;
 8001426:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 800142a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800142c:	2300      	movs	r3, #0
 800142e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001434:	f107 031c 	add.w	r3, r7, #28
 8001438:	4619      	mov	r1, r3
 800143a:	4815      	ldr	r0, [pc, #84]	; (8001490 <MX_GPIO_Init+0x208>)
 800143c:	f001 fcb0 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
                           LED_5_Pin */
  GPIO_InitStruct.Pin = LED_1_Pin|LED_2_Pin|LED_3_Pin|LED_4_Pin
 8001440:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8001444:	61fb      	str	r3, [r7, #28]
                          |LED_5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001446:	2301      	movs	r3, #1
 8001448:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800144a:	2300      	movs	r3, #0
 800144c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144e:	2300      	movs	r3, #0
 8001450:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001452:	f107 031c 	add.w	r3, r7, #28
 8001456:	4619      	mov	r1, r3
 8001458:	480e      	ldr	r0, [pc, #56]	; (8001494 <MX_GPIO_Init+0x20c>)
 800145a:	f001 fca1 	bl	8002da0 <HAL_GPIO_Init>

  /*Configure GPIO pins : ES_L_Pin ES_R_Pin */
  GPIO_InitStruct.Pin = ES_L_Pin|ES_R_Pin;
 800145e:	23c0      	movs	r3, #192	; 0xc0
 8001460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001462:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001466:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001468:	2300      	movs	r3, #0
 800146a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800146c:	f107 031c 	add.w	r3, r7, #28
 8001470:	4619      	mov	r1, r3
 8001472:	4807      	ldr	r0, [pc, #28]	; (8001490 <MX_GPIO_Init+0x208>)
 8001474:	f001 fc94 	bl	8002da0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001478:	bf00      	nop
 800147a:	3730      	adds	r7, #48	; 0x30
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	40023800 	.word	0x40023800
 8001484:	40020800 	.word	0x40020800
 8001488:	40020400 	.word	0x40020400
 800148c:	40021000 	.word	0x40021000
 8001490:	40020c00 	.word	0x40020c00
 8001494:	40020000 	.word	0x40020000

08001498 <HAL_TIM_PeriodElapsedCallback>:
//  }
//}

// #if defined(TEST_ULTRASONIC) || defined(TEST_ENCODER)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b082      	sub	sp, #8
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  if (htim->Instance == htim4.Instance) // make sure
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681a      	ldr	r2, [r3, #0]
 80014a4:	4b04      	ldr	r3, [pc, #16]	; (80014b8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d101      	bne.n	80014b0 <HAL_TIM_PeriodElapsedCallback+0x18>
  {
      Scheduler_Update();
 80014ac:	f000 f83e 	bl	800152c <Scheduler_Update>
  //   HAL_TIM_IC_Start_IT((&sensor1)->htim, TIM_CHANNEL_1);
  //   HAL_TIM_IC_Start_IT((&sensor2)->htim, TIM_CHANNEL_2);
  //   HAL_TIM_IC_Start_IT((&sensor3)->htim, TIM_CHANNEL_3);
  //   //		updateEncoder(&enc, ((TIM3->SMCR & 0x3) == 0x3));
  }
}
 80014b0:	bf00      	nop
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}
 80014b8:	20000430 	.word	0x20000430

080014bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014bc:	b480      	push	{r7}
 80014be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014c0:	b672      	cpsid	i
}
 80014c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014c4:	e7fe      	b.n	80014c4 <Error_Handler+0x8>
	...

080014c8 <Scheduler_Init>:

Tasks_t tasks;
static uint32_t preTaskID = -1;

void Scheduler_Init(void)
{
 80014c8:	b480      	push	{r7}
 80014ca:	af00      	add	r7, sp, #0
    tasks.currentTask = NULL;
 80014cc:	4b05      	ldr	r3, [pc, #20]	; (80014e4 <Scheduler_Init+0x1c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
    tasks.nTasks = 0;
 80014d2:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <Scheduler_Init+0x1c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	605a      	str	r2, [r3, #4]
}
 80014d8:	bf00      	nop
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	2000054c 	.word	0x2000054c

080014e8 <Get_New_Task_ID>:

static uint32_t Get_New_Task_ID()
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
    static uint32_t TaskID = 0;
    uint32_t TaskID_t = (preTaskID != -1) ? preTaskID : ++TaskID;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <Get_New_Task_ID+0x3c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014f6:	d107      	bne.n	8001508 <Get_New_Task_ID+0x20>
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <Get_New_Task_ID+0x40>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	3301      	adds	r3, #1
 80014fe:	4a0a      	ldr	r2, [pc, #40]	; (8001528 <Get_New_Task_ID+0x40>)
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	4b09      	ldr	r3, [pc, #36]	; (8001528 <Get_New_Task_ID+0x40>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	e001      	b.n	800150c <Get_New_Task_ID+0x24>
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <Get_New_Task_ID+0x3c>)
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	607b      	str	r3, [r7, #4]
    preTaskID = -1;
 800150e:	4b05      	ldr	r3, [pc, #20]	; (8001524 <Get_New_Task_ID+0x3c>)
 8001510:	f04f 32ff 	mov.w	r2, #4294967295
 8001514:	601a      	str	r2, [r3, #0]
    return TaskID_t;
 8001516:	687b      	ldr	r3, [r7, #4]
}
 8001518:	4618      	mov	r0, r3
 800151a:	370c      	adds	r7, #12
 800151c:	46bd      	mov	sp, r7
 800151e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001522:	4770      	bx	lr
 8001524:	2000007c 	.word	0x2000007c
 8001528:	20000554 	.word	0x20000554

0800152c <Scheduler_Update>:

void Scheduler_Update(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
    if (tasks.currentTask && tasks.currentTask->runMe == 0)
 8001530:	4b10      	ldr	r3, [pc, #64]	; (8001574 <Scheduler_Update+0x48>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	2b00      	cmp	r3, #0
 8001536:	d017      	beq.n	8001568 <Scheduler_Update+0x3c>
 8001538:	4b0e      	ldr	r3, [pc, #56]	; (8001574 <Scheduler_Update+0x48>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	7c1b      	ldrb	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d112      	bne.n	8001568 <Scheduler_Update+0x3c>
    {
        if (tasks.currentTask->delay > 0)
 8001542:	4b0c      	ldr	r3, [pc, #48]	; (8001574 <Scheduler_Update+0x48>)
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d004      	beq.n	8001556 <Scheduler_Update+0x2a>
            tasks.currentTask->delay--;
 800154c:	4b09      	ldr	r3, [pc, #36]	; (8001574 <Scheduler_Update+0x48>)
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	689a      	ldr	r2, [r3, #8]
 8001552:	3a01      	subs	r2, #1
 8001554:	609a      	str	r2, [r3, #8]
        if (tasks.currentTask->delay <= 0)
 8001556:	4b07      	ldr	r3, [pc, #28]	; (8001574 <Scheduler_Update+0x48>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	689b      	ldr	r3, [r3, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d103      	bne.n	8001568 <Scheduler_Update+0x3c>
            tasks.currentTask->runMe = 1;
 8001560:	4b04      	ldr	r3, [pc, #16]	; (8001574 <Scheduler_Update+0x48>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2201      	movs	r2, #1
 8001566:	741a      	strb	r2, [r3, #16]
    }
}
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr
 8001572:	bf00      	nop
 8001574:	2000054c 	.word	0x2000054c

08001578 <Scheduler_Add_Task>:

uint32_t Scheduler_Add_Task(void (*pFunction)(void), const uint32_t DELAY, const uint32_t PERIOD)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
    TaskNode *newTask = (TaskNode *)malloc(sizeof(TaskNode));
 8001584:	2018      	movs	r0, #24
 8001586:	f004 fe73 	bl	8006270 <malloc>
 800158a:	4603      	mov	r3, r0
 800158c:	617b      	str	r3, [r7, #20]
    if (newTask == NULL || tasks.nTasks >= MAX_TASKS)
 800158e:	697b      	ldr	r3, [r7, #20]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <Scheduler_Add_Task+0x24>
 8001594:	4b5d      	ldr	r3, [pc, #372]	; (800170c <Scheduler_Add_Task+0x194>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b09      	cmp	r3, #9
 800159a:	d901      	bls.n	80015a0 <Scheduler_Add_Task+0x28>
    {
        return NOT_VALID_TASK_ID;
 800159c:	2300      	movs	r3, #0
 800159e:	e0b1      	b.n	8001704 <Scheduler_Add_Task+0x18c>
    }

    if (tasks.currentTask == NULL)
 80015a0:	4b5a      	ldr	r3, [pc, #360]	; (800170c <Scheduler_Add_Task+0x194>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d11e      	bne.n	80015e6 <Scheduler_Add_Task+0x6e>
    {
        tasks.currentTask = newTask;
 80015a8:	4a58      	ldr	r2, [pc, #352]	; (800170c <Scheduler_Add_Task+0x194>)
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	6013      	str	r3, [r2, #0]
        tasks.nTasks++;
 80015ae:	4b57      	ldr	r3, [pc, #348]	; (800170c <Scheduler_Add_Task+0x194>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	3301      	adds	r3, #1
 80015b4:	4a55      	ldr	r2, [pc, #340]	; (800170c <Scheduler_Add_Task+0x194>)
 80015b6:	6053      	str	r3, [r2, #4]
        newTask->pTask = pFunction;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	68fa      	ldr	r2, [r7, #12]
 80015bc:	601a      	str	r2, [r3, #0]
        newTask->delay = DELAY;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	68ba      	ldr	r2, [r7, #8]
 80015c2:	609a      	str	r2, [r3, #8]
        newTask->period = PERIOD;
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	687a      	ldr	r2, [r7, #4]
 80015c8:	60da      	str	r2, [r3, #12]
        newTask->runMe = 0;
 80015ca:	697b      	ldr	r3, [r7, #20]
 80015cc:	2200      	movs	r2, #0
 80015ce:	741a      	strb	r2, [r3, #16]
        newTask->TaskID = Get_New_Task_ID();
 80015d0:	f7ff ff8a 	bl	80014e8 <Get_New_Task_ID>
 80015d4:	4602      	mov	r2, r0
 80015d6:	697b      	ldr	r3, [r7, #20]
 80015d8:	615a      	str	r2, [r3, #20]
        newTask->next = NULL;
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	2200      	movs	r2, #0
 80015de:	605a      	str	r2, [r3, #4]
        return newTask->TaskID;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	695b      	ldr	r3, [r3, #20]
 80015e4:	e08e      	b.n	8001704 <Scheduler_Add_Task+0x18c>
    }

    TaskNode *temp_task;
    TaskNode *preTask = NULL;
 80015e6:	2300      	movs	r3, #0
 80015e8:	623b      	str	r3, [r7, #32]
    uint8_t newTaskIndex = 0;
 80015ea:	2300      	movs	r3, #0
 80015ec:	77fb      	strb	r3, [r7, #31]
    uint32_t sumDelay = 0;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61bb      	str	r3, [r7, #24]
    uint32_t newDelay = 0;
 80015f2:	2300      	movs	r3, #0
 80015f4:	613b      	str	r3, [r7, #16]

    for (newTaskIndex = 0, temp_task = tasks.currentTask;
 80015f6:	2300      	movs	r3, #0
 80015f8:	77fb      	strb	r3, [r7, #31]
 80015fa:	4b44      	ldr	r3, [pc, #272]	; (800170c <Scheduler_Add_Task+0x194>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
 8001600:	e079      	b.n	80016f6 <Scheduler_Add_Task+0x17e>
         newTaskIndex < tasks.nTasks; newTaskIndex++,
        preTask = temp_task, temp_task = temp_task->next)
    {

        sumDelay = sumDelay + temp_task->delay;
 8001602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	69ba      	ldr	r2, [r7, #24]
 8001608:	4413      	add	r3, r2
 800160a:	61bb      	str	r3, [r7, #24]
        //  sumDelay > DELAY -> new task need to be added before current task pointer
        if (sumDelay > DELAY)
 800160c:	69ba      	ldr	r2, [r7, #24]
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	429a      	cmp	r2, r3
 8001612:	d938      	bls.n	8001686 <Scheduler_Add_Task+0x10e>
        {
            // because new task will be added before current task pointer
            // so the delay of new task will be calculated
            newDelay = DELAY - (sumDelay - temp_task->delay);
 8001614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001616:	689a      	ldr	r2, [r3, #8]
 8001618:	69bb      	ldr	r3, [r7, #24]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	68ba      	ldr	r2, [r7, #8]
 800161e:	4413      	add	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
            // and the delay of current task will be reduced
            temp_task->delay = sumDelay - DELAY;
 8001622:	69ba      	ldr	r2, [r7, #24]
 8001624:	68bb      	ldr	r3, [r7, #8]
 8001626:	1ad2      	subs	r2, r2, r3
 8001628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800162a:	609a      	str	r2, [r3, #8]
            // move all task after current task pointer to the next index
            newTask->next = temp_task;
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001630:	605a      	str	r2, [r3, #4]
            // avoid preTask is empty when add new task at the first index
            if (preTask)
 8001632:	6a3b      	ldr	r3, [r7, #32]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d003      	beq.n	8001640 <Scheduler_Add_Task+0xc8>
                preTask->next = newTask;
 8001638:	6a3b      	ldr	r3, [r7, #32]
 800163a:	697a      	ldr	r2, [r7, #20]
 800163c:	605a      	str	r2, [r3, #4]
 800163e:	e002      	b.n	8001646 <Scheduler_Add_Task+0xce>
            else
                tasks.currentTask = newTask;
 8001640:	4a32      	ldr	r2, [pc, #200]	; (800170c <Scheduler_Add_Task+0x194>)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	6013      	str	r3, [r2, #0]
            // add new task to the current task pointer
            newTask->pTask = pFunction;
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	68fa      	ldr	r2, [r7, #12]
 800164a:	601a      	str	r2, [r3, #0]
            newTask->delay = newDelay;
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	693a      	ldr	r2, [r7, #16]
 8001650:	609a      	str	r2, [r3, #8]
            newTask->period = PERIOD;
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	60da      	str	r2, [r3, #12]
            newTask->runMe = newTask->delay == 0 ? 1 : 0;
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	689b      	ldr	r3, [r3, #8]
 800165c:	2b00      	cmp	r3, #0
 800165e:	bf0c      	ite	eq
 8001660:	2301      	moveq	r3, #1
 8001662:	2300      	movne	r3, #0
 8001664:	b2db      	uxtb	r3, r3
 8001666:	461a      	mov	r2, r3
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	741a      	strb	r2, [r3, #16]
            newTask->TaskID = Get_New_Task_ID();
 800166c:	f7ff ff3c 	bl	80014e8 <Get_New_Task_ID>
 8001670:	4602      	mov	r2, r0
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	615a      	str	r2, [r3, #20]
            tasks.nTasks++;
 8001676:	4b25      	ldr	r3, [pc, #148]	; (800170c <Scheduler_Add_Task+0x194>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	3301      	adds	r3, #1
 800167c:	4a23      	ldr	r2, [pc, #140]	; (800170c <Scheduler_Add_Task+0x194>)
 800167e:	6053      	str	r3, [r2, #4]
            return newTask->TaskID;
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	695b      	ldr	r3, [r3, #20]
 8001684:	e03e      	b.n	8001704 <Scheduler_Add_Task+0x18c>
        }
        else
        {
            if (newTaskIndex == tasks.nTasks - 1)
 8001686:	7ffa      	ldrb	r2, [r7, #31]
 8001688:	4b20      	ldr	r3, [pc, #128]	; (800170c <Scheduler_Add_Task+0x194>)
 800168a:	685b      	ldr	r3, [r3, #4]
 800168c:	3b01      	subs	r3, #1
 800168e:	429a      	cmp	r2, r3
 8001690:	d129      	bne.n	80016e6 <Scheduler_Add_Task+0x16e>
            {
                newDelay = DELAY - sumDelay;
 8001692:	68ba      	ldr	r2, [r7, #8]
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	1ad3      	subs	r3, r2, r3
 8001698:	613b      	str	r3, [r7, #16]
                temp_task->next = newTask;
 800169a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800169c:	697a      	ldr	r2, [r7, #20]
 800169e:	605a      	str	r2, [r3, #4]
                newTask->next = NULL;
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	2200      	movs	r2, #0
 80016a4:	605a      	str	r2, [r3, #4]

                // add new task to the current task pointer
                newTask->pTask = pFunction;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	68fa      	ldr	r2, [r7, #12]
 80016aa:	601a      	str	r2, [r3, #0]
                newTask->delay = newDelay;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	693a      	ldr	r2, [r7, #16]
 80016b0:	609a      	str	r2, [r3, #8]
                newTask->period = PERIOD;
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	687a      	ldr	r2, [r7, #4]
 80016b6:	60da      	str	r2, [r3, #12]
                newTask->runMe = newTask->delay == 0 ? 1 : 0;
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	bf0c      	ite	eq
 80016c0:	2301      	moveq	r3, #1
 80016c2:	2300      	movne	r3, #0
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	461a      	mov	r2, r3
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	741a      	strb	r2, [r3, #16]
                newTask->TaskID = Get_New_Task_ID();
 80016cc:	f7ff ff0c 	bl	80014e8 <Get_New_Task_ID>
 80016d0:	4602      	mov	r2, r0
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	615a      	str	r2, [r3, #20]
                tasks.nTasks++;
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <Scheduler_Add_Task+0x194>)
 80016d8:	685b      	ldr	r3, [r3, #4]
 80016da:	3301      	adds	r3, #1
 80016dc:	4a0b      	ldr	r2, [pc, #44]	; (800170c <Scheduler_Add_Task+0x194>)
 80016de:	6053      	str	r3, [r2, #4]
                return newTask->TaskID;
 80016e0:	697b      	ldr	r3, [r7, #20]
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	e00e      	b.n	8001704 <Scheduler_Add_Task+0x18c>
         newTaskIndex < tasks.nTasks; newTaskIndex++,
 80016e6:	7ffb      	ldrb	r3, [r7, #31]
 80016e8:	3301      	adds	r3, #1
 80016ea:	77fb      	strb	r3, [r7, #31]
        preTask = temp_task, temp_task = temp_task->next)
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	623b      	str	r3, [r7, #32]
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	627b      	str	r3, [r7, #36]	; 0x24
         newTaskIndex < tasks.nTasks; newTaskIndex++,
 80016f6:	7ffa      	ldrb	r2, [r7, #31]
 80016f8:	4b04      	ldr	r3, [pc, #16]	; (800170c <Scheduler_Add_Task+0x194>)
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	429a      	cmp	r2, r3
 80016fe:	d380      	bcc.n	8001602 <Scheduler_Add_Task+0x8a>
            }
        }
    }
    return newTask->TaskID;
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	695b      	ldr	r3, [r3, #20]
}
 8001704:	4618      	mov	r0, r3
 8001706:	3728      	adds	r7, #40	; 0x28
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	2000054c 	.word	0x2000054c

08001710 <Scheduler_Dispatch_Tasks>:

void Scheduler_Dispatch_Tasks()
{
 8001710:	b5b0      	push	{r4, r5, r7, lr}
 8001712:	b086      	sub	sp, #24
 8001714:	af00      	add	r7, sp, #0
    if (tasks.currentTask->runMe > 0)
 8001716:	4b17      	ldr	r3, [pc, #92]	; (8001774 <Scheduler_Dispatch_Tasks+0x64>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	7c1b      	ldrb	r3, [r3, #16]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d024      	beq.n	800176a <Scheduler_Dispatch_Tasks+0x5a>
    {
        (*(tasks.currentTask->pTask))(); // Run the task
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <Scheduler_Dispatch_Tasks+0x64>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4798      	blx	r3
        tasks.currentTask->runMe = 0;    // Reset / reduce RunMe flag
 8001728:	4b12      	ldr	r3, [pc, #72]	; (8001774 <Scheduler_Dispatch_Tasks+0x64>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	2200      	movs	r2, #0
 800172e:	741a      	strb	r2, [r3, #16]
        TaskNode temtask = *(tasks.currentTask);
 8001730:	4b10      	ldr	r3, [pc, #64]	; (8001774 <Scheduler_Dispatch_Tasks+0x64>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	463c      	mov	r4, r7
 8001736:	461d      	mov	r5, r3
 8001738:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800173a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800173c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8001740:	e884 0003 	stmia.w	r4, {r0, r1}

        if (Scheduler_Remove_Task(temtask.TaskID) && temtask.period > 0)
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4618      	mov	r0, r3
 8001748:	f000 f818 	bl	800177c <Scheduler_Remove_Task>
 800174c:	4603      	mov	r3, r0
 800174e:	2b00      	cmp	r3, #0
 8001750:	d00b      	beq.n	800176a <Scheduler_Dispatch_Tasks+0x5a>
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d008      	beq.n	800176a <Scheduler_Dispatch_Tasks+0x5a>
        {
            preTaskID = temtask.TaskID;
 8001758:	697b      	ldr	r3, [r7, #20]
 800175a:	4a07      	ldr	r2, [pc, #28]	; (8001778 <Scheduler_Dispatch_Tasks+0x68>)
 800175c:	6013      	str	r3, [r2, #0]
            Scheduler_Add_Task(temtask.pTask, temtask.period, temtask.period);
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	68f9      	ldr	r1, [r7, #12]
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff07 	bl	8001578 <Scheduler_Add_Task>
        }
    }
}
 800176a:	bf00      	nop
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bdb0      	pop	{r4, r5, r7, pc}
 8001772:	bf00      	nop
 8001774:	2000054c 	.word	0x2000054c
 8001778:	2000007c 	.word	0x2000007c

0800177c <Scheduler_Remove_Task>:

uint8_t Scheduler_Remove_Task(uint32_t TaskID)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
    if (TaskID != NOT_VALID_TASK_ID)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d033      	beq.n	80017f2 <Scheduler_Remove_Task+0x76>
    {
        TaskNode *temp_task;
        TaskNode *preTask = NULL;
 800178a:	2300      	movs	r3, #0
 800178c:	613b      	str	r3, [r7, #16]
        uint8_t taskIndex = 0;
 800178e:	2300      	movs	r3, #0
 8001790:	73fb      	strb	r3, [r7, #15]
        for (taskIndex = 0, temp_task = tasks.currentTask;
 8001792:	2300      	movs	r3, #0
 8001794:	73fb      	strb	r3, [r7, #15]
 8001796:	4b19      	ldr	r3, [pc, #100]	; (80017fc <Scheduler_Remove_Task+0x80>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	617b      	str	r3, [r7, #20]
 800179c:	e024      	b.n	80017e8 <Scheduler_Remove_Task+0x6c>
             taskIndex < tasks.nTasks; taskIndex++,
            preTask = temp_task, temp_task = temp_task->next)
        {
            if (temp_task->TaskID == TaskID)
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	695b      	ldr	r3, [r3, #20]
 80017a2:	687a      	ldr	r2, [r7, #4]
 80017a4:	429a      	cmp	r2, r3
 80017a6:	d117      	bne.n	80017d8 <Scheduler_Remove_Task+0x5c>
            {
                if (temp_task == tasks.currentTask)
 80017a8:	4b14      	ldr	r3, [pc, #80]	; (80017fc <Scheduler_Remove_Task+0x80>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	697a      	ldr	r2, [r7, #20]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d104      	bne.n	80017bc <Scheduler_Remove_Task+0x40>
                {
                    tasks.currentTask = temp_task->next;
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	4a11      	ldr	r2, [pc, #68]	; (80017fc <Scheduler_Remove_Task+0x80>)
 80017b8:	6013      	str	r3, [r2, #0]
 80017ba:	e003      	b.n	80017c4 <Scheduler_Remove_Task+0x48>
                }
                else
                {
                    preTask->next = temp_task->next;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	605a      	str	r2, [r3, #4]
                }
                free(temp_task);
 80017c4:	6978      	ldr	r0, [r7, #20]
 80017c6:	f004 fd5b 	bl	8006280 <free>
                tasks.nTasks--;
 80017ca:	4b0c      	ldr	r3, [pc, #48]	; (80017fc <Scheduler_Remove_Task+0x80>)
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	4a0a      	ldr	r2, [pc, #40]	; (80017fc <Scheduler_Remove_Task+0x80>)
 80017d2:	6053      	str	r3, [r2, #4]
                return 1;
 80017d4:	2301      	movs	r3, #1
 80017d6:	e00d      	b.n	80017f4 <Scheduler_Remove_Task+0x78>
             taskIndex < tasks.nTasks; taskIndex++,
 80017d8:	7bfb      	ldrb	r3, [r7, #15]
 80017da:	3301      	adds	r3, #1
 80017dc:	73fb      	strb	r3, [r7, #15]
            preTask = temp_task, temp_task = temp_task->next)
 80017de:	697b      	ldr	r3, [r7, #20]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	617b      	str	r3, [r7, #20]
             taskIndex < tasks.nTasks; taskIndex++,
 80017e8:	7bfa      	ldrb	r2, [r7, #15]
 80017ea:	4b04      	ldr	r3, [pc, #16]	; (80017fc <Scheduler_Remove_Task+0x80>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d3d5      	bcc.n	800179e <Scheduler_Remove_Task+0x22>
            }
        }
    }
    return 0; // return status
 80017f2:	2300      	movs	r3, #0
}
 80017f4:	4618      	mov	r0, r3
 80017f6:	3718      	adds	r7, #24
 80017f8:	46bd      	mov	sp, r7
 80017fa:	bd80      	pop	{r7, pc}
 80017fc:	2000054c 	.word	0x2000054c

08001800 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001800:	b480      	push	{r7}
 8001802:	b083      	sub	sp, #12
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001806:	2300      	movs	r3, #0
 8001808:	607b      	str	r3, [r7, #4]
 800180a:	4b10      	ldr	r3, [pc, #64]	; (800184c <HAL_MspInit+0x4c>)
 800180c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180e:	4a0f      	ldr	r2, [pc, #60]	; (800184c <HAL_MspInit+0x4c>)
 8001810:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001814:	6453      	str	r3, [r2, #68]	; 0x44
 8001816:	4b0d      	ldr	r3, [pc, #52]	; (800184c <HAL_MspInit+0x4c>)
 8001818:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181e:	607b      	str	r3, [r7, #4]
 8001820:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001822:	2300      	movs	r3, #0
 8001824:	603b      	str	r3, [r7, #0]
 8001826:	4b09      	ldr	r3, [pc, #36]	; (800184c <HAL_MspInit+0x4c>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	4a08      	ldr	r2, [pc, #32]	; (800184c <HAL_MspInit+0x4c>)
 800182c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001830:	6413      	str	r3, [r2, #64]	; 0x40
 8001832:	4b06      	ldr	r3, [pc, #24]	; (800184c <HAL_MspInit+0x4c>)
 8001834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001836:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800183a:	603b      	str	r3, [r7, #0]
 800183c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800183e:	bf00      	nop
 8001840:	370c      	adds	r7, #12
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	40023800 	.word	0x40023800

08001850 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b08c      	sub	sp, #48	; 0x30
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001858:	f107 031c 	add.w	r3, r7, #28
 800185c:	2200      	movs	r2, #0
 800185e:	601a      	str	r2, [r3, #0]
 8001860:	605a      	str	r2, [r3, #4]
 8001862:	609a      	str	r2, [r3, #8]
 8001864:	60da      	str	r2, [r3, #12]
 8001866:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a46      	ldr	r2, [pc, #280]	; (8001988 <HAL_ADC_MspInit+0x138>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d158      	bne.n	8001924 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001872:	2300      	movs	r3, #0
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	4b45      	ldr	r3, [pc, #276]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001878:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800187a:	4a44      	ldr	r2, [pc, #272]	; (800198c <HAL_ADC_MspInit+0x13c>)
 800187c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001880:	6453      	str	r3, [r2, #68]	; 0x44
 8001882:	4b42      	ldr	r3, [pc, #264]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800188a:	61bb      	str	r3, [r7, #24]
 800188c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	617b      	str	r3, [r7, #20]
 8001892:	4b3e      	ldr	r3, [pc, #248]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	4a3d      	ldr	r2, [pc, #244]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6313      	str	r3, [r2, #48]	; 0x30
 800189e:	4b3b      	ldr	r3, [pc, #236]	; (800198c <HAL_ADC_MspInit+0x13c>)
 80018a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a2:	f003 0301 	and.w	r3, r3, #1
 80018a6:	617b      	str	r3, [r7, #20]
 80018a8:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 80018aa:	23f1      	movs	r3, #241	; 0xf1
 80018ac:	61fb      	str	r3, [r7, #28]
                          |IR5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018b2:	2300      	movs	r3, #0
 80018b4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b6:	f107 031c 	add.w	r3, r7, #28
 80018ba:	4619      	mov	r1, r3
 80018bc:	4834      	ldr	r0, [pc, #208]	; (8001990 <HAL_ADC_MspInit+0x140>)
 80018be:	f001 fa6f 	bl	8002da0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80018c2:	4b34      	ldr	r3, [pc, #208]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018c4:	4a34      	ldr	r2, [pc, #208]	; (8001998 <HAL_ADC_MspInit+0x148>)
 80018c6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80018c8:	4b32      	ldr	r3, [pc, #200]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018ce:	4b31      	ldr	r3, [pc, #196]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d4:	4b2f      	ldr	r3, [pc, #188]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80018da:	4b2e      	ldr	r3, [pc, #184]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018dc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80018e2:	4b2c      	ldr	r3, [pc, #176]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80018e8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80018ea:	4b2a      	ldr	r3, [pc, #168]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018ec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80018f0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80018f2:	4b28      	ldr	r3, [pc, #160]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018f4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80018fa:	4b26      	ldr	r3, [pc, #152]	; (8001994 <HAL_ADC_MspInit+0x144>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001900:	4b24      	ldr	r3, [pc, #144]	; (8001994 <HAL_ADC_MspInit+0x144>)
 8001902:	2200      	movs	r2, #0
 8001904:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001906:	4823      	ldr	r0, [pc, #140]	; (8001994 <HAL_ADC_MspInit+0x144>)
 8001908:	f000 fece 	bl	80026a8 <HAL_DMA_Init>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8001912:	f7ff fdd3 	bl	80014bc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4a1e      	ldr	r2, [pc, #120]	; (8001994 <HAL_ADC_MspInit+0x144>)
 800191a:	639a      	str	r2, [r3, #56]	; 0x38
 800191c:	4a1d      	ldr	r2, [pc, #116]	; (8001994 <HAL_ADC_MspInit+0x144>)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001922:	e02c      	b.n	800197e <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a1c      	ldr	r2, [pc, #112]	; (800199c <HAL_ADC_MspInit+0x14c>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d127      	bne.n	800197e <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	613b      	str	r3, [r7, #16]
 8001932:	4b16      	ldr	r3, [pc, #88]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a15      	ldr	r2, [pc, #84]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001938:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b13      	ldr	r3, [pc, #76]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001946:	613b      	str	r3, [r7, #16]
 8001948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800194a:	2300      	movs	r3, #0
 800194c:	60fb      	str	r3, [r7, #12]
 800194e:	4b0f      	ldr	r3, [pc, #60]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001952:	4a0e      	ldr	r2, [pc, #56]	; (800198c <HAL_ADC_MspInit+0x13c>)
 8001954:	f043 0302 	orr.w	r3, r3, #2
 8001958:	6313      	str	r3, [r2, #48]	; 0x30
 800195a:	4b0c      	ldr	r3, [pc, #48]	; (800198c <HAL_ADC_MspInit+0x13c>)
 800195c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195e:	f003 0302 	and.w	r3, r3, #2
 8001962:	60fb      	str	r3, [r7, #12]
 8001964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BATT_Pin;
 8001966:	2301      	movs	r3, #1
 8001968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800196a:	2303      	movs	r3, #3
 800196c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800196e:	2300      	movs	r3, #0
 8001970:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 8001972:	f107 031c 	add.w	r3, r7, #28
 8001976:	4619      	mov	r1, r3
 8001978:	4809      	ldr	r0, [pc, #36]	; (80019a0 <HAL_ADC_MspInit+0x150>)
 800197a:	f001 fa11 	bl	8002da0 <HAL_GPIO_Init>
}
 800197e:	bf00      	nop
 8001980:	3730      	adds	r7, #48	; 0x30
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40012000 	.word	0x40012000
 800198c:	40023800 	.word	0x40023800
 8001990:	40020000 	.word	0x40020000
 8001994:	20000340 	.word	0x20000340
 8001998:	40026410 	.word	0x40026410
 800199c:	40012100 	.word	0x40012100
 80019a0:	40020400 	.word	0x40020400

080019a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	; 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c4:	d134      	bne.n	8001a30 <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80019c6:	2300      	movs	r3, #0
 80019c8:	61bb      	str	r3, [r7, #24]
 80019ca:	4b3d      	ldr	r3, [pc, #244]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ce:	4a3c      	ldr	r2, [pc, #240]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019d0:	f043 0301 	orr.w	r3, r3, #1
 80019d4:	6413      	str	r3, [r2, #64]	; 0x40
 80019d6:	4b3a      	ldr	r3, [pc, #232]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019da:	f003 0301 	and.w	r3, r3, #1
 80019de:	61bb      	str	r3, [r7, #24]
 80019e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	617b      	str	r3, [r7, #20]
 80019e6:	4b36      	ldr	r3, [pc, #216]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a35      	ldr	r2, [pc, #212]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b33      	ldr	r3, [pc, #204]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	617b      	str	r3, [r7, #20]
 80019fc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ECHO_L_Pin|ECHO_M_Pin|ECHO_R_Pin;
 80019fe:	230e      	movs	r3, #14
 8001a00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a02:	2302      	movs	r3, #2
 8001a04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a06:	2300      	movs	r3, #0
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a12:	f107 031c 	add.w	r3, r7, #28
 8001a16:	4619      	mov	r1, r3
 8001a18:	482a      	ldr	r0, [pc, #168]	; (8001ac4 <HAL_TIM_Base_MspInit+0x120>)
 8001a1a:	f001 f9c1 	bl	8002da0 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	201c      	movs	r0, #28
 8001a24:	f000 fe09 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001a28:	201c      	movs	r0, #28
 8001a2a:	f000 fe22 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 8001a2e:	e042      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	4a24      	ldr	r2, [pc, #144]	; (8001ac8 <HAL_TIM_Base_MspInit+0x124>)
 8001a36:	4293      	cmp	r3, r2
 8001a38:	d116      	bne.n	8001a68 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b20      	ldr	r3, [pc, #128]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a42:	4a1f      	ldr	r2, [pc, #124]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6413      	str	r3, [r2, #64]	; 0x40
 8001a4a:	4b1d      	ldr	r3, [pc, #116]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	201e      	movs	r0, #30
 8001a5c:	f000 fded 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001a60:	201e      	movs	r0, #30
 8001a62:	f000 fe06 	bl	8002672 <HAL_NVIC_EnableIRQ>
}
 8001a66:	e026      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	4a17      	ldr	r2, [pc, #92]	; (8001acc <HAL_TIM_Base_MspInit+0x128>)
 8001a6e:	4293      	cmp	r3, r2
 8001a70:	d10e      	bne.n	8001a90 <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60fb      	str	r3, [r7, #12]
 8001a76:	4b12      	ldr	r3, [pc, #72]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7a:	4a11      	ldr	r2, [pc, #68]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6453      	str	r3, [r2, #68]	; 0x44
 8001a82:	4b0f      	ldr	r3, [pc, #60]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60fb      	str	r3, [r7, #12]
 8001a8c:	68fb      	ldr	r3, [r7, #12]
}
 8001a8e:	e012      	b.n	8001ab6 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4a0e      	ldr	r2, [pc, #56]	; (8001ad0 <HAL_TIM_Base_MspInit+0x12c>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d10d      	bne.n	8001ab6 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	60bb      	str	r3, [r7, #8]
 8001a9e:	4b08      	ldr	r3, [pc, #32]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001aa4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b05      	ldr	r3, [pc, #20]	; (8001ac0 <HAL_TIM_Base_MspInit+0x11c>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ab2:	60bb      	str	r3, [r7, #8]
 8001ab4:	68bb      	ldr	r3, [r7, #8]
}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	; 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	40023800 	.word	0x40023800
 8001ac4:	40020000 	.word	0x40020000
 8001ac8:	40000800 	.word	0x40000800
 8001acc:	40010400 	.word	0x40010400
 8001ad0:	40014400 	.word	0x40014400

08001ad4 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b08a      	sub	sp, #40	; 0x28
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0314 	add.w	r3, r7, #20
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
 8001aea:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a1d      	ldr	r2, [pc, #116]	; (8001b68 <HAL_TIM_Encoder_MspInit+0x94>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d133      	bne.n	8001b5e <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001af6:	2300      	movs	r3, #0
 8001af8:	613b      	str	r3, [r7, #16]
 8001afa:	4b1c      	ldr	r3, [pc, #112]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001afe:	4a1b      	ldr	r2, [pc, #108]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001b00:	f043 0302 	orr.w	r3, r3, #2
 8001b04:	6413      	str	r3, [r2, #64]	; 0x40
 8001b06:	4b19      	ldr	r3, [pc, #100]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	613b      	str	r3, [r7, #16]
 8001b10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b12:	2300      	movs	r3, #0
 8001b14:	60fb      	str	r3, [r7, #12]
 8001b16:	4b15      	ldr	r3, [pc, #84]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b1a:	4a14      	ldr	r2, [pc, #80]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001b1c:	f043 0302 	orr.w	r3, r3, #2
 8001b20:	6313      	str	r3, [r2, #48]	; 0x30
 8001b22:	4b12      	ldr	r3, [pc, #72]	; (8001b6c <HAL_TIM_Encoder_MspInit+0x98>)
 8001b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	60fb      	str	r3, [r7, #12]
 8001b2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_L1_Pin|EN_L0_Pin;
 8001b2e:	2330      	movs	r3, #48	; 0x30
 8001b30:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b32:	2302      	movs	r3, #2
 8001b34:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001b3e:	2302      	movs	r3, #2
 8001b40:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b42:	f107 0314 	add.w	r3, r7, #20
 8001b46:	4619      	mov	r1, r3
 8001b48:	4809      	ldr	r0, [pc, #36]	; (8001b70 <HAL_TIM_Encoder_MspInit+0x9c>)
 8001b4a:	f001 f929 	bl	8002da0 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001b4e:	2200      	movs	r2, #0
 8001b50:	2100      	movs	r1, #0
 8001b52:	201d      	movs	r0, #29
 8001b54:	f000 fd71 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001b58:	201d      	movs	r0, #29
 8001b5a:	f000 fd8a 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b5e:	bf00      	nop
 8001b60:	3728      	adds	r7, #40	; 0x28
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000400 	.word	0x40000400
 8001b6c:	40023800 	.word	0x40023800
 8001b70:	40020400 	.word	0x40020400

08001b74 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b08a      	sub	sp, #40	; 0x28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b7c:	f107 0314 	add.w	r3, r7, #20
 8001b80:	2200      	movs	r2, #0
 8001b82:	601a      	str	r2, [r3, #0]
 8001b84:	605a      	str	r2, [r3, #4]
 8001b86:	609a      	str	r2, [r3, #8]
 8001b88:	60da      	str	r2, [r3, #12]
 8001b8a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a25      	ldr	r2, [pc, #148]	; (8001c28 <HAL_TIM_MspPostInit+0xb4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d11f      	bne.n	8001bd6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b96:	2300      	movs	r3, #0
 8001b98:	613b      	str	r3, [r7, #16]
 8001b9a:	4b24      	ldr	r3, [pc, #144]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b9e:	4a23      	ldr	r2, [pc, #140]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001ba0:	f043 0304 	orr.w	r3, r3, #4
 8001ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8001ba6:	4b21      	ldr	r3, [pc, #132]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001baa:	f003 0304 	and.w	r3, r3, #4
 8001bae:	613b      	str	r3, [r7, #16]
 8001bb0:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_R1_Pin|MOTOR_R0_Pin|MOTOR_L1_Pin|MOTOR_L0_Pin;
 8001bb2:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8001bb6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bb8:	2302      	movs	r3, #2
 8001bba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	4619      	mov	r1, r3
 8001bce:	4818      	ldr	r0, [pc, #96]	; (8001c30 <HAL_TIM_MspPostInit+0xbc>)
 8001bd0:	f001 f8e6 	bl	8002da0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001bd4:	e023      	b.n	8001c1e <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	4a16      	ldr	r2, [pc, #88]	; (8001c34 <HAL_TIM_MspPostInit+0xc0>)
 8001bdc:	4293      	cmp	r3, r2
 8001bde:	d11e      	bne.n	8001c1e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be0:	2300      	movs	r3, #0
 8001be2:	60fb      	str	r3, [r7, #12]
 8001be4:	4b11      	ldr	r3, [pc, #68]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001be6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be8:	4a10      	ldr	r2, [pc, #64]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001bea:	f043 0302 	orr.w	r3, r3, #2
 8001bee:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf0:	4b0e      	ldr	r3, [pc, #56]	; (8001c2c <HAL_TIM_MspPostInit+0xb8>)
 8001bf2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	60fb      	str	r3, [r7, #12]
 8001bfa:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4807      	ldr	r0, [pc, #28]	; (8001c38 <HAL_TIM_MspPostInit+0xc4>)
 8001c1a:	f001 f8c1 	bl	8002da0 <HAL_GPIO_Init>
}
 8001c1e:	bf00      	nop
 8001c20:	3728      	adds	r7, #40	; 0x28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}
 8001c26:	bf00      	nop
 8001c28:	40010400 	.word	0x40010400
 8001c2c:	40023800 	.word	0x40023800
 8001c30:	40020800 	.word	0x40020800
 8001c34:	40014400 	.word	0x40014400
 8001c38:	40020400 	.word	0x40020400

08001c3c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b08a      	sub	sp, #40	; 0x28
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c44:	f107 0314 	add.w	r3, r7, #20
 8001c48:	2200      	movs	r2, #0
 8001c4a:	601a      	str	r2, [r3, #0]
 8001c4c:	605a      	str	r2, [r3, #4]
 8001c4e:	609a      	str	r2, [r3, #8]
 8001c50:	60da      	str	r2, [r3, #12]
 8001c52:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	4a1d      	ldr	r2, [pc, #116]	; (8001cd0 <HAL_UART_MspInit+0x94>)
 8001c5a:	4293      	cmp	r3, r2
 8001c5c:	d134      	bne.n	8001cc8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c5e:	2300      	movs	r3, #0
 8001c60:	613b      	str	r3, [r7, #16]
 8001c62:	4b1c      	ldr	r3, [pc, #112]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c66:	4a1b      	ldr	r2, [pc, #108]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c6e:	4b19      	ldr	r3, [pc, #100]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c72:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001c76:	613b      	str	r3, [r7, #16]
 8001c78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	60fb      	str	r3, [r7, #12]
 8001c7e:	4b15      	ldr	r3, [pc, #84]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c82:	4a14      	ldr	r2, [pc, #80]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	6313      	str	r3, [r2, #48]	; 0x30
 8001c8a:	4b12      	ldr	r3, [pc, #72]	; (8001cd4 <HAL_UART_MspInit+0x98>)
 8001c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001c96:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001c9a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001ca8:	2307      	movs	r3, #7
 8001caa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cac:	f107 0314 	add.w	r3, r7, #20
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4809      	ldr	r0, [pc, #36]	; (8001cd8 <HAL_UART_MspInit+0x9c>)
 8001cb4:	f001 f874 	bl	8002da0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001cb8:	2200      	movs	r2, #0
 8001cba:	2100      	movs	r1, #0
 8001cbc:	2027      	movs	r0, #39	; 0x27
 8001cbe:	f000 fcbc 	bl	800263a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001cc2:	2027      	movs	r0, #39	; 0x27
 8001cc4:	f000 fcd5 	bl	8002672 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001cc8:	bf00      	nop
 8001cca:	3728      	adds	r7, #40	; 0x28
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	bd80      	pop	{r7, pc}
 8001cd0:	40004800 	.word	0x40004800
 8001cd4:	40023800 	.word	0x40023800
 8001cd8:	40020400 	.word	0x40020400

08001cdc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ce0:	e7fe      	b.n	8001ce0 <NMI_Handler+0x4>

08001ce2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ce2:	b480      	push	{r7}
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ce6:	e7fe      	b.n	8001ce6 <HardFault_Handler+0x4>

08001ce8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cec:	e7fe      	b.n	8001cec <MemManage_Handler+0x4>

08001cee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cee:	b480      	push	{r7}
 8001cf0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cf2:	e7fe      	b.n	8001cf2 <BusFault_Handler+0x4>

08001cf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cf8:	e7fe      	b.n	8001cf8 <UsageFault_Handler+0x4>

08001cfa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cfa:	b480      	push	{r7}
 8001cfc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cfe:	bf00      	nop
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr

08001d16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d16:	b480      	push	{r7}
 8001d18:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	46bd      	mov	sp, r7
 8001d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d22:	4770      	bx	lr

08001d24 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d28:	f000 f92a 	bl	8001f80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d2c:	bf00      	nop
 8001d2e:	bd80      	pop	{r7, pc}

08001d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001d34:	4802      	ldr	r0, [pc, #8]	; (8001d40 <TIM2_IRQHandler+0x10>)
 8001d36:	f002 f9b0 	bl	800409a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001d3a:	bf00      	nop
 8001d3c:	bd80      	pop	{r7, pc}
 8001d3e:	bf00      	nop
 8001d40:	200003a0 	.word	0x200003a0

08001d44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001d48:	4802      	ldr	r0, [pc, #8]	; (8001d54 <TIM3_IRQHandler+0x10>)
 8001d4a:	f002 f9a6 	bl	800409a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001d4e:	bf00      	nop
 8001d50:	bd80      	pop	{r7, pc}
 8001d52:	bf00      	nop
 8001d54:	200003e8 	.word	0x200003e8

08001d58 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001d5c:	4802      	ldr	r0, [pc, #8]	; (8001d68 <TIM4_IRQHandler+0x10>)
 8001d5e:	f002 f99c 	bl	800409a <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001d62:	bf00      	nop
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	20000430 	.word	0x20000430

08001d6c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001d70:	4802      	ldr	r0, [pc, #8]	; (8001d7c <USART3_IRQHandler+0x10>)
 8001d72:	f003 fb15 	bl	80053a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001d76:	bf00      	nop
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	20000508 	.word	0x20000508

08001d80 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001d84:	4802      	ldr	r0, [pc, #8]	; (8001d90 <DMA2_Stream0_IRQHandler+0x10>)
 8001d86:	f000 fdcf 	bl	8002928 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001d8a:	bf00      	nop
 8001d8c:	bd80      	pop	{r7, pc}
 8001d8e:	bf00      	nop
 8001d90:	20000340 	.word	0x20000340

08001d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b086      	sub	sp, #24
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d9c:	4a14      	ldr	r2, [pc, #80]	; (8001df0 <_sbrk+0x5c>)
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <_sbrk+0x60>)
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da8:	4b13      	ldr	r3, [pc, #76]	; (8001df8 <_sbrk+0x64>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d102      	bne.n	8001db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001db0:	4b11      	ldr	r3, [pc, #68]	; (8001df8 <_sbrk+0x64>)
 8001db2:	4a12      	ldr	r2, [pc, #72]	; (8001dfc <_sbrk+0x68>)
 8001db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001db6:	4b10      	ldr	r3, [pc, #64]	; (8001df8 <_sbrk+0x64>)
 8001db8:	681a      	ldr	r2, [r3, #0]
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4413      	add	r3, r2
 8001dbe:	693a      	ldr	r2, [r7, #16]
 8001dc0:	429a      	cmp	r2, r3
 8001dc2:	d207      	bcs.n	8001dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dc4:	f004 fb28 	bl	8006418 <__errno>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	220c      	movs	r2, #12
 8001dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dce:	f04f 33ff 	mov.w	r3, #4294967295
 8001dd2:	e009      	b.n	8001de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dd4:	4b08      	ldr	r3, [pc, #32]	; (8001df8 <_sbrk+0x64>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dda:	4b07      	ldr	r3, [pc, #28]	; (8001df8 <_sbrk+0x64>)
 8001ddc:	681a      	ldr	r2, [r3, #0]
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4413      	add	r3, r2
 8001de2:	4a05      	ldr	r2, [pc, #20]	; (8001df8 <_sbrk+0x64>)
 8001de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001de6:	68fb      	ldr	r3, [r7, #12]
}
 8001de8:	4618      	mov	r0, r3
 8001dea:	3718      	adds	r7, #24
 8001dec:	46bd      	mov	sp, r7
 8001dee:	bd80      	pop	{r7, pc}
 8001df0:	20020000 	.word	0x20020000
 8001df4:	00000400 	.word	0x00000400
 8001df8:	20000558 	.word	0x20000558
 8001dfc:	200006a8 	.word	0x200006a8

08001e00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001e00:	b480      	push	{r7}
 8001e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <SystemInit+0x20>)
 8001e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e0a:	4a05      	ldr	r2, [pc, #20]	; (8001e20 <SystemInit+0x20>)
 8001e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e14:	bf00      	nop
 8001e16:	46bd      	mov	sp, r7
 8001e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1c:	4770      	bx	lr
 8001e1e:	bf00      	nop
 8001e20:	e000ed00 	.word	0xe000ed00

08001e24 <ultraSonic_Init>:
#include "ultraSonic.h"

void ultraSonic_Init(ultraSonic *sensor, TIM_HandleTypeDef *htim, average_filter *filter, GPIO_TypeDef *TrigPort, uint16_t TrigPin)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b084      	sub	sp, #16
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	60f8      	str	r0, [r7, #12]
 8001e2c:	60b9      	str	r1, [r7, #8]
 8001e2e:	607a      	str	r2, [r7, #4]
 8001e30:	603b      	str	r3, [r7, #0]
    sensor->htim = htim;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	68ba      	ldr	r2, [r7, #8]
 8001e36:	601a      	str	r2, [r3, #0]
    sensor->pre_time = 0;
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	809a      	strh	r2, [r3, #4]
    sensor->distance = 0;
 8001e3e:	68f9      	ldr	r1, [r7, #12]
 8001e40:	f04f 0200 	mov.w	r2, #0
 8001e44:	f04f 0300 	mov.w	r3, #0
 8001e48:	e9c1 2302 	strd	r2, r3, [r1, #8]
    sensor->TrigPort = TrigPort;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	683a      	ldr	r2, [r7, #0]
 8001e50:	611a      	str	r2, [r3, #16]
    sensor->TrigPin = TrigPin;
 8001e52:	8b3a      	ldrh	r2, [r7, #24]
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	615a      	str	r2, [r3, #20]
    sensor->echoHigh = false;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	761a      	strb	r2, [r3, #24]
    sensor->filter = filter;
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	687a      	ldr	r2, [r7, #4]
 8001e62:	61da      	str	r2, [r3, #28]
    HAL_GPIO_WritePin(sensor->TrigPort, sensor->TrigPin, 0);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	6918      	ldr	r0, [r3, #16]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	695b      	ldr	r3, [r3, #20]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	2200      	movs	r2, #0
 8001e70:	4619      	mov	r1, r3
 8001e72:	f001 f931 	bl	80030d8 <HAL_GPIO_WritePin>
    reset_buffer(sensor->filter);
 8001e76:	68fb      	ldr	r3, [r7, #12]
 8001e78:	69db      	ldr	r3, [r3, #28]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7fe fc49 	bl	8000712 <reset_buffer>
}
 8001e80:	bf00      	nop
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001e8c:	480d      	ldr	r0, [pc, #52]	; (8001ec4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001e8e:	490e      	ldr	r1, [pc, #56]	; (8001ec8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001e90:	4a0e      	ldr	r2, [pc, #56]	; (8001ecc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001e92:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001e94:	e002      	b.n	8001e9c <LoopCopyDataInit>

08001e96 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001e96:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001e98:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001e9a:	3304      	adds	r3, #4

08001e9c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e9c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e9e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ea0:	d3f9      	bcc.n	8001e96 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001ea4:	4c0b      	ldr	r4, [pc, #44]	; (8001ed4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001ea6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001ea8:	e001      	b.n	8001eae <LoopFillZerobss>

08001eaa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001eaa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001eac:	3204      	adds	r2, #4

08001eae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001eae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001eb0:	d3fb      	bcc.n	8001eaa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001eb2:	f7ff ffa5 	bl	8001e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f004 fab5 	bl	8006424 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001eba:	f7fe fdef 	bl	8000a9c <main>
  bx  lr    
 8001ebe:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001ec0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001ec8:	200000dc 	.word	0x200000dc
  ldr r2, =_sidata
 8001ecc:	080065c0 	.word	0x080065c0
  ldr r2, =_sbss
 8001ed0:	200000e0 	.word	0x200000e0
  ldr r4, =_ebss
 8001ed4:	200006a8 	.word	0x200006a8

08001ed8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC_IRQHandler>
	...

08001edc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001ee0:	4b0e      	ldr	r3, [pc, #56]	; (8001f1c <HAL_Init+0x40>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	4a0d      	ldr	r2, [pc, #52]	; (8001f1c <HAL_Init+0x40>)
 8001ee6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001eea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001eec:	4b0b      	ldr	r3, [pc, #44]	; (8001f1c <HAL_Init+0x40>)
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <HAL_Init+0x40>)
 8001ef2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ef6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ef8:	4b08      	ldr	r3, [pc, #32]	; (8001f1c <HAL_Init+0x40>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a07      	ldr	r2, [pc, #28]	; (8001f1c <HAL_Init+0x40>)
 8001efe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f02:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001f04:	2003      	movs	r0, #3
 8001f06:	f000 fb8d 	bl	8002624 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	f000 f808 	bl	8001f20 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f10:	f7ff fc76 	bl	8001800 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001f28:	4b12      	ldr	r3, [pc, #72]	; (8001f74 <HAL_InitTick+0x54>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b12      	ldr	r3, [pc, #72]	; (8001f78 <HAL_InitTick+0x58>)
 8001f2e:	781b      	ldrb	r3, [r3, #0]
 8001f30:	4619      	mov	r1, r3
 8001f32:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001f36:	fbb3 f3f1 	udiv	r3, r3, r1
 8001f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f000 fba5 	bl	800268e <HAL_SYSTICK_Config>
 8001f44:	4603      	mov	r3, r0
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d001      	beq.n	8001f4e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001f4a:	2301      	movs	r3, #1
 8001f4c:	e00e      	b.n	8001f6c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b0f      	cmp	r3, #15
 8001f52:	d80a      	bhi.n	8001f6a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001f54:	2200      	movs	r2, #0
 8001f56:	6879      	ldr	r1, [r7, #4]
 8001f58:	f04f 30ff 	mov.w	r0, #4294967295
 8001f5c:	f000 fb6d 	bl	800263a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001f60:	4a06      	ldr	r2, [pc, #24]	; (8001f7c <HAL_InitTick+0x5c>)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
 8001f68:	e000      	b.n	8001f6c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001f6a:	2301      	movs	r3, #1
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	3708      	adds	r7, #8
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000080 	.word	0x20000080
 8001f78:	20000088 	.word	0x20000088
 8001f7c:	20000084 	.word	0x20000084

08001f80 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001f80:	b480      	push	{r7}
 8001f82:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001f84:	4b06      	ldr	r3, [pc, #24]	; (8001fa0 <HAL_IncTick+0x20>)
 8001f86:	781b      	ldrb	r3, [r3, #0]
 8001f88:	461a      	mov	r2, r3
 8001f8a:	4b06      	ldr	r3, [pc, #24]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	4413      	add	r3, r2
 8001f90:	4a04      	ldr	r2, [pc, #16]	; (8001fa4 <HAL_IncTick+0x24>)
 8001f92:	6013      	str	r3, [r2, #0]
}
 8001f94:	bf00      	nop
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000088 	.word	0x20000088
 8001fa4:	2000055c 	.word	0x2000055c

08001fa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	af00      	add	r7, sp, #0
  return uwTick;
 8001fac:	4b03      	ldr	r3, [pc, #12]	; (8001fbc <HAL_GetTick+0x14>)
 8001fae:	681b      	ldr	r3, [r3, #0]
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	2000055c 	.word	0x2000055c

08001fc0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d101      	bne.n	8001fd6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e033      	b.n	800203e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001fde:	6878      	ldr	r0, [r7, #4]
 8001fe0:	f7ff fc36 	bl	8001850 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	2200      	movs	r2, #0
 8001fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d118      	bne.n	8002030 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002002:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002006:	f023 0302 	bic.w	r3, r3, #2
 800200a:	f043 0202 	orr.w	r2, r3, #2
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f000 f93a 	bl	800228c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f023 0303 	bic.w	r3, r3, #3
 8002026:	f043 0201 	orr.w	r2, r3, #1
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	641a      	str	r2, [r3, #64]	; 0x40
 800202e:	e001      	b.n	8002034 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002030:	2301      	movs	r3, #1
 8002032:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800203c:	7bfb      	ldrb	r3, [r7, #15]
}
 800203e:	4618      	mov	r0, r3
 8002040:	3710      	adds	r7, #16
 8002042:	46bd      	mov	sp, r7
 8002044:	bd80      	pop	{r7, pc}
	...

08002048 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002048:	b480      	push	{r7}
 800204a:	b085      	sub	sp, #20
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002052:	2300      	movs	r3, #0
 8002054:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800205c:	2b01      	cmp	r3, #1
 800205e:	d101      	bne.n	8002064 <HAL_ADC_ConfigChannel+0x1c>
 8002060:	2302      	movs	r3, #2
 8002062:	e105      	b.n	8002270 <HAL_ADC_ConfigChannel+0x228>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	2201      	movs	r2, #1
 8002068:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	2b09      	cmp	r3, #9
 8002072:	d925      	bls.n	80020c0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	68d9      	ldr	r1, [r3, #12]
 800207a:	683b      	ldr	r3, [r7, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	b29b      	uxth	r3, r3
 8002080:	461a      	mov	r2, r3
 8002082:	4613      	mov	r3, r2
 8002084:	005b      	lsls	r3, r3, #1
 8002086:	4413      	add	r3, r2
 8002088:	3b1e      	subs	r3, #30
 800208a:	2207      	movs	r2, #7
 800208c:	fa02 f303 	lsl.w	r3, r2, r3
 8002090:	43da      	mvns	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	400a      	ands	r2, r1
 8002098:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	68d9      	ldr	r1, [r3, #12]
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	b29b      	uxth	r3, r3
 80020aa:	4618      	mov	r0, r3
 80020ac:	4603      	mov	r3, r0
 80020ae:	005b      	lsls	r3, r3, #1
 80020b0:	4403      	add	r3, r0
 80020b2:	3b1e      	subs	r3, #30
 80020b4:	409a      	lsls	r2, r3
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	430a      	orrs	r2, r1
 80020bc:	60da      	str	r2, [r3, #12]
 80020be:	e022      	b.n	8002106 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	6919      	ldr	r1, [r3, #16]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	b29b      	uxth	r3, r3
 80020cc:	461a      	mov	r2, r3
 80020ce:	4613      	mov	r3, r2
 80020d0:	005b      	lsls	r3, r3, #1
 80020d2:	4413      	add	r3, r2
 80020d4:	2207      	movs	r2, #7
 80020d6:	fa02 f303 	lsl.w	r3, r2, r3
 80020da:	43da      	mvns	r2, r3
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	400a      	ands	r2, r1
 80020e2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	6919      	ldr	r1, [r3, #16]
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	689a      	ldr	r2, [r3, #8]
 80020ee:	683b      	ldr	r3, [r7, #0]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	b29b      	uxth	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	4603      	mov	r3, r0
 80020f8:	005b      	lsls	r3, r3, #1
 80020fa:	4403      	add	r3, r0
 80020fc:	409a      	lsls	r2, r3
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	430a      	orrs	r2, r1
 8002104:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	2b06      	cmp	r3, #6
 800210c:	d824      	bhi.n	8002158 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002114:	683b      	ldr	r3, [r7, #0]
 8002116:	685a      	ldr	r2, [r3, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	4413      	add	r3, r2
 800211e:	3b05      	subs	r3, #5
 8002120:	221f      	movs	r2, #31
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43da      	mvns	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	400a      	ands	r2, r1
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	b29b      	uxth	r3, r3
 800213c:	4618      	mov	r0, r3
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685a      	ldr	r2, [r3, #4]
 8002142:	4613      	mov	r3, r2
 8002144:	009b      	lsls	r3, r3, #2
 8002146:	4413      	add	r3, r2
 8002148:	3b05      	subs	r3, #5
 800214a:	fa00 f203 	lsl.w	r2, r0, r3
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	430a      	orrs	r2, r1
 8002154:	635a      	str	r2, [r3, #52]	; 0x34
 8002156:	e04c      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002158:	683b      	ldr	r3, [r7, #0]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d824      	bhi.n	80021aa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	4613      	mov	r3, r2
 800216c:	009b      	lsls	r3, r3, #2
 800216e:	4413      	add	r3, r2
 8002170:	3b23      	subs	r3, #35	; 0x23
 8002172:	221f      	movs	r2, #31
 8002174:	fa02 f303 	lsl.w	r3, r2, r3
 8002178:	43da      	mvns	r2, r3
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	400a      	ands	r2, r1
 8002180:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	b29b      	uxth	r3, r3
 800218e:	4618      	mov	r0, r3
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685a      	ldr	r2, [r3, #4]
 8002194:	4613      	mov	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	4413      	add	r3, r2
 800219a:	3b23      	subs	r3, #35	; 0x23
 800219c:	fa00 f203 	lsl.w	r2, r0, r3
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	430a      	orrs	r2, r1
 80021a6:	631a      	str	r2, [r3, #48]	; 0x30
 80021a8:	e023      	b.n	80021f2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685a      	ldr	r2, [r3, #4]
 80021b4:	4613      	mov	r3, r2
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	4413      	add	r3, r2
 80021ba:	3b41      	subs	r3, #65	; 0x41
 80021bc:	221f      	movs	r2, #31
 80021be:	fa02 f303 	lsl.w	r3, r2, r3
 80021c2:	43da      	mvns	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	400a      	ands	r2, r1
 80021ca:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	b29b      	uxth	r3, r3
 80021d8:	4618      	mov	r0, r3
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	685a      	ldr	r2, [r3, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	009b      	lsls	r3, r3, #2
 80021e2:	4413      	add	r3, r2
 80021e4:	3b41      	subs	r3, #65	; 0x41
 80021e6:	fa00 f203 	lsl.w	r2, r0, r3
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	430a      	orrs	r2, r1
 80021f0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021f2:	4b22      	ldr	r3, [pc, #136]	; (800227c <HAL_ADC_ConfigChannel+0x234>)
 80021f4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	4a21      	ldr	r2, [pc, #132]	; (8002280 <HAL_ADC_ConfigChannel+0x238>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1cc>
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	2b12      	cmp	r3, #18
 8002206:	d105      	bne.n	8002214 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_ADC_ConfigChannel+0x238>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d123      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21e>
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	2b10      	cmp	r3, #16
 8002224:	d003      	beq.n	800222e <HAL_ADC_ConfigChannel+0x1e6>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	2b11      	cmp	r3, #17
 800222c:	d11b      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	2b10      	cmp	r3, #16
 8002240:	d111      	bne.n	8002266 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_ADC_ConfigChannel+0x23c>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a10      	ldr	r2, [pc, #64]	; (8002288 <HAL_ADC_ConfigChannel+0x240>)
 8002248:	fba2 2303 	umull	r2, r3, r2, r3
 800224c:	0c9a      	lsrs	r2, r3, #18
 800224e:	4613      	mov	r3, r2
 8002250:	009b      	lsls	r3, r3, #2
 8002252:	4413      	add	r3, r2
 8002254:	005b      	lsls	r3, r3, #1
 8002256:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002258:	e002      	b.n	8002260 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800225a:	68bb      	ldr	r3, [r7, #8]
 800225c:	3b01      	subs	r3, #1
 800225e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1f9      	bne.n	800225a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2200      	movs	r2, #0
 800226a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800226e:	2300      	movs	r3, #0
}
 8002270:	4618      	mov	r0, r3
 8002272:	3714      	adds	r7, #20
 8002274:	46bd      	mov	sp, r7
 8002276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227a:	4770      	bx	lr
 800227c:	40012300 	.word	0x40012300
 8002280:	40012000 	.word	0x40012000
 8002284:	20000080 	.word	0x20000080
 8002288:	431bde83 	.word	0x431bde83

0800228c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800228c:	b480      	push	{r7}
 800228e:	b085      	sub	sp, #20
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002294:	4b79      	ldr	r3, [pc, #484]	; (800247c <ADC_Init+0x1f0>)
 8002296:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	685a      	ldr	r2, [r3, #4]
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	685b      	ldr	r3, [r3, #4]
 80022ac:	431a      	orrs	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	685a      	ldr	r2, [r3, #4]
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80022c0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6859      	ldr	r1, [r3, #4]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	691b      	ldr	r3, [r3, #16]
 80022cc:	021a      	lsls	r2, r3, #8
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	430a      	orrs	r2, r1
 80022d4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	685a      	ldr	r2, [r3, #4]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80022e4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	6859      	ldr	r1, [r3, #4]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	689a      	ldr	r2, [r3, #8]
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	430a      	orrs	r2, r1
 80022f6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	689a      	ldr	r2, [r3, #8]
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	6899      	ldr	r1, [r3, #8]
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	68da      	ldr	r2, [r3, #12]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	430a      	orrs	r2, r1
 8002318:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800231e:	4a58      	ldr	r2, [pc, #352]	; (8002480 <ADC_Init+0x1f4>)
 8002320:	4293      	cmp	r3, r2
 8002322:	d022      	beq.n	800236a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	689a      	ldr	r2, [r3, #8]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002332:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	6899      	ldr	r1, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	430a      	orrs	r2, r1
 8002344:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	689a      	ldr	r2, [r3, #8]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002354:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	6899      	ldr	r1, [r3, #8]
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	430a      	orrs	r2, r1
 8002366:	609a      	str	r2, [r3, #8]
 8002368:	e00f      	b.n	800238a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	689a      	ldr	r2, [r3, #8]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002378:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	689a      	ldr	r2, [r3, #8]
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002388:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	689a      	ldr	r2, [r3, #8]
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f022 0202 	bic.w	r2, r2, #2
 8002398:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	6899      	ldr	r1, [r3, #8]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7e1b      	ldrb	r3, [r3, #24]
 80023a4:	005a      	lsls	r2, r3, #1
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	430a      	orrs	r2, r1
 80023ac:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d01b      	beq.n	80023f0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	685a      	ldr	r2, [r3, #4]
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80023c6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	685a      	ldr	r2, [r3, #4]
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80023d6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	6859      	ldr	r1, [r3, #4]
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e2:	3b01      	subs	r3, #1
 80023e4:	035a      	lsls	r2, r3, #13
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	605a      	str	r2, [r3, #4]
 80023ee:	e007      	b.n	8002400 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	685a      	ldr	r2, [r3, #4]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80023fe:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800240e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69db      	ldr	r3, [r3, #28]
 800241a:	3b01      	subs	r3, #1
 800241c:	051a      	lsls	r2, r3, #20
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	681b      	ldr	r3, [r3, #0]
 8002422:	430a      	orrs	r2, r1
 8002424:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	689a      	ldr	r2, [r3, #8]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002434:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6899      	ldr	r1, [r3, #8]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002442:	025a      	lsls	r2, r3, #9
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	430a      	orrs	r2, r1
 800244a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	689a      	ldr	r2, [r3, #8]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800245a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	695b      	ldr	r3, [r3, #20]
 8002466:	029a      	lsls	r2, r3, #10
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	430a      	orrs	r2, r1
 800246e:	609a      	str	r2, [r3, #8]
}
 8002470:	bf00      	nop
 8002472:	3714      	adds	r7, #20
 8002474:	46bd      	mov	sp, r7
 8002476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247a:	4770      	bx	lr
 800247c:	40012300 	.word	0x40012300
 8002480:	0f000001 	.word	0x0f000001

08002484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	f003 0307 	and.w	r3, r3, #7
 8002492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002494:	4b0c      	ldr	r3, [pc, #48]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800249a:	68ba      	ldr	r2, [r7, #8]
 800249c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80024a0:	4013      	ands	r3, r2
 80024a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80024a8:	68bb      	ldr	r3, [r7, #8]
 80024aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80024ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80024b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80024b6:	4a04      	ldr	r2, [pc, #16]	; (80024c8 <__NVIC_SetPriorityGrouping+0x44>)
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	60d3      	str	r3, [r2, #12]
}
 80024bc:	bf00      	nop
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr
 80024c8:	e000ed00 	.word	0xe000ed00

080024cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024d0:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <__NVIC_GetPriorityGrouping+0x18>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	0a1b      	lsrs	r3, r3, #8
 80024d6:	f003 0307 	and.w	r3, r3, #7
}
 80024da:	4618      	mov	r0, r3
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000ed00 	.word	0xe000ed00

080024e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024e8:	b480      	push	{r7}
 80024ea:	b083      	sub	sp, #12
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	4603      	mov	r3, r0
 80024f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	db0b      	blt.n	8002512 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024fa:	79fb      	ldrb	r3, [r7, #7]
 80024fc:	f003 021f 	and.w	r2, r3, #31
 8002500:	4907      	ldr	r1, [pc, #28]	; (8002520 <__NVIC_EnableIRQ+0x38>)
 8002502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002506:	095b      	lsrs	r3, r3, #5
 8002508:	2001      	movs	r0, #1
 800250a:	fa00 f202 	lsl.w	r2, r0, r2
 800250e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	e000e100 	.word	0xe000e100

08002524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	6039      	str	r1, [r7, #0]
 800252e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002534:	2b00      	cmp	r3, #0
 8002536:	db0a      	blt.n	800254e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	b2da      	uxtb	r2, r3
 800253c:	490c      	ldr	r1, [pc, #48]	; (8002570 <__NVIC_SetPriority+0x4c>)
 800253e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002542:	0112      	lsls	r2, r2, #4
 8002544:	b2d2      	uxtb	r2, r2
 8002546:	440b      	add	r3, r1
 8002548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800254c:	e00a      	b.n	8002564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	b2da      	uxtb	r2, r3
 8002552:	4908      	ldr	r1, [pc, #32]	; (8002574 <__NVIC_SetPriority+0x50>)
 8002554:	79fb      	ldrb	r3, [r7, #7]
 8002556:	f003 030f 	and.w	r3, r3, #15
 800255a:	3b04      	subs	r3, #4
 800255c:	0112      	lsls	r2, r2, #4
 800255e:	b2d2      	uxtb	r2, r2
 8002560:	440b      	add	r3, r1
 8002562:	761a      	strb	r2, [r3, #24]
}
 8002564:	bf00      	nop
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	e000e100 	.word	0xe000e100
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002578:	b480      	push	{r7}
 800257a:	b089      	sub	sp, #36	; 0x24
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	f003 0307 	and.w	r3, r3, #7
 800258a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800258c:	69fb      	ldr	r3, [r7, #28]
 800258e:	f1c3 0307 	rsb	r3, r3, #7
 8002592:	2b04      	cmp	r3, #4
 8002594:	bf28      	it	cs
 8002596:	2304      	movcs	r3, #4
 8002598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	3304      	adds	r3, #4
 800259e:	2b06      	cmp	r3, #6
 80025a0:	d902      	bls.n	80025a8 <NVIC_EncodePriority+0x30>
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	3b03      	subs	r3, #3
 80025a6:	e000      	b.n	80025aa <NVIC_EncodePriority+0x32>
 80025a8:	2300      	movs	r3, #0
 80025aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025ac:	f04f 32ff 	mov.w	r2, #4294967295
 80025b0:	69bb      	ldr	r3, [r7, #24]
 80025b2:	fa02 f303 	lsl.w	r3, r2, r3
 80025b6:	43da      	mvns	r2, r3
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	401a      	ands	r2, r3
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025c0:	f04f 31ff 	mov.w	r1, #4294967295
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	fa01 f303 	lsl.w	r3, r1, r3
 80025ca:	43d9      	mvns	r1, r3
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025d0:	4313      	orrs	r3, r2
         );
}
 80025d2:	4618      	mov	r0, r3
 80025d4:	3724      	adds	r7, #36	; 0x24
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b082      	sub	sp, #8
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	3b01      	subs	r3, #1
 80025ec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025f0:	d301      	bcc.n	80025f6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025f2:	2301      	movs	r3, #1
 80025f4:	e00f      	b.n	8002616 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025f6:	4a0a      	ldr	r2, [pc, #40]	; (8002620 <SysTick_Config+0x40>)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	3b01      	subs	r3, #1
 80025fc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025fe:	210f      	movs	r1, #15
 8002600:	f04f 30ff 	mov.w	r0, #4294967295
 8002604:	f7ff ff8e 	bl	8002524 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002608:	4b05      	ldr	r3, [pc, #20]	; (8002620 <SysTick_Config+0x40>)
 800260a:	2200      	movs	r2, #0
 800260c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800260e:	4b04      	ldr	r3, [pc, #16]	; (8002620 <SysTick_Config+0x40>)
 8002610:	2207      	movs	r2, #7
 8002612:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002614:	2300      	movs	r3, #0
}
 8002616:	4618      	mov	r0, r3
 8002618:	3708      	adds	r7, #8
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}
 800261e:	bf00      	nop
 8002620:	e000e010 	.word	0xe000e010

08002624 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	b082      	sub	sp, #8
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f7ff ff29 	bl	8002484 <__NVIC_SetPriorityGrouping>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800263a:	b580      	push	{r7, lr}
 800263c:	b086      	sub	sp, #24
 800263e:	af00      	add	r7, sp, #0
 8002640:	4603      	mov	r3, r0
 8002642:	60b9      	str	r1, [r7, #8]
 8002644:	607a      	str	r2, [r7, #4]
 8002646:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002648:	2300      	movs	r3, #0
 800264a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800264c:	f7ff ff3e 	bl	80024cc <__NVIC_GetPriorityGrouping>
 8002650:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002652:	687a      	ldr	r2, [r7, #4]
 8002654:	68b9      	ldr	r1, [r7, #8]
 8002656:	6978      	ldr	r0, [r7, #20]
 8002658:	f7ff ff8e 	bl	8002578 <NVIC_EncodePriority>
 800265c:	4602      	mov	r2, r0
 800265e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002662:	4611      	mov	r1, r2
 8002664:	4618      	mov	r0, r3
 8002666:	f7ff ff5d 	bl	8002524 <__NVIC_SetPriority>
}
 800266a:	bf00      	nop
 800266c:	3718      	adds	r7, #24
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}

08002672 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002672:	b580      	push	{r7, lr}
 8002674:	b082      	sub	sp, #8
 8002676:	af00      	add	r7, sp, #0
 8002678:	4603      	mov	r3, r0
 800267a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800267c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002680:	4618      	mov	r0, r3
 8002682:	f7ff ff31 	bl	80024e8 <__NVIC_EnableIRQ>
}
 8002686:	bf00      	nop
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ffa2 	bl	80025e0 <SysTick_Config>
 800269c:	4603      	mov	r3, r0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
	...

080026a8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80026b4:	f7ff fc78 	bl	8001fa8 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80026c0:	2301      	movs	r3, #1
 80026c2:	e099      	b.n	80027f8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2200      	movs	r2, #0
 80026d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f022 0201 	bic.w	r2, r2, #1
 80026e2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80026e4:	e00f      	b.n	8002706 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80026e6:	f7ff fc5f 	bl	8001fa8 <HAL_GetTick>
 80026ea:	4602      	mov	r2, r0
 80026ec:	693b      	ldr	r3, [r7, #16]
 80026ee:	1ad3      	subs	r3, r2, r3
 80026f0:	2b05      	cmp	r3, #5
 80026f2:	d908      	bls.n	8002706 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2220      	movs	r2, #32
 80026f8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2203      	movs	r2, #3
 80026fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002702:	2303      	movs	r3, #3
 8002704:	e078      	b.n	80027f8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	f003 0301 	and.w	r3, r3, #1
 8002710:	2b00      	cmp	r3, #0
 8002712:	d1e8      	bne.n	80026e6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800271c:	697a      	ldr	r2, [r7, #20]
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <HAL_DMA_Init+0x158>)
 8002720:	4013      	ands	r3, r2
 8002722:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	685a      	ldr	r2, [r3, #4]
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002732:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	691b      	ldr	r3, [r3, #16]
 8002738:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800273e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	699b      	ldr	r3, [r3, #24]
 8002744:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800274a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6a1b      	ldr	r3, [r3, #32]
 8002750:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002752:	697a      	ldr	r2, [r7, #20]
 8002754:	4313      	orrs	r3, r2
 8002756:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800275c:	2b04      	cmp	r3, #4
 800275e:	d107      	bne.n	8002770 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002768:	4313      	orrs	r3, r2
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	697a      	ldr	r2, [r7, #20]
 8002776:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	695b      	ldr	r3, [r3, #20]
 800277e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002780:	697b      	ldr	r3, [r7, #20]
 8002782:	f023 0307 	bic.w	r3, r3, #7
 8002786:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	4313      	orrs	r3, r2
 8002790:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002796:	2b04      	cmp	r3, #4
 8002798:	d117      	bne.n	80027ca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800279e:	697a      	ldr	r2, [r7, #20]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d00e      	beq.n	80027ca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80027ac:	6878      	ldr	r0, [r7, #4]
 80027ae:	f000 fa7b 	bl	8002ca8 <DMA_CheckFifoParam>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d008      	beq.n	80027ca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2240      	movs	r2, #64	; 0x40
 80027bc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80027c6:	2301      	movs	r3, #1
 80027c8:	e016      	b.n	80027f8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	697a      	ldr	r2, [r7, #20]
 80027d0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f000 fa32 	bl	8002c3c <DMA_CalcBaseAndBitshift>
 80027d8:	4603      	mov	r3, r0
 80027da:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e0:	223f      	movs	r2, #63	; 0x3f
 80027e2:	409a      	lsls	r2, r3
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2201      	movs	r2, #1
 80027f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80027f6:	2300      	movs	r3, #0
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	3718      	adds	r7, #24
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	f010803f 	.word	0xf010803f

08002804 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002810:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002812:	f7ff fbc9 	bl	8001fa8 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800281e:	b2db      	uxtb	r3, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d008      	beq.n	8002836 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002832:	2301      	movs	r3, #1
 8002834:	e052      	b.n	80028dc <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	681a      	ldr	r2, [r3, #0]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0216 	bic.w	r2, r2, #22
 8002844:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	695a      	ldr	r2, [r3, #20]
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002854:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800285a:	2b00      	cmp	r3, #0
 800285c:	d103      	bne.n	8002866 <HAL_DMA_Abort+0x62>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002862:	2b00      	cmp	r3, #0
 8002864:	d007      	beq.n	8002876 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	681a      	ldr	r2, [r3, #0]
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f022 0208 	bic.w	r2, r2, #8
 8002874:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f022 0201 	bic.w	r2, r2, #1
 8002884:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002886:	e013      	b.n	80028b0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002888:	f7ff fb8e 	bl	8001fa8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b05      	cmp	r3, #5
 8002894:	d90c      	bls.n	80028b0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2220      	movs	r2, #32
 800289a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	2203      	movs	r2, #3
 80028a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	2200      	movs	r2, #0
 80028a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80028ac:	2303      	movs	r3, #3
 80028ae:	e015      	b.n	80028dc <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	f003 0301 	and.w	r3, r3, #1
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1e4      	bne.n	8002888 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028c2:	223f      	movs	r2, #63	; 0x3f
 80028c4:	409a      	lsls	r2, r3
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2201      	movs	r2, #1
 80028ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	2200      	movs	r2, #0
 80028d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80028da:	2300      	movs	r3, #0
}
 80028dc:	4618      	mov	r0, r3
 80028de:	3710      	adds	r7, #16
 80028e0:	46bd      	mov	sp, r7
 80028e2:	bd80      	pop	{r7, pc}

080028e4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d004      	beq.n	8002902 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2280      	movs	r2, #128	; 0x80
 80028fc:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e00c      	b.n	800291c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2205      	movs	r2, #5
 8002906:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	681a      	ldr	r2, [r3, #0]
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f022 0201 	bic.w	r2, r2, #1
 8002918:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800291a:	2300      	movs	r3, #0
}
 800291c:	4618      	mov	r0, r3
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr

08002928 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b086      	sub	sp, #24
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002934:	4b8e      	ldr	r3, [pc, #568]	; (8002b70 <HAL_DMA_IRQHandler+0x248>)
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	4a8e      	ldr	r2, [pc, #568]	; (8002b74 <HAL_DMA_IRQHandler+0x24c>)
 800293a:	fba2 2303 	umull	r2, r3, r2, r3
 800293e:	0a9b      	lsrs	r3, r3, #10
 8002940:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002946:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002948:	693b      	ldr	r3, [r7, #16]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002952:	2208      	movs	r2, #8
 8002954:	409a      	lsls	r2, r3
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	4013      	ands	r3, r2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d01a      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	f003 0304 	and.w	r3, r3, #4
 8002968:	2b00      	cmp	r3, #0
 800296a:	d013      	beq.n	8002994 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f022 0204 	bic.w	r2, r2, #4
 800297a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002980:	2208      	movs	r2, #8
 8002982:	409a      	lsls	r2, r3
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800298c:	f043 0201 	orr.w	r2, r3, #1
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002998:	2201      	movs	r2, #1
 800299a:	409a      	lsls	r2, r3
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	4013      	ands	r3, r2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d012      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d00b      	beq.n	80029ca <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029b6:	2201      	movs	r2, #1
 80029b8:	409a      	lsls	r2, r3
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029c2:	f043 0202 	orr.w	r2, r3, #2
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ce:	2204      	movs	r2, #4
 80029d0:	409a      	lsls	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	4013      	ands	r3, r2
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d012      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 0302 	and.w	r3, r3, #2
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00b      	beq.n	8002a00 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029ec:	2204      	movs	r2, #4
 80029ee:	409a      	lsls	r2, r3
 80029f0:	693b      	ldr	r3, [r7, #16]
 80029f2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029f8:	f043 0204 	orr.w	r2, r3, #4
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a04:	2210      	movs	r2, #16
 8002a06:	409a      	lsls	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4013      	ands	r3, r2
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d043      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0308 	and.w	r3, r3, #8
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d03c      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a22:	2210      	movs	r2, #16
 8002a24:	409a      	lsls	r2, r3
 8002a26:	693b      	ldr	r3, [r7, #16]
 8002a28:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d018      	beq.n	8002a6a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d108      	bne.n	8002a58 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d024      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	4798      	blx	r3
 8002a56:	e01f      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d01b      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a64:	6878      	ldr	r0, [r7, #4]
 8002a66:	4798      	blx	r3
 8002a68:	e016      	b.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d107      	bne.n	8002a88 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	681a      	ldr	r2, [r3, #0]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f022 0208 	bic.w	r2, r2, #8
 8002a86:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d003      	beq.n	8002a98 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	6878      	ldr	r0, [r7, #4]
 8002a96:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a9c:	2220      	movs	r2, #32
 8002a9e:	409a      	lsls	r2, r3
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	f000 808f 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f003 0310 	and.w	r3, r3, #16
 8002ab4:	2b00      	cmp	r3, #0
 8002ab6:	f000 8087 	beq.w	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002abe:	2220      	movs	r2, #32
 8002ac0:	409a      	lsls	r2, r3
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002acc:	b2db      	uxtb	r3, r3
 8002ace:	2b05      	cmp	r3, #5
 8002ad0:	d136      	bne.n	8002b40 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	681a      	ldr	r2, [r3, #0]
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f022 0216 	bic.w	r2, r2, #22
 8002ae0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	695a      	ldr	r2, [r3, #20]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002af0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_DMA_IRQHandler+0x1da>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d007      	beq.n	8002b12 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	681a      	ldr	r2, [r3, #0]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f022 0208 	bic.w	r2, r2, #8
 8002b10:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b16:	223f      	movs	r2, #63	; 0x3f
 8002b18:	409a      	lsls	r2, r3
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2201      	movs	r2, #1
 8002b22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d07e      	beq.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b3a:	6878      	ldr	r0, [r7, #4]
 8002b3c:	4798      	blx	r3
        }
        return;
 8002b3e:	e079      	b.n	8002c34 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d01d      	beq.n	8002b8a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d10d      	bne.n	8002b78 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d031      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	4798      	blx	r3
 8002b6c:	e02c      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
 8002b6e:	bf00      	nop
 8002b70:	20000080 	.word	0x20000080
 8002b74:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d023      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b84:	6878      	ldr	r0, [r7, #4]
 8002b86:	4798      	blx	r3
 8002b88:	e01e      	b.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d10f      	bne.n	8002bb8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 0210 	bic.w	r2, r2, #16
 8002ba6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2201      	movs	r2, #1
 8002bac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d003      	beq.n	8002bc8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d032      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002bd4:	f003 0301 	and.w	r3, r3, #1
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d022      	beq.n	8002c22 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2205      	movs	r2, #5
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681a      	ldr	r2, [r3, #0]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f022 0201 	bic.w	r2, r2, #1
 8002bf2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002bf4:	68bb      	ldr	r3, [r7, #8]
 8002bf6:	3301      	adds	r3, #1
 8002bf8:	60bb      	str	r3, [r7, #8]
 8002bfa:	697a      	ldr	r2, [r7, #20]
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d307      	bcc.n	8002c10 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d1f2      	bne.n	8002bf4 <HAL_DMA_IRQHandler+0x2cc>
 8002c0e:	e000      	b.n	8002c12 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002c10:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2201      	movs	r2, #1
 8002c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d005      	beq.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	4798      	blx	r3
 8002c32:	e000      	b.n	8002c36 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002c34:	bf00      	nop
    }
  }
}
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}

08002c3c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	3b10      	subs	r3, #16
 8002c4c:	4a14      	ldr	r2, [pc, #80]	; (8002ca0 <DMA_CalcBaseAndBitshift+0x64>)
 8002c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002c52:	091b      	lsrs	r3, r3, #4
 8002c54:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002c56:	4a13      	ldr	r2, [pc, #76]	; (8002ca4 <DMA_CalcBaseAndBitshift+0x68>)
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	461a      	mov	r2, r3
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2b03      	cmp	r3, #3
 8002c68:	d909      	bls.n	8002c7e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c72:	f023 0303 	bic.w	r3, r3, #3
 8002c76:	1d1a      	adds	r2, r3, #4
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	659a      	str	r2, [r3, #88]	; 0x58
 8002c7c:	e007      	b.n	8002c8e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002c86:	f023 0303 	bic.w	r3, r3, #3
 8002c8a:	687a      	ldr	r2, [r7, #4]
 8002c8c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3714      	adds	r7, #20
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	aaaaaaab 	.word	0xaaaaaaab
 8002ca4:	080065a8 	.word	0x080065a8

08002ca8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002ca8:	b480      	push	{r7}
 8002caa:	b085      	sub	sp, #20
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cb8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	699b      	ldr	r3, [r3, #24]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d11f      	bne.n	8002d02 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2b03      	cmp	r3, #3
 8002cc6:	d856      	bhi.n	8002d76 <DMA_CheckFifoParam+0xce>
 8002cc8:	a201      	add	r2, pc, #4	; (adr r2, 8002cd0 <DMA_CheckFifoParam+0x28>)
 8002cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cce:	bf00      	nop
 8002cd0:	08002ce1 	.word	0x08002ce1
 8002cd4:	08002cf3 	.word	0x08002cf3
 8002cd8:	08002ce1 	.word	0x08002ce1
 8002cdc:	08002d77 	.word	0x08002d77
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ce4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d046      	beq.n	8002d7a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002cec:	2301      	movs	r3, #1
 8002cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cf0:	e043      	b.n	8002d7a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002cfa:	d140      	bne.n	8002d7e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002cfc:	2301      	movs	r3, #1
 8002cfe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d00:	e03d      	b.n	8002d7e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	699b      	ldr	r3, [r3, #24]
 8002d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002d0a:	d121      	bne.n	8002d50 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	2b03      	cmp	r3, #3
 8002d10:	d837      	bhi.n	8002d82 <DMA_CheckFifoParam+0xda>
 8002d12:	a201      	add	r2, pc, #4	; (adr r2, 8002d18 <DMA_CheckFifoParam+0x70>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d29 	.word	0x08002d29
 8002d1c:	08002d2f 	.word	0x08002d2f
 8002d20:	08002d29 	.word	0x08002d29
 8002d24:	08002d41 	.word	0x08002d41
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002d28:	2301      	movs	r3, #1
 8002d2a:	73fb      	strb	r3, [r7, #15]
      break;
 8002d2c:	e030      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d32:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d025      	beq.n	8002d86 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002d3e:	e022      	b.n	8002d86 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002d48:	d11f      	bne.n	8002d8a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002d4e:	e01c      	b.n	8002d8a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002d50:	68bb      	ldr	r3, [r7, #8]
 8002d52:	2b02      	cmp	r3, #2
 8002d54:	d903      	bls.n	8002d5e <DMA_CheckFifoParam+0xb6>
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	2b03      	cmp	r3, #3
 8002d5a:	d003      	beq.n	8002d64 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002d5c:	e018      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	73fb      	strb	r3, [r7, #15]
      break;
 8002d62:	e015      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d68:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d00e      	beq.n	8002d8e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002d70:	2301      	movs	r3, #1
 8002d72:	73fb      	strb	r3, [r7, #15]
      break;
 8002d74:	e00b      	b.n	8002d8e <DMA_CheckFifoParam+0xe6>
      break;
 8002d76:	bf00      	nop
 8002d78:	e00a      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7a:	bf00      	nop
 8002d7c:	e008      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d7e:	bf00      	nop
 8002d80:	e006      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d82:	bf00      	nop
 8002d84:	e004      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d86:	bf00      	nop
 8002d88:	e002      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;   
 8002d8a:	bf00      	nop
 8002d8c:	e000      	b.n	8002d90 <DMA_CheckFifoParam+0xe8>
      break;
 8002d8e:	bf00      	nop
    }
  } 
  
  return status; 
 8002d90:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	3714      	adds	r7, #20
 8002d96:	46bd      	mov	sp, r7
 8002d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9c:	4770      	bx	lr
 8002d9e:	bf00      	nop

08002da0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002dae:	2300      	movs	r3, #0
 8002db0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002db2:	2300      	movs	r3, #0
 8002db4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002db6:	2300      	movs	r3, #0
 8002db8:	61fb      	str	r3, [r7, #28]
 8002dba:	e16b      	b.n	8003094 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dc4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	697a      	ldr	r2, [r7, #20]
 8002dcc:	4013      	ands	r3, r2
 8002dce:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002dd0:	693a      	ldr	r2, [r7, #16]
 8002dd2:	697b      	ldr	r3, [r7, #20]
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	f040 815a 	bne.w	800308e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	f003 0303 	and.w	r3, r3, #3
 8002de2:	2b01      	cmp	r3, #1
 8002de4:	d005      	beq.n	8002df2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002dee:	2b02      	cmp	r3, #2
 8002df0:	d130      	bne.n	8002e54 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002df8:	69fb      	ldr	r3, [r7, #28]
 8002dfa:	005b      	lsls	r3, r3, #1
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8002e02:	43db      	mvns	r3, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4013      	ands	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	68da      	ldr	r2, [r3, #12]
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	fa02 f303 	lsl.w	r3, r2, r3
 8002e16:	69ba      	ldr	r2, [r7, #24]
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	69ba      	ldr	r2, [r7, #24]
 8002e20:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	685b      	ldr	r3, [r3, #4]
 8002e26:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002e28:	2201      	movs	r2, #1
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e30:	43db      	mvns	r3, r3
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	4013      	ands	r3, r2
 8002e36:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	091b      	lsrs	r3, r3, #4
 8002e3e:	f003 0201 	and.w	r2, r3, #1
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	fa02 f303 	lsl.w	r3, r2, r3
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	69ba      	ldr	r2, [r7, #24]
 8002e52:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	685b      	ldr	r3, [r3, #4]
 8002e58:	f003 0303 	and.w	r3, r3, #3
 8002e5c:	2b03      	cmp	r3, #3
 8002e5e:	d017      	beq.n	8002e90 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68db      	ldr	r3, [r3, #12]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	005b      	lsls	r3, r3, #1
 8002e6a:	2203      	movs	r2, #3
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43db      	mvns	r3, r3
 8002e72:	69ba      	ldr	r2, [r7, #24]
 8002e74:	4013      	ands	r3, r2
 8002e76:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e78:	683b      	ldr	r3, [r7, #0]
 8002e7a:	689a      	ldr	r2, [r3, #8]
 8002e7c:	69fb      	ldr	r3, [r7, #28]
 8002e7e:	005b      	lsls	r3, r3, #1
 8002e80:	fa02 f303 	lsl.w	r3, r2, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	f003 0303 	and.w	r3, r3, #3
 8002e98:	2b02      	cmp	r3, #2
 8002e9a:	d123      	bne.n	8002ee4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	08da      	lsrs	r2, r3, #3
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	3208      	adds	r2, #8
 8002ea4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	f003 0307 	and.w	r3, r3, #7
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	220f      	movs	r2, #15
 8002eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb8:	43db      	mvns	r3, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4013      	ands	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f003 0307 	and.w	r3, r3, #7
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ed6:	69fb      	ldr	r3, [r7, #28]
 8002ed8:	08da      	lsrs	r2, r3, #3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	3208      	adds	r2, #8
 8002ede:	69b9      	ldr	r1, [r7, #24]
 8002ee0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	005b      	lsls	r3, r3, #1
 8002eee:	2203      	movs	r2, #3
 8002ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef4:	43db      	mvns	r3, r3
 8002ef6:	69ba      	ldr	r2, [r7, #24]
 8002ef8:	4013      	ands	r3, r2
 8002efa:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	685b      	ldr	r3, [r3, #4]
 8002f00:	f003 0203 	and.w	r2, r3, #3
 8002f04:	69fb      	ldr	r3, [r7, #28]
 8002f06:	005b      	lsls	r3, r3, #1
 8002f08:	fa02 f303 	lsl.w	r3, r2, r3
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	4313      	orrs	r3, r2
 8002f10:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	69ba      	ldr	r2, [r7, #24]
 8002f16:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	f000 80b4 	beq.w	800308e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f26:	2300      	movs	r3, #0
 8002f28:	60fb      	str	r3, [r7, #12]
 8002f2a:	4b60      	ldr	r3, [pc, #384]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	4a5f      	ldr	r2, [pc, #380]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f34:	6453      	str	r3, [r2, #68]	; 0x44
 8002f36:	4b5d      	ldr	r3, [pc, #372]	; (80030ac <HAL_GPIO_Init+0x30c>)
 8002f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002f3e:	60fb      	str	r3, [r7, #12]
 8002f40:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002f42:	4a5b      	ldr	r2, [pc, #364]	; (80030b0 <HAL_GPIO_Init+0x310>)
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	089b      	lsrs	r3, r3, #2
 8002f48:	3302      	adds	r3, #2
 8002f4a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f4e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	f003 0303 	and.w	r3, r3, #3
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	69ba      	ldr	r2, [r7, #24]
 8002f62:	4013      	ands	r3, r2
 8002f64:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4a52      	ldr	r2, [pc, #328]	; (80030b4 <HAL_GPIO_Init+0x314>)
 8002f6a:	4293      	cmp	r3, r2
 8002f6c:	d02b      	beq.n	8002fc6 <HAL_GPIO_Init+0x226>
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	4a51      	ldr	r2, [pc, #324]	; (80030b8 <HAL_GPIO_Init+0x318>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d025      	beq.n	8002fc2 <HAL_GPIO_Init+0x222>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	4a50      	ldr	r2, [pc, #320]	; (80030bc <HAL_GPIO_Init+0x31c>)
 8002f7a:	4293      	cmp	r3, r2
 8002f7c:	d01f      	beq.n	8002fbe <HAL_GPIO_Init+0x21e>
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	4a4f      	ldr	r2, [pc, #316]	; (80030c0 <HAL_GPIO_Init+0x320>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d019      	beq.n	8002fba <HAL_GPIO_Init+0x21a>
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	4a4e      	ldr	r2, [pc, #312]	; (80030c4 <HAL_GPIO_Init+0x324>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d013      	beq.n	8002fb6 <HAL_GPIO_Init+0x216>
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a4d      	ldr	r2, [pc, #308]	; (80030c8 <HAL_GPIO_Init+0x328>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d00d      	beq.n	8002fb2 <HAL_GPIO_Init+0x212>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	4a4c      	ldr	r2, [pc, #304]	; (80030cc <HAL_GPIO_Init+0x32c>)
 8002f9a:	4293      	cmp	r3, r2
 8002f9c:	d007      	beq.n	8002fae <HAL_GPIO_Init+0x20e>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a4b      	ldr	r2, [pc, #300]	; (80030d0 <HAL_GPIO_Init+0x330>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d101      	bne.n	8002faa <HAL_GPIO_Init+0x20a>
 8002fa6:	2307      	movs	r3, #7
 8002fa8:	e00e      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002faa:	2308      	movs	r3, #8
 8002fac:	e00c      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fae:	2306      	movs	r3, #6
 8002fb0:	e00a      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb2:	2305      	movs	r3, #5
 8002fb4:	e008      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fb6:	2304      	movs	r3, #4
 8002fb8:	e006      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fba:	2303      	movs	r3, #3
 8002fbc:	e004      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	e002      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc2:	2301      	movs	r3, #1
 8002fc4:	e000      	b.n	8002fc8 <HAL_GPIO_Init+0x228>
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	69fa      	ldr	r2, [r7, #28]
 8002fca:	f002 0203 	and.w	r2, r2, #3
 8002fce:	0092      	lsls	r2, r2, #2
 8002fd0:	4093      	lsls	r3, r2
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002fd8:	4935      	ldr	r1, [pc, #212]	; (80030b0 <HAL_GPIO_Init+0x310>)
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	089b      	lsrs	r3, r3, #2
 8002fde:	3302      	adds	r3, #2
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fe6:	4b3b      	ldr	r3, [pc, #236]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fec:	693b      	ldr	r3, [r7, #16]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003002:	69ba      	ldr	r2, [r7, #24]
 8003004:	693b      	ldr	r3, [r7, #16]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800300a:	4a32      	ldr	r2, [pc, #200]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800300c:	69bb      	ldr	r3, [r7, #24]
 800300e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003010:	4b30      	ldr	r3, [pc, #192]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003012:	68db      	ldr	r3, [r3, #12]
 8003014:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003028:	2b00      	cmp	r3, #0
 800302a:	d003      	beq.n	8003034 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	693b      	ldr	r3, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003034:	4a27      	ldr	r2, [pc, #156]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003036:	69bb      	ldr	r3, [r7, #24]
 8003038:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800303a:	4b26      	ldr	r3, [pc, #152]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	43db      	mvns	r3, r3
 8003044:	69ba      	ldr	r2, [r7, #24]
 8003046:	4013      	ands	r3, r2
 8003048:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d003      	beq.n	800305e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003056:	69ba      	ldr	r2, [r7, #24]
 8003058:	693b      	ldr	r3, [r7, #16]
 800305a:	4313      	orrs	r3, r2
 800305c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800305e:	4a1d      	ldr	r2, [pc, #116]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003064:	4b1b      	ldr	r3, [pc, #108]	; (80030d4 <HAL_GPIO_Init+0x334>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800307c:	2b00      	cmp	r3, #0
 800307e:	d003      	beq.n	8003088 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003080:	69ba      	ldr	r2, [r7, #24]
 8003082:	693b      	ldr	r3, [r7, #16]
 8003084:	4313      	orrs	r3, r2
 8003086:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003088:	4a12      	ldr	r2, [pc, #72]	; (80030d4 <HAL_GPIO_Init+0x334>)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800308e:	69fb      	ldr	r3, [r7, #28]
 8003090:	3301      	adds	r3, #1
 8003092:	61fb      	str	r3, [r7, #28]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b0f      	cmp	r3, #15
 8003098:	f67f ae90 	bls.w	8002dbc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800309c:	bf00      	nop
 800309e:	bf00      	nop
 80030a0:	3724      	adds	r7, #36	; 0x24
 80030a2:	46bd      	mov	sp, r7
 80030a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a8:	4770      	bx	lr
 80030aa:	bf00      	nop
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40013800 	.word	0x40013800
 80030b4:	40020000 	.word	0x40020000
 80030b8:	40020400 	.word	0x40020400
 80030bc:	40020800 	.word	0x40020800
 80030c0:	40020c00 	.word	0x40020c00
 80030c4:	40021000 	.word	0x40021000
 80030c8:	40021400 	.word	0x40021400
 80030cc:	40021800 	.word	0x40021800
 80030d0:	40021c00 	.word	0x40021c00
 80030d4:	40013c00 	.word	0x40013c00

080030d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
 80030e0:	460b      	mov	r3, r1
 80030e2:	807b      	strh	r3, [r7, #2]
 80030e4:	4613      	mov	r3, r2
 80030e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030e8:	787b      	ldrb	r3, [r7, #1]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d003      	beq.n	80030f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030ee:	887a      	ldrh	r2, [r7, #2]
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030f4:	e003      	b.n	80030fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030f6:	887b      	ldrh	r3, [r7, #2]
 80030f8:	041a      	lsls	r2, r3, #16
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	619a      	str	r2, [r3, #24]
}
 80030fe:	bf00      	nop
 8003100:	370c      	adds	r7, #12
 8003102:	46bd      	mov	sp, r7
 8003104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003108:	4770      	bx	lr
	...

0800310c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b086      	sub	sp, #24
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e267      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f003 0301 	and.w	r3, r3, #1
 8003126:	2b00      	cmp	r3, #0
 8003128:	d075      	beq.n	8003216 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800312a:	4b88      	ldr	r3, [pc, #544]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f003 030c 	and.w	r3, r3, #12
 8003132:	2b04      	cmp	r3, #4
 8003134:	d00c      	beq.n	8003150 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003136:	4b85      	ldr	r3, [pc, #532]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800313e:	2b08      	cmp	r3, #8
 8003140:	d112      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003142:	4b82      	ldr	r3, [pc, #520]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800314a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800314e:	d10b      	bne.n	8003168 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003150:	4b7e      	ldr	r3, [pc, #504]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003158:	2b00      	cmp	r3, #0
 800315a:	d05b      	beq.n	8003214 <HAL_RCC_OscConfig+0x108>
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d157      	bne.n	8003214 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e242      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d106      	bne.n	8003180 <HAL_RCC_OscConfig+0x74>
 8003172:	4b76      	ldr	r3, [pc, #472]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a75      	ldr	r2, [pc, #468]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003178:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800317c:	6013      	str	r3, [r2, #0]
 800317e:	e01d      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003188:	d10c      	bne.n	80031a4 <HAL_RCC_OscConfig+0x98>
 800318a:	4b70      	ldr	r3, [pc, #448]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	4a6f      	ldr	r2, [pc, #444]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003190:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003194:	6013      	str	r3, [r2, #0]
 8003196:	4b6d      	ldr	r3, [pc, #436]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a6c      	ldr	r2, [pc, #432]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800319c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80031a0:	6013      	str	r3, [r2, #0]
 80031a2:	e00b      	b.n	80031bc <HAL_RCC_OscConfig+0xb0>
 80031a4:	4b69      	ldr	r3, [pc, #420]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a68      	ldr	r2, [pc, #416]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80031aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80031ae:	6013      	str	r3, [r2, #0]
 80031b0:	4b66      	ldr	r3, [pc, #408]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4a65      	ldr	r2, [pc, #404]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80031b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80031ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d013      	beq.n	80031ec <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c4:	f7fe fef0 	bl	8001fa8 <HAL_GetTick>
 80031c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031ca:	e008      	b.n	80031de <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031cc:	f7fe feec 	bl	8001fa8 <HAL_GetTick>
 80031d0:	4602      	mov	r2, r0
 80031d2:	693b      	ldr	r3, [r7, #16]
 80031d4:	1ad3      	subs	r3, r2, r3
 80031d6:	2b64      	cmp	r3, #100	; 0x64
 80031d8:	d901      	bls.n	80031de <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e207      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80031de:	4b5b      	ldr	r3, [pc, #364]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d0f0      	beq.n	80031cc <HAL_RCC_OscConfig+0xc0>
 80031ea:	e014      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031ec:	f7fe fedc 	bl	8001fa8 <HAL_GetTick>
 80031f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80031f2:	e008      	b.n	8003206 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80031f4:	f7fe fed8 	bl	8001fa8 <HAL_GetTick>
 80031f8:	4602      	mov	r2, r0
 80031fa:	693b      	ldr	r3, [r7, #16]
 80031fc:	1ad3      	subs	r3, r2, r3
 80031fe:	2b64      	cmp	r3, #100	; 0x64
 8003200:	d901      	bls.n	8003206 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003202:	2303      	movs	r3, #3
 8003204:	e1f3      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003206:	4b51      	ldr	r3, [pc, #324]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800320e:	2b00      	cmp	r3, #0
 8003210:	d1f0      	bne.n	80031f4 <HAL_RCC_OscConfig+0xe8>
 8003212:	e000      	b.n	8003216 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003214:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f003 0302 	and.w	r3, r3, #2
 800321e:	2b00      	cmp	r3, #0
 8003220:	d063      	beq.n	80032ea <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003222:	4b4a      	ldr	r3, [pc, #296]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	f003 030c 	and.w	r3, r3, #12
 800322a:	2b00      	cmp	r3, #0
 800322c:	d00b      	beq.n	8003246 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800322e:	4b47      	ldr	r3, [pc, #284]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003236:	2b08      	cmp	r3, #8
 8003238:	d11c      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800323a:	4b44      	ldr	r3, [pc, #272]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800323c:	685b      	ldr	r3, [r3, #4]
 800323e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003242:	2b00      	cmp	r3, #0
 8003244:	d116      	bne.n	8003274 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003246:	4b41      	ldr	r3, [pc, #260]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d005      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d001      	beq.n	800325e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	e1c7      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800325e:	4b3b      	ldr	r3, [pc, #236]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	00db      	lsls	r3, r3, #3
 800326c:	4937      	ldr	r1, [pc, #220]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800326e:	4313      	orrs	r3, r2
 8003270:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003272:	e03a      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d020      	beq.n	80032be <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800327c:	4b34      	ldr	r3, [pc, #208]	; (8003350 <HAL_RCC_OscConfig+0x244>)
 800327e:	2201      	movs	r2, #1
 8003280:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003282:	f7fe fe91 	bl	8001fa8 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003288:	e008      	b.n	800329c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800328a:	f7fe fe8d 	bl	8001fa8 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	2b02      	cmp	r3, #2
 8003296:	d901      	bls.n	800329c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003298:	2303      	movs	r3, #3
 800329a:	e1a8      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800329c:	4b2b      	ldr	r3, [pc, #172]	; (800334c <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f003 0302 	and.w	r3, r3, #2
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d0f0      	beq.n	800328a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032a8:	4b28      	ldr	r3, [pc, #160]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	691b      	ldr	r3, [r3, #16]
 80032b4:	00db      	lsls	r3, r3, #3
 80032b6:	4925      	ldr	r1, [pc, #148]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80032b8:	4313      	orrs	r3, r2
 80032ba:	600b      	str	r3, [r1, #0]
 80032bc:	e015      	b.n	80032ea <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80032be:	4b24      	ldr	r3, [pc, #144]	; (8003350 <HAL_RCC_OscConfig+0x244>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fe70 	bl	8001fa8 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80032cc:	f7fe fe6c 	bl	8001fa8 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e187      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80032de:	4b1b      	ldr	r3, [pc, #108]	; (800334c <HAL_RCC_OscConfig+0x240>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0302 	and.w	r3, r3, #2
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 0308 	and.w	r3, r3, #8
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d036      	beq.n	8003364 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	695b      	ldr	r3, [r3, #20]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d016      	beq.n	800332c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_RCC_OscConfig+0x248>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003304:	f7fe fe50 	bl	8001fa8 <HAL_GetTick>
 8003308:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800330a:	e008      	b.n	800331e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800330c:	f7fe fe4c 	bl	8001fa8 <HAL_GetTick>
 8003310:	4602      	mov	r2, r0
 8003312:	693b      	ldr	r3, [r7, #16]
 8003314:	1ad3      	subs	r3, r2, r3
 8003316:	2b02      	cmp	r3, #2
 8003318:	d901      	bls.n	800331e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800331a:	2303      	movs	r3, #3
 800331c:	e167      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800331e:	4b0b      	ldr	r3, [pc, #44]	; (800334c <HAL_RCC_OscConfig+0x240>)
 8003320:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003322:	f003 0302 	and.w	r3, r3, #2
 8003326:	2b00      	cmp	r3, #0
 8003328:	d0f0      	beq.n	800330c <HAL_RCC_OscConfig+0x200>
 800332a:	e01b      	b.n	8003364 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <HAL_RCC_OscConfig+0x248>)
 800332e:	2200      	movs	r2, #0
 8003330:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003332:	f7fe fe39 	bl	8001fa8 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003338:	e00e      	b.n	8003358 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800333a:	f7fe fe35 	bl	8001fa8 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d907      	bls.n	8003358 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e150      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
 800334c:	40023800 	.word	0x40023800
 8003350:	42470000 	.word	0x42470000
 8003354:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003358:	4b88      	ldr	r3, [pc, #544]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800335a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800335c:	f003 0302 	and.w	r3, r3, #2
 8003360:	2b00      	cmp	r3, #0
 8003362:	d1ea      	bne.n	800333a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 8097 	beq.w	80034a0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003372:	2300      	movs	r3, #0
 8003374:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003376:	4b81      	ldr	r3, [pc, #516]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800337a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d10f      	bne.n	80033a2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003382:	2300      	movs	r3, #0
 8003384:	60bb      	str	r3, [r7, #8]
 8003386:	4b7d      	ldr	r3, [pc, #500]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4a7c      	ldr	r2, [pc, #496]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800338c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003390:	6413      	str	r3, [r2, #64]	; 0x40
 8003392:	4b7a      	ldr	r3, [pc, #488]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800339a:	60bb      	str	r3, [r7, #8]
 800339c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800339e:	2301      	movs	r3, #1
 80033a0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033a2:	4b77      	ldr	r3, [pc, #476]	; (8003580 <HAL_RCC_OscConfig+0x474>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d118      	bne.n	80033e0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80033ae:	4b74      	ldr	r3, [pc, #464]	; (8003580 <HAL_RCC_OscConfig+0x474>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a73      	ldr	r2, [pc, #460]	; (8003580 <HAL_RCC_OscConfig+0x474>)
 80033b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80033b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80033ba:	f7fe fdf5 	bl	8001fa8 <HAL_GetTick>
 80033be:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033c0:	e008      	b.n	80033d4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80033c2:	f7fe fdf1 	bl	8001fa8 <HAL_GetTick>
 80033c6:	4602      	mov	r2, r0
 80033c8:	693b      	ldr	r3, [r7, #16]
 80033ca:	1ad3      	subs	r3, r2, r3
 80033cc:	2b02      	cmp	r3, #2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e10c      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80033d4:	4b6a      	ldr	r3, [pc, #424]	; (8003580 <HAL_RCC_OscConfig+0x474>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d0f0      	beq.n	80033c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d106      	bne.n	80033f6 <HAL_RCC_OscConfig+0x2ea>
 80033e8:	4b64      	ldr	r3, [pc, #400]	; (800357c <HAL_RCC_OscConfig+0x470>)
 80033ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ec:	4a63      	ldr	r2, [pc, #396]	; (800357c <HAL_RCC_OscConfig+0x470>)
 80033ee:	f043 0301 	orr.w	r3, r3, #1
 80033f2:	6713      	str	r3, [r2, #112]	; 0x70
 80033f4:	e01c      	b.n	8003430 <HAL_RCC_OscConfig+0x324>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	689b      	ldr	r3, [r3, #8]
 80033fa:	2b05      	cmp	r3, #5
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x30c>
 80033fe:	4b5f      	ldr	r3, [pc, #380]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003402:	4a5e      	ldr	r2, [pc, #376]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	6713      	str	r3, [r2, #112]	; 0x70
 800340a:	4b5c      	ldr	r3, [pc, #368]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800340c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800340e:	4a5b      	ldr	r2, [pc, #364]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003410:	f043 0301 	orr.w	r3, r3, #1
 8003414:	6713      	str	r3, [r2, #112]	; 0x70
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0x324>
 8003418:	4b58      	ldr	r3, [pc, #352]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800341a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800341c:	4a57      	ldr	r2, [pc, #348]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800341e:	f023 0301 	bic.w	r3, r3, #1
 8003422:	6713      	str	r3, [r2, #112]	; 0x70
 8003424:	4b55      	ldr	r3, [pc, #340]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003426:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003428:	4a54      	ldr	r2, [pc, #336]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800342a:	f023 0304 	bic.w	r3, r3, #4
 800342e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d015      	beq.n	8003464 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003438:	f7fe fdb6 	bl	8001fa8 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800343e:	e00a      	b.n	8003456 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003440:	f7fe fdb2 	bl	8001fa8 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	f241 3288 	movw	r2, #5000	; 0x1388
 800344e:	4293      	cmp	r3, r2
 8003450:	d901      	bls.n	8003456 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e0cb      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003456:	4b49      	ldr	r3, [pc, #292]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003458:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b00      	cmp	r3, #0
 8003460:	d0ee      	beq.n	8003440 <HAL_RCC_OscConfig+0x334>
 8003462:	e014      	b.n	800348e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003464:	f7fe fda0 	bl	8001fa8 <HAL_GetTick>
 8003468:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800346a:	e00a      	b.n	8003482 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800346c:	f7fe fd9c 	bl	8001fa8 <HAL_GetTick>
 8003470:	4602      	mov	r2, r0
 8003472:	693b      	ldr	r3, [r7, #16]
 8003474:	1ad3      	subs	r3, r2, r3
 8003476:	f241 3288 	movw	r2, #5000	; 0x1388
 800347a:	4293      	cmp	r3, r2
 800347c:	d901      	bls.n	8003482 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e0b5      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003482:	4b3e      	ldr	r3, [pc, #248]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003486:	f003 0302 	and.w	r3, r3, #2
 800348a:	2b00      	cmp	r3, #0
 800348c:	d1ee      	bne.n	800346c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800348e:	7dfb      	ldrb	r3, [r7, #23]
 8003490:	2b01      	cmp	r3, #1
 8003492:	d105      	bne.n	80034a0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003494:	4b39      	ldr	r3, [pc, #228]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003498:	4a38      	ldr	r2, [pc, #224]	; (800357c <HAL_RCC_OscConfig+0x470>)
 800349a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800349e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	f000 80a1 	beq.w	80035ec <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80034aa:	4b34      	ldr	r3, [pc, #208]	; (800357c <HAL_RCC_OscConfig+0x470>)
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 030c 	and.w	r3, r3, #12
 80034b2:	2b08      	cmp	r3, #8
 80034b4:	d05c      	beq.n	8003570 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d141      	bne.n	8003542 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80034be:	4b31      	ldr	r3, [pc, #196]	; (8003584 <HAL_RCC_OscConfig+0x478>)
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034c4:	f7fe fd70 	bl	8001fa8 <HAL_GetTick>
 80034c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034ca:	e008      	b.n	80034de <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034cc:	f7fe fd6c 	bl	8001fa8 <HAL_GetTick>
 80034d0:	4602      	mov	r2, r0
 80034d2:	693b      	ldr	r3, [r7, #16]
 80034d4:	1ad3      	subs	r3, r2, r3
 80034d6:	2b02      	cmp	r3, #2
 80034d8:	d901      	bls.n	80034de <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80034da:	2303      	movs	r3, #3
 80034dc:	e087      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034de:	4b27      	ldr	r3, [pc, #156]	; (800357c <HAL_RCC_OscConfig+0x470>)
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d1f0      	bne.n	80034cc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69da      	ldr	r2, [r3, #28]
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	6a1b      	ldr	r3, [r3, #32]
 80034f2:	431a      	orrs	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034f8:	019b      	lsls	r3, r3, #6
 80034fa:	431a      	orrs	r2, r3
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	3b01      	subs	r3, #1
 8003504:	041b      	lsls	r3, r3, #16
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800350c:	061b      	lsls	r3, r3, #24
 800350e:	491b      	ldr	r1, [pc, #108]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003510:	4313      	orrs	r3, r2
 8003512:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003514:	4b1b      	ldr	r3, [pc, #108]	; (8003584 <HAL_RCC_OscConfig+0x478>)
 8003516:	2201      	movs	r2, #1
 8003518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351a:	f7fe fd45 	bl	8001fa8 <HAL_GetTick>
 800351e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003520:	e008      	b.n	8003534 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003522:	f7fe fd41 	bl	8001fa8 <HAL_GetTick>
 8003526:	4602      	mov	r2, r0
 8003528:	693b      	ldr	r3, [r7, #16]
 800352a:	1ad3      	subs	r3, r2, r3
 800352c:	2b02      	cmp	r3, #2
 800352e:	d901      	bls.n	8003534 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003530:	2303      	movs	r3, #3
 8003532:	e05c      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003534:	4b11      	ldr	r3, [pc, #68]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d0f0      	beq.n	8003522 <HAL_RCC_OscConfig+0x416>
 8003540:	e054      	b.n	80035ec <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003542:	4b10      	ldr	r3, [pc, #64]	; (8003584 <HAL_RCC_OscConfig+0x478>)
 8003544:	2200      	movs	r2, #0
 8003546:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003548:	f7fe fd2e 	bl	8001fa8 <HAL_GetTick>
 800354c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800354e:	e008      	b.n	8003562 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003550:	f7fe fd2a 	bl	8001fa8 <HAL_GetTick>
 8003554:	4602      	mov	r2, r0
 8003556:	693b      	ldr	r3, [r7, #16]
 8003558:	1ad3      	subs	r3, r2, r3
 800355a:	2b02      	cmp	r3, #2
 800355c:	d901      	bls.n	8003562 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800355e:	2303      	movs	r3, #3
 8003560:	e045      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003562:	4b06      	ldr	r3, [pc, #24]	; (800357c <HAL_RCC_OscConfig+0x470>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800356a:	2b00      	cmp	r3, #0
 800356c:	d1f0      	bne.n	8003550 <HAL_RCC_OscConfig+0x444>
 800356e:	e03d      	b.n	80035ec <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	2b01      	cmp	r3, #1
 8003576:	d107      	bne.n	8003588 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	e038      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
 800357c:	40023800 	.word	0x40023800
 8003580:	40007000 	.word	0x40007000
 8003584:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003588:	4b1b      	ldr	r3, [pc, #108]	; (80035f8 <HAL_RCC_OscConfig+0x4ec>)
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	699b      	ldr	r3, [r3, #24]
 8003592:	2b01      	cmp	r3, #1
 8003594:	d028      	beq.n	80035e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80035a0:	429a      	cmp	r2, r3
 80035a2:	d121      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80035ae:	429a      	cmp	r2, r3
 80035b0:	d11a      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035b2:	68fa      	ldr	r2, [r7, #12]
 80035b4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80035b8:	4013      	ands	r3, r2
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80035be:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80035c0:	4293      	cmp	r3, r2
 80035c2:	d111      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ce:	085b      	lsrs	r3, r3, #1
 80035d0:	3b01      	subs	r3, #1
 80035d2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80035d4:	429a      	cmp	r2, r3
 80035d6:	d107      	bne.n	80035e8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035e2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80035e4:	429a      	cmp	r2, r3
 80035e6:	d001      	beq.n	80035ec <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80035e8:	2301      	movs	r3, #1
 80035ea:	e000      	b.n	80035ee <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3718      	adds	r7, #24
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800

080035fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
 8003604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d101      	bne.n	8003610 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800360c:	2301      	movs	r3, #1
 800360e:	e0cc      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003610:	4b68      	ldr	r3, [pc, #416]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0307 	and.w	r3, r3, #7
 8003618:	683a      	ldr	r2, [r7, #0]
 800361a:	429a      	cmp	r2, r3
 800361c:	d90c      	bls.n	8003638 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800361e:	4b65      	ldr	r3, [pc, #404]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003620:	683a      	ldr	r2, [r7, #0]
 8003622:	b2d2      	uxtb	r2, r2
 8003624:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003626:	4b63      	ldr	r3, [pc, #396]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	429a      	cmp	r2, r3
 8003632:	d001      	beq.n	8003638 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003634:	2301      	movs	r3, #1
 8003636:	e0b8      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f003 0302 	and.w	r3, r3, #2
 8003640:	2b00      	cmp	r3, #0
 8003642:	d020      	beq.n	8003686 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f003 0304 	and.w	r3, r3, #4
 800364c:	2b00      	cmp	r3, #0
 800364e:	d005      	beq.n	800365c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003650:	4b59      	ldr	r3, [pc, #356]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	4a58      	ldr	r2, [pc, #352]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003656:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800365a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f003 0308 	and.w	r3, r3, #8
 8003664:	2b00      	cmp	r3, #0
 8003666:	d005      	beq.n	8003674 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003668:	4b53      	ldr	r3, [pc, #332]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	4a52      	ldr	r2, [pc, #328]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800366e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003672:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003674:	4b50      	ldr	r3, [pc, #320]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003676:	689b      	ldr	r3, [r3, #8]
 8003678:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	689b      	ldr	r3, [r3, #8]
 8003680:	494d      	ldr	r1, [pc, #308]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003682:	4313      	orrs	r3, r2
 8003684:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d044      	beq.n	800371c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	685b      	ldr	r3, [r3, #4]
 8003696:	2b01      	cmp	r3, #1
 8003698:	d107      	bne.n	80036aa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800369a:	4b47      	ldr	r3, [pc, #284]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d119      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e07f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d003      	beq.n	80036ba <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80036b6:	2b03      	cmp	r3, #3
 80036b8:	d107      	bne.n	80036ca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ba:	4b3f      	ldr	r3, [pc, #252]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d109      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036c6:	2301      	movs	r3, #1
 80036c8:	e06f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80036ca:	4b3b      	ldr	r3, [pc, #236]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 0302 	and.w	r3, r3, #2
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d101      	bne.n	80036da <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80036d6:	2301      	movs	r3, #1
 80036d8:	e067      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80036da:	4b37      	ldr	r3, [pc, #220]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f023 0203 	bic.w	r2, r3, #3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4934      	ldr	r1, [pc, #208]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 80036e8:	4313      	orrs	r3, r2
 80036ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80036ec:	f7fe fc5c 	bl	8001fa8 <HAL_GetTick>
 80036f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80036f2:	e00a      	b.n	800370a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80036f4:	f7fe fc58 	bl	8001fa8 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	1ad3      	subs	r3, r2, r3
 80036fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8003702:	4293      	cmp	r3, r2
 8003704:	d901      	bls.n	800370a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04f      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800370a:	4b2b      	ldr	r3, [pc, #172]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f003 020c 	and.w	r2, r3, #12
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	429a      	cmp	r2, r3
 800371a:	d1eb      	bne.n	80036f4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800371c:	4b25      	ldr	r3, [pc, #148]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0307 	and.w	r3, r3, #7
 8003724:	683a      	ldr	r2, [r7, #0]
 8003726:	429a      	cmp	r2, r3
 8003728:	d20c      	bcs.n	8003744 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800372a:	4b22      	ldr	r3, [pc, #136]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 800372c:	683a      	ldr	r2, [r7, #0]
 800372e:	b2d2      	uxtb	r2, r2
 8003730:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003732:	4b20      	ldr	r3, [pc, #128]	; (80037b4 <HAL_RCC_ClockConfig+0x1b8>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f003 0307 	and.w	r3, r3, #7
 800373a:	683a      	ldr	r2, [r7, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d001      	beq.n	8003744 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003740:	2301      	movs	r3, #1
 8003742:	e032      	b.n	80037aa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f003 0304 	and.w	r3, r3, #4
 800374c:	2b00      	cmp	r3, #0
 800374e:	d008      	beq.n	8003762 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003750:	4b19      	ldr	r3, [pc, #100]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	68db      	ldr	r3, [r3, #12]
 800375c:	4916      	ldr	r1, [pc, #88]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800375e:	4313      	orrs	r3, r2
 8003760:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 0308 	and.w	r3, r3, #8
 800376a:	2b00      	cmp	r3, #0
 800376c:	d009      	beq.n	8003782 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800376e:	4b12      	ldr	r3, [pc, #72]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	490e      	ldr	r1, [pc, #56]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800377e:	4313      	orrs	r3, r2
 8003780:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003782:	f000 f821 	bl	80037c8 <HAL_RCC_GetSysClockFreq>
 8003786:	4602      	mov	r2, r0
 8003788:	4b0b      	ldr	r3, [pc, #44]	; (80037b8 <HAL_RCC_ClockConfig+0x1bc>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	091b      	lsrs	r3, r3, #4
 800378e:	f003 030f 	and.w	r3, r3, #15
 8003792:	490a      	ldr	r1, [pc, #40]	; (80037bc <HAL_RCC_ClockConfig+0x1c0>)
 8003794:	5ccb      	ldrb	r3, [r1, r3]
 8003796:	fa22 f303 	lsr.w	r3, r2, r3
 800379a:	4a09      	ldr	r2, [pc, #36]	; (80037c0 <HAL_RCC_ClockConfig+0x1c4>)
 800379c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800379e:	4b09      	ldr	r3, [pc, #36]	; (80037c4 <HAL_RCC_ClockConfig+0x1c8>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fe fbbc 	bl	8001f20 <HAL_InitTick>

  return HAL_OK;
 80037a8:	2300      	movs	r3, #0
}
 80037aa:	4618      	mov	r0, r3
 80037ac:	3710      	adds	r7, #16
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bd80      	pop	{r7, pc}
 80037b2:	bf00      	nop
 80037b4:	40023c00 	.word	0x40023c00
 80037b8:	40023800 	.word	0x40023800
 80037bc:	08006590 	.word	0x08006590
 80037c0:	20000080 	.word	0x20000080
 80037c4:	20000084 	.word	0x20000084

080037c8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80037cc:	b090      	sub	sp, #64	; 0x40
 80037ce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	637b      	str	r3, [r7, #52]	; 0x34
 80037d4:	2300      	movs	r3, #0
 80037d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80037d8:	2300      	movs	r3, #0
 80037da:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80037dc:	2300      	movs	r3, #0
 80037de:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80037e0:	4b59      	ldr	r3, [pc, #356]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f003 030c 	and.w	r3, r3, #12
 80037e8:	2b08      	cmp	r3, #8
 80037ea:	d00d      	beq.n	8003808 <HAL_RCC_GetSysClockFreq+0x40>
 80037ec:	2b08      	cmp	r3, #8
 80037ee:	f200 80a1 	bhi.w	8003934 <HAL_RCC_GetSysClockFreq+0x16c>
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d002      	beq.n	80037fc <HAL_RCC_GetSysClockFreq+0x34>
 80037f6:	2b04      	cmp	r3, #4
 80037f8:	d003      	beq.n	8003802 <HAL_RCC_GetSysClockFreq+0x3a>
 80037fa:	e09b      	b.n	8003934 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80037fc:	4b53      	ldr	r3, [pc, #332]	; (800394c <HAL_RCC_GetSysClockFreq+0x184>)
 80037fe:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003800:	e09b      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003802:	4b53      	ldr	r3, [pc, #332]	; (8003950 <HAL_RCC_GetSysClockFreq+0x188>)
 8003804:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003806:	e098      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003808:	4b4f      	ldr	r3, [pc, #316]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 800380a:	685b      	ldr	r3, [r3, #4]
 800380c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003810:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003812:	4b4d      	ldr	r3, [pc, #308]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d028      	beq.n	8003870 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800381e:	4b4a      	ldr	r3, [pc, #296]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 8003820:	685b      	ldr	r3, [r3, #4]
 8003822:	099b      	lsrs	r3, r3, #6
 8003824:	2200      	movs	r2, #0
 8003826:	623b      	str	r3, [r7, #32]
 8003828:	627a      	str	r2, [r7, #36]	; 0x24
 800382a:	6a3b      	ldr	r3, [r7, #32]
 800382c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003830:	2100      	movs	r1, #0
 8003832:	4b47      	ldr	r3, [pc, #284]	; (8003950 <HAL_RCC_GetSysClockFreq+0x188>)
 8003834:	fb03 f201 	mul.w	r2, r3, r1
 8003838:	2300      	movs	r3, #0
 800383a:	fb00 f303 	mul.w	r3, r0, r3
 800383e:	4413      	add	r3, r2
 8003840:	4a43      	ldr	r2, [pc, #268]	; (8003950 <HAL_RCC_GetSysClockFreq+0x188>)
 8003842:	fba0 1202 	umull	r1, r2, r0, r2
 8003846:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003848:	460a      	mov	r2, r1
 800384a:	62ba      	str	r2, [r7, #40]	; 0x28
 800384c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800384e:	4413      	add	r3, r2
 8003850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003852:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003854:	2200      	movs	r2, #0
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	61fa      	str	r2, [r7, #28]
 800385a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800385e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003862:	f7fc fcb1 	bl	80001c8 <__aeabi_uldivmod>
 8003866:	4602      	mov	r2, r0
 8003868:	460b      	mov	r3, r1
 800386a:	4613      	mov	r3, r2
 800386c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800386e:	e053      	b.n	8003918 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003870:	4b35      	ldr	r3, [pc, #212]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	099b      	lsrs	r3, r3, #6
 8003876:	2200      	movs	r2, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	617a      	str	r2, [r7, #20]
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003882:	f04f 0b00 	mov.w	fp, #0
 8003886:	4652      	mov	r2, sl
 8003888:	465b      	mov	r3, fp
 800388a:	f04f 0000 	mov.w	r0, #0
 800388e:	f04f 0100 	mov.w	r1, #0
 8003892:	0159      	lsls	r1, r3, #5
 8003894:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003898:	0150      	lsls	r0, r2, #5
 800389a:	4602      	mov	r2, r0
 800389c:	460b      	mov	r3, r1
 800389e:	ebb2 080a 	subs.w	r8, r2, sl
 80038a2:	eb63 090b 	sbc.w	r9, r3, fp
 80038a6:	f04f 0200 	mov.w	r2, #0
 80038aa:	f04f 0300 	mov.w	r3, #0
 80038ae:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80038b2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80038b6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80038ba:	ebb2 0408 	subs.w	r4, r2, r8
 80038be:	eb63 0509 	sbc.w	r5, r3, r9
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	00eb      	lsls	r3, r5, #3
 80038cc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80038d0:	00e2      	lsls	r2, r4, #3
 80038d2:	4614      	mov	r4, r2
 80038d4:	461d      	mov	r5, r3
 80038d6:	eb14 030a 	adds.w	r3, r4, sl
 80038da:	603b      	str	r3, [r7, #0]
 80038dc:	eb45 030b 	adc.w	r3, r5, fp
 80038e0:	607b      	str	r3, [r7, #4]
 80038e2:	f04f 0200 	mov.w	r2, #0
 80038e6:	f04f 0300 	mov.w	r3, #0
 80038ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80038ee:	4629      	mov	r1, r5
 80038f0:	028b      	lsls	r3, r1, #10
 80038f2:	4621      	mov	r1, r4
 80038f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80038f8:	4621      	mov	r1, r4
 80038fa:	028a      	lsls	r2, r1, #10
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	2200      	movs	r2, #0
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	60fa      	str	r2, [r7, #12]
 8003908:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800390c:	f7fc fc5c 	bl	80001c8 <__aeabi_uldivmod>
 8003910:	4602      	mov	r2, r0
 8003912:	460b      	mov	r3, r1
 8003914:	4613      	mov	r3, r2
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003918:	4b0b      	ldr	r3, [pc, #44]	; (8003948 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	0c1b      	lsrs	r3, r3, #16
 800391e:	f003 0303 	and.w	r3, r3, #3
 8003922:	3301      	adds	r3, #1
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003928:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003930:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003932:	e002      	b.n	800393a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003934:	4b05      	ldr	r3, [pc, #20]	; (800394c <HAL_RCC_GetSysClockFreq+0x184>)
 8003936:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003938:	bf00      	nop
    }
  }
  return sysclockfreq;
 800393a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800393c:	4618      	mov	r0, r3
 800393e:	3740      	adds	r7, #64	; 0x40
 8003940:	46bd      	mov	sp, r7
 8003942:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003946:	bf00      	nop
 8003948:	40023800 	.word	0x40023800
 800394c:	00f42400 	.word	0x00f42400
 8003950:	017d7840 	.word	0x017d7840

08003954 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003958:	4b03      	ldr	r3, [pc, #12]	; (8003968 <HAL_RCC_GetHCLKFreq+0x14>)
 800395a:	681b      	ldr	r3, [r3, #0]
}
 800395c:	4618      	mov	r0, r3
 800395e:	46bd      	mov	sp, r7
 8003960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003964:	4770      	bx	lr
 8003966:	bf00      	nop
 8003968:	20000080 	.word	0x20000080

0800396c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800396c:	b580      	push	{r7, lr}
 800396e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003970:	f7ff fff0 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 8003974:	4602      	mov	r2, r0
 8003976:	4b05      	ldr	r3, [pc, #20]	; (800398c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	0a9b      	lsrs	r3, r3, #10
 800397c:	f003 0307 	and.w	r3, r3, #7
 8003980:	4903      	ldr	r1, [pc, #12]	; (8003990 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003982:	5ccb      	ldrb	r3, [r1, r3]
 8003984:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003988:	4618      	mov	r0, r3
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40023800 	.word	0x40023800
 8003990:	080065a0 	.word	0x080065a0

08003994 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003994:	b580      	push	{r7, lr}
 8003996:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003998:	f7ff ffdc 	bl	8003954 <HAL_RCC_GetHCLKFreq>
 800399c:	4602      	mov	r2, r0
 800399e:	4b05      	ldr	r3, [pc, #20]	; (80039b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80039a0:	689b      	ldr	r3, [r3, #8]
 80039a2:	0b5b      	lsrs	r3, r3, #13
 80039a4:	f003 0307 	and.w	r3, r3, #7
 80039a8:	4903      	ldr	r1, [pc, #12]	; (80039b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80039aa:	5ccb      	ldrb	r3, [r1, r3]
 80039ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	bd80      	pop	{r7, pc}
 80039b4:	40023800 	.word	0x40023800
 80039b8:	080065a0 	.word	0x080065a0

080039bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b082      	sub	sp, #8
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e041      	b.n	8003a52 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	2200      	movs	r2, #0
 80039de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f7fd ffde 	bl	80019a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2202      	movs	r2, #2
 80039ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681a      	ldr	r2, [r3, #0]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	3304      	adds	r3, #4
 80039f8:	4619      	mov	r1, r3
 80039fa:	4610      	mov	r0, r2
 80039fc:	f000 fea4 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2201      	movs	r2, #1
 8003a04:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2201      	movs	r2, #1
 8003a14:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2201      	movs	r2, #1
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2201      	movs	r2, #1
 8003a34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	2201      	movs	r2, #1
 8003a3c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3708      	adds	r7, #8
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
	...

08003a5c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	b085      	sub	sp, #20
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a6a:	b2db      	uxtb	r3, r3
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d001      	beq.n	8003a74 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003a70:	2301      	movs	r3, #1
 8003a72:	e04e      	b.n	8003b12 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2202      	movs	r2, #2
 8003a78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	68da      	ldr	r2, [r3, #12]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f042 0201 	orr.w	r2, r2, #1
 8003a8a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a23      	ldr	r2, [pc, #140]	; (8003b20 <HAL_TIM_Base_Start_IT+0xc4>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d022      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a9e:	d01d      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a1f      	ldr	r2, [pc, #124]	; (8003b24 <HAL_TIM_Base_Start_IT+0xc8>)
 8003aa6:	4293      	cmp	r3, r2
 8003aa8:	d018      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1e      	ldr	r2, [pc, #120]	; (8003b28 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ab0:	4293      	cmp	r3, r2
 8003ab2:	d013      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	4a1c      	ldr	r2, [pc, #112]	; (8003b2c <HAL_TIM_Base_Start_IT+0xd0>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00e      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1b      	ldr	r2, [pc, #108]	; (8003b30 <HAL_TIM_Base_Start_IT+0xd4>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d009      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a19      	ldr	r2, [pc, #100]	; (8003b34 <HAL_TIM_Base_Start_IT+0xd8>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d004      	beq.n	8003adc <HAL_TIM_Base_Start_IT+0x80>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a18      	ldr	r2, [pc, #96]	; (8003b38 <HAL_TIM_Base_Start_IT+0xdc>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d111      	bne.n	8003b00 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0307 	and.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2b06      	cmp	r3, #6
 8003aec:	d010      	beq.n	8003b10 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	681a      	ldr	r2, [r3, #0]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f042 0201 	orr.w	r2, r2, #1
 8003afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003afe:	e007      	b.n	8003b10 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f042 0201 	orr.w	r2, r2, #1
 8003b0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	3714      	adds	r7, #20
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
 8003b1e:	bf00      	nop
 8003b20:	40010000 	.word	0x40010000
 8003b24:	40000400 	.word	0x40000400
 8003b28:	40000800 	.word	0x40000800
 8003b2c:	40000c00 	.word	0x40000c00
 8003b30:	40010400 	.word	0x40010400
 8003b34:	40014000 	.word	0x40014000
 8003b38:	40001800 	.word	0x40001800

08003b3c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e041      	b.n	8003bd2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b54:	b2db      	uxtb	r3, r3
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d106      	bne.n	8003b68 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003b62:	6878      	ldr	r0, [r7, #4]
 8003b64:	f000 f839 	bl	8003bda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	3304      	adds	r3, #4
 8003b78:	4619      	mov	r1, r3
 8003b7a:	4610      	mov	r0, r2
 8003b7c:	f000 fde4 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2201      	movs	r2, #1
 8003b8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2201      	movs	r2, #1
 8003b94:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	2201      	movs	r2, #1
 8003b9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2201      	movs	r2, #1
 8003ba4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	2201      	movs	r2, #1
 8003bac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	2201      	movs	r2, #1
 8003bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	2201      	movs	r2, #1
 8003bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	3708      	adds	r7, #8
 8003bd6:	46bd      	mov	sp, r7
 8003bd8:	bd80      	pop	{r7, pc}

08003bda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003bda:	b480      	push	{r7}
 8003bdc:	b083      	sub	sp, #12
 8003bde:	af00      	add	r7, sp, #0
 8003be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003be2:	bf00      	nop
 8003be4:	370c      	adds	r7, #12
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
	...

08003bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d109      	bne.n	8003c14 <HAL_TIM_PWM_Start+0x24>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	bf14      	ite	ne
 8003c0c:	2301      	movne	r3, #1
 8003c0e:	2300      	moveq	r3, #0
 8003c10:	b2db      	uxtb	r3, r3
 8003c12:	e022      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c14:	683b      	ldr	r3, [r7, #0]
 8003c16:	2b04      	cmp	r3, #4
 8003c18:	d109      	bne.n	8003c2e <HAL_TIM_PWM_Start+0x3e>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003c20:	b2db      	uxtb	r3, r3
 8003c22:	2b01      	cmp	r3, #1
 8003c24:	bf14      	ite	ne
 8003c26:	2301      	movne	r3, #1
 8003c28:	2300      	moveq	r3, #0
 8003c2a:	b2db      	uxtb	r3, r3
 8003c2c:	e015      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d109      	bne.n	8003c48 <HAL_TIM_PWM_Start+0x58>
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	bf14      	ite	ne
 8003c40:	2301      	movne	r3, #1
 8003c42:	2300      	moveq	r3, #0
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	e008      	b.n	8003c5a <HAL_TIM_PWM_Start+0x6a>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	bf14      	ite	ne
 8003c54:	2301      	movne	r3, #1
 8003c56:	2300      	moveq	r3, #0
 8003c58:	b2db      	uxtb	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d001      	beq.n	8003c62 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07c      	b.n	8003d5c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d104      	bne.n	8003c72 <HAL_TIM_PWM_Start+0x82>
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2202      	movs	r2, #2
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c70:	e013      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	2b04      	cmp	r3, #4
 8003c76:	d104      	bne.n	8003c82 <HAL_TIM_PWM_Start+0x92>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c80:	e00b      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2b08      	cmp	r3, #8
 8003c86:	d104      	bne.n	8003c92 <HAL_TIM_PWM_Start+0xa2>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2202      	movs	r2, #2
 8003c8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c90:	e003      	b.n	8003c9a <HAL_TIM_PWM_Start+0xaa>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2202      	movs	r2, #2
 8003c96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	2201      	movs	r2, #1
 8003ca0:	6839      	ldr	r1, [r7, #0]
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f001 f964 	bl	8004f70 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	4a2d      	ldr	r2, [pc, #180]	; (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d004      	beq.n	8003cbc <HAL_TIM_PWM_Start+0xcc>
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	4a2c      	ldr	r2, [pc, #176]	; (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d101      	bne.n	8003cc0 <HAL_TIM_PWM_Start+0xd0>
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	e000      	b.n	8003cc2 <HAL_TIM_PWM_Start+0xd2>
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d007      	beq.n	8003cd6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	4a22      	ldr	r2, [pc, #136]	; (8003d64 <HAL_TIM_PWM_Start+0x174>)
 8003cdc:	4293      	cmp	r3, r2
 8003cde:	d022      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ce8:	d01d      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a1f      	ldr	r2, [pc, #124]	; (8003d6c <HAL_TIM_PWM_Start+0x17c>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d018      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1d      	ldr	r2, [pc, #116]	; (8003d70 <HAL_TIM_PWM_Start+0x180>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d013      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1c      	ldr	r2, [pc, #112]	; (8003d74 <HAL_TIM_PWM_Start+0x184>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d00e      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a16      	ldr	r2, [pc, #88]	; (8003d68 <HAL_TIM_PWM_Start+0x178>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d009      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a18      	ldr	r2, [pc, #96]	; (8003d78 <HAL_TIM_PWM_Start+0x188>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d004      	beq.n	8003d26 <HAL_TIM_PWM_Start+0x136>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <HAL_TIM_PWM_Start+0x18c>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d111      	bne.n	8003d4a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 0307 	and.w	r3, r3, #7
 8003d30:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	2b06      	cmp	r3, #6
 8003d36:	d010      	beq.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f042 0201 	orr.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d48:	e007      	b.n	8003d5a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 0201 	orr.w	r2, r2, #1
 8003d58:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	3710      	adds	r7, #16
 8003d60:	46bd      	mov	sp, r7
 8003d62:	bd80      	pop	{r7, pc}
 8003d64:	40010000 	.word	0x40010000
 8003d68:	40010400 	.word	0x40010400
 8003d6c:	40000400 	.word	0x40000400
 8003d70:	40000800 	.word	0x40000800
 8003d74:	40000c00 	.word	0x40000c00
 8003d78:	40014000 	.word	0x40014000
 8003d7c:	40001800 	.word	0x40001800

08003d80 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b082      	sub	sp, #8
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e041      	b.n	8003e16 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d98:	b2db      	uxtb	r3, r3
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d106      	bne.n	8003dac <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2200      	movs	r2, #0
 8003da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 f839 	bl	8003e1e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2202      	movs	r2, #2
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681a      	ldr	r2, [r3, #0]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	3304      	adds	r3, #4
 8003dbc:	4619      	mov	r1, r3
 8003dbe:	4610      	mov	r0, r2
 8003dc0:	f000 fcc2 	bl	8004748 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2201      	movs	r2, #1
 8003dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2201      	movs	r2, #1
 8003dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2201      	movs	r2, #1
 8003de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	2201      	movs	r2, #1
 8003de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e14:	2300      	movs	r3, #0
}
 8003e16:	4618      	mov	r0, r3
 8003e18:	3708      	adds	r7, #8
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}

08003e1e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003e1e:	b480      	push	{r7}
 8003e20:	b083      	sub	sp, #12
 8003e22:	af00      	add	r7, sp, #0
 8003e24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003e26:	bf00      	nop
 8003e28:	370c      	adds	r7, #12
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e30:	4770      	bx	lr

08003e32 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003e32:	b580      	push	{r7, lr}
 8003e34:	b086      	sub	sp, #24
 8003e36:	af00      	add	r7, sp, #0
 8003e38:	6078      	str	r0, [r7, #4]
 8003e3a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d101      	bne.n	8003e46 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003e42:	2301      	movs	r3, #1
 8003e44:	e097      	b.n	8003f76 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e4c:	b2db      	uxtb	r3, r3
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d106      	bne.n	8003e60 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2200      	movs	r2, #0
 8003e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7fd fe3a 	bl	8001ad4 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	689b      	ldr	r3, [r3, #8]
 8003e6e:	687a      	ldr	r2, [r7, #4]
 8003e70:	6812      	ldr	r2, [r2, #0]
 8003e72:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003e76:	f023 0307 	bic.w	r3, r3, #7
 8003e7a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681a      	ldr	r2, [r3, #0]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	3304      	adds	r3, #4
 8003e84:	4619      	mov	r1, r3
 8003e86:	4610      	mov	r0, r2
 8003e88:	f000 fc5e 	bl	8004748 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	699b      	ldr	r3, [r3, #24]
 8003e9a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	6a1b      	ldr	r3, [r3, #32]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003ea4:	683b      	ldr	r3, [r7, #0]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	697a      	ldr	r2, [r7, #20]
 8003eaa:	4313      	orrs	r3, r2
 8003eac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003eae:	693b      	ldr	r3, [r7, #16]
 8003eb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003eb4:	f023 0303 	bic.w	r3, r3, #3
 8003eb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003eba:	683b      	ldr	r3, [r7, #0]
 8003ebc:	689a      	ldr	r2, [r3, #8]
 8003ebe:	683b      	ldr	r3, [r7, #0]
 8003ec0:	699b      	ldr	r3, [r3, #24]
 8003ec2:	021b      	lsls	r3, r3, #8
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003ecc:	693b      	ldr	r3, [r7, #16]
 8003ece:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003ed2:	f023 030c 	bic.w	r3, r3, #12
 8003ed6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003ede:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ee2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003ee4:	683b      	ldr	r3, [r7, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	693a      	ldr	r2, [r7, #16]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ef6:	683b      	ldr	r3, [r7, #0]
 8003ef8:	691b      	ldr	r3, [r3, #16]
 8003efa:	011a      	lsls	r2, r3, #4
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	6a1b      	ldr	r3, [r3, #32]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	4313      	orrs	r3, r2
 8003f04:	693a      	ldr	r2, [r7, #16]
 8003f06:	4313      	orrs	r3, r2
 8003f08:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003f10:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003f18:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	695b      	ldr	r3, [r3, #20]
 8003f22:	011b      	lsls	r3, r3, #4
 8003f24:	4313      	orrs	r3, r2
 8003f26:	68fa      	ldr	r2, [r7, #12]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	693a      	ldr	r2, [r7, #16]
 8003f3a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	68fa      	ldr	r2, [r7, #12]
 8003f42:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2201      	movs	r2, #1
 8003f48:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2201      	movs	r2, #1
 8003f50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2201      	movs	r2, #1
 8003f58:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	2201      	movs	r2, #1
 8003f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2201      	movs	r2, #1
 8003f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2201      	movs	r2, #1
 8003f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3718      	adds	r7, #24
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	bd80      	pop	{r7, pc}

08003f7e <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f7e:	b580      	push	{r7, lr}
 8003f80:	b084      	sub	sp, #16
 8003f82:	af00      	add	r7, sp, #0
 8003f84:	6078      	str	r0, [r7, #4]
 8003f86:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003f8e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003f96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003f9e:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003fa6:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d110      	bne.n	8003fd0 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fae:	7bfb      	ldrb	r3, [r7, #15]
 8003fb0:	2b01      	cmp	r3, #1
 8003fb2:	d102      	bne.n	8003fba <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fb4:	7b7b      	ldrb	r3, [r7, #13]
 8003fb6:	2b01      	cmp	r3, #1
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e069      	b.n	8004092 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2202      	movs	r2, #2
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fce:	e031      	b.n	8004034 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003fd0:	683b      	ldr	r3, [r7, #0]
 8003fd2:	2b04      	cmp	r3, #4
 8003fd4:	d110      	bne.n	8003ff8 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003fd6:	7bbb      	ldrb	r3, [r7, #14]
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d102      	bne.n	8003fe2 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003fdc:	7b3b      	ldrb	r3, [r7, #12]
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d001      	beq.n	8003fe6 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e055      	b.n	8004092 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003ff6:	e01d      	b.n	8004034 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ff8:	7bfb      	ldrb	r3, [r7, #15]
 8003ffa:	2b01      	cmp	r3, #1
 8003ffc:	d108      	bne.n	8004010 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003ffe:	7bbb      	ldrb	r3, [r7, #14]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d105      	bne.n	8004010 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004004:	7b7b      	ldrb	r3, [r7, #13]
 8004006:	2b01      	cmp	r3, #1
 8004008:	d102      	bne.n	8004010 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800400a:	7b3b      	ldrb	r3, [r7, #12]
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e03e      	b.n	8004092 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2202      	movs	r2, #2
 8004020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2202      	movs	r2, #2
 8004028:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2202      	movs	r2, #2
 8004030:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d003      	beq.n	8004042 <HAL_TIM_Encoder_Start+0xc4>
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	2b04      	cmp	r3, #4
 800403e:	d008      	beq.n	8004052 <HAL_TIM_Encoder_Start+0xd4>
 8004040:	e00f      	b.n	8004062 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	2201      	movs	r2, #1
 8004048:	2100      	movs	r1, #0
 800404a:	4618      	mov	r0, r3
 800404c:	f000 ff90 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 8004050:	e016      	b.n	8004080 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	2201      	movs	r2, #1
 8004058:	2104      	movs	r1, #4
 800405a:	4618      	mov	r0, r3
 800405c:	f000 ff88 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 8004060:	e00e      	b.n	8004080 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2201      	movs	r2, #1
 8004068:	2100      	movs	r1, #0
 800406a:	4618      	mov	r0, r3
 800406c:	f000 ff80 	bl	8004f70 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2201      	movs	r2, #1
 8004076:	2104      	movs	r1, #4
 8004078:	4618      	mov	r0, r3
 800407a:	f000 ff79 	bl	8004f70 <TIM_CCxChannelCmd>
      break;
 800407e:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	681a      	ldr	r2, [r3, #0]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f042 0201 	orr.w	r2, r2, #1
 800408e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004090:	2300      	movs	r3, #0
}
 8004092:	4618      	mov	r0, r3
 8004094:	3710      	adds	r7, #16
 8004096:	46bd      	mov	sp, r7
 8004098:	bd80      	pop	{r7, pc}

0800409a <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800409a:	b580      	push	{r7, lr}
 800409c:	b082      	sub	sp, #8
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	691b      	ldr	r3, [r3, #16]
 80040a8:	f003 0302 	and.w	r3, r3, #2
 80040ac:	2b02      	cmp	r3, #2
 80040ae:	d122      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b02      	cmp	r3, #2
 80040bc:	d11b      	bne.n	80040f6 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f06f 0202 	mvn.w	r2, #2
 80040c6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	2201      	movs	r2, #1
 80040cc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	699b      	ldr	r3, [r3, #24]
 80040d4:	f003 0303 	and.w	r3, r3, #3
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 fb14 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 80040e2:	e005      	b.n	80040f0 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f000 fb06 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 fb17 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	2200      	movs	r2, #0
 80040f4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691b      	ldr	r3, [r3, #16]
 80040fc:	f003 0304 	and.w	r3, r3, #4
 8004100:	2b04      	cmp	r3, #4
 8004102:	d122      	bne.n	800414a <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
 800410a:	f003 0304 	and.w	r3, r3, #4
 800410e:	2b04      	cmp	r3, #4
 8004110:	d11b      	bne.n	800414a <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f06f 0204 	mvn.w	r2, #4
 800411a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2202      	movs	r2, #2
 8004120:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699b      	ldr	r3, [r3, #24]
 8004128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800412c:	2b00      	cmp	r3, #0
 800412e:	d003      	beq.n	8004138 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004130:	6878      	ldr	r0, [r7, #4]
 8004132:	f000 faea 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 8004136:	e005      	b.n	8004144 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f000 fadc 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 faed 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d122      	bne.n	800419e <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	f003 0308 	and.w	r3, r3, #8
 8004162:	2b08      	cmp	r3, #8
 8004164:	d11b      	bne.n	800419e <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f06f 0208 	mvn.w	r2, #8
 800416e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2204      	movs	r2, #4
 8004174:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	69db      	ldr	r3, [r3, #28]
 800417c:	f003 0303 	and.w	r3, r3, #3
 8004180:	2b00      	cmp	r3, #0
 8004182:	d003      	beq.n	800418c <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004184:	6878      	ldr	r0, [r7, #4]
 8004186:	f000 fac0 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 800418a:	e005      	b.n	8004198 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	f000 fab2 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004192:	6878      	ldr	r0, [r7, #4]
 8004194:	f000 fac3 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	691b      	ldr	r3, [r3, #16]
 80041a4:	f003 0310 	and.w	r3, r3, #16
 80041a8:	2b10      	cmp	r3, #16
 80041aa:	d122      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	68db      	ldr	r3, [r3, #12]
 80041b2:	f003 0310 	and.w	r3, r3, #16
 80041b6:	2b10      	cmp	r3, #16
 80041b8:	d11b      	bne.n	80041f2 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	f06f 0210 	mvn.w	r2, #16
 80041c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2208      	movs	r2, #8
 80041c8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69db      	ldr	r3, [r3, #28]
 80041d0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d003      	beq.n	80041e0 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d8:	6878      	ldr	r0, [r7, #4]
 80041da:	f000 fa96 	bl	800470a <HAL_TIM_IC_CaptureCallback>
 80041de:	e005      	b.n	80041ec <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041e0:	6878      	ldr	r0, [r7, #4]
 80041e2:	f000 fa88 	bl	80046f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e6:	6878      	ldr	r0, [r7, #4]
 80041e8:	f000 fa99 	bl	800471e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2200      	movs	r2, #0
 80041f0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	f003 0301 	and.w	r3, r3, #1
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	d10e      	bne.n	800421e <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	68db      	ldr	r3, [r3, #12]
 8004206:	f003 0301 	and.w	r3, r3, #1
 800420a:	2b01      	cmp	r3, #1
 800420c:	d107      	bne.n	800421e <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f06f 0201 	mvn.w	r2, #1
 8004216:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7fd f93d 	bl	8001498 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	691b      	ldr	r3, [r3, #16]
 8004224:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004228:	2b80      	cmp	r3, #128	; 0x80
 800422a:	d10e      	bne.n	800424a <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004236:	2b80      	cmp	r3, #128	; 0x80
 8004238:	d107      	bne.n	800424a <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004244:	6878      	ldr	r0, [r7, #4]
 8004246:	f000 ff91 	bl	800516c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	691b      	ldr	r3, [r3, #16]
 8004250:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004254:	2b40      	cmp	r3, #64	; 0x40
 8004256:	d10e      	bne.n	8004276 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004262:	2b40      	cmp	r3, #64	; 0x40
 8004264:	d107      	bne.n	8004276 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800426e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004270:	6878      	ldr	r0, [r7, #4]
 8004272:	f000 fa5e 	bl	8004732 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	691b      	ldr	r3, [r3, #16]
 800427c:	f003 0320 	and.w	r3, r3, #32
 8004280:	2b20      	cmp	r3, #32
 8004282:	d10e      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f003 0320 	and.w	r3, r3, #32
 800428e:	2b20      	cmp	r3, #32
 8004290:	d107      	bne.n	80042a2 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f06f 0220 	mvn.w	r2, #32
 800429a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800429c:	6878      	ldr	r0, [r7, #4]
 800429e:	f000 ff5b 	bl	8005158 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80042a2:	bf00      	nop
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}

080042aa <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80042aa:	b580      	push	{r7, lr}
 80042ac:	b086      	sub	sp, #24
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	60f8      	str	r0, [r7, #12]
 80042b2:	60b9      	str	r1, [r7, #8]
 80042b4:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80042b6:	2300      	movs	r3, #0
 80042b8:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042c0:	2b01      	cmp	r3, #1
 80042c2:	d101      	bne.n	80042c8 <HAL_TIM_IC_ConfigChannel+0x1e>
 80042c4:	2302      	movs	r3, #2
 80042c6:	e088      	b.n	80043da <HAL_TIM_IC_ConfigChannel+0x130>
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2201      	movs	r2, #1
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d11b      	bne.n	800430e <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	6818      	ldr	r0, [r3, #0]
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	6819      	ldr	r1, [r3, #0]
 80042de:	68bb      	ldr	r3, [r7, #8]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68bb      	ldr	r3, [r7, #8]
 80042e4:	68db      	ldr	r3, [r3, #12]
 80042e6:	f000 fc7f 	bl	8004be8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	699a      	ldr	r2, [r3, #24]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	f022 020c 	bic.w	r2, r2, #12
 80042f8:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	6999      	ldr	r1, [r3, #24]
 8004300:	68bb      	ldr	r3, [r7, #8]
 8004302:	689a      	ldr	r2, [r3, #8]
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	430a      	orrs	r2, r1
 800430a:	619a      	str	r2, [r3, #24]
 800430c:	e060      	b.n	80043d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2b04      	cmp	r3, #4
 8004312:	d11c      	bne.n	800434e <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	6818      	ldr	r0, [r3, #0]
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	6819      	ldr	r1, [r3, #0]
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	685a      	ldr	r2, [r3, #4]
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	68db      	ldr	r3, [r3, #12]
 8004324:	f000 fd03 	bl	8004d2e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	699a      	ldr	r2, [r3, #24]
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004336:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	6999      	ldr	r1, [r3, #24]
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	689b      	ldr	r3, [r3, #8]
 8004342:	021a      	lsls	r2, r3, #8
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	430a      	orrs	r2, r1
 800434a:	619a      	str	r2, [r3, #24]
 800434c:	e040      	b.n	80043d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2b08      	cmp	r3, #8
 8004352:	d11b      	bne.n	800438c <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	6818      	ldr	r0, [r3, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6819      	ldr	r1, [r3, #0]
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	68db      	ldr	r3, [r3, #12]
 8004364:	f000 fd50 	bl	8004e08 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	69da      	ldr	r2, [r3, #28]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 020c 	bic.w	r2, r2, #12
 8004376:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	69d9      	ldr	r1, [r3, #28]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	689a      	ldr	r2, [r3, #8]
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	430a      	orrs	r2, r1
 8004388:	61da      	str	r2, [r3, #28]
 800438a:	e021      	b.n	80043d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b0c      	cmp	r3, #12
 8004390:	d11c      	bne.n	80043cc <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	68bb      	ldr	r3, [r7, #8]
 8004398:	6819      	ldr	r1, [r3, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	68bb      	ldr	r3, [r7, #8]
 80043a0:	68db      	ldr	r3, [r3, #12]
 80043a2:	f000 fd6d 	bl	8004e80 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	69da      	ldr	r2, [r3, #28]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80043b4:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	69d9      	ldr	r1, [r3, #28]
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	021a      	lsls	r2, r3, #8
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	430a      	orrs	r2, r1
 80043c8:	61da      	str	r2, [r3, #28]
 80043ca:	e001      	b.n	80043d0 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80043da:	4618      	mov	r0, r3
 80043dc:	3718      	adds	r7, #24
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}
	...

080043e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b086      	sub	sp, #24
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	60f8      	str	r0, [r7, #12]
 80043ec:	60b9      	str	r1, [r7, #8]
 80043ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043f0:	2300      	movs	r3, #0
 80043f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d101      	bne.n	8004402 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80043fe:	2302      	movs	r3, #2
 8004400:	e0ae      	b.n	8004560 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	2201      	movs	r2, #1
 8004406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2b0c      	cmp	r3, #12
 800440e:	f200 809f 	bhi.w	8004550 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004412:	a201      	add	r2, pc, #4	; (adr r2, 8004418 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004414:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004418:	0800444d 	.word	0x0800444d
 800441c:	08004551 	.word	0x08004551
 8004420:	08004551 	.word	0x08004551
 8004424:	08004551 	.word	0x08004551
 8004428:	0800448d 	.word	0x0800448d
 800442c:	08004551 	.word	0x08004551
 8004430:	08004551 	.word	0x08004551
 8004434:	08004551 	.word	0x08004551
 8004438:	080044cf 	.word	0x080044cf
 800443c:	08004551 	.word	0x08004551
 8004440:	08004551 	.word	0x08004551
 8004444:	08004551 	.word	0x08004551
 8004448:	0800450f 	.word	0x0800450f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	68b9      	ldr	r1, [r7, #8]
 8004452:	4618      	mov	r0, r3
 8004454:	f000 fa18 	bl	8004888 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	699a      	ldr	r2, [r3, #24]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0208 	orr.w	r2, r2, #8
 8004466:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	699a      	ldr	r2, [r3, #24]
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	f022 0204 	bic.w	r2, r2, #4
 8004476:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6999      	ldr	r1, [r3, #24]
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	691a      	ldr	r2, [r3, #16]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	430a      	orrs	r2, r1
 8004488:	619a      	str	r2, [r3, #24]
      break;
 800448a:	e064      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	68b9      	ldr	r1, [r7, #8]
 8004492:	4618      	mov	r0, r3
 8004494:	f000 fa68 	bl	8004968 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	699a      	ldr	r2, [r3, #24]
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80044a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	699a      	ldr	r2, [r3, #24]
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6999      	ldr	r1, [r3, #24]
 80044be:	68bb      	ldr	r3, [r7, #8]
 80044c0:	691b      	ldr	r3, [r3, #16]
 80044c2:	021a      	lsls	r2, r3, #8
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	430a      	orrs	r2, r1
 80044ca:	619a      	str	r2, [r3, #24]
      break;
 80044cc:	e043      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	68b9      	ldr	r1, [r7, #8]
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 fabd 	bl	8004a54 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	69da      	ldr	r2, [r3, #28]
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f042 0208 	orr.w	r2, r2, #8
 80044e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	69da      	ldr	r2, [r3, #28]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f022 0204 	bic.w	r2, r2, #4
 80044f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	69d9      	ldr	r1, [r3, #28]
 8004500:	68bb      	ldr	r3, [r7, #8]
 8004502:	691a      	ldr	r2, [r3, #16]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	61da      	str	r2, [r3, #28]
      break;
 800450c:	e023      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	68b9      	ldr	r1, [r7, #8]
 8004514:	4618      	mov	r0, r3
 8004516:	f000 fb11 	bl	8004b3c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	69da      	ldr	r2, [r3, #28]
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004528:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	69da      	ldr	r2, [r3, #28]
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004538:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69d9      	ldr	r1, [r3, #28]
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	691b      	ldr	r3, [r3, #16]
 8004544:	021a      	lsls	r2, r3, #8
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	430a      	orrs	r2, r1
 800454c:	61da      	str	r2, [r3, #28]
      break;
 800454e:	e002      	b.n	8004556 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004550:	2301      	movs	r3, #1
 8004552:	75fb      	strb	r3, [r7, #23]
      break;
 8004554:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	2200      	movs	r2, #0
 800455a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800455e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004560:	4618      	mov	r0, r3
 8004562:	3718      	adds	r7, #24
 8004564:	46bd      	mov	sp, r7
 8004566:	bd80      	pop	{r7, pc}

08004568 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b084      	sub	sp, #16
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
 8004570:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_TIM_ConfigClockSource+0x1c>
 8004580:	2302      	movs	r3, #2
 8004582:	e0b4      	b.n	80046ee <HAL_TIM_ConfigClockSource+0x186>
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	2202      	movs	r2, #2
 8004590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80045a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68ba      	ldr	r2, [r7, #8]
 80045b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045bc:	d03e      	beq.n	800463c <HAL_TIM_ConfigClockSource+0xd4>
 80045be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045c2:	f200 8087 	bhi.w	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045ca:	f000 8086 	beq.w	80046da <HAL_TIM_ConfigClockSource+0x172>
 80045ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045d2:	d87f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045d4:	2b70      	cmp	r3, #112	; 0x70
 80045d6:	d01a      	beq.n	800460e <HAL_TIM_ConfigClockSource+0xa6>
 80045d8:	2b70      	cmp	r3, #112	; 0x70
 80045da:	d87b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045dc:	2b60      	cmp	r3, #96	; 0x60
 80045de:	d050      	beq.n	8004682 <HAL_TIM_ConfigClockSource+0x11a>
 80045e0:	2b60      	cmp	r3, #96	; 0x60
 80045e2:	d877      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045e4:	2b50      	cmp	r3, #80	; 0x50
 80045e6:	d03c      	beq.n	8004662 <HAL_TIM_ConfigClockSource+0xfa>
 80045e8:	2b50      	cmp	r3, #80	; 0x50
 80045ea:	d873      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045ec:	2b40      	cmp	r3, #64	; 0x40
 80045ee:	d058      	beq.n	80046a2 <HAL_TIM_ConfigClockSource+0x13a>
 80045f0:	2b40      	cmp	r3, #64	; 0x40
 80045f2:	d86f      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045f4:	2b30      	cmp	r3, #48	; 0x30
 80045f6:	d064      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 80045f8:	2b30      	cmp	r3, #48	; 0x30
 80045fa:	d86b      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d060      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004600:	2b20      	cmp	r3, #32
 8004602:	d867      	bhi.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004604:	2b00      	cmp	r3, #0
 8004606:	d05c      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004608:	2b10      	cmp	r3, #16
 800460a:	d05a      	beq.n	80046c2 <HAL_TIM_ConfigClockSource+0x15a>
 800460c:	e062      	b.n	80046d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6818      	ldr	r0, [r3, #0]
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	6899      	ldr	r1, [r3, #8]
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685a      	ldr	r2, [r3, #4]
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	68db      	ldr	r3, [r3, #12]
 800461e:	f000 fc87 	bl	8004f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	68ba      	ldr	r2, [r7, #8]
 8004638:	609a      	str	r2, [r3, #8]
      break;
 800463a:	e04f      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6818      	ldr	r0, [r3, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	6899      	ldr	r1, [r3, #8]
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	685a      	ldr	r2, [r3, #4]
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	68db      	ldr	r3, [r3, #12]
 800464c:	f000 fc70 	bl	8004f30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689a      	ldr	r2, [r3, #8]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800465e:	609a      	str	r2, [r3, #8]
      break;
 8004660:	e03c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	6818      	ldr	r0, [r3, #0]
 8004666:	683b      	ldr	r3, [r7, #0]
 8004668:	6859      	ldr	r1, [r3, #4]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	461a      	mov	r2, r3
 8004670:	f000 fb2e 	bl	8004cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	2150      	movs	r1, #80	; 0x50
 800467a:	4618      	mov	r0, r3
 800467c:	f000 fc3d 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 8004680:	e02c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6818      	ldr	r0, [r3, #0]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	6859      	ldr	r1, [r3, #4]
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	68db      	ldr	r3, [r3, #12]
 800468e:	461a      	mov	r2, r3
 8004690:	f000 fb8a 	bl	8004da8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2160      	movs	r1, #96	; 0x60
 800469a:	4618      	mov	r0, r3
 800469c:	f000 fc2d 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 80046a0:	e01c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6818      	ldr	r0, [r3, #0]
 80046a6:	683b      	ldr	r3, [r7, #0]
 80046a8:	6859      	ldr	r1, [r3, #4]
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	68db      	ldr	r3, [r3, #12]
 80046ae:	461a      	mov	r2, r3
 80046b0:	f000 fb0e 	bl	8004cd0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	2140      	movs	r1, #64	; 0x40
 80046ba:	4618      	mov	r0, r3
 80046bc:	f000 fc1d 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 80046c0:	e00c      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4619      	mov	r1, r3
 80046cc:	4610      	mov	r0, r2
 80046ce:	f000 fc14 	bl	8004efa <TIM_ITRx_SetConfig>
      break;
 80046d2:	e003      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	73fb      	strb	r3, [r7, #15]
      break;
 80046d8:	e000      	b.n	80046dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80046da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2200      	movs	r2, #0
 80046e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80046ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	3710      	adds	r7, #16
 80046f2:	46bd      	mov	sp, r7
 80046f4:	bd80      	pop	{r7, pc}

080046f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80046f6:	b480      	push	{r7}
 80046f8:	b083      	sub	sp, #12
 80046fa:	af00      	add	r7, sp, #0
 80046fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80046fe:	bf00      	nop
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800471e:	b480      	push	{r7}
 8004720:	b083      	sub	sp, #12
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004726:	bf00      	nop
 8004728:	370c      	adds	r7, #12
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr

08004732 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004732:	b480      	push	{r7}
 8004734:	b083      	sub	sp, #12
 8004736:	af00      	add	r7, sp, #0
 8004738:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800473a:	bf00      	nop
 800473c:	370c      	adds	r7, #12
 800473e:	46bd      	mov	sp, r7
 8004740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004744:	4770      	bx	lr
	...

08004748 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004748:	b480      	push	{r7}
 800474a:	b085      	sub	sp, #20
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	4a40      	ldr	r2, [pc, #256]	; (800485c <TIM_Base_SetConfig+0x114>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d013      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004766:	d00f      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a3d      	ldr	r2, [pc, #244]	; (8004860 <TIM_Base_SetConfig+0x118>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d00b      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a3c      	ldr	r2, [pc, #240]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d007      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	4a3b      	ldr	r2, [pc, #236]	; (8004868 <TIM_Base_SetConfig+0x120>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d003      	beq.n	8004788 <TIM_Base_SetConfig+0x40>
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	4a3a      	ldr	r2, [pc, #232]	; (800486c <TIM_Base_SetConfig+0x124>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d108      	bne.n	800479a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800478e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	685b      	ldr	r3, [r3, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	4313      	orrs	r3, r2
 8004798:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	4a2f      	ldr	r2, [pc, #188]	; (800485c <TIM_Base_SetConfig+0x114>)
 800479e:	4293      	cmp	r3, r2
 80047a0:	d02b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047a8:	d027      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a2c      	ldr	r2, [pc, #176]	; (8004860 <TIM_Base_SetConfig+0x118>)
 80047ae:	4293      	cmp	r3, r2
 80047b0:	d023      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	4a2b      	ldr	r2, [pc, #172]	; (8004864 <TIM_Base_SetConfig+0x11c>)
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d01f      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a2a      	ldr	r2, [pc, #168]	; (8004868 <TIM_Base_SetConfig+0x120>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d01b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	4a29      	ldr	r2, [pc, #164]	; (800486c <TIM_Base_SetConfig+0x124>)
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d017      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	4a28      	ldr	r2, [pc, #160]	; (8004870 <TIM_Base_SetConfig+0x128>)
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d013      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a27      	ldr	r2, [pc, #156]	; (8004874 <TIM_Base_SetConfig+0x12c>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d00f      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	4a26      	ldr	r2, [pc, #152]	; (8004878 <TIM_Base_SetConfig+0x130>)
 80047de:	4293      	cmp	r3, r2
 80047e0:	d00b      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	4a25      	ldr	r2, [pc, #148]	; (800487c <TIM_Base_SetConfig+0x134>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d007      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	4a24      	ldr	r2, [pc, #144]	; (8004880 <TIM_Base_SetConfig+0x138>)
 80047ee:	4293      	cmp	r3, r2
 80047f0:	d003      	beq.n	80047fa <TIM_Base_SetConfig+0xb2>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	4a23      	ldr	r2, [pc, #140]	; (8004884 <TIM_Base_SetConfig+0x13c>)
 80047f6:	4293      	cmp	r3, r2
 80047f8:	d108      	bne.n	800480c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68db      	ldr	r3, [r3, #12]
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	695b      	ldr	r3, [r3, #20]
 8004816:	4313      	orrs	r3, r2
 8004818:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	68fa      	ldr	r2, [r7, #12]
 800481e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004820:	683b      	ldr	r3, [r7, #0]
 8004822:	689a      	ldr	r2, [r3, #8]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	681a      	ldr	r2, [r3, #0]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	4a0a      	ldr	r2, [pc, #40]	; (800485c <TIM_Base_SetConfig+0x114>)
 8004834:	4293      	cmp	r3, r2
 8004836:	d003      	beq.n	8004840 <TIM_Base_SetConfig+0xf8>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0c      	ldr	r2, [pc, #48]	; (800486c <TIM_Base_SetConfig+0x124>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d103      	bne.n	8004848 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	691a      	ldr	r2, [r3, #16]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2201      	movs	r2, #1
 800484c:	615a      	str	r2, [r3, #20]
}
 800484e:	bf00      	nop
 8004850:	3714      	adds	r7, #20
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000
 8004860:	40000400 	.word	0x40000400
 8004864:	40000800 	.word	0x40000800
 8004868:	40000c00 	.word	0x40000c00
 800486c:	40010400 	.word	0x40010400
 8004870:	40014000 	.word	0x40014000
 8004874:	40014400 	.word	0x40014400
 8004878:	40014800 	.word	0x40014800
 800487c:	40001800 	.word	0x40001800
 8004880:	40001c00 	.word	0x40001c00
 8004884:	40002000 	.word	0x40002000

08004888 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004888:	b480      	push	{r7}
 800488a:	b087      	sub	sp, #28
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	6a1b      	ldr	r3, [r3, #32]
 8004896:	f023 0201 	bic.w	r2, r3, #1
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6a1b      	ldr	r3, [r3, #32]
 80048a2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	699b      	ldr	r3, [r3, #24]
 80048ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80048b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f023 0303 	bic.w	r3, r3, #3
 80048be:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80048c0:	683b      	ldr	r3, [r7, #0]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	68fa      	ldr	r2, [r7, #12]
 80048c6:	4313      	orrs	r3, r2
 80048c8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80048ca:	697b      	ldr	r3, [r7, #20]
 80048cc:	f023 0302 	bic.w	r3, r3, #2
 80048d0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	697a      	ldr	r2, [r7, #20]
 80048d8:	4313      	orrs	r3, r2
 80048da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	4a20      	ldr	r2, [pc, #128]	; (8004960 <TIM_OC1_SetConfig+0xd8>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d003      	beq.n	80048ec <TIM_OC1_SetConfig+0x64>
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <TIM_OC1_SetConfig+0xdc>)
 80048e8:	4293      	cmp	r3, r2
 80048ea:	d10c      	bne.n	8004906 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80048ec:	697b      	ldr	r3, [r7, #20]
 80048ee:	f023 0308 	bic.w	r3, r3, #8
 80048f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	68db      	ldr	r3, [r3, #12]
 80048f8:	697a      	ldr	r2, [r7, #20]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80048fe:	697b      	ldr	r3, [r7, #20]
 8004900:	f023 0304 	bic.w	r3, r3, #4
 8004904:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	4a15      	ldr	r2, [pc, #84]	; (8004960 <TIM_OC1_SetConfig+0xd8>)
 800490a:	4293      	cmp	r3, r2
 800490c:	d003      	beq.n	8004916 <TIM_OC1_SetConfig+0x8e>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <TIM_OC1_SetConfig+0xdc>)
 8004912:	4293      	cmp	r3, r2
 8004914:	d111      	bne.n	800493a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800491c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	693a      	ldr	r2, [r7, #16]
 800492c:	4313      	orrs	r3, r2
 800492e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	699b      	ldr	r3, [r3, #24]
 8004934:	693a      	ldr	r2, [r7, #16]
 8004936:	4313      	orrs	r3, r2
 8004938:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	693a      	ldr	r2, [r7, #16]
 800493e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68fa      	ldr	r2, [r7, #12]
 8004944:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	685a      	ldr	r2, [r3, #4]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	697a      	ldr	r2, [r7, #20]
 8004952:	621a      	str	r2, [r3, #32]
}
 8004954:	bf00      	nop
 8004956:	371c      	adds	r7, #28
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr
 8004960:	40010000 	.word	0x40010000
 8004964:	40010400 	.word	0x40010400

08004968 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004968:	b480      	push	{r7}
 800496a:	b087      	sub	sp, #28
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	6a1b      	ldr	r3, [r3, #32]
 8004976:	f023 0210 	bic.w	r2, r3, #16
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a1b      	ldr	r3, [r3, #32]
 8004982:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	699b      	ldr	r3, [r3, #24]
 800498e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004996:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800499e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80049a0:	683b      	ldr	r3, [r7, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	021b      	lsls	r3, r3, #8
 80049a6:	68fa      	ldr	r2, [r7, #12]
 80049a8:	4313      	orrs	r3, r2
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80049ac:	697b      	ldr	r3, [r7, #20]
 80049ae:	f023 0320 	bic.w	r3, r3, #32
 80049b2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	689b      	ldr	r3, [r3, #8]
 80049b8:	011b      	lsls	r3, r3, #4
 80049ba:	697a      	ldr	r2, [r7, #20]
 80049bc:	4313      	orrs	r3, r2
 80049be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	4a22      	ldr	r2, [pc, #136]	; (8004a4c <TIM_OC2_SetConfig+0xe4>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d003      	beq.n	80049d0 <TIM_OC2_SetConfig+0x68>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	4a21      	ldr	r2, [pc, #132]	; (8004a50 <TIM_OC2_SetConfig+0xe8>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10d      	bne.n	80049ec <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80049d0:	697b      	ldr	r3, [r7, #20]
 80049d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80049d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	011b      	lsls	r3, r3, #4
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80049e4:	697b      	ldr	r3, [r7, #20]
 80049e6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80049ea:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	4a17      	ldr	r2, [pc, #92]	; (8004a4c <TIM_OC2_SetConfig+0xe4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d003      	beq.n	80049fc <TIM_OC2_SetConfig+0x94>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	4a16      	ldr	r2, [pc, #88]	; (8004a50 <TIM_OC2_SetConfig+0xe8>)
 80049f8:	4293      	cmp	r3, r2
 80049fa:	d113      	bne.n	8004a24 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80049fc:	693b      	ldr	r3, [r7, #16]
 80049fe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a02:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a0a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	695b      	ldr	r3, [r3, #20]
 8004a10:	009b      	lsls	r3, r3, #2
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	699b      	ldr	r3, [r3, #24]
 8004a1c:	009b      	lsls	r3, r3, #2
 8004a1e:	693a      	ldr	r2, [r7, #16]
 8004a20:	4313      	orrs	r3, r2
 8004a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	693a      	ldr	r2, [r7, #16]
 8004a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	68fa      	ldr	r2, [r7, #12]
 8004a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	621a      	str	r2, [r3, #32]
}
 8004a3e:	bf00      	nop
 8004a40:	371c      	adds	r7, #28
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40010400 	.word	0x40010400

08004a54 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b087      	sub	sp, #28
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
 8004a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a1b      	ldr	r3, [r3, #32]
 8004a62:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a1b      	ldr	r3, [r3, #32]
 8004a6e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f023 0303 	bic.w	r3, r3, #3
 8004a8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68fa      	ldr	r2, [r7, #12]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004a96:	697b      	ldr	r3, [r7, #20]
 8004a98:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a9c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	689b      	ldr	r3, [r3, #8]
 8004aa2:	021b      	lsls	r3, r3, #8
 8004aa4:	697a      	ldr	r2, [r7, #20]
 8004aa6:	4313      	orrs	r3, r2
 8004aa8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a21      	ldr	r2, [pc, #132]	; (8004b34 <TIM_OC3_SetConfig+0xe0>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d003      	beq.n	8004aba <TIM_OC3_SetConfig+0x66>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	4a20      	ldr	r2, [pc, #128]	; (8004b38 <TIM_OC3_SetConfig+0xe4>)
 8004ab6:	4293      	cmp	r3, r2
 8004ab8:	d10d      	bne.n	8004ad6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004aba:	697b      	ldr	r3, [r7, #20]
 8004abc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004ac0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	68db      	ldr	r3, [r3, #12]
 8004ac6:	021b      	lsls	r3, r3, #8
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	4313      	orrs	r3, r2
 8004acc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004ace:	697b      	ldr	r3, [r7, #20]
 8004ad0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ad4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	4a16      	ldr	r2, [pc, #88]	; (8004b34 <TIM_OC3_SetConfig+0xe0>)
 8004ada:	4293      	cmp	r3, r2
 8004adc:	d003      	beq.n	8004ae6 <TIM_OC3_SetConfig+0x92>
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	4a15      	ldr	r2, [pc, #84]	; (8004b38 <TIM_OC3_SetConfig+0xe4>)
 8004ae2:	4293      	cmp	r3, r2
 8004ae4:	d113      	bne.n	8004b0e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004ae6:	693b      	ldr	r3, [r7, #16]
 8004ae8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004aee:	693b      	ldr	r3, [r7, #16]
 8004af0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004af4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	695b      	ldr	r3, [r3, #20]
 8004afa:	011b      	lsls	r3, r3, #4
 8004afc:	693a      	ldr	r2, [r7, #16]
 8004afe:	4313      	orrs	r3, r2
 8004b00:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	699b      	ldr	r3, [r3, #24]
 8004b06:	011b      	lsls	r3, r3, #4
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	4313      	orrs	r3, r2
 8004b0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	693a      	ldr	r2, [r7, #16]
 8004b12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68fa      	ldr	r2, [r7, #12]
 8004b18:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685a      	ldr	r2, [r3, #4]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	697a      	ldr	r2, [r7, #20]
 8004b26:	621a      	str	r2, [r3, #32]
}
 8004b28:	bf00      	nop
 8004b2a:	371c      	adds	r7, #28
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40010400 	.word	0x40010400

08004b3c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b087      	sub	sp, #28
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6a1b      	ldr	r3, [r3, #32]
 8004b4a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a1b      	ldr	r3, [r3, #32]
 8004b56:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	69db      	ldr	r3, [r3, #28]
 8004b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	021b      	lsls	r3, r3, #8
 8004b7a:	68fa      	ldr	r2, [r7, #12]
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b86:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	031b      	lsls	r3, r3, #12
 8004b8e:	693a      	ldr	r2, [r7, #16]
 8004b90:	4313      	orrs	r3, r2
 8004b92:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a12      	ldr	r2, [pc, #72]	; (8004be0 <TIM_OC4_SetConfig+0xa4>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d003      	beq.n	8004ba4 <TIM_OC4_SetConfig+0x68>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a11      	ldr	r2, [pc, #68]	; (8004be4 <TIM_OC4_SetConfig+0xa8>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d109      	bne.n	8004bb8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ba4:	697b      	ldr	r3, [r7, #20]
 8004ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004baa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	695b      	ldr	r3, [r3, #20]
 8004bb0:	019b      	lsls	r3, r3, #6
 8004bb2:	697a      	ldr	r2, [r7, #20]
 8004bb4:	4313      	orrs	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685a      	ldr	r2, [r3, #4]
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	693a      	ldr	r2, [r7, #16]
 8004bd0:	621a      	str	r2, [r3, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	371c      	adds	r7, #28
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bdc:	4770      	bx	lr
 8004bde:	bf00      	nop
 8004be0:	40010000 	.word	0x40010000
 8004be4:	40010400 	.word	0x40010400

08004be8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004be8:	b480      	push	{r7}
 8004bea:	b087      	sub	sp, #28
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	60f8      	str	r0, [r7, #12]
 8004bf0:	60b9      	str	r1, [r7, #8]
 8004bf2:	607a      	str	r2, [r7, #4]
 8004bf4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	6a1b      	ldr	r3, [r3, #32]
 8004bfa:	f023 0201 	bic.w	r2, r3, #1
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	699b      	ldr	r3, [r3, #24]
 8004c06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	4a28      	ldr	r2, [pc, #160]	; (8004cb4 <TIM_TI1_SetConfig+0xcc>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d01b      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1c:	d017      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	4a25      	ldr	r2, [pc, #148]	; (8004cb8 <TIM_TI1_SetConfig+0xd0>)
 8004c22:	4293      	cmp	r3, r2
 8004c24:	d013      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <TIM_TI1_SetConfig+0xd4>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d00f      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <TIM_TI1_SetConfig+0xd8>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d00b      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <TIM_TI1_SetConfig+0xdc>)
 8004c3a:	4293      	cmp	r3, r2
 8004c3c:	d007      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	4a21      	ldr	r2, [pc, #132]	; (8004cc8 <TIM_TI1_SetConfig+0xe0>)
 8004c42:	4293      	cmp	r3, r2
 8004c44:	d003      	beq.n	8004c4e <TIM_TI1_SetConfig+0x66>
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	4a20      	ldr	r2, [pc, #128]	; (8004ccc <TIM_TI1_SetConfig+0xe4>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d101      	bne.n	8004c52 <TIM_TI1_SetConfig+0x6a>
 8004c4e:	2301      	movs	r3, #1
 8004c50:	e000      	b.n	8004c54 <TIM_TI1_SetConfig+0x6c>
 8004c52:	2300      	movs	r3, #0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d008      	beq.n	8004c6a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004c58:	697b      	ldr	r3, [r7, #20]
 8004c5a:	f023 0303 	bic.w	r3, r3, #3
 8004c5e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004c60:	697a      	ldr	r2, [r7, #20]
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	4313      	orrs	r3, r2
 8004c66:	617b      	str	r3, [r7, #20]
 8004c68:	e003      	b.n	8004c72 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	f043 0301 	orr.w	r3, r3, #1
 8004c70:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c78:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	011b      	lsls	r3, r3, #4
 8004c7e:	b2db      	uxtb	r3, r3
 8004c80:	697a      	ldr	r2, [r7, #20]
 8004c82:	4313      	orrs	r3, r2
 8004c84:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	f023 030a 	bic.w	r3, r3, #10
 8004c8c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f003 030a 	and.w	r3, r3, #10
 8004c94:	693a      	ldr	r2, [r7, #16]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	693a      	ldr	r2, [r7, #16]
 8004ca4:	621a      	str	r2, [r3, #32]
}
 8004ca6:	bf00      	nop
 8004ca8:	371c      	adds	r7, #28
 8004caa:	46bd      	mov	sp, r7
 8004cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb0:	4770      	bx	lr
 8004cb2:	bf00      	nop
 8004cb4:	40010000 	.word	0x40010000
 8004cb8:	40000400 	.word	0x40000400
 8004cbc:	40000800 	.word	0x40000800
 8004cc0:	40000c00 	.word	0x40000c00
 8004cc4:	40010400 	.word	0x40010400
 8004cc8:	40014000 	.word	0x40014000
 8004ccc:	40001800 	.word	0x40001800

08004cd0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b087      	sub	sp, #28
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6a1b      	ldr	r3, [r3, #32]
 8004ce6:	f023 0201 	bic.w	r2, r3, #1
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004cf4:	693b      	ldr	r3, [r7, #16]
 8004cf6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004cfa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	011b      	lsls	r3, r3, #4
 8004d00:	693a      	ldr	r2, [r7, #16]
 8004d02:	4313      	orrs	r3, r2
 8004d04:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d06:	697b      	ldr	r3, [r7, #20]
 8004d08:	f023 030a 	bic.w	r3, r3, #10
 8004d0c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d0e:	697a      	ldr	r2, [r7, #20]
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	697a      	ldr	r2, [r7, #20]
 8004d20:	621a      	str	r2, [r3, #32]
}
 8004d22:	bf00      	nop
 8004d24:	371c      	adds	r7, #28
 8004d26:	46bd      	mov	sp, r7
 8004d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2c:	4770      	bx	lr

08004d2e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004d2e:	b480      	push	{r7}
 8004d30:	b087      	sub	sp, #28
 8004d32:	af00      	add	r7, sp, #0
 8004d34:	60f8      	str	r0, [r7, #12]
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	607a      	str	r2, [r7, #4]
 8004d3a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	6a1b      	ldr	r3, [r3, #32]
 8004d40:	f023 0210 	bic.w	r2, r3, #16
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	699b      	ldr	r3, [r3, #24]
 8004d4c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	6a1b      	ldr	r3, [r3, #32]
 8004d52:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	021b      	lsls	r3, r3, #8
 8004d60:	697a      	ldr	r2, [r7, #20]
 8004d62:	4313      	orrs	r3, r2
 8004d64:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004d66:	697b      	ldr	r3, [r7, #20]
 8004d68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004d6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	031b      	lsls	r3, r3, #12
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	697a      	ldr	r2, [r7, #20]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d80:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	011b      	lsls	r3, r3, #4
 8004d86:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004d8a:	693a      	ldr	r2, [r7, #16]
 8004d8c:	4313      	orrs	r3, r2
 8004d8e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	697a      	ldr	r2, [r7, #20]
 8004d94:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	693a      	ldr	r2, [r7, #16]
 8004d9a:	621a      	str	r2, [r3, #32]
}
 8004d9c:	bf00      	nop
 8004d9e:	371c      	adds	r7, #28
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b087      	sub	sp, #28
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	60f8      	str	r0, [r7, #12]
 8004db0:	60b9      	str	r1, [r7, #8]
 8004db2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6a1b      	ldr	r3, [r3, #32]
 8004db8:	f023 0210 	bic.w	r2, r3, #16
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	699b      	ldr	r3, [r3, #24]
 8004dc4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	6a1b      	ldr	r3, [r3, #32]
 8004dca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004dd2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	031b      	lsls	r3, r3, #12
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	4313      	orrs	r3, r2
 8004ddc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004de4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004de6:	68bb      	ldr	r3, [r7, #8]
 8004de8:	011b      	lsls	r3, r3, #4
 8004dea:	693a      	ldr	r2, [r7, #16]
 8004dec:	4313      	orrs	r3, r2
 8004dee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	697a      	ldr	r2, [r7, #20]
 8004df4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	693a      	ldr	r2, [r7, #16]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	bf00      	nop
 8004dfe:	371c      	adds	r7, #28
 8004e00:	46bd      	mov	sp, r7
 8004e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e06:	4770      	bx	lr

08004e08 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
 8004e14:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	6a1b      	ldr	r3, [r3, #32]
 8004e1a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	69db      	ldr	r3, [r3, #28]
 8004e26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6a1b      	ldr	r3, [r3, #32]
 8004e2c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8004e2e:	697b      	ldr	r3, [r7, #20]
 8004e30:	f023 0303 	bic.w	r3, r3, #3
 8004e34:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004e36:	697a      	ldr	r2, [r7, #20]
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	4313      	orrs	r3, r2
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004e44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	011b      	lsls	r3, r3, #4
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	697a      	ldr	r2, [r7, #20]
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004e52:	693b      	ldr	r3, [r7, #16]
 8004e54:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004e58:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	021b      	lsls	r3, r3, #8
 8004e5e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004e62:	693a      	ldr	r2, [r7, #16]
 8004e64:	4313      	orrs	r3, r2
 8004e66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	621a      	str	r2, [r3, #32]
}
 8004e74:	bf00      	nop
 8004e76:	371c      	adds	r7, #28
 8004e78:	46bd      	mov	sp, r7
 8004e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7e:	4770      	bx	lr

08004e80 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004e80:	b480      	push	{r7}
 8004e82:	b087      	sub	sp, #28
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	6a1b      	ldr	r3, [r3, #32]
 8004e92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	69db      	ldr	r3, [r3, #28]
 8004e9e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004ea0:	68fb      	ldr	r3, [r7, #12]
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004eac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	021b      	lsls	r3, r3, #8
 8004eb2:	697a      	ldr	r2, [r7, #20]
 8004eb4:	4313      	orrs	r3, r2
 8004eb6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004eb8:	697b      	ldr	r3, [r7, #20]
 8004eba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004ebe:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	031b      	lsls	r3, r3, #12
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4313      	orrs	r3, r2
 8004eca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8004ed2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8004ed4:	68bb      	ldr	r3, [r7, #8]
 8004ed6:	031b      	lsls	r3, r3, #12
 8004ed8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004edc:	693a      	ldr	r2, [r7, #16]
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004ee2:	68fb      	ldr	r3, [r7, #12]
 8004ee4:	697a      	ldr	r2, [r7, #20]
 8004ee6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	693a      	ldr	r2, [r7, #16]
 8004eec:	621a      	str	r2, [r3, #32]
}
 8004eee:	bf00      	nop
 8004ef0:	371c      	adds	r7, #28
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef8:	4770      	bx	lr

08004efa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004efa:	b480      	push	{r7}
 8004efc:	b085      	sub	sp, #20
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	6078      	str	r0, [r7, #4]
 8004f02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004f12:	683a      	ldr	r2, [r7, #0]
 8004f14:	68fb      	ldr	r3, [r7, #12]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	f043 0307 	orr.w	r3, r3, #7
 8004f1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	68fa      	ldr	r2, [r7, #12]
 8004f22:	609a      	str	r2, [r3, #8]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr

08004f30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004f30:	b480      	push	{r7}
 8004f32:	b087      	sub	sp, #28
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	60f8      	str	r0, [r7, #12]
 8004f38:	60b9      	str	r1, [r7, #8]
 8004f3a:	607a      	str	r2, [r7, #4]
 8004f3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	689b      	ldr	r3, [r3, #8]
 8004f42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	021a      	lsls	r2, r3, #8
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	431a      	orrs	r2, r3
 8004f54:	68bb      	ldr	r3, [r7, #8]
 8004f56:	4313      	orrs	r3, r2
 8004f58:	697a      	ldr	r2, [r7, #20]
 8004f5a:	4313      	orrs	r3, r2
 8004f5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	697a      	ldr	r2, [r7, #20]
 8004f62:	609a      	str	r2, [r3, #8]
}
 8004f64:	bf00      	nop
 8004f66:	371c      	adds	r7, #28
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004f70:	b480      	push	{r7}
 8004f72:	b087      	sub	sp, #28
 8004f74:	af00      	add	r7, sp, #0
 8004f76:	60f8      	str	r0, [r7, #12]
 8004f78:	60b9      	str	r1, [r7, #8]
 8004f7a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004f7c:	68bb      	ldr	r3, [r7, #8]
 8004f7e:	f003 031f 	and.w	r3, r3, #31
 8004f82:	2201      	movs	r2, #1
 8004f84:	fa02 f303 	lsl.w	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	6a1a      	ldr	r2, [r3, #32]
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	43db      	mvns	r3, r3
 8004f92:	401a      	ands	r2, r3
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	6a1a      	ldr	r2, [r3, #32]
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	f003 031f 	and.w	r3, r3, #31
 8004fa2:	6879      	ldr	r1, [r7, #4]
 8004fa4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fa8:	431a      	orrs	r2, r3
 8004faa:	68fb      	ldr	r3, [r7, #12]
 8004fac:	621a      	str	r2, [r3, #32]
}
 8004fae:	bf00      	nop
 8004fb0:	371c      	adds	r7, #28
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
	...

08004fbc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
 8004fc4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fcc:	2b01      	cmp	r3, #1
 8004fce:	d101      	bne.n	8004fd4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004fd0:	2302      	movs	r3, #2
 8004fd2:	e05a      	b.n	800508a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2202      	movs	r2, #2
 8004fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	685b      	ldr	r3, [r3, #4]
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	689b      	ldr	r3, [r3, #8]
 8004ff2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ffa:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68fa      	ldr	r2, [r7, #12]
 8005002:	4313      	orrs	r3, r2
 8005004:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68fa      	ldr	r2, [r7, #12]
 800500c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	4a21      	ldr	r2, [pc, #132]	; (8005098 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d022      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005020:	d01d      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4a1d      	ldr	r2, [pc, #116]	; (800509c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d018      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a1b      	ldr	r2, [pc, #108]	; (80050a0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d013      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	4a1a      	ldr	r2, [pc, #104]	; (80050a4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800503c:	4293      	cmp	r3, r2
 800503e:	d00e      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a18      	ldr	r2, [pc, #96]	; (80050a8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d009      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a17      	ldr	r2, [pc, #92]	; (80050ac <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d004      	beq.n	800505e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a15      	ldr	r2, [pc, #84]	; (80050b0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d10c      	bne.n	8005078 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005064:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	685b      	ldr	r3, [r3, #4]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	4313      	orrs	r3, r2
 800506e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68ba      	ldr	r2, [r7, #8]
 8005076:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2201      	movs	r2, #1
 800507c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005088:	2300      	movs	r3, #0
}
 800508a:	4618      	mov	r0, r3
 800508c:	3714      	adds	r7, #20
 800508e:	46bd      	mov	sp, r7
 8005090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005094:	4770      	bx	lr
 8005096:	bf00      	nop
 8005098:	40010000 	.word	0x40010000
 800509c:	40000400 	.word	0x40000400
 80050a0:	40000800 	.word	0x40000800
 80050a4:	40000c00 	.word	0x40000c00
 80050a8:	40010400 	.word	0x40010400
 80050ac:	40014000 	.word	0x40014000
 80050b0:	40001800 	.word	0x40001800

080050b4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b085      	sub	sp, #20
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
 80050bc:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80050be:	2300      	movs	r3, #0
 80050c0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d101      	bne.n	80050d0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80050cc:	2302      	movs	r3, #2
 80050ce:	e03d      	b.n	800514c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	4313      	orrs	r3, r2
 80050e4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80050ec:	683b      	ldr	r3, [r7, #0]
 80050ee:	689b      	ldr	r3, [r3, #8]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4313      	orrs	r3, r2
 8005100:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4313      	orrs	r3, r2
 800510e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	4313      	orrs	r3, r2
 800511c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	4313      	orrs	r3, r2
 800512a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	69db      	ldr	r3, [r3, #28]
 8005136:	4313      	orrs	r3, r2
 8005138:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	68fa      	ldr	r2, [r7, #12]
 8005140:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	2200      	movs	r2, #0
 8005146:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800514a:	2300      	movs	r3, #0
}
 800514c:	4618      	mov	r0, r3
 800514e:	3714      	adds	r7, #20
 8005150:	46bd      	mov	sp, r7
 8005152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005156:	4770      	bx	lr

08005158 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005158:	b480      	push	{r7}
 800515a:	b083      	sub	sp, #12
 800515c:	af00      	add	r7, sp, #0
 800515e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005160:	bf00      	nop
 8005162:	370c      	adds	r7, #12
 8005164:	46bd      	mov	sp, r7
 8005166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516a:	4770      	bx	lr

0800516c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800516c:	b480      	push	{r7}
 800516e:	b083      	sub	sp, #12
 8005170:	af00      	add	r7, sp, #0
 8005172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005174:	bf00      	nop
 8005176:	370c      	adds	r7, #12
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr

08005180 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b082      	sub	sp, #8
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d101      	bne.n	8005192 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800518e:	2301      	movs	r3, #1
 8005190:	e03f      	b.n	8005212 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b00      	cmp	r3, #0
 800519c:	d106      	bne.n	80051ac <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2200      	movs	r2, #0
 80051a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f7fc fd48 	bl	8001c3c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2224      	movs	r2, #36	; 0x24
 80051b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	68da      	ldr	r2, [r3, #12]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80051c2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 fddf 	bl	8005d88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80051d8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695a      	ldr	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80051e8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	68da      	ldr	r2, [r3, #12]
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80051f8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	2200      	movs	r2, #0
 80051fe:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2220      	movs	r2, #32
 8005204:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2220      	movs	r2, #32
 800520c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005210:	2300      	movs	r3, #0
}
 8005212:	4618      	mov	r0, r3
 8005214:	3708      	adds	r7, #8
 8005216:	46bd      	mov	sp, r7
 8005218:	bd80      	pop	{r7, pc}

0800521a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800521a:	b580      	push	{r7, lr}
 800521c:	b08a      	sub	sp, #40	; 0x28
 800521e:	af02      	add	r7, sp, #8
 8005220:	60f8      	str	r0, [r7, #12]
 8005222:	60b9      	str	r1, [r7, #8]
 8005224:	603b      	str	r3, [r7, #0]
 8005226:	4613      	mov	r3, r2
 8005228:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b20      	cmp	r3, #32
 8005238:	d17c      	bne.n	8005334 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d002      	beq.n	8005246 <HAL_UART_Transmit+0x2c>
 8005240:	88fb      	ldrh	r3, [r7, #6]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e075      	b.n	8005336 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005250:	2b01      	cmp	r3, #1
 8005252:	d101      	bne.n	8005258 <HAL_UART_Transmit+0x3e>
 8005254:	2302      	movs	r3, #2
 8005256:	e06e      	b.n	8005336 <HAL_UART_Transmit+0x11c>
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2221      	movs	r2, #33	; 0x21
 800526a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800526e:	f7fc fe9b 	bl	8001fa8 <HAL_GetTick>
 8005272:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	88fa      	ldrh	r2, [r7, #6]
 8005278:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	88fa      	ldrh	r2, [r7, #6]
 800527e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	689b      	ldr	r3, [r3, #8]
 8005284:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005288:	d108      	bne.n	800529c <HAL_UART_Transmit+0x82>
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d104      	bne.n	800529c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005292:	2300      	movs	r3, #0
 8005294:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	61bb      	str	r3, [r7, #24]
 800529a:	e003      	b.n	80052a4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800529c:	68bb      	ldr	r3, [r7, #8]
 800529e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80052a0:	2300      	movs	r3, #0
 80052a2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2200      	movs	r2, #0
 80052a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80052ac:	e02a      	b.n	8005304 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80052ae:	683b      	ldr	r3, [r7, #0]
 80052b0:	9300      	str	r3, [sp, #0]
 80052b2:	697b      	ldr	r3, [r7, #20]
 80052b4:	2200      	movs	r2, #0
 80052b6:	2180      	movs	r1, #128	; 0x80
 80052b8:	68f8      	ldr	r0, [r7, #12]
 80052ba:	f000 fb1f 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 80052be:	4603      	mov	r3, r0
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d001      	beq.n	80052c8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e036      	b.n	8005336 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80052c8:	69fb      	ldr	r3, [r7, #28]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80052ce:	69bb      	ldr	r3, [r7, #24]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80052de:	69bb      	ldr	r3, [r7, #24]
 80052e0:	3302      	adds	r3, #2
 80052e2:	61bb      	str	r3, [r7, #24]
 80052e4:	e007      	b.n	80052f6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	781a      	ldrb	r2, [r3, #0]
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3301      	adds	r3, #1
 80052f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29a      	uxth	r2, r3
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005308:	b29b      	uxth	r3, r3
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1cf      	bne.n	80052ae <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800530e:	683b      	ldr	r3, [r7, #0]
 8005310:	9300      	str	r3, [sp, #0]
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	2200      	movs	r2, #0
 8005316:	2140      	movs	r1, #64	; 0x40
 8005318:	68f8      	ldr	r0, [r7, #12]
 800531a:	f000 faef 	bl	80058fc <UART_WaitOnFlagUntilTimeout>
 800531e:	4603      	mov	r3, r0
 8005320:	2b00      	cmp	r3, #0
 8005322:	d001      	beq.n	8005328 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005324:	2303      	movs	r3, #3
 8005326:	e006      	b.n	8005336 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	2220      	movs	r2, #32
 800532c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3720      	adds	r7, #32
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}

0800533e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800533e:	b580      	push	{r7, lr}
 8005340:	b084      	sub	sp, #16
 8005342:	af00      	add	r7, sp, #0
 8005344:	60f8      	str	r0, [r7, #12]
 8005346:	60b9      	str	r1, [r7, #8]
 8005348:	4613      	mov	r3, r2
 800534a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b20      	cmp	r3, #32
 8005356:	d11d      	bne.n	8005394 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005358:	68bb      	ldr	r3, [r7, #8]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d002      	beq.n	8005364 <HAL_UART_Receive_IT+0x26>
 800535e:	88fb      	ldrh	r3, [r7, #6]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005364:	2301      	movs	r3, #1
 8005366:	e016      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800536e:	2b01      	cmp	r3, #1
 8005370:	d101      	bne.n	8005376 <HAL_UART_Receive_IT+0x38>
 8005372:	2302      	movs	r3, #2
 8005374:	e00f      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2201      	movs	r2, #1
 800537a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005384:	88fb      	ldrh	r3, [r7, #6]
 8005386:	461a      	mov	r2, r3
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	68f8      	ldr	r0, [r7, #12]
 800538c:	f000 fb24 	bl	80059d8 <UART_Start_Receive_IT>
 8005390:	4603      	mov	r3, r0
 8005392:	e000      	b.n	8005396 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005394:	2302      	movs	r3, #2
  }
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b0ba      	sub	sp, #232	; 0xe8
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	695b      	ldr	r3, [r3, #20]
 80053c2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80053cc:	2300      	movs	r3, #0
 80053ce:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053d6:	f003 030f 	and.w	r3, r3, #15
 80053da:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 80053de:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10f      	bne.n	8005406 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80053ea:	f003 0320 	and.w	r3, r3, #32
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d009      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
 80053f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80053f6:	f003 0320 	and.w	r3, r3, #32
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d003      	beq.n	8005406 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fc07 	bl	8005c12 <UART_Receive_IT>
      return;
 8005404:	e256      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005406:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800540a:	2b00      	cmp	r3, #0
 800540c:	f000 80de 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
 8005410:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005414:	f003 0301 	and.w	r3, r3, #1
 8005418:	2b00      	cmp	r3, #0
 800541a:	d106      	bne.n	800542a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800541c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005420:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 80d1 	beq.w	80055cc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800542e:	f003 0301 	and.w	r3, r3, #1
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
 8005436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800543a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	f043 0201 	orr.w	r2, r3, #1
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005452:	f003 0304 	and.w	r3, r3, #4
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546a:	f043 0202 	orr.w	r2, r3, #2
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005476:	f003 0302 	and.w	r3, r3, #2
 800547a:	2b00      	cmp	r3, #0
 800547c:	d00b      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
 800547e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005482:	f003 0301 	and.w	r3, r3, #1
 8005486:	2b00      	cmp	r3, #0
 8005488:	d005      	beq.n	8005496 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548e:	f043 0204 	orr.w	r2, r3, #4
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800549a:	f003 0308 	and.w	r3, r3, #8
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d011      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
 80054a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054a6:	f003 0320 	and.w	r3, r3, #32
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d105      	bne.n	80054ba <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80054ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80054b2:	f003 0301 	and.w	r3, r3, #1
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d005      	beq.n	80054c6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054be:	f043 0208 	orr.w	r2, r3, #8
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	f000 81ed 	beq.w	80058aa <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80054d4:	f003 0320 	and.w	r3, r3, #32
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d008      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
 80054dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80054e0:	f003 0320 	and.w	r3, r3, #32
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d002      	beq.n	80054ee <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054e8:	6878      	ldr	r0, [r7, #4]
 80054ea:	f000 fb92 	bl	8005c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054f8:	2b40      	cmp	r3, #64	; 0x40
 80054fa:	bf0c      	ite	eq
 80054fc:	2301      	moveq	r3, #1
 80054fe:	2300      	movne	r3, #0
 8005500:	b2db      	uxtb	r3, r3
 8005502:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800550a:	f003 0308 	and.w	r3, r3, #8
 800550e:	2b00      	cmp	r3, #0
 8005510:	d103      	bne.n	800551a <HAL_UART_IRQHandler+0x17a>
 8005512:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8005516:	2b00      	cmp	r3, #0
 8005518:	d04f      	beq.n	80055ba <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800551a:	6878      	ldr	r0, [r7, #4]
 800551c:	f000 fa9a 	bl	8005a54 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800552a:	2b40      	cmp	r3, #64	; 0x40
 800552c:	d141      	bne.n	80055b2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	3314      	adds	r3, #20
 8005534:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005538:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800553c:	e853 3f00 	ldrex	r3, [r3]
 8005540:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8005544:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005548:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800554c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	3314      	adds	r3, #20
 8005556:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800555a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800555e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005562:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8005566:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800556a:	e841 2300 	strex	r3, r2, [r1]
 800556e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8005572:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1d9      	bne.n	800552e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800557e:	2b00      	cmp	r3, #0
 8005580:	d013      	beq.n	80055aa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005586:	4a7d      	ldr	r2, [pc, #500]	; (800577c <HAL_UART_IRQHandler+0x3dc>)
 8005588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	4618      	mov	r0, r3
 8005590:	f7fd f9a8 	bl	80028e4 <HAL_DMA_Abort_IT>
 8005594:	4603      	mov	r3, r0
 8005596:	2b00      	cmp	r3, #0
 8005598:	d016      	beq.n	80055c8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800559e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055a0:	687a      	ldr	r2, [r7, #4]
 80055a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055a4:	4610      	mov	r0, r2
 80055a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a8:	e00e      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80055aa:	6878      	ldr	r0, [r7, #4]
 80055ac:	f000 f990 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b0:	e00a      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80055b2:	6878      	ldr	r0, [r7, #4]
 80055b4:	f000 f98c 	bl	80058d0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055b8:	e006      	b.n	80055c8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80055ba:	6878      	ldr	r0, [r7, #4]
 80055bc:	f000 f988 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	2200      	movs	r2, #0
 80055c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80055c6:	e170      	b.n	80058aa <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055c8:	bf00      	nop
    return;
 80055ca:	e16e      	b.n	80058aa <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	f040 814a 	bne.w	800586a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055da:	f003 0310 	and.w	r3, r3, #16
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f000 8143 	beq.w	800586a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80055e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80055e8:	f003 0310 	and.w	r3, r3, #16
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	f000 813c 	beq.w	800586a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055f2:	2300      	movs	r3, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	60bb      	str	r3, [r7, #8]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	60bb      	str	r3, [r7, #8]
 8005606:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005612:	2b40      	cmp	r3, #64	; 0x40
 8005614:	f040 80b4 	bne.w	8005780 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685b      	ldr	r3, [r3, #4]
 8005620:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005624:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005628:	2b00      	cmp	r3, #0
 800562a:	f000 8140 	beq.w	80058ae <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005632:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005636:	429a      	cmp	r2, r3
 8005638:	f080 8139 	bcs.w	80058ae <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8005642:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005648:	69db      	ldr	r3, [r3, #28]
 800564a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800564e:	f000 8088 	beq.w	8005762 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	330c      	adds	r3, #12
 8005658:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800565c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005660:	e853 3f00 	ldrex	r3, [r3]
 8005664:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8005668:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800566c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005670:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	330c      	adds	r3, #12
 800567a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800567e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005682:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005686:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800568a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800568e:	e841 2300 	strex	r3, r2, [r1]
 8005692:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8005696:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800569a:	2b00      	cmp	r3, #0
 800569c:	d1d9      	bne.n	8005652 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3314      	adds	r3, #20
 80056a4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056a8:	e853 3f00 	ldrex	r3, [r3]
 80056ac:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80056ae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80056b0:	f023 0301 	bic.w	r3, r3, #1
 80056b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	3314      	adds	r3, #20
 80056be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80056c2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80056c6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80056ca:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80056d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d1e1      	bne.n	800569e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	3314      	adds	r3, #20
 80056e0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056e2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80056e4:	e853 3f00 	ldrex	r3, [r3]
 80056e8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80056ea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80056ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80056f0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	3314      	adds	r3, #20
 80056fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80056fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005700:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005702:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005704:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005706:	e841 2300 	strex	r3, r2, [r1]
 800570a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800570c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800570e:	2b00      	cmp	r3, #0
 8005710:	d1e3      	bne.n	80056da <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2220      	movs	r2, #32
 8005716:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	2200      	movs	r2, #0
 800571e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	330c      	adds	r3, #12
 8005726:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005728:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800572a:	e853 3f00 	ldrex	r3, [r3]
 800572e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005730:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005732:	f023 0310 	bic.w	r3, r3, #16
 8005736:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	330c      	adds	r3, #12
 8005740:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005744:	65ba      	str	r2, [r7, #88]	; 0x58
 8005746:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005748:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800574a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800574c:	e841 2300 	strex	r3, r2, [r1]
 8005750:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005752:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005754:	2b00      	cmp	r3, #0
 8005756:	d1e3      	bne.n	8005720 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800575c:	4618      	mov	r0, r3
 800575e:	f7fd f851 	bl	8002804 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800576a:	b29b      	uxth	r3, r3
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	b29b      	uxth	r3, r3
 8005770:	4619      	mov	r1, r3
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 f8b6 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005778:	e099      	b.n	80058ae <HAL_UART_IRQHandler+0x50e>
 800577a:	bf00      	nop
 800577c:	08005b1b 	.word	0x08005b1b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005788:	b29b      	uxth	r3, r3
 800578a:	1ad3      	subs	r3, r2, r3
 800578c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005794:	b29b      	uxth	r3, r3
 8005796:	2b00      	cmp	r3, #0
 8005798:	f000 808b 	beq.w	80058b2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800579c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 8086 	beq.w	80058b2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	330c      	adds	r3, #12
 80057ac:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b0:	e853 3f00 	ldrex	r3, [r3]
 80057b4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80057b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80057bc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	330c      	adds	r3, #12
 80057c6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80057ca:	647a      	str	r2, [r7, #68]	; 0x44
 80057cc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ce:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80057d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80057d2:	e841 2300 	strex	r3, r2, [r1]
 80057d6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80057d8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d1e3      	bne.n	80057a6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	3314      	adds	r3, #20
 80057e4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057e8:	e853 3f00 	ldrex	r3, [r3]
 80057ec:	623b      	str	r3, [r7, #32]
   return(result);
 80057ee:	6a3b      	ldr	r3, [r7, #32]
 80057f0:	f023 0301 	bic.w	r3, r3, #1
 80057f4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	3314      	adds	r3, #20
 80057fe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005802:	633a      	str	r2, [r7, #48]	; 0x30
 8005804:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005806:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005808:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800580a:	e841 2300 	strex	r3, r2, [r1]
 800580e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1e3      	bne.n	80057de <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	2220      	movs	r2, #32
 800581a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	681b      	ldr	r3, [r3, #0]
 8005828:	330c      	adds	r3, #12
 800582a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800582c:	693b      	ldr	r3, [r7, #16]
 800582e:	e853 3f00 	ldrex	r3, [r3]
 8005832:	60fb      	str	r3, [r7, #12]
   return(result);
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	f023 0310 	bic.w	r3, r3, #16
 800583a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	330c      	adds	r3, #12
 8005844:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005848:	61fa      	str	r2, [r7, #28]
 800584a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800584c:	69b9      	ldr	r1, [r7, #24]
 800584e:	69fa      	ldr	r2, [r7, #28]
 8005850:	e841 2300 	strex	r3, r2, [r1]
 8005854:	617b      	str	r3, [r7, #20]
   return(result);
 8005856:	697b      	ldr	r3, [r7, #20]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1e3      	bne.n	8005824 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800585c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005860:	4619      	mov	r1, r3
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f000 f83e 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005868:	e023      	b.n	80058b2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800586e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_UART_IRQHandler+0x4ea>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800587a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 f95d 	bl	8005b42 <UART_Transmit_IT>
    return;
 8005888:	e014      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800588a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800588e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005892:	2b00      	cmp	r3, #0
 8005894:	d00e      	beq.n	80058b4 <HAL_UART_IRQHandler+0x514>
 8005896:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800589a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d008      	beq.n	80058b4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80058a2:	6878      	ldr	r0, [r7, #4]
 80058a4:	f000 f99d 	bl	8005be2 <UART_EndTransmit_IT>
    return;
 80058a8:	e004      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
    return;
 80058aa:	bf00      	nop
 80058ac:	e002      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
      return;
 80058ae:	bf00      	nop
 80058b0:	e000      	b.n	80058b4 <HAL_UART_IRQHandler+0x514>
      return;
 80058b2:	bf00      	nop
  }
}
 80058b4:	37e8      	adds	r7, #232	; 0xe8
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop

080058bc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058c4:	bf00      	nop
 80058c6:	370c      	adds	r7, #12
 80058c8:	46bd      	mov	sp, r7
 80058ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ce:	4770      	bx	lr

080058d0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
 80058ec:	460b      	mov	r3, r1
 80058ee:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80058f0:	bf00      	nop
 80058f2:	370c      	adds	r7, #12
 80058f4:	46bd      	mov	sp, r7
 80058f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fa:	4770      	bx	lr

080058fc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b090      	sub	sp, #64	; 0x40
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	603b      	str	r3, [r7, #0]
 8005908:	4613      	mov	r3, r2
 800590a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800590c:	e050      	b.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d04c      	beq.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005916:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005918:	2b00      	cmp	r3, #0
 800591a:	d007      	beq.n	800592c <UART_WaitOnFlagUntilTimeout+0x30>
 800591c:	f7fc fb44 	bl	8001fa8 <HAL_GetTick>
 8005920:	4602      	mov	r2, r0
 8005922:	683b      	ldr	r3, [r7, #0]
 8005924:	1ad3      	subs	r3, r2, r3
 8005926:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005928:	429a      	cmp	r2, r3
 800592a:	d241      	bcs.n	80059b0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800593c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800593e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005942:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800594c:	637a      	str	r2, [r7, #52]	; 0x34
 800594e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005952:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800595a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	613b      	str	r3, [r7, #16]
   return(result);
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	63bb      	str	r3, [r7, #56]	; 0x38
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005980:	623a      	str	r2, [r7, #32]
 8005982:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	69f9      	ldr	r1, [r7, #28]
 8005986:	6a3a      	ldr	r2, [r7, #32]
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	61bb      	str	r3, [r7, #24]
   return(result);
 800598e:	69bb      	ldr	r3, [r7, #24]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	2220      	movs	r2, #32
 8005998:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	2220      	movs	r2, #32
 80059a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2200      	movs	r2, #0
 80059a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80059ac:	2303      	movs	r3, #3
 80059ae:	e00f      	b.n	80059d0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	681a      	ldr	r2, [r3, #0]
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	4013      	ands	r3, r2
 80059ba:	68ba      	ldr	r2, [r7, #8]
 80059bc:	429a      	cmp	r2, r3
 80059be:	bf0c      	ite	eq
 80059c0:	2301      	moveq	r3, #1
 80059c2:	2300      	movne	r3, #0
 80059c4:	b2db      	uxtb	r3, r3
 80059c6:	461a      	mov	r2, r3
 80059c8:	79fb      	ldrb	r3, [r7, #7]
 80059ca:	429a      	cmp	r2, r3
 80059cc:	d09f      	beq.n	800590e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059ce:	2300      	movs	r3, #0
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3740      	adds	r7, #64	; 0x40
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	4613      	mov	r3, r2
 80059e4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	68ba      	ldr	r2, [r7, #8]
 80059ea:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	88fa      	ldrh	r2, [r7, #6]
 80059f0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	88fa      	ldrh	r2, [r7, #6]
 80059f6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2222      	movs	r2, #34	; 0x22
 8005a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	691b      	ldr	r3, [r3, #16]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d007      	beq.n	8005a26 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68da      	ldr	r2, [r3, #12]
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a24:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695a      	ldr	r2, [r3, #20]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f042 0201 	orr.w	r2, r2, #1
 8005a34:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	f042 0220 	orr.w	r2, r2, #32
 8005a44:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a46:	2300      	movs	r3, #0
}
 8005a48:	4618      	mov	r0, r3
 8005a4a:	3714      	adds	r7, #20
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr

08005a54 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b095      	sub	sp, #84	; 0x54
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	330c      	adds	r3, #12
 8005a62:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005a66:	e853 3f00 	ldrex	r3, [r3]
 8005a6a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a6e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	330c      	adds	r3, #12
 8005a7a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005a7c:	643a      	str	r2, [r7, #64]	; 0x40
 8005a7e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a80:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a84:	e841 2300 	strex	r3, r2, [r1]
 8005a88:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005a8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d1e5      	bne.n	8005a5c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	3314      	adds	r3, #20
 8005a96:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a98:	6a3b      	ldr	r3, [r7, #32]
 8005a9a:	e853 3f00 	ldrex	r3, [r3]
 8005a9e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005aa0:	69fb      	ldr	r3, [r7, #28]
 8005aa2:	f023 0301 	bic.w	r3, r3, #1
 8005aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	3314      	adds	r3, #20
 8005aae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ab0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005ab2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ab4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005ab6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005ab8:	e841 2300 	strex	r3, r2, [r1]
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d1e5      	bne.n	8005a90 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d119      	bne.n	8005b00 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	330c      	adds	r3, #12
 8005ad2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	e853 3f00 	ldrex	r3, [r3]
 8005ada:	60bb      	str	r3, [r7, #8]
   return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]
 8005ade:	f023 0310 	bic.w	r3, r3, #16
 8005ae2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	330c      	adds	r3, #12
 8005aea:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005aec:	61ba      	str	r2, [r7, #24]
 8005aee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005af0:	6979      	ldr	r1, [r7, #20]
 8005af2:	69ba      	ldr	r2, [r7, #24]
 8005af4:	e841 2300 	strex	r3, r2, [r1]
 8005af8:	613b      	str	r3, [r7, #16]
   return(result);
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d1e5      	bne.n	8005acc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2220      	movs	r2, #32
 8005b04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005b0e:	bf00      	nop
 8005b10:	3754      	adds	r7, #84	; 0x54
 8005b12:	46bd      	mov	sp, r7
 8005b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b18:	4770      	bx	lr

08005b1a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005b1a:	b580      	push	{r7, lr}
 8005b1c:	b084      	sub	sp, #16
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b26:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2200      	movs	r2, #0
 8005b32:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005b34:	68f8      	ldr	r0, [r7, #12]
 8005b36:	f7ff fecb 	bl	80058d0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005b3a:	bf00      	nop
 8005b3c:	3710      	adds	r7, #16
 8005b3e:	46bd      	mov	sp, r7
 8005b40:	bd80      	pop	{r7, pc}

08005b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005b42:	b480      	push	{r7}
 8005b44:	b085      	sub	sp, #20
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b50:	b2db      	uxtb	r3, r3
 8005b52:	2b21      	cmp	r3, #33	; 0x21
 8005b54:	d13e      	bne.n	8005bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	689b      	ldr	r3, [r3, #8]
 8005b5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b5e:	d114      	bne.n	8005b8a <UART_Transmit_IT+0x48>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	691b      	ldr	r3, [r3, #16]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d110      	bne.n	8005b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	6a1b      	ldr	r3, [r3, #32]
 8005b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	881b      	ldrh	r3, [r3, #0]
 8005b72:	461a      	mov	r2, r3
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	6a1b      	ldr	r3, [r3, #32]
 8005b82:	1c9a      	adds	r2, r3, #2
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]
 8005b88:	e008      	b.n	8005b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	6a1b      	ldr	r3, [r3, #32]
 8005b8e:	1c59      	adds	r1, r3, #1
 8005b90:	687a      	ldr	r2, [r7, #4]
 8005b92:	6211      	str	r1, [r2, #32]
 8005b94:	781a      	ldrb	r2, [r3, #0]
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ba0:	b29b      	uxth	r3, r3
 8005ba2:	3b01      	subs	r3, #1
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4619      	mov	r1, r3
 8005baa:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d10f      	bne.n	8005bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	68da      	ldr	r2, [r3, #12]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	68da      	ldr	r2, [r3, #12]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
 8005bd2:	e000      	b.n	8005bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005bd4:	2302      	movs	r3, #2
  }
}
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	3714      	adds	r7, #20
 8005bda:	46bd      	mov	sp, r7
 8005bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005be0:	4770      	bx	lr

08005be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005be2:	b580      	push	{r7, lr}
 8005be4:	b082      	sub	sp, #8
 8005be6:	af00      	add	r7, sp, #0
 8005be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	68da      	ldr	r2, [r3, #12]
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	2220      	movs	r2, #32
 8005bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005c02:	6878      	ldr	r0, [r7, #4]
 8005c04:	f7ff fe5a 	bl	80058bc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3708      	adds	r7, #8
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	bd80      	pop	{r7, pc}

08005c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005c12:	b580      	push	{r7, lr}
 8005c14:	b08c      	sub	sp, #48	; 0x30
 8005c16:	af00      	add	r7, sp, #0
 8005c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b22      	cmp	r3, #34	; 0x22
 8005c24:	f040 80ab 	bne.w	8005d7e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	689b      	ldr	r3, [r3, #8]
 8005c2c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c30:	d117      	bne.n	8005c62 <UART_Receive_IT+0x50>
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	691b      	ldr	r3, [r3, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d113      	bne.n	8005c62 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c42:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	b29b      	uxth	r3, r3
 8005c4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005c50:	b29a      	uxth	r2, r3
 8005c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c54:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5a:	1c9a      	adds	r2, r3, #2
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	629a      	str	r2, [r3, #40]	; 0x28
 8005c60:	e026      	b.n	8005cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c66:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005c68:	2300      	movs	r3, #0
 8005c6a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	689b      	ldr	r3, [r3, #8]
 8005c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c74:	d007      	beq.n	8005c86 <UART_Receive_IT+0x74>
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10a      	bne.n	8005c94 <UART_Receive_IT+0x82>
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	691b      	ldr	r3, [r3, #16]
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d106      	bne.n	8005c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	685b      	ldr	r3, [r3, #4]
 8005c8c:	b2da      	uxtb	r2, r3
 8005c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c90:	701a      	strb	r2, [r3, #0]
 8005c92:	e008      	b.n	8005ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	b2db      	uxtb	r3, r3
 8005c9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ca0:	b2da      	uxtb	r2, r3
 8005ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005caa:	1c5a      	adds	r2, r3, #1
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005cb4:	b29b      	uxth	r3, r3
 8005cb6:	3b01      	subs	r3, #1
 8005cb8:	b29b      	uxth	r3, r3
 8005cba:	687a      	ldr	r2, [r7, #4]
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d15a      	bne.n	8005d7a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	68da      	ldr	r2, [r3, #12]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f022 0220 	bic.w	r2, r2, #32
 8005cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	68da      	ldr	r2, [r3, #12]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	695a      	ldr	r2, [r3, #20]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f022 0201 	bic.w	r2, r2, #1
 8005cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d00:	2b01      	cmp	r3, #1
 8005d02:	d135      	bne.n	8005d70 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2200      	movs	r2, #0
 8005d08:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	330c      	adds	r3, #12
 8005d10:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	e853 3f00 	ldrex	r3, [r3]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	f023 0310 	bic.w	r3, r3, #16
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	330c      	adds	r3, #12
 8005d28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d2a:	623a      	str	r2, [r7, #32]
 8005d2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d2e:	69f9      	ldr	r1, [r7, #28]
 8005d30:	6a3a      	ldr	r2, [r7, #32]
 8005d32:	e841 2300 	strex	r3, r2, [r1]
 8005d36:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d38:	69bb      	ldr	r3, [r7, #24]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d1e5      	bne.n	8005d0a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f003 0310 	and.w	r3, r3, #16
 8005d48:	2b10      	cmp	r3, #16
 8005d4a:	d10a      	bne.n	8005d62 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	60fb      	str	r3, [r7, #12]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	60fb      	str	r3, [r7, #12]
 8005d60:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f7ff fdbb 	bl	80058e4 <HAL_UARTEx_RxEventCallback>
 8005d6e:	e002      	b.n	8005d76 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fa fd3f 	bl	80007f4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005d76:	2300      	movs	r3, #0
 8005d78:	e002      	b.n	8005d80 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	e000      	b.n	8005d80 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8005d7e:	2302      	movs	r3, #2
  }
}
 8005d80:	4618      	mov	r0, r3
 8005d82:	3730      	adds	r7, #48	; 0x30
 8005d84:	46bd      	mov	sp, r7
 8005d86:	bd80      	pop	{r7, pc}

08005d88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005d8c:	b0c0      	sub	sp, #256	; 0x100
 8005d8e:	af00      	add	r7, sp, #0
 8005d90:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005d94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	691b      	ldr	r3, [r3, #16]
 8005d9c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005da4:	68d9      	ldr	r1, [r3, #12]
 8005da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005daa:	681a      	ldr	r2, [r3, #0]
 8005dac:	ea40 0301 	orr.w	r3, r0, r1
 8005db0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005db2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005db6:	689a      	ldr	r2, [r3, #8]
 8005db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dbc:	691b      	ldr	r3, [r3, #16]
 8005dbe:	431a      	orrs	r2, r3
 8005dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dc4:	695b      	ldr	r3, [r3, #20]
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dcc:	69db      	ldr	r3, [r3, #28]
 8005dce:	4313      	orrs	r3, r2
 8005dd0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005dd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	68db      	ldr	r3, [r3, #12]
 8005ddc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005de0:	f021 010c 	bic.w	r1, r1, #12
 8005de4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de8:	681a      	ldr	r2, [r3, #0]
 8005dea:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dee:	430b      	orrs	r3, r1
 8005df0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	695b      	ldr	r3, [r3, #20]
 8005dfa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005dfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e02:	6999      	ldr	r1, [r3, #24]
 8005e04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	ea40 0301 	orr.w	r3, r0, r1
 8005e0e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	4b8f      	ldr	r3, [pc, #572]	; (8006054 <UART_SetConfig+0x2cc>)
 8005e18:	429a      	cmp	r2, r3
 8005e1a:	d005      	beq.n	8005e28 <UART_SetConfig+0xa0>
 8005e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e20:	681a      	ldr	r2, [r3, #0]
 8005e22:	4b8d      	ldr	r3, [pc, #564]	; (8006058 <UART_SetConfig+0x2d0>)
 8005e24:	429a      	cmp	r2, r3
 8005e26:	d104      	bne.n	8005e32 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005e28:	f7fd fdb4 	bl	8003994 <HAL_RCC_GetPCLK2Freq>
 8005e2c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005e30:	e003      	b.n	8005e3a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005e32:	f7fd fd9b 	bl	800396c <HAL_RCC_GetPCLK1Freq>
 8005e36:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e3e:	69db      	ldr	r3, [r3, #28]
 8005e40:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e44:	f040 810c 	bne.w	8006060 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005e48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e4c:	2200      	movs	r2, #0
 8005e4e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005e52:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005e56:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005e5a:	4622      	mov	r2, r4
 8005e5c:	462b      	mov	r3, r5
 8005e5e:	1891      	adds	r1, r2, r2
 8005e60:	65b9      	str	r1, [r7, #88]	; 0x58
 8005e62:	415b      	adcs	r3, r3
 8005e64:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005e66:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005e6a:	4621      	mov	r1, r4
 8005e6c:	eb12 0801 	adds.w	r8, r2, r1
 8005e70:	4629      	mov	r1, r5
 8005e72:	eb43 0901 	adc.w	r9, r3, r1
 8005e76:	f04f 0200 	mov.w	r2, #0
 8005e7a:	f04f 0300 	mov.w	r3, #0
 8005e7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005e82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005e86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005e8a:	4690      	mov	r8, r2
 8005e8c:	4699      	mov	r9, r3
 8005e8e:	4623      	mov	r3, r4
 8005e90:	eb18 0303 	adds.w	r3, r8, r3
 8005e94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005e98:	462b      	mov	r3, r5
 8005e9a:	eb49 0303 	adc.w	r3, r9, r3
 8005e9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005ea2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2200      	movs	r2, #0
 8005eaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005eae:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005eb2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005eb6:	460b      	mov	r3, r1
 8005eb8:	18db      	adds	r3, r3, r3
 8005eba:	653b      	str	r3, [r7, #80]	; 0x50
 8005ebc:	4613      	mov	r3, r2
 8005ebe:	eb42 0303 	adc.w	r3, r2, r3
 8005ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8005ec4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005ec8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005ecc:	f7fa f97c 	bl	80001c8 <__aeabi_uldivmod>
 8005ed0:	4602      	mov	r2, r0
 8005ed2:	460b      	mov	r3, r1
 8005ed4:	4b61      	ldr	r3, [pc, #388]	; (800605c <UART_SetConfig+0x2d4>)
 8005ed6:	fba3 2302 	umull	r2, r3, r3, r2
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	011c      	lsls	r4, r3, #4
 8005ede:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005ee8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005eec:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005ef0:	4642      	mov	r2, r8
 8005ef2:	464b      	mov	r3, r9
 8005ef4:	1891      	adds	r1, r2, r2
 8005ef6:	64b9      	str	r1, [r7, #72]	; 0x48
 8005ef8:	415b      	adcs	r3, r3
 8005efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005efc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005f00:	4641      	mov	r1, r8
 8005f02:	eb12 0a01 	adds.w	sl, r2, r1
 8005f06:	4649      	mov	r1, r9
 8005f08:	eb43 0b01 	adc.w	fp, r3, r1
 8005f0c:	f04f 0200 	mov.w	r2, #0
 8005f10:	f04f 0300 	mov.w	r3, #0
 8005f14:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005f18:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005f1c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005f20:	4692      	mov	sl, r2
 8005f22:	469b      	mov	fp, r3
 8005f24:	4643      	mov	r3, r8
 8005f26:	eb1a 0303 	adds.w	r3, sl, r3
 8005f2a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f2e:	464b      	mov	r3, r9
 8005f30:	eb4b 0303 	adc.w	r3, fp, r3
 8005f34:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005f38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005f44:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005f48:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	18db      	adds	r3, r3, r3
 8005f50:	643b      	str	r3, [r7, #64]	; 0x40
 8005f52:	4613      	mov	r3, r2
 8005f54:	eb42 0303 	adc.w	r3, r2, r3
 8005f58:	647b      	str	r3, [r7, #68]	; 0x44
 8005f5a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005f5e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005f62:	f7fa f931 	bl	80001c8 <__aeabi_uldivmod>
 8005f66:	4602      	mov	r2, r0
 8005f68:	460b      	mov	r3, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	4b3b      	ldr	r3, [pc, #236]	; (800605c <UART_SetConfig+0x2d4>)
 8005f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8005f72:	095b      	lsrs	r3, r3, #5
 8005f74:	2264      	movs	r2, #100	; 0x64
 8005f76:	fb02 f303 	mul.w	r3, r2, r3
 8005f7a:	1acb      	subs	r3, r1, r3
 8005f7c:	00db      	lsls	r3, r3, #3
 8005f7e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005f82:	4b36      	ldr	r3, [pc, #216]	; (800605c <UART_SetConfig+0x2d4>)
 8005f84:	fba3 2302 	umull	r2, r3, r3, r2
 8005f88:	095b      	lsrs	r3, r3, #5
 8005f8a:	005b      	lsls	r3, r3, #1
 8005f8c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005f90:	441c      	add	r4, r3
 8005f92:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005f96:	2200      	movs	r2, #0
 8005f98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005f9c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005fa0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005fa4:	4642      	mov	r2, r8
 8005fa6:	464b      	mov	r3, r9
 8005fa8:	1891      	adds	r1, r2, r2
 8005faa:	63b9      	str	r1, [r7, #56]	; 0x38
 8005fac:	415b      	adcs	r3, r3
 8005fae:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fb0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005fb4:	4641      	mov	r1, r8
 8005fb6:	1851      	adds	r1, r2, r1
 8005fb8:	6339      	str	r1, [r7, #48]	; 0x30
 8005fba:	4649      	mov	r1, r9
 8005fbc:	414b      	adcs	r3, r1
 8005fbe:	637b      	str	r3, [r7, #52]	; 0x34
 8005fc0:	f04f 0200 	mov.w	r2, #0
 8005fc4:	f04f 0300 	mov.w	r3, #0
 8005fc8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005fcc:	4659      	mov	r1, fp
 8005fce:	00cb      	lsls	r3, r1, #3
 8005fd0:	4651      	mov	r1, sl
 8005fd2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005fd6:	4651      	mov	r1, sl
 8005fd8:	00ca      	lsls	r2, r1, #3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	4619      	mov	r1, r3
 8005fde:	4603      	mov	r3, r0
 8005fe0:	4642      	mov	r2, r8
 8005fe2:	189b      	adds	r3, r3, r2
 8005fe4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005fe8:	464b      	mov	r3, r9
 8005fea:	460a      	mov	r2, r1
 8005fec:	eb42 0303 	adc.w	r3, r2, r3
 8005ff0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005ff4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006000:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006004:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006008:	460b      	mov	r3, r1
 800600a:	18db      	adds	r3, r3, r3
 800600c:	62bb      	str	r3, [r7, #40]	; 0x28
 800600e:	4613      	mov	r3, r2
 8006010:	eb42 0303 	adc.w	r3, r2, r3
 8006014:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006016:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800601a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800601e:	f7fa f8d3 	bl	80001c8 <__aeabi_uldivmod>
 8006022:	4602      	mov	r2, r0
 8006024:	460b      	mov	r3, r1
 8006026:	4b0d      	ldr	r3, [pc, #52]	; (800605c <UART_SetConfig+0x2d4>)
 8006028:	fba3 1302 	umull	r1, r3, r3, r2
 800602c:	095b      	lsrs	r3, r3, #5
 800602e:	2164      	movs	r1, #100	; 0x64
 8006030:	fb01 f303 	mul.w	r3, r1, r3
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	00db      	lsls	r3, r3, #3
 8006038:	3332      	adds	r3, #50	; 0x32
 800603a:	4a08      	ldr	r2, [pc, #32]	; (800605c <UART_SetConfig+0x2d4>)
 800603c:	fba2 2303 	umull	r2, r3, r2, r3
 8006040:	095b      	lsrs	r3, r3, #5
 8006042:	f003 0207 	and.w	r2, r3, #7
 8006046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	4422      	add	r2, r4
 800604e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006050:	e106      	b.n	8006260 <UART_SetConfig+0x4d8>
 8006052:	bf00      	nop
 8006054:	40011000 	.word	0x40011000
 8006058:	40011400 	.word	0x40011400
 800605c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006060:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006064:	2200      	movs	r2, #0
 8006066:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800606a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800606e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006072:	4642      	mov	r2, r8
 8006074:	464b      	mov	r3, r9
 8006076:	1891      	adds	r1, r2, r2
 8006078:	6239      	str	r1, [r7, #32]
 800607a:	415b      	adcs	r3, r3
 800607c:	627b      	str	r3, [r7, #36]	; 0x24
 800607e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006082:	4641      	mov	r1, r8
 8006084:	1854      	adds	r4, r2, r1
 8006086:	4649      	mov	r1, r9
 8006088:	eb43 0501 	adc.w	r5, r3, r1
 800608c:	f04f 0200 	mov.w	r2, #0
 8006090:	f04f 0300 	mov.w	r3, #0
 8006094:	00eb      	lsls	r3, r5, #3
 8006096:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800609a:	00e2      	lsls	r2, r4, #3
 800609c:	4614      	mov	r4, r2
 800609e:	461d      	mov	r5, r3
 80060a0:	4643      	mov	r3, r8
 80060a2:	18e3      	adds	r3, r4, r3
 80060a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80060a8:	464b      	mov	r3, r9
 80060aa:	eb45 0303 	adc.w	r3, r5, r3
 80060ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80060b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	2200      	movs	r2, #0
 80060ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060be:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80060c2:	f04f 0200 	mov.w	r2, #0
 80060c6:	f04f 0300 	mov.w	r3, #0
 80060ca:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80060ce:	4629      	mov	r1, r5
 80060d0:	008b      	lsls	r3, r1, #2
 80060d2:	4621      	mov	r1, r4
 80060d4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060d8:	4621      	mov	r1, r4
 80060da:	008a      	lsls	r2, r1, #2
 80060dc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80060e0:	f7fa f872 	bl	80001c8 <__aeabi_uldivmod>
 80060e4:	4602      	mov	r2, r0
 80060e6:	460b      	mov	r3, r1
 80060e8:	4b60      	ldr	r3, [pc, #384]	; (800626c <UART_SetConfig+0x4e4>)
 80060ea:	fba3 2302 	umull	r2, r3, r3, r2
 80060ee:	095b      	lsrs	r3, r3, #5
 80060f0:	011c      	lsls	r4, r3, #4
 80060f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80060f6:	2200      	movs	r2, #0
 80060f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80060fc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006100:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006104:	4642      	mov	r2, r8
 8006106:	464b      	mov	r3, r9
 8006108:	1891      	adds	r1, r2, r2
 800610a:	61b9      	str	r1, [r7, #24]
 800610c:	415b      	adcs	r3, r3
 800610e:	61fb      	str	r3, [r7, #28]
 8006110:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006114:	4641      	mov	r1, r8
 8006116:	1851      	adds	r1, r2, r1
 8006118:	6139      	str	r1, [r7, #16]
 800611a:	4649      	mov	r1, r9
 800611c:	414b      	adcs	r3, r1
 800611e:	617b      	str	r3, [r7, #20]
 8006120:	f04f 0200 	mov.w	r2, #0
 8006124:	f04f 0300 	mov.w	r3, #0
 8006128:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800612c:	4659      	mov	r1, fp
 800612e:	00cb      	lsls	r3, r1, #3
 8006130:	4651      	mov	r1, sl
 8006132:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006136:	4651      	mov	r1, sl
 8006138:	00ca      	lsls	r2, r1, #3
 800613a:	4610      	mov	r0, r2
 800613c:	4619      	mov	r1, r3
 800613e:	4603      	mov	r3, r0
 8006140:	4642      	mov	r2, r8
 8006142:	189b      	adds	r3, r3, r2
 8006144:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006148:	464b      	mov	r3, r9
 800614a:	460a      	mov	r2, r1
 800614c:	eb42 0303 	adc.w	r3, r2, r3
 8006150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006154:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	2200      	movs	r2, #0
 800615c:	67bb      	str	r3, [r7, #120]	; 0x78
 800615e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006160:	f04f 0200 	mov.w	r2, #0
 8006164:	f04f 0300 	mov.w	r3, #0
 8006168:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800616c:	4649      	mov	r1, r9
 800616e:	008b      	lsls	r3, r1, #2
 8006170:	4641      	mov	r1, r8
 8006172:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006176:	4641      	mov	r1, r8
 8006178:	008a      	lsls	r2, r1, #2
 800617a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800617e:	f7fa f823 	bl	80001c8 <__aeabi_uldivmod>
 8006182:	4602      	mov	r2, r0
 8006184:	460b      	mov	r3, r1
 8006186:	4611      	mov	r1, r2
 8006188:	4b38      	ldr	r3, [pc, #224]	; (800626c <UART_SetConfig+0x4e4>)
 800618a:	fba3 2301 	umull	r2, r3, r3, r1
 800618e:	095b      	lsrs	r3, r3, #5
 8006190:	2264      	movs	r2, #100	; 0x64
 8006192:	fb02 f303 	mul.w	r3, r2, r3
 8006196:	1acb      	subs	r3, r1, r3
 8006198:	011b      	lsls	r3, r3, #4
 800619a:	3332      	adds	r3, #50	; 0x32
 800619c:	4a33      	ldr	r2, [pc, #204]	; (800626c <UART_SetConfig+0x4e4>)
 800619e:	fba2 2303 	umull	r2, r3, r2, r3
 80061a2:	095b      	lsrs	r3, r3, #5
 80061a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80061a8:	441c      	add	r4, r3
 80061aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061ae:	2200      	movs	r2, #0
 80061b0:	673b      	str	r3, [r7, #112]	; 0x70
 80061b2:	677a      	str	r2, [r7, #116]	; 0x74
 80061b4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80061b8:	4642      	mov	r2, r8
 80061ba:	464b      	mov	r3, r9
 80061bc:	1891      	adds	r1, r2, r2
 80061be:	60b9      	str	r1, [r7, #8]
 80061c0:	415b      	adcs	r3, r3
 80061c2:	60fb      	str	r3, [r7, #12]
 80061c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80061c8:	4641      	mov	r1, r8
 80061ca:	1851      	adds	r1, r2, r1
 80061cc:	6039      	str	r1, [r7, #0]
 80061ce:	4649      	mov	r1, r9
 80061d0:	414b      	adcs	r3, r1
 80061d2:	607b      	str	r3, [r7, #4]
 80061d4:	f04f 0200 	mov.w	r2, #0
 80061d8:	f04f 0300 	mov.w	r3, #0
 80061dc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80061e0:	4659      	mov	r1, fp
 80061e2:	00cb      	lsls	r3, r1, #3
 80061e4:	4651      	mov	r1, sl
 80061e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80061ea:	4651      	mov	r1, sl
 80061ec:	00ca      	lsls	r2, r1, #3
 80061ee:	4610      	mov	r0, r2
 80061f0:	4619      	mov	r1, r3
 80061f2:	4603      	mov	r3, r0
 80061f4:	4642      	mov	r2, r8
 80061f6:	189b      	adds	r3, r3, r2
 80061f8:	66bb      	str	r3, [r7, #104]	; 0x68
 80061fa:	464b      	mov	r3, r9
 80061fc:	460a      	mov	r2, r1
 80061fe:	eb42 0303 	adc.w	r3, r2, r3
 8006202:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006208:	685b      	ldr	r3, [r3, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	663b      	str	r3, [r7, #96]	; 0x60
 800620e:	667a      	str	r2, [r7, #100]	; 0x64
 8006210:	f04f 0200 	mov.w	r2, #0
 8006214:	f04f 0300 	mov.w	r3, #0
 8006218:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800621c:	4649      	mov	r1, r9
 800621e:	008b      	lsls	r3, r1, #2
 8006220:	4641      	mov	r1, r8
 8006222:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006226:	4641      	mov	r1, r8
 8006228:	008a      	lsls	r2, r1, #2
 800622a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800622e:	f7f9 ffcb 	bl	80001c8 <__aeabi_uldivmod>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4b0d      	ldr	r3, [pc, #52]	; (800626c <UART_SetConfig+0x4e4>)
 8006238:	fba3 1302 	umull	r1, r3, r3, r2
 800623c:	095b      	lsrs	r3, r3, #5
 800623e:	2164      	movs	r1, #100	; 0x64
 8006240:	fb01 f303 	mul.w	r3, r1, r3
 8006244:	1ad3      	subs	r3, r2, r3
 8006246:	011b      	lsls	r3, r3, #4
 8006248:	3332      	adds	r3, #50	; 0x32
 800624a:	4a08      	ldr	r2, [pc, #32]	; (800626c <UART_SetConfig+0x4e4>)
 800624c:	fba2 2303 	umull	r2, r3, r2, r3
 8006250:	095b      	lsrs	r3, r3, #5
 8006252:	f003 020f 	and.w	r2, r3, #15
 8006256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	4422      	add	r2, r4
 800625e:	609a      	str	r2, [r3, #8]
}
 8006260:	bf00      	nop
 8006262:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006266:	46bd      	mov	sp, r7
 8006268:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800626c:	51eb851f 	.word	0x51eb851f

08006270 <malloc>:
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <malloc+0xc>)
 8006272:	4601      	mov	r1, r0
 8006274:	6818      	ldr	r0, [r3, #0]
 8006276:	f000 b82b 	b.w	80062d0 <_malloc_r>
 800627a:	bf00      	nop
 800627c:	200000d8 	.word	0x200000d8

08006280 <free>:
 8006280:	4b02      	ldr	r3, [pc, #8]	; (800628c <free+0xc>)
 8006282:	4601      	mov	r1, r0
 8006284:	6818      	ldr	r0, [r3, #0]
 8006286:	f000 b8f3 	b.w	8006470 <_free_r>
 800628a:	bf00      	nop
 800628c:	200000d8 	.word	0x200000d8

08006290 <sbrk_aligned>:
 8006290:	b570      	push	{r4, r5, r6, lr}
 8006292:	4e0e      	ldr	r6, [pc, #56]	; (80062cc <sbrk_aligned+0x3c>)
 8006294:	460c      	mov	r4, r1
 8006296:	6831      	ldr	r1, [r6, #0]
 8006298:	4605      	mov	r5, r0
 800629a:	b911      	cbnz	r1, 80062a2 <sbrk_aligned+0x12>
 800629c:	f000 f8ac 	bl	80063f8 <_sbrk_r>
 80062a0:	6030      	str	r0, [r6, #0]
 80062a2:	4621      	mov	r1, r4
 80062a4:	4628      	mov	r0, r5
 80062a6:	f000 f8a7 	bl	80063f8 <_sbrk_r>
 80062aa:	1c43      	adds	r3, r0, #1
 80062ac:	d00a      	beq.n	80062c4 <sbrk_aligned+0x34>
 80062ae:	1cc4      	adds	r4, r0, #3
 80062b0:	f024 0403 	bic.w	r4, r4, #3
 80062b4:	42a0      	cmp	r0, r4
 80062b6:	d007      	beq.n	80062c8 <sbrk_aligned+0x38>
 80062b8:	1a21      	subs	r1, r4, r0
 80062ba:	4628      	mov	r0, r5
 80062bc:	f000 f89c 	bl	80063f8 <_sbrk_r>
 80062c0:	3001      	adds	r0, #1
 80062c2:	d101      	bne.n	80062c8 <sbrk_aligned+0x38>
 80062c4:	f04f 34ff 	mov.w	r4, #4294967295
 80062c8:	4620      	mov	r0, r4
 80062ca:	bd70      	pop	{r4, r5, r6, pc}
 80062cc:	20000564 	.word	0x20000564

080062d0 <_malloc_r>:
 80062d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80062d4:	1ccd      	adds	r5, r1, #3
 80062d6:	f025 0503 	bic.w	r5, r5, #3
 80062da:	3508      	adds	r5, #8
 80062dc:	2d0c      	cmp	r5, #12
 80062de:	bf38      	it	cc
 80062e0:	250c      	movcc	r5, #12
 80062e2:	2d00      	cmp	r5, #0
 80062e4:	4607      	mov	r7, r0
 80062e6:	db01      	blt.n	80062ec <_malloc_r+0x1c>
 80062e8:	42a9      	cmp	r1, r5
 80062ea:	d905      	bls.n	80062f8 <_malloc_r+0x28>
 80062ec:	230c      	movs	r3, #12
 80062ee:	603b      	str	r3, [r7, #0]
 80062f0:	2600      	movs	r6, #0
 80062f2:	4630      	mov	r0, r6
 80062f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80062f8:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80063cc <_malloc_r+0xfc>
 80062fc:	f000 f868 	bl	80063d0 <__malloc_lock>
 8006300:	f8d8 3000 	ldr.w	r3, [r8]
 8006304:	461c      	mov	r4, r3
 8006306:	bb5c      	cbnz	r4, 8006360 <_malloc_r+0x90>
 8006308:	4629      	mov	r1, r5
 800630a:	4638      	mov	r0, r7
 800630c:	f7ff ffc0 	bl	8006290 <sbrk_aligned>
 8006310:	1c43      	adds	r3, r0, #1
 8006312:	4604      	mov	r4, r0
 8006314:	d155      	bne.n	80063c2 <_malloc_r+0xf2>
 8006316:	f8d8 4000 	ldr.w	r4, [r8]
 800631a:	4626      	mov	r6, r4
 800631c:	2e00      	cmp	r6, #0
 800631e:	d145      	bne.n	80063ac <_malloc_r+0xdc>
 8006320:	2c00      	cmp	r4, #0
 8006322:	d048      	beq.n	80063b6 <_malloc_r+0xe6>
 8006324:	6823      	ldr	r3, [r4, #0]
 8006326:	4631      	mov	r1, r6
 8006328:	4638      	mov	r0, r7
 800632a:	eb04 0903 	add.w	r9, r4, r3
 800632e:	f000 f863 	bl	80063f8 <_sbrk_r>
 8006332:	4581      	cmp	r9, r0
 8006334:	d13f      	bne.n	80063b6 <_malloc_r+0xe6>
 8006336:	6821      	ldr	r1, [r4, #0]
 8006338:	1a6d      	subs	r5, r5, r1
 800633a:	4629      	mov	r1, r5
 800633c:	4638      	mov	r0, r7
 800633e:	f7ff ffa7 	bl	8006290 <sbrk_aligned>
 8006342:	3001      	adds	r0, #1
 8006344:	d037      	beq.n	80063b6 <_malloc_r+0xe6>
 8006346:	6823      	ldr	r3, [r4, #0]
 8006348:	442b      	add	r3, r5
 800634a:	6023      	str	r3, [r4, #0]
 800634c:	f8d8 3000 	ldr.w	r3, [r8]
 8006350:	2b00      	cmp	r3, #0
 8006352:	d038      	beq.n	80063c6 <_malloc_r+0xf6>
 8006354:	685a      	ldr	r2, [r3, #4]
 8006356:	42a2      	cmp	r2, r4
 8006358:	d12b      	bne.n	80063b2 <_malloc_r+0xe2>
 800635a:	2200      	movs	r2, #0
 800635c:	605a      	str	r2, [r3, #4]
 800635e:	e00f      	b.n	8006380 <_malloc_r+0xb0>
 8006360:	6822      	ldr	r2, [r4, #0]
 8006362:	1b52      	subs	r2, r2, r5
 8006364:	d41f      	bmi.n	80063a6 <_malloc_r+0xd6>
 8006366:	2a0b      	cmp	r2, #11
 8006368:	d917      	bls.n	800639a <_malloc_r+0xca>
 800636a:	1961      	adds	r1, r4, r5
 800636c:	42a3      	cmp	r3, r4
 800636e:	6025      	str	r5, [r4, #0]
 8006370:	bf18      	it	ne
 8006372:	6059      	strne	r1, [r3, #4]
 8006374:	6863      	ldr	r3, [r4, #4]
 8006376:	bf08      	it	eq
 8006378:	f8c8 1000 	streq.w	r1, [r8]
 800637c:	5162      	str	r2, [r4, r5]
 800637e:	604b      	str	r3, [r1, #4]
 8006380:	4638      	mov	r0, r7
 8006382:	f104 060b 	add.w	r6, r4, #11
 8006386:	f000 f829 	bl	80063dc <__malloc_unlock>
 800638a:	f026 0607 	bic.w	r6, r6, #7
 800638e:	1d23      	adds	r3, r4, #4
 8006390:	1af2      	subs	r2, r6, r3
 8006392:	d0ae      	beq.n	80062f2 <_malloc_r+0x22>
 8006394:	1b9b      	subs	r3, r3, r6
 8006396:	50a3      	str	r3, [r4, r2]
 8006398:	e7ab      	b.n	80062f2 <_malloc_r+0x22>
 800639a:	42a3      	cmp	r3, r4
 800639c:	6862      	ldr	r2, [r4, #4]
 800639e:	d1dd      	bne.n	800635c <_malloc_r+0x8c>
 80063a0:	f8c8 2000 	str.w	r2, [r8]
 80063a4:	e7ec      	b.n	8006380 <_malloc_r+0xb0>
 80063a6:	4623      	mov	r3, r4
 80063a8:	6864      	ldr	r4, [r4, #4]
 80063aa:	e7ac      	b.n	8006306 <_malloc_r+0x36>
 80063ac:	4634      	mov	r4, r6
 80063ae:	6876      	ldr	r6, [r6, #4]
 80063b0:	e7b4      	b.n	800631c <_malloc_r+0x4c>
 80063b2:	4613      	mov	r3, r2
 80063b4:	e7cc      	b.n	8006350 <_malloc_r+0x80>
 80063b6:	230c      	movs	r3, #12
 80063b8:	603b      	str	r3, [r7, #0]
 80063ba:	4638      	mov	r0, r7
 80063bc:	f000 f80e 	bl	80063dc <__malloc_unlock>
 80063c0:	e797      	b.n	80062f2 <_malloc_r+0x22>
 80063c2:	6025      	str	r5, [r4, #0]
 80063c4:	e7dc      	b.n	8006380 <_malloc_r+0xb0>
 80063c6:	605b      	str	r3, [r3, #4]
 80063c8:	deff      	udf	#255	; 0xff
 80063ca:	bf00      	nop
 80063cc:	20000560 	.word	0x20000560

080063d0 <__malloc_lock>:
 80063d0:	4801      	ldr	r0, [pc, #4]	; (80063d8 <__malloc_lock+0x8>)
 80063d2:	f000 b84b 	b.w	800646c <__retarget_lock_acquire_recursive>
 80063d6:	bf00      	nop
 80063d8:	200006a4 	.word	0x200006a4

080063dc <__malloc_unlock>:
 80063dc:	4801      	ldr	r0, [pc, #4]	; (80063e4 <__malloc_unlock+0x8>)
 80063de:	f000 b846 	b.w	800646e <__retarget_lock_release_recursive>
 80063e2:	bf00      	nop
 80063e4:	200006a4 	.word	0x200006a4

080063e8 <memset>:
 80063e8:	4402      	add	r2, r0
 80063ea:	4603      	mov	r3, r0
 80063ec:	4293      	cmp	r3, r2
 80063ee:	d100      	bne.n	80063f2 <memset+0xa>
 80063f0:	4770      	bx	lr
 80063f2:	f803 1b01 	strb.w	r1, [r3], #1
 80063f6:	e7f9      	b.n	80063ec <memset+0x4>

080063f8 <_sbrk_r>:
 80063f8:	b538      	push	{r3, r4, r5, lr}
 80063fa:	4d06      	ldr	r5, [pc, #24]	; (8006414 <_sbrk_r+0x1c>)
 80063fc:	2300      	movs	r3, #0
 80063fe:	4604      	mov	r4, r0
 8006400:	4608      	mov	r0, r1
 8006402:	602b      	str	r3, [r5, #0]
 8006404:	f7fb fcc6 	bl	8001d94 <_sbrk>
 8006408:	1c43      	adds	r3, r0, #1
 800640a:	d102      	bne.n	8006412 <_sbrk_r+0x1a>
 800640c:	682b      	ldr	r3, [r5, #0]
 800640e:	b103      	cbz	r3, 8006412 <_sbrk_r+0x1a>
 8006410:	6023      	str	r3, [r4, #0]
 8006412:	bd38      	pop	{r3, r4, r5, pc}
 8006414:	200006a0 	.word	0x200006a0

08006418 <__errno>:
 8006418:	4b01      	ldr	r3, [pc, #4]	; (8006420 <__errno+0x8>)
 800641a:	6818      	ldr	r0, [r3, #0]
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	200000d8 	.word	0x200000d8

08006424 <__libc_init_array>:
 8006424:	b570      	push	{r4, r5, r6, lr}
 8006426:	4d0d      	ldr	r5, [pc, #52]	; (800645c <__libc_init_array+0x38>)
 8006428:	4c0d      	ldr	r4, [pc, #52]	; (8006460 <__libc_init_array+0x3c>)
 800642a:	1b64      	subs	r4, r4, r5
 800642c:	10a4      	asrs	r4, r4, #2
 800642e:	2600      	movs	r6, #0
 8006430:	42a6      	cmp	r6, r4
 8006432:	d109      	bne.n	8006448 <__libc_init_array+0x24>
 8006434:	4d0b      	ldr	r5, [pc, #44]	; (8006464 <__libc_init_array+0x40>)
 8006436:	4c0c      	ldr	r4, [pc, #48]	; (8006468 <__libc_init_array+0x44>)
 8006438:	f000 f866 	bl	8006508 <_init>
 800643c:	1b64      	subs	r4, r4, r5
 800643e:	10a4      	asrs	r4, r4, #2
 8006440:	2600      	movs	r6, #0
 8006442:	42a6      	cmp	r6, r4
 8006444:	d105      	bne.n	8006452 <__libc_init_array+0x2e>
 8006446:	bd70      	pop	{r4, r5, r6, pc}
 8006448:	f855 3b04 	ldr.w	r3, [r5], #4
 800644c:	4798      	blx	r3
 800644e:	3601      	adds	r6, #1
 8006450:	e7ee      	b.n	8006430 <__libc_init_array+0xc>
 8006452:	f855 3b04 	ldr.w	r3, [r5], #4
 8006456:	4798      	blx	r3
 8006458:	3601      	adds	r6, #1
 800645a:	e7f2      	b.n	8006442 <__libc_init_array+0x1e>
 800645c:	080065b8 	.word	0x080065b8
 8006460:	080065b8 	.word	0x080065b8
 8006464:	080065b8 	.word	0x080065b8
 8006468:	080065bc 	.word	0x080065bc

0800646c <__retarget_lock_acquire_recursive>:
 800646c:	4770      	bx	lr

0800646e <__retarget_lock_release_recursive>:
 800646e:	4770      	bx	lr

08006470 <_free_r>:
 8006470:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006472:	2900      	cmp	r1, #0
 8006474:	d044      	beq.n	8006500 <_free_r+0x90>
 8006476:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800647a:	9001      	str	r0, [sp, #4]
 800647c:	2b00      	cmp	r3, #0
 800647e:	f1a1 0404 	sub.w	r4, r1, #4
 8006482:	bfb8      	it	lt
 8006484:	18e4      	addlt	r4, r4, r3
 8006486:	f7ff ffa3 	bl	80063d0 <__malloc_lock>
 800648a:	4a1e      	ldr	r2, [pc, #120]	; (8006504 <_free_r+0x94>)
 800648c:	9801      	ldr	r0, [sp, #4]
 800648e:	6813      	ldr	r3, [r2, #0]
 8006490:	b933      	cbnz	r3, 80064a0 <_free_r+0x30>
 8006492:	6063      	str	r3, [r4, #4]
 8006494:	6014      	str	r4, [r2, #0]
 8006496:	b003      	add	sp, #12
 8006498:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649c:	f7ff bf9e 	b.w	80063dc <__malloc_unlock>
 80064a0:	42a3      	cmp	r3, r4
 80064a2:	d908      	bls.n	80064b6 <_free_r+0x46>
 80064a4:	6825      	ldr	r5, [r4, #0]
 80064a6:	1961      	adds	r1, r4, r5
 80064a8:	428b      	cmp	r3, r1
 80064aa:	bf01      	itttt	eq
 80064ac:	6819      	ldreq	r1, [r3, #0]
 80064ae:	685b      	ldreq	r3, [r3, #4]
 80064b0:	1949      	addeq	r1, r1, r5
 80064b2:	6021      	streq	r1, [r4, #0]
 80064b4:	e7ed      	b.n	8006492 <_free_r+0x22>
 80064b6:	461a      	mov	r2, r3
 80064b8:	685b      	ldr	r3, [r3, #4]
 80064ba:	b10b      	cbz	r3, 80064c0 <_free_r+0x50>
 80064bc:	42a3      	cmp	r3, r4
 80064be:	d9fa      	bls.n	80064b6 <_free_r+0x46>
 80064c0:	6811      	ldr	r1, [r2, #0]
 80064c2:	1855      	adds	r5, r2, r1
 80064c4:	42a5      	cmp	r5, r4
 80064c6:	d10b      	bne.n	80064e0 <_free_r+0x70>
 80064c8:	6824      	ldr	r4, [r4, #0]
 80064ca:	4421      	add	r1, r4
 80064cc:	1854      	adds	r4, r2, r1
 80064ce:	42a3      	cmp	r3, r4
 80064d0:	6011      	str	r1, [r2, #0]
 80064d2:	d1e0      	bne.n	8006496 <_free_r+0x26>
 80064d4:	681c      	ldr	r4, [r3, #0]
 80064d6:	685b      	ldr	r3, [r3, #4]
 80064d8:	6053      	str	r3, [r2, #4]
 80064da:	440c      	add	r4, r1
 80064dc:	6014      	str	r4, [r2, #0]
 80064de:	e7da      	b.n	8006496 <_free_r+0x26>
 80064e0:	d902      	bls.n	80064e8 <_free_r+0x78>
 80064e2:	230c      	movs	r3, #12
 80064e4:	6003      	str	r3, [r0, #0]
 80064e6:	e7d6      	b.n	8006496 <_free_r+0x26>
 80064e8:	6825      	ldr	r5, [r4, #0]
 80064ea:	1961      	adds	r1, r4, r5
 80064ec:	428b      	cmp	r3, r1
 80064ee:	bf04      	itt	eq
 80064f0:	6819      	ldreq	r1, [r3, #0]
 80064f2:	685b      	ldreq	r3, [r3, #4]
 80064f4:	6063      	str	r3, [r4, #4]
 80064f6:	bf04      	itt	eq
 80064f8:	1949      	addeq	r1, r1, r5
 80064fa:	6021      	streq	r1, [r4, #0]
 80064fc:	6054      	str	r4, [r2, #4]
 80064fe:	e7ca      	b.n	8006496 <_free_r+0x26>
 8006500:	b003      	add	sp, #12
 8006502:	bd30      	pop	{r4, r5, pc}
 8006504:	20000560 	.word	0x20000560

08006508 <_init>:
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	bf00      	nop
 800650c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800650e:	bc08      	pop	{r3}
 8006510:	469e      	mov	lr, r3
 8006512:	4770      	bx	lr

08006514 <_fini>:
 8006514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006516:	bf00      	nop
 8006518:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800651a:	bc08      	pop	{r3}
 800651c:	469e      	mov	lr, r3
 800651e:	4770      	bx	lr
