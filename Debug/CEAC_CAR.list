
CEAC_CAR.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005894  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08005a1c  08005a1c  00006a1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a3c  08005a3c  00007060  2**0
                  CONTENTS
  4 .ARM          00000008  08005a3c  08005a3c  00006a3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005a44  08005a44  00007060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a44  08005a44  00006a44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08005a4c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007060  2**0
                  CONTENTS
 10 .bss          0000042c  20000060  20000060  00007060  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000048c  2000048c  00007060  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010075  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002470  00000000  00000000  00017105  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e48  00000000  00000000  00019578  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b1c  00000000  00000000  0001a3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002de7  00000000  00000000  0001aedc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012b93  00000000  00000000  0001dcc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d805e  00000000  00000000  00030856  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001088b4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003e44  00000000  00000000  001088f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000046  00000000  00000000  0010c73c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000060 	.word	0x20000060
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005a04 	.word	0x08005a04

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000064 	.word	0x20000064
 80001c4:	08005a04 	.word	0x08005a04

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <set_motor>:
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM_middle);
    return;
}

void set_motor(PWMcontrol *PWMcontrol, int8_t direction, uint16_t PWM)
{
 80004b8:	b480      	push	{r7}
 80004ba:	b083      	sub	sp, #12
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
 80004c0:	460b      	mov	r3, r1
 80004c2:	70fb      	strb	r3, [r7, #3]
 80004c4:	4613      	mov	r3, r2
 80004c6:	803b      	strh	r3, [r7, #0]
    if (PWM > MAX_PULSE_WIDTH)
 80004c8:	883b      	ldrh	r3, [r7, #0]
 80004ca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80004ce:	d302      	bcc.n	80004d6 <set_motor+0x1e>
    {
        PWM = MAX_PULSE_WIDTH;
 80004d0:	f240 33ff 	movw	r3, #1023	@ 0x3ff
 80004d4:	803b      	strh	r3, [r7, #0]
    else if (PWM < 0)
    {
        PWM = 0;
    }

    if (direction == BACKWARD)
 80004d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80004da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80004de:	d146      	bne.n	800056e <set_motor+0xb6>
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	889b      	ldrh	r3, [r3, #4]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d105      	bne.n	80004f4 <set_motor+0x3c>
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	681b      	ldr	r3, [r3, #0]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	883a      	ldrh	r2, [r7, #0]
 80004f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80004f2:	e018      	b.n	8000526 <set_motor+0x6e>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	889b      	ldrh	r3, [r3, #4]
 80004f8:	2b04      	cmp	r3, #4
 80004fa:	d105      	bne.n	8000508 <set_motor+0x50>
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	681a      	ldr	r2, [r3, #0]
 8000502:	883b      	ldrh	r3, [r7, #0]
 8000504:	6393      	str	r3, [r2, #56]	@ 0x38
 8000506:	e00e      	b.n	8000526 <set_motor+0x6e>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	889b      	ldrh	r3, [r3, #4]
 800050c:	2b08      	cmp	r3, #8
 800050e:	d105      	bne.n	800051c <set_motor+0x64>
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	681a      	ldr	r2, [r3, #0]
 8000516:	883b      	ldrh	r3, [r7, #0]
 8000518:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800051a:	e004      	b.n	8000526 <set_motor+0x6e>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	681a      	ldr	r2, [r3, #0]
 8000522:	883b      	ldrh	r3, [r7, #0]
 8000524:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000526:	687b      	ldr	r3, [r7, #4]
 8000528:	88db      	ldrh	r3, [r3, #6]
 800052a:	2b00      	cmp	r3, #0
 800052c:	d105      	bne.n	800053a <set_motor+0x82>
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	681b      	ldr	r3, [r3, #0]
 8000534:	2200      	movs	r2, #0
 8000536:	635a      	str	r2, [r3, #52]	@ 0x34
    else
    {
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
    }
    return;
 8000538:	e0ab      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	88db      	ldrh	r3, [r3, #6]
 800053e:	2b04      	cmp	r3, #4
 8000540:	d105      	bne.n	800054e <set_motor+0x96>
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	681a      	ldr	r2, [r3, #0]
 8000548:	2300      	movs	r3, #0
 800054a:	6393      	str	r3, [r2, #56]	@ 0x38
 800054c:	e0a0      	b.n	8000690 <set_motor+0x1d8>
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	88db      	ldrh	r3, [r3, #6]
 8000552:	2b08      	cmp	r3, #8
 8000554:	d105      	bne.n	8000562 <set_motor+0xaa>
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	681a      	ldr	r2, [r3, #0]
 800055c:	2300      	movs	r3, #0
 800055e:	63d3      	str	r3, [r2, #60]	@ 0x3c
 8000560:	e096      	b.n	8000690 <set_motor+0x1d8>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	681a      	ldr	r2, [r3, #0]
 8000568:	2300      	movs	r3, #0
 800056a:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 800056c:	e091      	b.n	8000692 <set_motor+0x1da>
    else if (direction == FORWARD)
 800056e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000572:	2b01      	cmp	r3, #1
 8000574:	d146      	bne.n	8000604 <set_motor+0x14c>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	889b      	ldrh	r3, [r3, #4]
 800057a:	2b00      	cmp	r3, #0
 800057c:	d105      	bne.n	800058a <set_motor+0xd2>
 800057e:	687b      	ldr	r3, [r7, #4]
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	2200      	movs	r2, #0
 8000586:	635a      	str	r2, [r3, #52]	@ 0x34
 8000588:	e018      	b.n	80005bc <set_motor+0x104>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	889b      	ldrh	r3, [r3, #4]
 800058e:	2b04      	cmp	r3, #4
 8000590:	d105      	bne.n	800059e <set_motor+0xe6>
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	681b      	ldr	r3, [r3, #0]
 8000596:	681a      	ldr	r2, [r3, #0]
 8000598:	2300      	movs	r3, #0
 800059a:	6393      	str	r3, [r2, #56]	@ 0x38
 800059c:	e00e      	b.n	80005bc <set_motor+0x104>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	889b      	ldrh	r3, [r3, #4]
 80005a2:	2b08      	cmp	r3, #8
 80005a4:	d105      	bne.n	80005b2 <set_motor+0xfa>
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	681b      	ldr	r3, [r3, #0]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	2300      	movs	r3, #0
 80005ae:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005b0:	e004      	b.n	80005bc <set_motor+0x104>
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	681a      	ldr	r2, [r3, #0]
 80005b8:	2300      	movs	r3, #0
 80005ba:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	88db      	ldrh	r3, [r3, #6]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d105      	bne.n	80005d0 <set_motor+0x118>
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	681b      	ldr	r3, [r3, #0]
 80005ca:	883a      	ldrh	r2, [r7, #0]
 80005cc:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 80005ce:	e060      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, PWM);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	88db      	ldrh	r3, [r3, #6]
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	d105      	bne.n	80005e4 <set_motor+0x12c>
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	883b      	ldrh	r3, [r7, #0]
 80005e0:	6393      	str	r3, [r2, #56]	@ 0x38
 80005e2:	e055      	b.n	8000690 <set_motor+0x1d8>
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	88db      	ldrh	r3, [r3, #6]
 80005e8:	2b08      	cmp	r3, #8
 80005ea:	d105      	bne.n	80005f8 <set_motor+0x140>
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	681a      	ldr	r2, [r3, #0]
 80005f2:	883b      	ldrh	r3, [r7, #0]
 80005f4:	63d3      	str	r3, [r2, #60]	@ 0x3c
 80005f6:	e04b      	b.n	8000690 <set_motor+0x1d8>
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	883b      	ldrh	r3, [r7, #0]
 8000600:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 8000602:	e046      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, 0);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	889b      	ldrh	r3, [r3, #4]
 8000608:	2b00      	cmp	r3, #0
 800060a:	d105      	bne.n	8000618 <set_motor+0x160>
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	2200      	movs	r2, #0
 8000614:	635a      	str	r2, [r3, #52]	@ 0x34
 8000616:	e018      	b.n	800064a <set_motor+0x192>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	889b      	ldrh	r3, [r3, #4]
 800061c:	2b04      	cmp	r3, #4
 800061e:	d105      	bne.n	800062c <set_motor+0x174>
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	2300      	movs	r3, #0
 8000628:	6393      	str	r3, [r2, #56]	@ 0x38
 800062a:	e00e      	b.n	800064a <set_motor+0x192>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	889b      	ldrh	r3, [r3, #4]
 8000630:	2b08      	cmp	r3, #8
 8000632:	d105      	bne.n	8000640 <set_motor+0x188>
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	2300      	movs	r3, #0
 800063c:	63d3      	str	r3, [r2, #60]	@ 0x3c
 800063e:	e004      	b.n	800064a <set_motor+0x192>
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	681a      	ldr	r2, [r3, #0]
 8000646:	2300      	movs	r3, #0
 8000648:	6413      	str	r3, [r2, #64]	@ 0x40
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	88db      	ldrh	r3, [r3, #6]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d105      	bne.n	800065e <set_motor+0x1a6>
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2200      	movs	r2, #0
 800065a:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 800065c:	e019      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	88db      	ldrh	r3, [r3, #6]
 8000662:	2b04      	cmp	r3, #4
 8000664:	d105      	bne.n	8000672 <set_motor+0x1ba>
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	681a      	ldr	r2, [r3, #0]
 800066c:	2300      	movs	r3, #0
 800066e:	6393      	str	r3, [r2, #56]	@ 0x38
    return;
 8000670:	e00f      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	88db      	ldrh	r3, [r3, #6]
 8000676:	2b08      	cmp	r3, #8
 8000678:	d105      	bne.n	8000686 <set_motor+0x1ce>
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	2300      	movs	r3, #0
 8000682:	63d3      	str	r3, [r2, #60]	@ 0x3c
    return;
 8000684:	e005      	b.n	8000692 <set_motor+0x1da>
        __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel2, 0);
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	681a      	ldr	r2, [r3, #0]
 800068c:	2300      	movs	r3, #0
 800068e:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 8000690:	bf00      	nop
}
 8000692:	370c      	adds	r7, #12
 8000694:	46bd      	mov	sp, r7
 8000696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069a:	4770      	bx	lr

0800069c <set_servo>:

void set_servo(PWMcontrol *PWMcontrol, uint16_t PWM)
{
 800069c:	b480      	push	{r7}
 800069e:	b083      	sub	sp, #12
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	460b      	mov	r3, r1
 80006a6:	807b      	strh	r3, [r7, #2]
//     }
//     else if (PWM < SERVO_MIN_PULSE)
//     {
//         PWM = SERVO_MIN_PULSE;
//     }
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80006a8:	687b      	ldr	r3, [r7, #4]
 80006aa:	889b      	ldrh	r3, [r3, #4]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d105      	bne.n	80006bc <set_servo+0x20>
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	887a      	ldrh	r2, [r7, #2]
 80006b8:	635a      	str	r2, [r3, #52]	@ 0x34
    return;
 80006ba:	e019      	b.n	80006f0 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	889b      	ldrh	r3, [r3, #4]
 80006c0:	2b04      	cmp	r3, #4
 80006c2:	d105      	bne.n	80006d0 <set_servo+0x34>
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	681a      	ldr	r2, [r3, #0]
 80006ca:	887b      	ldrh	r3, [r7, #2]
 80006cc:	6393      	str	r3, [r2, #56]	@ 0x38
    return;
 80006ce:	e00f      	b.n	80006f0 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	889b      	ldrh	r3, [r3, #4]
 80006d4:	2b08      	cmp	r3, #8
 80006d6:	d105      	bne.n	80006e4 <set_servo+0x48>
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	887b      	ldrh	r3, [r7, #2]
 80006e0:	63d3      	str	r3, [r2, #60]	@ 0x3c
    return;
 80006e2:	e005      	b.n	80006f0 <set_servo+0x54>
    __HAL_TIM_SET_COMPARE(PWMcontrol->htim, PWMcontrol->Channel1, PWM);
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	681a      	ldr	r2, [r3, #0]
 80006ea:	887b      	ldrh	r3, [r7, #2]
 80006ec:	6413      	str	r3, [r2, #64]	@ 0x40
    return;
 80006ee:	bf00      	nop
}
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
	...

080006fc <CEAC_BLE_Rev>:
 */
#include "controller.h"

uint16_t base_pwm = BLE_MODE_1;
uint32_t rx_idx = 0;
void CEAC_BLE_Rev(char *buffer) {
 80006fc:	b480      	push	{r7}
 80006fe:	b085      	sub	sp, #20
 8000700:	af00      	add	r7, sp, #0
 8000702:	6078      	str	r0, [r7, #4]
	if (buffer[0] != 13) { // 13 is enter key
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	2b0d      	cmp	r3, #13
 800070a:	d028      	beq.n	800075e <CEAC_BLE_Rev+0x62>
		switch (buffer[0]) {
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	781b      	ldrb	r3, [r3, #0]
 8000710:	2b33      	cmp	r3, #51	@ 0x33
 8000712:	d00e      	beq.n	8000732 <CEAC_BLE_Rev+0x36>
 8000714:	2b33      	cmp	r3, #51	@ 0x33
 8000716:	dc11      	bgt.n	800073c <CEAC_BLE_Rev+0x40>
 8000718:	2b31      	cmp	r3, #49	@ 0x31
 800071a:	d002      	beq.n	8000722 <CEAC_BLE_Rev+0x26>
 800071c:	2b32      	cmp	r3, #50	@ 0x32
 800071e:	d004      	beq.n	800072a <CEAC_BLE_Rev+0x2e>
 8000720:	e00c      	b.n	800073c <CEAC_BLE_Rev+0x40>
		case '1':
			base_pwm = BLE_MODE_1;
 8000722:	4b19      	ldr	r3, [pc, #100]	@ (8000788 <CEAC_BLE_Rev+0x8c>)
 8000724:	2264      	movs	r2, #100	@ 0x64
 8000726:	801a      	strh	r2, [r3, #0]
			break;
 8000728:	e008      	b.n	800073c <CEAC_BLE_Rev+0x40>
		case '2':
			base_pwm = BLE_MODE_2;
 800072a:	4b17      	ldr	r3, [pc, #92]	@ (8000788 <CEAC_BLE_Rev+0x8c>)
 800072c:	22ff      	movs	r2, #255	@ 0xff
 800072e:	801a      	strh	r2, [r3, #0]
			break;
 8000730:	e004      	b.n	800073c <CEAC_BLE_Rev+0x40>
		case '3':
			base_pwm = BLE_MODE_3;
 8000732:	4b15      	ldr	r3, [pc, #84]	@ (8000788 <CEAC_BLE_Rev+0x8c>)
 8000734:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000738:	801a      	strh	r2, [r3, #0]
			break;
 800073a:	bf00      	nop
		}
		message[rx_idx++] = buffer[0];
 800073c:	4b13      	ldr	r3, [pc, #76]	@ (800078c <CEAC_BLE_Rev+0x90>)
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	1c5a      	adds	r2, r3, #1
 8000742:	4912      	ldr	r1, [pc, #72]	@ (800078c <CEAC_BLE_Rev+0x90>)
 8000744:	600a      	str	r2, [r1, #0]
 8000746:	687a      	ldr	r2, [r7, #4]
 8000748:	7811      	ldrb	r1, [r2, #0]
 800074a:	4a11      	ldr	r2, [pc, #68]	@ (8000790 <CEAC_BLE_Rev+0x94>)
 800074c:	54d1      	strb	r1, [r2, r3]
		if (rx_idx >= MESSAGE_SIZE)
 800074e:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <CEAC_BLE_Rev+0x90>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	2b03      	cmp	r3, #3
 8000754:	d911      	bls.n	800077a <CEAC_BLE_Rev+0x7e>
			rx_idx = 0;
 8000756:	4b0d      	ldr	r3, [pc, #52]	@ (800078c <CEAC_BLE_Rev+0x90>)
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
	} else {
		for (int i = 0; i < MESSAGE_SIZE; i++)
			message[i] = 0;
	}
}
 800075c:	e00d      	b.n	800077a <CEAC_BLE_Rev+0x7e>
		for (int i = 0; i < MESSAGE_SIZE; i++)
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
 8000762:	e007      	b.n	8000774 <CEAC_BLE_Rev+0x78>
			message[i] = 0;
 8000764:	4a0a      	ldr	r2, [pc, #40]	@ (8000790 <CEAC_BLE_Rev+0x94>)
 8000766:	68fb      	ldr	r3, [r7, #12]
 8000768:	4413      	add	r3, r2
 800076a:	2200      	movs	r2, #0
 800076c:	701a      	strb	r2, [r3, #0]
		for (int i = 0; i < MESSAGE_SIZE; i++)
 800076e:	68fb      	ldr	r3, [r7, #12]
 8000770:	3301      	adds	r3, #1
 8000772:	60fb      	str	r3, [r7, #12]
 8000774:	68fb      	ldr	r3, [r7, #12]
 8000776:	2b03      	cmp	r3, #3
 8000778:	ddf4      	ble.n	8000764 <CEAC_BLE_Rev+0x68>
}
 800077a:	bf00      	nop
 800077c:	3714      	adds	r7, #20
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	20000000 	.word	0x20000000
 800078c:	20000094 	.word	0x20000094
 8000790:	20000098 	.word	0x20000098

08000794 <CEAC_BLE_Proc>:

void CEAC_BLE_Proc() {
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
	int forward = 0, backward = 0, left = 0, right = 0;
 800079a:	2300      	movs	r3, #0
 800079c:	617b      	str	r3, [r7, #20]
 800079e:	2300      	movs	r3, #0
 80007a0:	613b      	str	r3, [r7, #16]
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
 80007a6:	2300      	movs	r3, #0
 80007a8:	60bb      	str	r3, [r7, #8]
	for (int i = 0; i < MESSAGE_SIZE; i++) {
 80007aa:	2300      	movs	r3, #0
 80007ac:	607b      	str	r3, [r7, #4]
 80007ae:	e053      	b.n	8000858 <CEAC_BLE_Proc+0xc4>
		switch (message[i]) {
 80007b0:	4aa0      	ldr	r2, [pc, #640]	@ (8000a34 <CEAC_BLE_Proc+0x2a0>)
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	4413      	add	r3, r2
 80007b6:	781b      	ldrb	r3, [r3, #0]
 80007b8:	3b61      	subs	r3, #97	@ 0x61
 80007ba:	2b16      	cmp	r3, #22
 80007bc:	d840      	bhi.n	8000840 <CEAC_BLE_Proc+0xac>
 80007be:	a201      	add	r2, pc, #4	@ (adr r2, 80007c4 <CEAC_BLE_Proc+0x30>)
 80007c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007c4:	08000831 	.word	0x08000831
 80007c8:	08000841 	.word	0x08000841
 80007cc:	08000841 	.word	0x08000841
 80007d0:	08000839 	.word	0x08000839
 80007d4:	08000841 	.word	0x08000841
 80007d8:	08000841 	.word	0x08000841
 80007dc:	08000841 	.word	0x08000841
 80007e0:	08000841 	.word	0x08000841
 80007e4:	08000841 	.word	0x08000841
 80007e8:	08000841 	.word	0x08000841
 80007ec:	08000841 	.word	0x08000841
 80007f0:	08000841 	.word	0x08000841
 80007f4:	08000841 	.word	0x08000841
 80007f8:	08000841 	.word	0x08000841
 80007fc:	08000841 	.word	0x08000841
 8000800:	08000841 	.word	0x08000841
 8000804:	08000841 	.word	0x08000841
 8000808:	08000841 	.word	0x08000841
 800080c:	08000829 	.word	0x08000829
 8000810:	08000841 	.word	0x08000841
 8000814:	08000841 	.word	0x08000841
 8000818:	08000841 	.word	0x08000841
 800081c:	08000821 	.word	0x08000821
		case 'w':
			forward++;
 8000820:	697b      	ldr	r3, [r7, #20]
 8000822:	3301      	adds	r3, #1
 8000824:	617b      	str	r3, [r7, #20]
			break;
 8000826:	e014      	b.n	8000852 <CEAC_BLE_Proc+0xbe>
		case 's':
			backward++;
 8000828:	693b      	ldr	r3, [r7, #16]
 800082a:	3301      	adds	r3, #1
 800082c:	613b      	str	r3, [r7, #16]
			break;
 800082e:	e010      	b.n	8000852 <CEAC_BLE_Proc+0xbe>
		case 'a':
			left++;
 8000830:	68fb      	ldr	r3, [r7, #12]
 8000832:	3301      	adds	r3, #1
 8000834:	60fb      	str	r3, [r7, #12]
			break;
 8000836:	e00c      	b.n	8000852 <CEAC_BLE_Proc+0xbe>
		case 'd':
			right++;
 8000838:	68bb      	ldr	r3, [r7, #8]
 800083a:	3301      	adds	r3, #1
 800083c:	60bb      	str	r3, [r7, #8]
			break;
 800083e:	e008      	b.n	8000852 <CEAC_BLE_Proc+0xbe>
		default: // reset state
			forward = 0, backward = 0, left = 0, right = 0;
 8000840:	2300      	movs	r3, #0
 8000842:	617b      	str	r3, [r7, #20]
 8000844:	2300      	movs	r3, #0
 8000846:	613b      	str	r3, [r7, #16]
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	2300      	movs	r3, #0
 800084e:	60bb      	str	r3, [r7, #8]
			break;
 8000850:	bf00      	nop
	for (int i = 0; i < MESSAGE_SIZE; i++) {
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3301      	adds	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	2b03      	cmp	r3, #3
 800085c:	dda8      	ble.n	80007b0 <CEAC_BLE_Proc+0x1c>
		}
	}

	if (forward > backward) {
 800085e:	697a      	ldr	r2, [r7, #20]
 8000860:	693b      	ldr	r3, [r7, #16]
 8000862:	429a      	cmp	r2, r3
 8000864:	dd4b      	ble.n	80008fe <CEAC_BLE_Proc+0x16a>
		if (left > right) {
 8000866:	68fa      	ldr	r2, [r7, #12]
 8000868:	68bb      	ldr	r3, [r7, #8]
 800086a:	429a      	cmp	r2, r3
 800086c:	dd17      	ble.n	800089e <CEAC_BLE_Proc+0x10a>
			set_motor(&motor[MOTOR_L], FORWARD, base_pwm - TURN_ADJUSTMENT);
 800086e:	4b72      	ldr	r3, [pc, #456]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000870:	881b      	ldrh	r3, [r3, #0]
 8000872:	3b32      	subs	r3, #50	@ 0x32
 8000874:	b29b      	uxth	r3, r3
 8000876:	461a      	mov	r2, r3
 8000878:	2101      	movs	r1, #1
 800087a:	4870      	ldr	r0, [pc, #448]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 800087c:	f7ff fe1c 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], FORWARD, base_pwm + TURN_ADJUSTMENT);
 8000880:	4b6d      	ldr	r3, [pc, #436]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000882:	881b      	ldrh	r3, [r3, #0]
 8000884:	3332      	adds	r3, #50	@ 0x32
 8000886:	b29b      	uxth	r3, r3
 8000888:	461a      	mov	r2, r3
 800088a:	2101      	movs	r1, #1
 800088c:	486c      	ldr	r0, [pc, #432]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 800088e:	f7ff fe13 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_LEFT);
 8000892:	f240 11e7 	movw	r1, #487	@ 0x1e7
 8000896:	486b      	ldr	r0, [pc, #428]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 8000898:	f7ff ff00 	bl	800069c <set_servo>
			set_motor(&motor[MOTOR_L], STOP, 0);
			set_motor(&motor[MOTOR_R], STOP, 0);
			set_servo(&servo, SERVO_CENTER);
		}
	}
}
 800089c:	e0c6      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
		} else if (right > left) {
 800089e:	68ba      	ldr	r2, [r7, #8]
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	429a      	cmp	r2, r3
 80008a4:	dd17      	ble.n	80008d6 <CEAC_BLE_Proc+0x142>
			set_motor(&motor[MOTOR_L], FORWARD, base_pwm + TURN_ADJUSTMENT);
 80008a6:	4b64      	ldr	r3, [pc, #400]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80008a8:	881b      	ldrh	r3, [r3, #0]
 80008aa:	3332      	adds	r3, #50	@ 0x32
 80008ac:	b29b      	uxth	r3, r3
 80008ae:	461a      	mov	r2, r3
 80008b0:	2101      	movs	r1, #1
 80008b2:	4862      	ldr	r0, [pc, #392]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 80008b4:	f7ff fe00 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], FORWARD, base_pwm - TURN_ADJUSTMENT);
 80008b8:	4b5f      	ldr	r3, [pc, #380]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80008ba:	881b      	ldrh	r3, [r3, #0]
 80008bc:	3b32      	subs	r3, #50	@ 0x32
 80008be:	b29b      	uxth	r3, r3
 80008c0:	461a      	mov	r2, r3
 80008c2:	2101      	movs	r1, #1
 80008c4:	485e      	ldr	r0, [pc, #376]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 80008c6:	f7ff fdf7 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_RIGHT);
 80008ca:	f240 31c2 	movw	r1, #962	@ 0x3c2
 80008ce:	485d      	ldr	r0, [pc, #372]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 80008d0:	f7ff fee4 	bl	800069c <set_servo>
}
 80008d4:	e0aa      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
			set_motor(&motor[MOTOR_L], FORWARD, base_pwm);
 80008d6:	4b58      	ldr	r3, [pc, #352]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80008d8:	881b      	ldrh	r3, [r3, #0]
 80008da:	461a      	mov	r2, r3
 80008dc:	2101      	movs	r1, #1
 80008de:	4857      	ldr	r0, [pc, #348]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 80008e0:	f7ff fdea 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], FORWARD, base_pwm);
 80008e4:	4b54      	ldr	r3, [pc, #336]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80008e6:	881b      	ldrh	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	2101      	movs	r1, #1
 80008ec:	4854      	ldr	r0, [pc, #336]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 80008ee:	f7ff fde3 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_CENTER);
 80008f2:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80008f6:	4853      	ldr	r0, [pc, #332]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 80008f8:	f7ff fed0 	bl	800069c <set_servo>
}
 80008fc:	e096      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
	} else if (backward > forward) {
 80008fe:	693a      	ldr	r2, [r7, #16]
 8000900:	697b      	ldr	r3, [r7, #20]
 8000902:	429a      	cmp	r2, r3
 8000904:	dd51      	ble.n	80009aa <CEAC_BLE_Proc+0x216>
		if (left > right) {
 8000906:	68fa      	ldr	r2, [r7, #12]
 8000908:	68bb      	ldr	r3, [r7, #8]
 800090a:	429a      	cmp	r2, r3
 800090c:	dd19      	ble.n	8000942 <CEAC_BLE_Proc+0x1ae>
			set_motor(&motor[MOTOR_L], BACKWARD, base_pwm - TURN_ADJUSTMENT);
 800090e:	4b4a      	ldr	r3, [pc, #296]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000910:	881b      	ldrh	r3, [r3, #0]
 8000912:	3b32      	subs	r3, #50	@ 0x32
 8000914:	b29b      	uxth	r3, r3
 8000916:	461a      	mov	r2, r3
 8000918:	f04f 31ff 	mov.w	r1, #4294967295
 800091c:	4847      	ldr	r0, [pc, #284]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 800091e:	f7ff fdcb 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], BACKWARD, base_pwm + TURN_ADJUSTMENT);
 8000922:	4b45      	ldr	r3, [pc, #276]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000924:	881b      	ldrh	r3, [r3, #0]
 8000926:	3332      	adds	r3, #50	@ 0x32
 8000928:	b29b      	uxth	r3, r3
 800092a:	461a      	mov	r2, r3
 800092c:	f04f 31ff 	mov.w	r1, #4294967295
 8000930:	4843      	ldr	r0, [pc, #268]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 8000932:	f7ff fdc1 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_LEFT);
 8000936:	f240 11e7 	movw	r1, #487	@ 0x1e7
 800093a:	4842      	ldr	r0, [pc, #264]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 800093c:	f7ff feae 	bl	800069c <set_servo>
}
 8000940:	e074      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
		} else if (right > left) {
 8000942:	68ba      	ldr	r2, [r7, #8]
 8000944:	68fb      	ldr	r3, [r7, #12]
 8000946:	429a      	cmp	r2, r3
 8000948:	dd19      	ble.n	800097e <CEAC_BLE_Proc+0x1ea>
			set_motor(&motor[MOTOR_L], BACKWARD, base_pwm + TURN_ADJUSTMENT);
 800094a:	4b3b      	ldr	r3, [pc, #236]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 800094c:	881b      	ldrh	r3, [r3, #0]
 800094e:	3332      	adds	r3, #50	@ 0x32
 8000950:	b29b      	uxth	r3, r3
 8000952:	461a      	mov	r2, r3
 8000954:	f04f 31ff 	mov.w	r1, #4294967295
 8000958:	4838      	ldr	r0, [pc, #224]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 800095a:	f7ff fdad 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], BACKWARD, base_pwm - TURN_ADJUSTMENT);
 800095e:	4b36      	ldr	r3, [pc, #216]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000960:	881b      	ldrh	r3, [r3, #0]
 8000962:	3b32      	subs	r3, #50	@ 0x32
 8000964:	b29b      	uxth	r3, r3
 8000966:	461a      	mov	r2, r3
 8000968:	f04f 31ff 	mov.w	r1, #4294967295
 800096c:	4834      	ldr	r0, [pc, #208]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 800096e:	f7ff fda3 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_RIGHT);
 8000972:	f240 31c2 	movw	r1, #962	@ 0x3c2
 8000976:	4833      	ldr	r0, [pc, #204]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 8000978:	f7ff fe90 	bl	800069c <set_servo>
}
 800097c:	e056      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
			set_motor(&motor[MOTOR_L], BACKWARD, base_pwm);
 800097e:	4b2e      	ldr	r3, [pc, #184]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000980:	881b      	ldrh	r3, [r3, #0]
 8000982:	461a      	mov	r2, r3
 8000984:	f04f 31ff 	mov.w	r1, #4294967295
 8000988:	482c      	ldr	r0, [pc, #176]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 800098a:	f7ff fd95 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], BACKWARD, base_pwm);
 800098e:	4b2a      	ldr	r3, [pc, #168]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 8000990:	881b      	ldrh	r3, [r3, #0]
 8000992:	461a      	mov	r2, r3
 8000994:	f04f 31ff 	mov.w	r1, #4294967295
 8000998:	4829      	ldr	r0, [pc, #164]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 800099a:	f7ff fd8d 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_CENTER);
 800099e:	f240 21d5 	movw	r1, #725	@ 0x2d5
 80009a2:	4828      	ldr	r0, [pc, #160]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 80009a4:	f7ff fe7a 	bl	800069c <set_servo>
}
 80009a8:	e040      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
		if (left > right) {
 80009aa:	68fa      	ldr	r2, [r7, #12]
 80009ac:	68bb      	ldr	r3, [r7, #8]
 80009ae:	429a      	cmp	r2, r3
 80009b0:	dd14      	ble.n	80009dc <CEAC_BLE_Proc+0x248>
			set_motor(&motor[MOTOR_L], BACKWARD, base_pwm);
 80009b2:	4b21      	ldr	r3, [pc, #132]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80009b4:	881b      	ldrh	r3, [r3, #0]
 80009b6:	461a      	mov	r2, r3
 80009b8:	f04f 31ff 	mov.w	r1, #4294967295
 80009bc:	481f      	ldr	r0, [pc, #124]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 80009be:	f7ff fd7b 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], FORWARD, base_pwm);
 80009c2:	4b1d      	ldr	r3, [pc, #116]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	2101      	movs	r1, #1
 80009ca:	481d      	ldr	r0, [pc, #116]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 80009cc:	f7ff fd74 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_LEFT);
 80009d0:	f240 11e7 	movw	r1, #487	@ 0x1e7
 80009d4:	481b      	ldr	r0, [pc, #108]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 80009d6:	f7ff fe61 	bl	800069c <set_servo>
}
 80009da:	e027      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
		} else if (right > left) {
 80009dc:	68ba      	ldr	r2, [r7, #8]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	429a      	cmp	r2, r3
 80009e2:	dd14      	ble.n	8000a0e <CEAC_BLE_Proc+0x27a>
			set_motor(&motor[MOTOR_L], FORWARD, base_pwm);
 80009e4:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80009e6:	881b      	ldrh	r3, [r3, #0]
 80009e8:	461a      	mov	r2, r3
 80009ea:	2101      	movs	r1, #1
 80009ec:	4813      	ldr	r0, [pc, #76]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 80009ee:	f7ff fd63 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], BACKWARD, base_pwm);
 80009f2:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <CEAC_BLE_Proc+0x2a4>)
 80009f4:	881b      	ldrh	r3, [r3, #0]
 80009f6:	461a      	mov	r2, r3
 80009f8:	f04f 31ff 	mov.w	r1, #4294967295
 80009fc:	4810      	ldr	r0, [pc, #64]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 80009fe:	f7ff fd5b 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_RIGHT);
 8000a02:	f240 31c2 	movw	r1, #962	@ 0x3c2
 8000a06:	480f      	ldr	r0, [pc, #60]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 8000a08:	f7ff fe48 	bl	800069c <set_servo>
}
 8000a0c:	e00e      	b.n	8000a2c <CEAC_BLE_Proc+0x298>
			set_motor(&motor[MOTOR_L], STOP, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2100      	movs	r1, #0
 8000a12:	480a      	ldr	r0, [pc, #40]	@ (8000a3c <CEAC_BLE_Proc+0x2a8>)
 8000a14:	f7ff fd50 	bl	80004b8 <set_motor>
			set_motor(&motor[MOTOR_R], STOP, 0);
 8000a18:	2200      	movs	r2, #0
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	4808      	ldr	r0, [pc, #32]	@ (8000a40 <CEAC_BLE_Proc+0x2ac>)
 8000a1e:	f7ff fd4b 	bl	80004b8 <set_motor>
			set_servo(&servo, SERVO_CENTER);
 8000a22:	f240 21d5 	movw	r1, #725	@ 0x2d5
 8000a26:	4807      	ldr	r0, [pc, #28]	@ (8000a44 <CEAC_BLE_Proc+0x2b0>)
 8000a28:	f7ff fe38 	bl	800069c <set_servo>
}
 8000a2c:	bf00      	nop
 8000a2e:	3718      	adds	r7, #24
 8000a30:	46bd      	mov	sp, r7
 8000a32:	bd80      	pop	{r7, pc}
 8000a34:	20000098 	.word	0x20000098
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000084 	.word	0x20000084
 8000a40:	2000008c 	.word	0x2000008c
 8000a44:	2000007c 	.word	0x2000007c

08000a48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000a48:	b580      	push	{r7, lr}
 8000a4a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000a4c:	f001 f882 	bl	8001b54 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000a50:	f000 f822 	bl	8000a98 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000a54:	f000 fbea 	bl	800122c <MX_GPIO_Init>
	MX_DMA_Init();
 8000a58:	f000 fbc8 	bl	80011ec <MX_DMA_Init>
	MX_TIM3_Init();
 8000a5c:	f000 f9e6 	bl	8000e2c <MX_TIM3_Init>
	MX_TIM8_Init();
 8000a60:	f000 fa86 	bl	8000f70 <MX_TIM8_Init>
	MX_ADC1_Init();
 8000a64:	f000 f880 	bl	8000b68 <MX_ADC1_Init>
	MX_ADC2_Init();
 8000a68:	f000 f908 	bl	8000c7c <MX_ADC2_Init>
	MX_TIM2_Init();
 8000a6c:	f000 f958 	bl	8000d20 <MX_TIM2_Init>
	MX_TIM10_Init();
 8000a70:	f000 fb44 	bl	80010fc <MX_TIM10_Init>
	MX_TIM4_Init();
 8000a74:	f000 fa2e 	bl	8000ed4 <MX_TIM4_Init>
	MX_USART3_UART_Init();
 8000a78:	f000 fb8e 	bl	8001198 <MX_USART3_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_UART_Receive_IT(&huart3, (uint8_t*) rev, sizeof(rev));
 8000a7c:	2202      	movs	r2, #2
 8000a7e:	4904      	ldr	r1, [pc, #16]	@ (8000a90 <main+0x48>)
 8000a80:	4804      	ldr	r0, [pc, #16]	@ (8000a94 <main+0x4c>)
 8000a82:	f004 f80f 	bl	8004aa4 <HAL_UART_Receive_IT>
	Scheduler_Init();
 8000a86:	f000 fd0d 	bl	80014a4 <Scheduler_Init>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		CEAC_BLE_Proc();
 8000a8a:	f7ff fe83 	bl	8000794 <CEAC_BLE_Proc>
 8000a8e:	e7fc      	b.n	8000a8a <main+0x42>
 8000a90:	2000033c 	.word	0x2000033c
 8000a94:	200002f4 	.word	0x200002f4

08000a98 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b094      	sub	sp, #80	@ 0x50
 8000a9c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8000a9e:	f107 0320 	add.w	r3, r7, #32
 8000aa2:	2230      	movs	r2, #48	@ 0x30
 8000aa4:	2100      	movs	r1, #0
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f004 ff34 	bl	8005914 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8000aac:	f107 030c 	add.w	r3, r7, #12
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	601a      	str	r2, [r3, #0]
 8000ab4:	605a      	str	r2, [r3, #4]
 8000ab6:	609a      	str	r2, [r3, #8]
 8000ab8:	60da      	str	r2, [r3, #12]
 8000aba:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8000abc:	2300      	movs	r3, #0
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	4b27      	ldr	r3, [pc, #156]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac4:	4a26      	ldr	r2, [pc, #152]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ac6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000aca:	6413      	str	r3, [r2, #64]	@ 0x40
 8000acc:	4b24      	ldr	r3, [pc, #144]	@ (8000b60 <SystemClock_Config+0xc8>)
 8000ace:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ad0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ad4:	60bb      	str	r3, [r7, #8]
 8000ad6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ad8:	2300      	movs	r3, #0
 8000ada:	607b      	str	r3, [r7, #4]
 8000adc:	4b21      	ldr	r3, [pc, #132]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	4a20      	ldr	r2, [pc, #128]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000ae2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ae6:	6013      	str	r3, [r2, #0]
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	@ (8000b64 <SystemClock_Config+0xcc>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000af0:	607b      	str	r3, [r7, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000af4:	2302      	movs	r3, #2
 8000af6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000af8:	2301      	movs	r3, #1
 8000afa:	62fb      	str	r3, [r7, #44]	@ 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000afc:	2310      	movs	r3, #16
 8000afe:	633b      	str	r3, [r7, #48]	@ 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b00:	2302      	movs	r3, #2
 8000b02:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b04:	2300      	movs	r3, #0
 8000b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8000b08:	2308      	movs	r3, #8
 8000b0a:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 72;
 8000b0c:	2348      	movs	r3, #72	@ 0x48
 8000b0e:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8000b14:	2304      	movs	r3, #4
 8000b16:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8000b18:	f107 0320 	add.w	r3, r7, #32
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f002 f931 	bl	8002d84 <HAL_RCC_OscConfig>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d001      	beq.n	8000b2c <SystemClock_Config+0x94>
		Error_Handler();
 8000b28:	f000 fcb6 	bl	8001498 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8000b2c:	230f      	movs	r3, #15
 8000b2e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b30:	2302      	movs	r3, #2
 8000b32:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b34:	2300      	movs	r3, #0
 8000b36:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8000b42:	f107 030c 	add.w	r3, r7, #12
 8000b46:	2102      	movs	r1, #2
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 fb93 	bl	8003274 <HAL_RCC_ClockConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0xc0>
		Error_Handler();
 8000b54:	f000 fca0 	bl	8001498 <Error_Handler>
	}
}
 8000b58:	bf00      	nop
 8000b5a:	3750      	adds	r7, #80	@ 0x50
 8000b5c:	46bd      	mov	sp, r7
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40007000 	.word	0x40007000

08000b68 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000b6e:	463b      	mov	r3, r7
 8000b70:	2200      	movs	r2, #0
 8000b72:	601a      	str	r2, [r3, #0]
 8000b74:	605a      	str	r2, [r3, #4]
 8000b76:	609a      	str	r2, [r3, #8]
 8000b78:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC1_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc1.Instance = ADC1;
 8000b7a:	4b3d      	ldr	r3, [pc, #244]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b7c:	4a3d      	ldr	r2, [pc, #244]	@ (8000c74 <MX_ADC1_Init+0x10c>)
 8000b7e:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b80:	4b3b      	ldr	r3, [pc, #236]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b86:	4b3a      	ldr	r3, [pc, #232]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
	hadc1.Init.ScanConvMode = ENABLE;
 8000b8c:	4b38      	ldr	r3, [pc, #224]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b8e:	2201      	movs	r2, #1
 8000b90:	611a      	str	r2, [r3, #16]
	hadc1.Init.ContinuousConvMode = ENABLE;
 8000b92:	4b37      	ldr	r3, [pc, #220]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b94:	2201      	movs	r2, #1
 8000b96:	761a      	strb	r2, [r3, #24]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b98:	4b35      	ldr	r3, [pc, #212]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ba0:	4b33      	ldr	r3, [pc, #204]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ba6:	4b32      	ldr	r3, [pc, #200]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000ba8:	4a33      	ldr	r2, [pc, #204]	@ (8000c78 <MX_ADC1_Init+0x110>)
 8000baa:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bac:	4b30      	ldr	r3, [pc, #192]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	60da      	str	r2, [r3, #12]
	hadc1.Init.NbrOfConversion = 5;
 8000bb2:	4b2f      	ldr	r3, [pc, #188]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000bb4:	2205      	movs	r2, #5
 8000bb6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8000bb8:	4b2d      	ldr	r3, [pc, #180]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bc0:	4b2b      	ldr	r3, [pc, #172]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8000bc6:	482a      	ldr	r0, [pc, #168]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000bc8:	f001 f836 	bl	8001c38 <HAL_ADC_Init>
 8000bcc:	4603      	mov	r3, r0
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	d001      	beq.n	8000bd6 <MX_ADC1_Init+0x6e>
		Error_Handler();
 8000bd2:	f000 fc61 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000bda:	2301      	movs	r3, #1
 8000bdc:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000bde:	2300      	movs	r3, #0
 8000be0:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000be2:	463b      	mov	r3, r7
 8000be4:	4619      	mov	r1, r3
 8000be6:	4822      	ldr	r0, [pc, #136]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000be8:	f001 f86a 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <MX_ADC1_Init+0x8e>
		Error_Handler();
 8000bf2:	f000 fc51 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_4;
 8000bf6:	2304      	movs	r3, #4
 8000bf8:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 2;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000bfe:	463b      	mov	r3, r7
 8000c00:	4619      	mov	r1, r3
 8000c02:	481b      	ldr	r0, [pc, #108]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000c04:	f001 f85c 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d001      	beq.n	8000c12 <MX_ADC1_Init+0xaa>
		Error_Handler();
 8000c0e:	f000 fc43 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8000c12:	2305      	movs	r3, #5
 8000c14:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 3;
 8000c16:	2303      	movs	r3, #3
 8000c18:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c1a:	463b      	mov	r3, r7
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4814      	ldr	r0, [pc, #80]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000c20:	f001 f84e 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000c24:	4603      	mov	r3, r0
 8000c26:	2b00      	cmp	r3, #0
 8000c28:	d001      	beq.n	8000c2e <MX_ADC1_Init+0xc6>
		Error_Handler();
 8000c2a:	f000 fc35 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8000c2e:	2306      	movs	r3, #6
 8000c30:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 4;
 8000c32:	2304      	movs	r3, #4
 8000c34:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c36:	463b      	mov	r3, r7
 8000c38:	4619      	mov	r1, r3
 8000c3a:	480d      	ldr	r0, [pc, #52]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000c3c:	f001 f840 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <MX_ADC1_Init+0xe2>
		Error_Handler();
 8000c46:	f000 fc27 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_7;
 8000c4a:	2307      	movs	r3, #7
 8000c4c:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 5;
 8000c4e:	2305      	movs	r3, #5
 8000c50:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8000c52:	463b      	mov	r3, r7
 8000c54:	4619      	mov	r1, r3
 8000c56:	4806      	ldr	r0, [pc, #24]	@ (8000c70 <MX_ADC1_Init+0x108>)
 8000c58:	f001 f832 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d001      	beq.n	8000c66 <MX_ADC1_Init+0xfe>
		Error_Handler();
 8000c62:	f000 fc19 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8000c66:	bf00      	nop
 8000c68:	3710      	adds	r7, #16
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	2000009c 	.word	0x2000009c
 8000c74:	40012000 	.word	0x40012000
 8000c78:	0f000001 	.word	0x0f000001

08000c7c <MX_ADC2_Init>:
/**
 * @brief ADC2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC2_Init(void) {
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b084      	sub	sp, #16
 8000c80:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC2_Init 0 */

	/* USER CODE END ADC2_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8000c82:	463b      	mov	r3, r7
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]

	/* USER CODE END ADC2_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc2.Instance = ADC2;
 8000c8e:	4b21      	ldr	r3, [pc, #132]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000c90:	4a21      	ldr	r2, [pc, #132]	@ (8000d18 <MX_ADC2_Init+0x9c>)
 8000c92:	601a      	str	r2, [r3, #0]
	hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000c94:	4b1f      	ldr	r3, [pc, #124]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	605a      	str	r2, [r3, #4]
	hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000c9a:	4b1e      	ldr	r3, [pc, #120]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	609a      	str	r2, [r3, #8]
	hadc2.Init.ScanConvMode = DISABLE;
 8000ca0:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	611a      	str	r2, [r3, #16]
	hadc2.Init.ContinuousConvMode = DISABLE;
 8000ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000ca8:	2200      	movs	r2, #0
 8000caa:	761a      	strb	r2, [r3, #24]
	hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000cac:	4b19      	ldr	r3, [pc, #100]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cae:	2200      	movs	r2, #0
 8000cb0:	f883 2020 	strb.w	r2, [r3, #32]
	hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000cb4:	4b17      	ldr	r3, [pc, #92]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	62da      	str	r2, [r3, #44]	@ 0x2c
	hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000cba:	4b16      	ldr	r3, [pc, #88]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cbc:	4a17      	ldr	r2, [pc, #92]	@ (8000d1c <MX_ADC2_Init+0xa0>)
 8000cbe:	629a      	str	r2, [r3, #40]	@ 0x28
	hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cc0:	4b14      	ldr	r3, [pc, #80]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	60da      	str	r2, [r3, #12]
	hadc2.Init.NbrOfConversion = 1;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cc8:	2201      	movs	r2, #1
 8000cca:	61da      	str	r2, [r3, #28]
	hadc2.Init.DMAContinuousRequests = DISABLE;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
	hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cd4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cd6:	2201      	movs	r2, #1
 8000cd8:	615a      	str	r2, [r3, #20]
	if (HAL_ADC_Init(&hadc2) != HAL_OK) {
 8000cda:	480e      	ldr	r0, [pc, #56]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cdc:	f000 ffac 	bl	8001c38 <HAL_ADC_Init>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC2_Init+0x6e>
		Error_Handler();
 8000ce6:	f000 fbd7 	bl	8001498 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_8;
 8000cea:	2308      	movs	r3, #8
 8000cec:	603b      	str	r3, [r7, #0]
	sConfig.Rank = 1;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK) {
 8000cf6:	463b      	mov	r3, r7
 8000cf8:	4619      	mov	r1, r3
 8000cfa:	4806      	ldr	r0, [pc, #24]	@ (8000d14 <MX_ADC2_Init+0x98>)
 8000cfc:	f000 ffe0 	bl	8001cc0 <HAL_ADC_ConfigChannel>
 8000d00:	4603      	mov	r3, r0
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d001      	beq.n	8000d0a <MX_ADC2_Init+0x8e>
		Error_Handler();
 8000d06:	f000 fbc7 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN ADC2_Init 2 */

	/* USER CODE END ADC2_Init 2 */

}
 8000d0a:	bf00      	nop
 8000d0c:	3710      	adds	r7, #16
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	200000e4 	.word	0x200000e4
 8000d18:	40012100 	.word	0x40012100
 8000d1c:	0f000001 	.word	0x0f000001

08000d20 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b08a      	sub	sp, #40	@ 0x28
 8000d24:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000d26:	f107 0318 	add.w	r3, r7, #24
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	601a      	str	r2, [r3, #0]
 8000d2e:	605a      	str	r2, [r3, #4]
 8000d30:	609a      	str	r2, [r3, #8]
 8000d32:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000d34:	f107 0310 	add.w	r3, r7, #16
 8000d38:	2200      	movs	r2, #0
 8000d3a:	601a      	str	r2, [r3, #0]
 8000d3c:	605a      	str	r2, [r3, #4]
	TIM_IC_InitTypeDef sConfigIC = { 0 };
 8000d3e:	463b      	mov	r3, r7
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8000d4a:	4b37      	ldr	r3, [pc, #220]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d4c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d50:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72 - 1;
 8000d52:	4b35      	ldr	r3, [pc, #212]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d54:	2247      	movs	r2, #71	@ 0x47
 8000d56:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d58:	4b33      	ldr	r3, [pc, #204]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8000d5e:	4b32      	ldr	r3, [pc, #200]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000d64:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d66:	4b30      	ldr	r3, [pc, #192]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d6c:	4b2e      	ldr	r3, [pc, #184]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8000d72:	482d      	ldr	r0, [pc, #180]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d74:	f002 fc5e 	bl	8003634 <HAL_TIM_Base_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_TIM2_Init+0x62>
		Error_Handler();
 8000d7e:	f000 fb8b 	bl	8001498 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d82:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d86:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8000d88:	f107 0318 	add.w	r3, r7, #24
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	4826      	ldr	r0, [pc, #152]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000d90:	f003 f846 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0x7e>
		Error_Handler();
 8000d9a:	f000 fb7d 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_IC_Init(&htim2) != HAL_OK) {
 8000d9e:	4822      	ldr	r0, [pc, #136]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000da0:	f002 fcf0 	bl	8003784 <HAL_TIM_IC_Init>
 8000da4:	4603      	mov	r3, r0
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d001      	beq.n	8000dae <MX_TIM2_Init+0x8e>
		Error_Handler();
 8000daa:	f000 fb75 	bl	8001498 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dae:	2300      	movs	r3, #0
 8000db0:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000db2:	2300      	movs	r3, #0
 8000db4:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8000db6:	f107 0310 	add.w	r3, r7, #16
 8000dba:	4619      	mov	r1, r3
 8000dbc:	481a      	ldr	r0, [pc, #104]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000dbe:	f003 fd3f 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d001      	beq.n	8000dcc <MX_TIM2_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8000dc8:	f000 fb66 	bl	8001498 <Error_Handler>
	}
	sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	603b      	str	r3, [r7, #0]
	sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	607b      	str	r3, [r7, #4]
	sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
	sConfigIC.ICFilter = 0;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK) {
 8000ddc:	463b      	mov	r3, r7
 8000dde:	2204      	movs	r2, #4
 8000de0:	4619      	mov	r1, r3
 8000de2:	4811      	ldr	r0, [pc, #68]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000de4:	f002 febd 	bl	8003b62 <HAL_TIM_IC_ConfigChannel>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_TIM2_Init+0xd2>
		Error_Handler();
 8000dee:	f000 fb53 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_3) != HAL_OK) {
 8000df2:	463b      	mov	r3, r7
 8000df4:	2208      	movs	r2, #8
 8000df6:	4619      	mov	r1, r3
 8000df8:	480b      	ldr	r0, [pc, #44]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000dfa:	f002 feb2 	bl	8003b62 <HAL_TIM_IC_ConfigChannel>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <MX_TIM2_Init+0xe8>
		Error_Handler();
 8000e04:	f000 fb48 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_4) != HAL_OK) {
 8000e08:	463b      	mov	r3, r7
 8000e0a:	220c      	movs	r2, #12
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4806      	ldr	r0, [pc, #24]	@ (8000e28 <MX_TIM2_Init+0x108>)
 8000e10:	f002 fea7 	bl	8003b62 <HAL_TIM_IC_ConfigChannel>
 8000e14:	4603      	mov	r3, r0
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d001      	beq.n	8000e1e <MX_TIM2_Init+0xfe>
		Error_Handler();
 8000e1a:	f000 fb3d 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8000e1e:	bf00      	nop
 8000e20:	3728      	adds	r7, #40	@ 0x28
 8000e22:	46bd      	mov	sp, r7
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2000018c 	.word	0x2000018c

08000e2c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b08c      	sub	sp, #48	@ 0x30
 8000e30:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = { 0 };
 8000e32:	f107 030c 	add.w	r3, r7, #12
 8000e36:	2224      	movs	r2, #36	@ 0x24
 8000e38:	2100      	movs	r1, #0
 8000e3a:	4618      	mov	r0, r3
 8000e3c:	f004 fd6a 	bl	8005914 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000e40:	1d3b      	adds	r3, r7, #4
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]
 8000e46:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8000e48:	4b20      	ldr	r3, [pc, #128]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e4a:	4a21      	ldr	r2, [pc, #132]	@ (8000ed0 <MX_TIM3_Init+0xa4>)
 8000e4c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 0;
 8000e4e:	4b1f      	ldr	r3, [pc, #124]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e54:	4b1d      	ldr	r3, [pc, #116]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 65535;
 8000e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e5c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000e60:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e68:	4b18      	ldr	r3, [pc, #96]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8000e6e:	2301      	movs	r3, #1
 8000e70:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8000e72:	2300      	movs	r3, #0
 8000e74:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8000e76:	2301      	movs	r3, #1
 8000e78:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 0;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8000e82:	2300      	movs	r3, #0
 8000e84:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8000e86:	2301      	movs	r3, #1
 8000e88:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfig.IC2Filter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	62fb      	str	r3, [r7, #44]	@ 0x2c
	if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK) {
 8000e92:	f107 030c 	add.w	r3, r7, #12
 8000e96:	4619      	mov	r1, r3
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000e9a:	f002 fccc 	bl	8003836 <HAL_TIM_Encoder_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM3_Init+0x7c>
		Error_Handler();
 8000ea4:	f000 faf8 	bl	8001498 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8000eb0:	1d3b      	adds	r3, r7, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4805      	ldr	r0, [pc, #20]	@ (8000ecc <MX_TIM3_Init+0xa0>)
 8000eb6:	f003 fcc3 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM3_Init+0x98>
			!= HAL_OK) {
		Error_Handler();
 8000ec0:	f000 faea 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	3730      	adds	r7, #48	@ 0x30
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	200001d4 	.word	0x200001d4
 8000ed0:	40000400 	.word	0x40000400

08000ed4 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000eda:	f107 0308 	add.w	r3, r7, #8
 8000ede:	2200      	movs	r2, #0
 8000ee0:	601a      	str	r2, [r3, #0]
 8000ee2:	605a      	str	r2, [r3, #4]
 8000ee4:	609a      	str	r2, [r3, #8]
 8000ee6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000ee8:	463b      	mov	r3, r7
 8000eea:	2200      	movs	r2, #0
 8000eec:	601a      	str	r2, [r3, #0]
 8000eee:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8000ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000ef2:	4a1e      	ldr	r2, [pc, #120]	@ (8000f6c <MX_TIM4_Init+0x98>)
 8000ef4:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 720 - 1;
 8000ef6:	4b1c      	ldr	r3, [pc, #112]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000ef8:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000efc:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000efe:	4b1a      	ldr	r3, [pc, #104]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 100 - 1;
 8000f04:	4b18      	ldr	r3, [pc, #96]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f06:	2263      	movs	r2, #99	@ 0x63
 8000f08:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f0a:	4b17      	ldr	r3, [pc, #92]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f10:	4b15      	ldr	r3, [pc, #84]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8000f16:	4814      	ldr	r0, [pc, #80]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f18:	f002 fb8c 	bl	8003634 <HAL_TIM_Base_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM4_Init+0x52>
		Error_Handler();
 8000f22:	f000 fab9 	bl	8001498 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f26:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f2a:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8000f2c:	f107 0308 	add.w	r3, r7, #8
 8000f30:	4619      	mov	r1, r3
 8000f32:	480d      	ldr	r0, [pc, #52]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f34:	f002 ff74 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 8000f38:	4603      	mov	r3, r0
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	d001      	beq.n	8000f42 <MX_TIM4_Init+0x6e>
		Error_Handler();
 8000f3e:	f000 faab 	bl	8001498 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f42:	2300      	movs	r3, #0
 8000f44:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f46:	2300      	movs	r3, #0
 8000f48:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8000f4a:	463b      	mov	r3, r7
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	4806      	ldr	r0, [pc, #24]	@ (8000f68 <MX_TIM4_Init+0x94>)
 8000f50:	f003 fc76 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d001      	beq.n	8000f5e <MX_TIM4_Init+0x8a>
			!= HAL_OK) {
		Error_Handler();
 8000f5a:	f000 fa9d 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */

}
 8000f5e:	bf00      	nop
 8000f60:	3718      	adds	r7, #24
 8000f62:	46bd      	mov	sp, r7
 8000f64:	bd80      	pop	{r7, pc}
 8000f66:	bf00      	nop
 8000f68:	2000021c 	.word	0x2000021c
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_TIM8_Init>:
/**
 * @brief TIM8 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM8_Init(void) {
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b096      	sub	sp, #88	@ 0x58
 8000f74:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM8_Init 0 */

	/* USER CODE END TIM8_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8000f76:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8000f84:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000f88:	2200      	movs	r2, #0
 8000f8a:	601a      	str	r2, [r3, #0]
 8000f8c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8000f8e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f92:	2200      	movs	r2, #0
 8000f94:	601a      	str	r2, [r3, #0]
 8000f96:	605a      	str	r2, [r3, #4]
 8000f98:	609a      	str	r2, [r3, #8]
 8000f9a:	60da      	str	r2, [r3, #12]
 8000f9c:	611a      	str	r2, [r3, #16]
 8000f9e:	615a      	str	r2, [r3, #20]
 8000fa0:	619a      	str	r2, [r3, #24]
	TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = { 0 };
 8000fa2:	1d3b      	adds	r3, r7, #4
 8000fa4:	2220      	movs	r2, #32
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f004 fcb3 	bl	8005914 <memset>

	/* USER CODE BEGIN TIM8_Init 1 */

	/* USER CODE END TIM8_Init 1 */
	htim8.Instance = TIM8;
 8000fae:	4b51      	ldr	r3, [pc, #324]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fb0:	4a51      	ldr	r2, [pc, #324]	@ (80010f8 <MX_TIM8_Init+0x188>)
 8000fb2:	601a      	str	r2, [r3, #0]
	htim8.Init.Prescaler = 720 - 1;
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fb6:	f240 22cf 	movw	r2, #719	@ 0x2cf
 8000fba:	605a      	str	r2, [r3, #4]
	htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fbc:	4b4d      	ldr	r3, [pc, #308]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
	htim8.Init.Period = 1023;
 8000fc2:	4b4c      	ldr	r3, [pc, #304]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fc4:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 8000fc8:	60da      	str	r2, [r3, #12]
	htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fca:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	611a      	str	r2, [r3, #16]
	htim8.Init.RepetitionCounter = 0;
 8000fd0:	4b48      	ldr	r3, [pc, #288]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	615a      	str	r2, [r3, #20]
	htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fd6:	4b47      	ldr	r3, [pc, #284]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim8) != HAL_OK) {
 8000fdc:	4845      	ldr	r0, [pc, #276]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000fde:	f002 fb29 	bl	8003634 <HAL_TIM_Base_Init>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <MX_TIM8_Init+0x7c>
		Error_Handler();
 8000fe8:	f000 fa56 	bl	8001498 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ff0:	64bb      	str	r3, [r7, #72]	@ 0x48
	if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK) {
 8000ff2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000ff6:	4619      	mov	r1, r3
 8000ff8:	483e      	ldr	r0, [pc, #248]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8000ffa:	f002 ff11 	bl	8003e20 <HAL_TIM_ConfigClockSource>
 8000ffe:	4603      	mov	r3, r0
 8001000:	2b00      	cmp	r3, #0
 8001002:	d001      	beq.n	8001008 <MX_TIM8_Init+0x98>
		Error_Handler();
 8001004:	f000 fa48 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim8) != HAL_OK) {
 8001008:	483a      	ldr	r0, [pc, #232]	@ (80010f4 <MX_TIM8_Init+0x184>)
 800100a:	f002 fb62 	bl	80036d2 <HAL_TIM_PWM_Init>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM8_Init+0xa8>
		Error_Handler();
 8001014:	f000 fa40 	bl	8001498 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001018:	2300      	movs	r3, #0
 800101a:	643b      	str	r3, [r7, #64]	@ 0x40
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101c:	2300      	movs	r3, #0
 800101e:	647b      	str	r3, [r7, #68]	@ 0x44
	if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig)
 8001020:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001024:	4619      	mov	r1, r3
 8001026:	4833      	ldr	r0, [pc, #204]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8001028:	f003 fc0a 	bl	8004840 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM8_Init+0xc6>
			!= HAL_OK) {
		Error_Handler();
 8001032:	f000 fa31 	bl	8001498 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001036:	2360      	movs	r3, #96	@ 0x60
 8001038:	627b      	str	r3, [r7, #36]	@ 0x24
	sConfigOC.Pulse = 100;
 800103a:	2364      	movs	r3, #100	@ 0x64
 800103c:	62bb      	str	r3, [r7, #40]	@ 0x28
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800103e:	2300      	movs	r3, #0
 8001040:	62fb      	str	r3, [r7, #44]	@ 0x2c
	sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001042:	2300      	movs	r3, #0
 8001044:	633b      	str	r3, [r7, #48]	@ 0x30
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001046:	2300      	movs	r3, #0
 8001048:	637b      	str	r3, [r7, #52]	@ 0x34
	sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800104a:	2300      	movs	r3, #0
 800104c:	63bb      	str	r3, [r7, #56]	@ 0x38
	sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800104e:	2300      	movs	r3, #0
 8001050:	63fb      	str	r3, [r7, #60]	@ 0x3c
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1)
 8001052:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001056:	2200      	movs	r2, #0
 8001058:	4619      	mov	r1, r3
 800105a:	4826      	ldr	r0, [pc, #152]	@ (80010f4 <MX_TIM8_Init+0x184>)
 800105c:	f002 fe1e 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM8_Init+0xfa>
			!= HAL_OK) {
		Error_Handler();
 8001066:	f000 fa17 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2)
 800106a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800106e:	2204      	movs	r2, #4
 8001070:	4619      	mov	r1, r3
 8001072:	4820      	ldr	r0, [pc, #128]	@ (80010f4 <MX_TIM8_Init+0x184>)
 8001074:	f002 fe12 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001078:	4603      	mov	r3, r0
 800107a:	2b00      	cmp	r3, #0
 800107c:	d001      	beq.n	8001082 <MX_TIM8_Init+0x112>
			!= HAL_OK) {
		Error_Handler();
 800107e:	f000 fa0b 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3)
 8001082:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001086:	2208      	movs	r2, #8
 8001088:	4619      	mov	r1, r3
 800108a:	481a      	ldr	r0, [pc, #104]	@ (80010f4 <MX_TIM8_Init+0x184>)
 800108c:	f002 fe06 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <MX_TIM8_Init+0x12a>
			!= HAL_OK) {
		Error_Handler();
 8001096:	f000 f9ff 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4)
 800109a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800109e:	220c      	movs	r2, #12
 80010a0:	4619      	mov	r1, r3
 80010a2:	4814      	ldr	r0, [pc, #80]	@ (80010f4 <MX_TIM8_Init+0x184>)
 80010a4:	f002 fdfa 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <MX_TIM8_Init+0x142>
			!= HAL_OK) {
		Error_Handler();
 80010ae:	f000 f9f3 	bl	8001498 <Error_Handler>
	}
	sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b2:	2300      	movs	r3, #0
 80010b4:	607b      	str	r3, [r7, #4]
	sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	60bb      	str	r3, [r7, #8]
	sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010ba:	2300      	movs	r3, #0
 80010bc:	60fb      	str	r3, [r7, #12]
	sBreakDeadTimeConfig.DeadTime = 0;
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
	sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c2:	2300      	movs	r3, #0
 80010c4:	617b      	str	r3, [r7, #20]
	sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010c6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010ca:	61bb      	str	r3, [r7, #24]
	sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010cc:	2300      	movs	r3, #0
 80010ce:	623b      	str	r3, [r7, #32]
	if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig)
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	4619      	mov	r1, r3
 80010d4:	4807      	ldr	r0, [pc, #28]	@ (80010f4 <MX_TIM8_Init+0x184>)
 80010d6:	f003 fc2f 	bl	8004938 <HAL_TIMEx_ConfigBreakDeadTime>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_TIM8_Init+0x174>
			!= HAL_OK) {
		Error_Handler();
 80010e0:	f000 f9da 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN TIM8_Init 2 */

	/* USER CODE END TIM8_Init 2 */
	HAL_TIM_MspPostInit(&htim8);
 80010e4:	4803      	ldr	r0, [pc, #12]	@ (80010f4 <MX_TIM8_Init+0x184>)
 80010e6:	f000 fbe3 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 80010ea:	bf00      	nop
 80010ec:	3758      	adds	r7, #88	@ 0x58
 80010ee:	46bd      	mov	sp, r7
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	20000264 	.word	0x20000264
 80010f8:	40010400 	.word	0x40010400

080010fc <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b088      	sub	sp, #32
 8001100:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8001102:	1d3b      	adds	r3, r7, #4
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
 8001110:	615a      	str	r2, [r3, #20]
 8001112:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8001114:	4b1e      	ldr	r3, [pc, #120]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001116:	4a1f      	ldr	r2, [pc, #124]	@ (8001194 <MX_TIM10_Init+0x98>)
 8001118:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 144 - 1;
 800111a:	4b1d      	ldr	r3, [pc, #116]	@ (8001190 <MX_TIM10_Init+0x94>)
 800111c:	228f      	movs	r2, #143	@ 0x8f
 800111e:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001120:	4b1b      	ldr	r3, [pc, #108]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001122:	2200      	movs	r2, #0
 8001124:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 9999;
 8001126:	4b1a      	ldr	r3, [pc, #104]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001128:	f242 720f 	movw	r2, #9999	@ 0x270f
 800112c:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b18      	ldr	r3, [pc, #96]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001134:	4b16      	ldr	r3, [pc, #88]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001136:	2200      	movs	r2, #0
 8001138:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800113a:	4815      	ldr	r0, [pc, #84]	@ (8001190 <MX_TIM10_Init+0x94>)
 800113c:	f002 fa7a 	bl	8003634 <HAL_TIM_Base_Init>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <MX_TIM10_Init+0x4e>
		Error_Handler();
 8001146:	f000 f9a7 	bl	8001498 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 800114a:	4811      	ldr	r0, [pc, #68]	@ (8001190 <MX_TIM10_Init+0x94>)
 800114c:	f002 fac1 	bl	80036d2 <HAL_TIM_PWM_Init>
 8001150:	4603      	mov	r3, r0
 8001152:	2b00      	cmp	r3, #0
 8001154:	d001      	beq.n	800115a <MX_TIM10_Init+0x5e>
		Error_Handler();
 8001156:	f000 f99f 	bl	8001498 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800115a:	2360      	movs	r3, #96	@ 0x60
 800115c:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 749;
 800115e:	f240 23ed 	movw	r3, #749	@ 0x2ed
 8001162:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001164:	2300      	movs	r3, #0
 8001166:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001168:	2300      	movs	r3, #0
 800116a:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	2200      	movs	r2, #0
 8001170:	4619      	mov	r1, r3
 8001172:	4807      	ldr	r0, [pc, #28]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001174:	f002 fd92 	bl	8003c9c <HAL_TIM_PWM_ConfigChannel>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM10_Init+0x86>
			!= HAL_OK) {
		Error_Handler();
 800117e:	f000 f98b 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8001182:	4803      	ldr	r0, [pc, #12]	@ (8001190 <MX_TIM10_Init+0x94>)
 8001184:	f000 fb94 	bl	80018b0 <HAL_TIM_MspPostInit>

}
 8001188:	bf00      	nop
 800118a:	3720      	adds	r7, #32
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	200002ac 	.word	0x200002ac
 8001194:	40014400 	.word	0x40014400

08001198 <MX_USART3_UART_Init>:
/**
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void) {
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 800119c:	4b11      	ldr	r3, [pc, #68]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 800119e:	4a12      	ldr	r2, [pc, #72]	@ (80011e8 <MX_USART3_UART_Init+0x50>)
 80011a0:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 9600;
 80011a2:	4b10      	ldr	r3, [pc, #64]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011a4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80011a8:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011aa:	4b0e      	ldr	r3, [pc, #56]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80011b0:	4b0c      	ldr	r3, [pc, #48]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80011b6:	4b0b      	ldr	r3, [pc, #44]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011b8:	2200      	movs	r2, #0
 80011ba:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80011bc:	4b09      	ldr	r3, [pc, #36]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011be:	220c      	movs	r2, #12
 80011c0:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011c2:	4b08      	ldr	r3, [pc, #32]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011c8:	4b06      	ldr	r3, [pc, #24]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK) {
 80011ce:	4805      	ldr	r0, [pc, #20]	@ (80011e4 <MX_USART3_UART_Init+0x4c>)
 80011d0:	f003 fc18 	bl	8004a04 <HAL_UART_Init>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <MX_USART3_UART_Init+0x46>
		Error_Handler();
 80011da:	f000 f95d 	bl	8001498 <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 80011de:	bf00      	nop
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	200002f4 	.word	0x200002f4
 80011e8:	40004800 	.word	0x40004800

080011ec <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void) {
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA2_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	607b      	str	r3, [r7, #4]
 80011f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001228 <MX_DMA_Init+0x3c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011fa:	4a0b      	ldr	r2, [pc, #44]	@ (8001228 <MX_DMA_Init+0x3c>)
 80011fc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001200:	6313      	str	r3, [r2, #48]	@ 0x30
 8001202:	4b09      	ldr	r3, [pc, #36]	@ (8001228 <MX_DMA_Init+0x3c>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001206:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800120a:	607b      	str	r3, [r7, #4]
 800120c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA2_Stream0_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800120e:	2200      	movs	r2, #0
 8001210:	2100      	movs	r1, #0
 8001212:	2038      	movs	r0, #56	@ 0x38
 8001214:	f001 f84d 	bl	80022b2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001218:	2038      	movs	r0, #56	@ 0x38
 800121a:	f001 f866 	bl	80022ea <HAL_NVIC_EnableIRQ>

}
 800121e:	bf00      	nop
 8001220:	3708      	adds	r7, #8
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}
 8001226:	bf00      	nop
 8001228:	40023800 	.word	0x40023800

0800122c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800122c:	b580      	push	{r7, lr}
 800122e:	b08c      	sub	sp, #48	@ 0x30
 8001230:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001232:	f107 031c 	add.w	r3, r7, #28
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
 800123a:	605a      	str	r2, [r3, #4]
 800123c:	609a      	str	r2, [r3, #8]
 800123e:	60da      	str	r2, [r3, #12]
 8001240:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOE_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	61bb      	str	r3, [r7, #24]
 8001246:	4b77      	ldr	r3, [pc, #476]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800124a:	4a76      	ldr	r2, [pc, #472]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 800124c:	f043 0310 	orr.w	r3, r3, #16
 8001250:	6313      	str	r3, [r2, #48]	@ 0x30
 8001252:	4b74      	ldr	r3, [pc, #464]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001256:	f003 0310 	and.w	r3, r3, #16
 800125a:	61bb      	str	r3, [r7, #24]
 800125c:	69bb      	ldr	r3, [r7, #24]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	617b      	str	r3, [r7, #20]
 8001262:	4b70      	ldr	r3, [pc, #448]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001266:	4a6f      	ldr	r2, [pc, #444]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001268:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800126c:	6313      	str	r3, [r2, #48]	@ 0x30
 800126e:	4b6d      	ldr	r3, [pc, #436]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001272:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	697b      	ldr	r3, [r7, #20]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	613b      	str	r3, [r7, #16]
 800127e:	4b69      	ldr	r3, [pc, #420]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001282:	4a68      	ldr	r2, [pc, #416]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 8001284:	f043 0304 	orr.w	r3, r3, #4
 8001288:	6313      	str	r3, [r2, #48]	@ 0x30
 800128a:	4b66      	ldr	r3, [pc, #408]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128e:	f003 0304 	and.w	r3, r3, #4
 8001292:	613b      	str	r3, [r7, #16]
 8001294:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	2300      	movs	r3, #0
 8001298:	60fb      	str	r3, [r7, #12]
 800129a:	4b62      	ldr	r3, [pc, #392]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 800129c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129e:	4a61      	ldr	r2, [pc, #388]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012a0:	f043 0301 	orr.w	r3, r3, #1
 80012a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a6:	4b5f      	ldr	r3, [pc, #380]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012aa:	f003 0301 	and.w	r3, r3, #1
 80012ae:	60fb      	str	r3, [r7, #12]
 80012b0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80012b2:	2300      	movs	r3, #0
 80012b4:	60bb      	str	r3, [r7, #8]
 80012b6:	4b5b      	ldr	r3, [pc, #364]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012ba:	4a5a      	ldr	r2, [pc, #360]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012bc:	f043 0302 	orr.w	r3, r3, #2
 80012c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012c2:	4b58      	ldr	r3, [pc, #352]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012c6:	f003 0302 	and.w	r3, r3, #2
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
 80012d2:	4b54      	ldr	r3, [pc, #336]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d6:	4a53      	ldr	r2, [pc, #332]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012d8:	f043 0308 	orr.w	r3, r3, #8
 80012dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80012de:	4b51      	ldr	r3, [pc, #324]	@ (8001424 <MX_GPIO_Init+0x1f8>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	607b      	str	r3, [r7, #4]
 80012e8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(trigger_GPIO_Port, trigger_Pin, GPIO_PIN_RESET);
 80012ea:	2200      	movs	r2, #0
 80012ec:	2108      	movs	r1, #8
 80012ee:	484e      	ldr	r0, [pc, #312]	@ (8001428 <MX_GPIO_Init+0x1fc>)
 80012f0:	f001 fd2e 	bl	8002d50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 80012f4:	2200      	movs	r2, #0
 80012f6:	f24f 0104 	movw	r1, #61444	@ 0xf004
 80012fa:	484c      	ldr	r0, [pc, #304]	@ (800142c <MX_GPIO_Init+0x200>)
 80012fc:	f001 fd28 	bl	8002d50 <HAL_GPIO_WritePin>
			GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOE,
 8001300:	2200      	movs	r2, #0
 8001302:	f64f 7180 	movw	r1, #65408	@ 0xff80
 8001306:	484a      	ldr	r0, [pc, #296]	@ (8001430 <MX_GPIO_Init+0x204>)
 8001308:	f001 fd22 	bl	8002d50 <HAL_GPIO_WritePin>
			GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11
					| GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 | GPIO_PIN_15,
			GPIO_PIN_RESET);

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8, GPIO_PIN_RESET);
 800130c:	2200      	movs	r2, #0
 800130e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001312:	4848      	ldr	r0, [pc, #288]	@ (8001434 <MX_GPIO_Init+0x208>)
 8001314:	f001 fd1c 	bl	8002d50 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA,
 8001318:	2200      	movs	r2, #0
 800131a:	f44f 51f8 	mov.w	r1, #7936	@ 0x1f00
 800131e:	4846      	ldr	r0, [pc, #280]	@ (8001438 <MX_GPIO_Init+0x20c>)
 8001320:	f001 fd16 	bl	8002d50 <HAL_GPIO_WritePin>
			LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin | LED_5_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : BTN_2_Pin BTN_3_Pin BTN_4_Pin */
	GPIO_InitStruct.Pin = BTN_2_Pin | BTN_3_Pin | BTN_4_Pin;
 8001324:	231c      	movs	r3, #28
 8001326:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001328:	2300      	movs	r3, #0
 800132a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001330:	f107 031c 	add.w	r3, r7, #28
 8001334:	4619      	mov	r1, r3
 8001336:	483e      	ldr	r0, [pc, #248]	@ (8001430 <MX_GPIO_Init+0x204>)
 8001338:	f001 fb6e 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pin : BTN_1_Pin */
	GPIO_InitStruct.Pin = BTN_1_Pin;
 800133c:	2302      	movs	r3, #2
 800133e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001340:	2300      	movs	r3, #0
 8001342:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001344:	2300      	movs	r3, #0
 8001346:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001348:	f107 031c 	add.w	r3, r7, #28
 800134c:	4619      	mov	r1, r3
 800134e:	4836      	ldr	r0, [pc, #216]	@ (8001428 <MX_GPIO_Init+0x1fc>)
 8001350:	f001 fb62 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pin : trigger_Pin */
	GPIO_InitStruct.Pin = trigger_Pin;
 8001354:	2308      	movs	r3, #8
 8001356:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001358:	2301      	movs	r3, #1
 800135a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001360:	2300      	movs	r3, #0
 8001362:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(trigger_GPIO_Port, &GPIO_InitStruct);
 8001364:	f107 031c 	add.w	r3, r7, #28
 8001368:	4619      	mov	r1, r3
 800136a:	482f      	ldr	r0, [pc, #188]	@ (8001428 <MX_GPIO_Init+0x1fc>)
 800136c:	f001 fb54 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB2 PB12 PB13 PB14
	 PB15 */
	GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
 8001370:	f24f 0304 	movw	r3, #61444	@ 0xf004
 8001374:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001376:	2301      	movs	r3, #1
 8001378:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137a:	2300      	movs	r3, #0
 800137c:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137e:	2300      	movs	r3, #0
 8001380:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001382:	f107 031c 	add.w	r3, r7, #28
 8001386:	4619      	mov	r1, r3
 8001388:	4828      	ldr	r0, [pc, #160]	@ (800142c <MX_GPIO_Init+0x200>)
 800138a:	f001 fb45 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : PE7 PE8 PE9 PE10
	 PE11 PE12 PE13 PE14
	 PE15 */
	GPIO_InitStruct.Pin = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10
 800138e:	f64f 7380 	movw	r3, #65408	@ 0xff80
 8001392:	61fb      	str	r3, [r7, #28]
			| GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14
			| GPIO_PIN_15;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001394:	2301      	movs	r3, #1
 8001396:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	2300      	movs	r3, #0
 800139a:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139c:	2300      	movs	r3, #0
 800139e:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013a0:	f107 031c 	add.w	r3, r7, #28
 80013a4:	4619      	mov	r1, r3
 80013a6:	4822      	ldr	r0, [pc, #136]	@ (8001430 <MX_GPIO_Init+0x204>)
 80013a8:	f001 fb36 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pin : PD8 */
	GPIO_InitStruct.Pin = GPIO_PIN_8;
 80013ac:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013b0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b2:	2301      	movs	r3, #1
 80013b4:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b6:	2300      	movs	r3, #0
 80013b8:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ba:	2300      	movs	r3, #0
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	481b      	ldr	r0, [pc, #108]	@ (8001434 <MX_GPIO_Init+0x208>)
 80013c6:	f001 fb27 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : SW_1_Pin SW_2_Pin */
	GPIO_InitStruct.Pin = SW_1_Pin | SW_2_Pin;
 80013ca:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80013ce:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013d0:	2300      	movs	r3, #0
 80013d2:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d4:	2300      	movs	r3, #0
 80013d6:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d8:	f107 031c 	add.w	r3, r7, #28
 80013dc:	4619      	mov	r1, r3
 80013de:	4815      	ldr	r0, [pc, #84]	@ (8001434 <MX_GPIO_Init+0x208>)
 80013e0:	f001 fb1a 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_1_Pin LED_2_Pin LED_3_Pin LED_4_Pin
	 LED_5_Pin */
	GPIO_InitStruct.Pin = LED_1_Pin | LED_2_Pin | LED_3_Pin | LED_4_Pin
 80013e4:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80013e8:	61fb      	str	r3, [r7, #28]
			| LED_5_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ea:	2301      	movs	r3, #1
 80013ec:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ee:	2300      	movs	r3, #0
 80013f0:	627b      	str	r3, [r7, #36]	@ 0x24
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62bb      	str	r3, [r7, #40]	@ 0x28
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f6:	f107 031c 	add.w	r3, r7, #28
 80013fa:	4619      	mov	r1, r3
 80013fc:	480e      	ldr	r0, [pc, #56]	@ (8001438 <MX_GPIO_Init+0x20c>)
 80013fe:	f001 fb0b 	bl	8002a18 <HAL_GPIO_Init>

	/*Configure GPIO pins : ES_L_Pin ES_R_Pin */
	GPIO_InitStruct.Pin = ES_L_Pin | ES_R_Pin;
 8001402:	23c0      	movs	r3, #192	@ 0xc0
 8001404:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001406:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800140a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
	HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001410:	f107 031c 	add.w	r3, r7, #28
 8001414:	4619      	mov	r1, r3
 8001416:	4807      	ldr	r0, [pc, #28]	@ (8001434 <MX_GPIO_Init+0x208>)
 8001418:	f001 fafe 	bl	8002a18 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 800141c:	bf00      	nop
 800141e:	3730      	adds	r7, #48	@ 0x30
 8001420:	46bd      	mov	sp, r7
 8001422:	bd80      	pop	{r7, pc}
 8001424:	40023800 	.word	0x40023800
 8001428:	40020800 	.word	0x40020800
 800142c:	40020400 	.word	0x40020400
 8001430:	40021000 	.word	0x40021000
 8001434:	40020c00 	.word	0x40020c00
 8001438:	40020000 	.word	0x40020000

0800143c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800143c:	b580      	push	{r7, lr}
 800143e:	b082      	sub	sp, #8
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART3) {
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	4a07      	ldr	r2, [pc, #28]	@ (8001468 <HAL_UART_RxCpltCallback+0x2c>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d107      	bne.n	800145e <HAL_UART_RxCpltCallback+0x22>
//    HAL_GPIO_TogglePin(LED_1_GPIO_Port, LED_1_Pin);
		CEAC_BLE_Rev(rev);
 800144e:	4807      	ldr	r0, [pc, #28]	@ (800146c <HAL_UART_RxCpltCallback+0x30>)
 8001450:	f7ff f954 	bl	80006fc <CEAC_BLE_Rev>
		HAL_UART_Receive_IT(&huart3, (uint8_t*) rev, sizeof(rev));
 8001454:	2202      	movs	r2, #2
 8001456:	4905      	ldr	r1, [pc, #20]	@ (800146c <HAL_UART_RxCpltCallback+0x30>)
 8001458:	4805      	ldr	r0, [pc, #20]	@ (8001470 <HAL_UART_RxCpltCallback+0x34>)
 800145a:	f003 fb23 	bl	8004aa4 <HAL_UART_Receive_IT>

	}
}
 800145e:	bf00      	nop
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40004800 	.word	0x40004800
 800146c:	2000033c 	.word	0x2000033c
 8001470:	200002f4 	.word	0x200002f4

08001474 <HAL_TIM_PeriodElapsedCallback>:

// #if defined(TEST_ULTRASONIC) || defined(TEST_ENCODER)
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == htim4.Instance) // make sure
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681a      	ldr	r2, [r3, #0]
 8001480:	4b04      	ldr	r3, [pc, #16]	@ (8001494 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	429a      	cmp	r2, r3
 8001486:	d101      	bne.n	800148c <HAL_TIM_PeriodElapsedCallback+0x18>
			{
		Scheduler_Update();
 8001488:	f000 f83a 	bl	8001500 <Scheduler_Update>
		//   HAL_TIM_IC_Start_IT((&sensor1)->htim, TIM_CHANNEL_1);
		//   HAL_TIM_IC_Start_IT((&sensor2)->htim, TIM_CHANNEL_2);
		//   HAL_TIM_IC_Start_IT((&sensor3)->htim, TIM_CHANNEL_3);
		//   //		updateEncoder(&enc, ((TIM3->SMCR & 0x3) == 0x3));
	}
}
 800148c:	bf00      	nop
 800148e:	3708      	adds	r7, #8
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	2000021c 	.word	0x2000021c

08001498 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001498:	b480      	push	{r7}
 800149a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800149c:	b672      	cpsid	i
}
 800149e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80014a0:	bf00      	nop
 80014a2:	e7fd      	b.n	80014a0 <Error_Handler+0x8>

080014a4 <Scheduler_Init>:
Tasks_t tasks;

int is_avail(TaskNode *task) {
	return (task->runMe == 1);
}
void Scheduler_Init(void) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b084      	sub	sp, #16
 80014a8:	af00      	add	r7, sp, #0
	if (!tasks.head) {
 80014aa:	4b14      	ldr	r3, [pc, #80]	@ (80014fc <Scheduler_Init+0x58>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d106      	bne.n	80014c0 <Scheduler_Init+0x1c>
		tasks.head = NULL;
 80014b2:	4b12      	ldr	r3, [pc, #72]	@ (80014fc <Scheduler_Init+0x58>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
		tasks.nTasks = 0;
 80014b8:	4b10      	ldr	r3, [pc, #64]	@ (80014fc <Scheduler_Init+0x58>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	605a      	str	r2, [r3, #4]
			current = current->next;
			free(tmp);
		}
		tasks.head = NULL;
	}
}
 80014be:	e018      	b.n	80014f2 <Scheduler_Init+0x4e>
		TaskNode *current = tasks.head;
 80014c0:	4b0e      	ldr	r3, [pc, #56]	@ (80014fc <Scheduler_Init+0x58>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	60fb      	str	r3, [r7, #12]
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80014c6:	2300      	movs	r3, #0
 80014c8:	72fb      	strb	r3, [r7, #11]
 80014ca:	e00a      	b.n	80014e2 <Scheduler_Init+0x3e>
			TaskNode *tmp = current;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	607b      	str	r3, [r7, #4]
			current = current->next;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	60fb      	str	r3, [r7, #12]
			free(tmp);
 80014d6:	6878      	ldr	r0, [r7, #4]
 80014d8:	f004 fa08 	bl	80058ec <free>
		for (uint8_t i = 0; i < tasks.nTasks; i++) {
 80014dc:	7afb      	ldrb	r3, [r7, #11]
 80014de:	3301      	adds	r3, #1
 80014e0:	72fb      	strb	r3, [r7, #11]
 80014e2:	7afa      	ldrb	r2, [r7, #11]
 80014e4:	4b05      	ldr	r3, [pc, #20]	@ (80014fc <Scheduler_Init+0x58>)
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d3ef      	bcc.n	80014cc <Scheduler_Init+0x28>
		tasks.head = NULL;
 80014ec:	4b03      	ldr	r3, [pc, #12]	@ (80014fc <Scheduler_Init+0x58>)
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
}
 80014f2:	bf00      	nop
 80014f4:	3710      	adds	r7, #16
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	20000340 	.word	0x20000340

08001500 <Scheduler_Update>:
	}
	tasks.nTasks++;
	return newTask->TaskID;
}

void Scheduler_Update(void) {
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
	if (!tasks.head)
 8001504:	4b0c      	ldr	r3, [pc, #48]	@ (8001538 <Scheduler_Update+0x38>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	2b00      	cmp	r3, #0
 800150a:	d00f      	beq.n	800152c <Scheduler_Update+0x2c>
		return;
	if (tasks.head->delay <= 0) {
 800150c:	4b0a      	ldr	r3, [pc, #40]	@ (8001538 <Scheduler_Update+0x38>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	689b      	ldr	r3, [r3, #8]
 8001512:	2b00      	cmp	r3, #0
 8001514:	d104      	bne.n	8001520 <Scheduler_Update+0x20>
		tasks.head->runMe = 1;
 8001516:	4b08      	ldr	r3, [pc, #32]	@ (8001538 <Scheduler_Update+0x38>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	2201      	movs	r2, #1
 800151c:	741a      	strb	r2, [r3, #16]
 800151e:	e006      	b.n	800152e <Scheduler_Update+0x2e>
	} else
		tasks.head->delay--;
 8001520:	4b05      	ldr	r3, [pc, #20]	@ (8001538 <Scheduler_Update+0x38>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	689a      	ldr	r2, [r3, #8]
 8001526:	3a01      	subs	r2, #1
 8001528:	609a      	str	r2, [r3, #8]
 800152a:	e000      	b.n	800152e <Scheduler_Update+0x2e>
		return;
 800152c:	bf00      	nop
}
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	20000340 	.word	0x20000340

0800153c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001542:	2300      	movs	r3, #0
 8001544:	607b      	str	r3, [r7, #4]
 8001546:	4b10      	ldr	r3, [pc, #64]	@ (8001588 <HAL_MspInit+0x4c>)
 8001548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800154a:	4a0f      	ldr	r2, [pc, #60]	@ (8001588 <HAL_MspInit+0x4c>)
 800154c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001550:	6453      	str	r3, [r2, #68]	@ 0x44
 8001552:	4b0d      	ldr	r3, [pc, #52]	@ (8001588 <HAL_MspInit+0x4c>)
 8001554:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001556:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800155a:	607b      	str	r3, [r7, #4]
 800155c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800155e:	2300      	movs	r3, #0
 8001560:	603b      	str	r3, [r7, #0]
 8001562:	4b09      	ldr	r3, [pc, #36]	@ (8001588 <HAL_MspInit+0x4c>)
 8001564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001566:	4a08      	ldr	r2, [pc, #32]	@ (8001588 <HAL_MspInit+0x4c>)
 8001568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800156c:	6413      	str	r3, [r2, #64]	@ 0x40
 800156e:	4b06      	ldr	r3, [pc, #24]	@ (8001588 <HAL_MspInit+0x4c>)
 8001570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001576:	603b      	str	r3, [r7, #0]
 8001578:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800157a:	bf00      	nop
 800157c:	370c      	adds	r7, #12
 800157e:	46bd      	mov	sp, r7
 8001580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001584:	4770      	bx	lr
 8001586:	bf00      	nop
 8001588:	40023800 	.word	0x40023800

0800158c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b08c      	sub	sp, #48	@ 0x30
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001594:	f107 031c 	add.w	r3, r7, #28
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a46      	ldr	r2, [pc, #280]	@ (80016c4 <HAL_ADC_MspInit+0x138>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d158      	bne.n	8001660 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
 80015b2:	4b45      	ldr	r3, [pc, #276]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015b6:	4a44      	ldr	r2, [pc, #272]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80015be:	4b42      	ldr	r3, [pc, #264]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80015c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015c6:	61bb      	str	r3, [r7, #24]
 80015c8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	617b      	str	r3, [r7, #20]
 80015ce:	4b3e      	ldr	r3, [pc, #248]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a3d      	ldr	r2, [pc, #244]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b3b      	ldr	r3, [pc, #236]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	617b      	str	r3, [r7, #20]
 80015e4:	697b      	ldr	r3, [r7, #20]
    PA4     ------> ADC1_IN4
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    */
    GPIO_InitStruct.Pin = IR1_Pin|IR2_Pin|IR3_Pin|IR4_Pin
 80015e6:	23f1      	movs	r3, #241	@ 0xf1
 80015e8:	61fb      	str	r3, [r7, #28]
                          |IR5_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	4834      	ldr	r0, [pc, #208]	@ (80016cc <HAL_ADC_MspInit+0x140>)
 80015fa:	f001 fa0d 	bl	8002a18 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 80015fe:	4b34      	ldr	r3, [pc, #208]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001600:	4a34      	ldr	r2, [pc, #208]	@ (80016d4 <HAL_ADC_MspInit+0x148>)
 8001602:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001604:	4b32      	ldr	r3, [pc, #200]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001606:	2200      	movs	r2, #0
 8001608:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800160a:	4b31      	ldr	r3, [pc, #196]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 800160c:	2200      	movs	r2, #0
 800160e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001610:	4b2f      	ldr	r3, [pc, #188]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001616:	4b2e      	ldr	r3, [pc, #184]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001618:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800161c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800161e:	4b2c      	ldr	r3, [pc, #176]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001620:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001624:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001626:	4b2a      	ldr	r3, [pc, #168]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800162e:	4b28      	ldr	r3, [pc, #160]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001630:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001634:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001636:	4b26      	ldr	r3, [pc, #152]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001638:	2200      	movs	r2, #0
 800163a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800163c:	4b24      	ldr	r3, [pc, #144]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 800163e:	2200      	movs	r2, #0
 8001640:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8001642:	4823      	ldr	r0, [pc, #140]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001644:	f000 fe6c 	bl	8002320 <HAL_DMA_Init>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800164e:	f7ff ff23 	bl	8001498 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	4a1e      	ldr	r2, [pc, #120]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 8001656:	639a      	str	r2, [r3, #56]	@ 0x38
 8001658:	4a1d      	ldr	r2, [pc, #116]	@ (80016d0 <HAL_ADC_MspInit+0x144>)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800165e:	e02c      	b.n	80016ba <HAL_ADC_MspInit+0x12e>
  else if(hadc->Instance==ADC2)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a1c      	ldr	r2, [pc, #112]	@ (80016d8 <HAL_ADC_MspInit+0x14c>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d127      	bne.n	80016ba <HAL_ADC_MspInit+0x12e>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	613b      	str	r3, [r7, #16]
 800166e:	4b16      	ldr	r3, [pc, #88]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001672:	4a15      	ldr	r2, [pc, #84]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 8001674:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001678:	6453      	str	r3, [r2, #68]	@ 0x44
 800167a:	4b13      	ldr	r3, [pc, #76]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800167e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001682:	613b      	str	r3, [r7, #16]
 8001684:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	60fb      	str	r3, [r7, #12]
 800168a:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 800168c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800168e:	4a0e      	ldr	r2, [pc, #56]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 8001690:	f043 0302 	orr.w	r3, r3, #2
 8001694:	6313      	str	r3, [r2, #48]	@ 0x30
 8001696:	4b0c      	ldr	r3, [pc, #48]	@ (80016c8 <HAL_ADC_MspInit+0x13c>)
 8001698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800169a:	f003 0302 	and.w	r3, r3, #2
 800169e:	60fb      	str	r3, [r7, #12]
 80016a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BATT_Pin;
 80016a2:	2301      	movs	r3, #1
 80016a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016a6:	2303      	movs	r3, #3
 80016a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016aa:	2300      	movs	r3, #0
 80016ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(BATT_GPIO_Port, &GPIO_InitStruct);
 80016ae:	f107 031c 	add.w	r3, r7, #28
 80016b2:	4619      	mov	r1, r3
 80016b4:	4809      	ldr	r0, [pc, #36]	@ (80016dc <HAL_ADC_MspInit+0x150>)
 80016b6:	f001 f9af 	bl	8002a18 <HAL_GPIO_Init>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40012000 	.word	0x40012000
 80016c8:	40023800 	.word	0x40023800
 80016cc:	40020000 	.word	0x40020000
 80016d0:	2000012c 	.word	0x2000012c
 80016d4:	40026410 	.word	0x40026410
 80016d8:	40012100 	.word	0x40012100
 80016dc:	40020400 	.word	0x40020400

080016e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08c      	sub	sp, #48	@ 0x30
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 031c 	add.w	r3, r7, #28
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001700:	d134      	bne.n	800176c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	61bb      	str	r3, [r7, #24]
 8001706:	4b3d      	ldr	r3, [pc, #244]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800170a:	4a3c      	ldr	r2, [pc, #240]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6413      	str	r3, [r2, #64]	@ 0x40
 8001712:	4b3a      	ldr	r3, [pc, #232]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001714:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	61bb      	str	r3, [r7, #24]
 800171c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]
 8001722:	4b36      	ldr	r3, [pc, #216]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001726:	4a35      	ldr	r2, [pc, #212]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	@ 0x30
 800172e:	4b33      	ldr	r3, [pc, #204]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	617b      	str	r3, [r7, #20]
 8001738:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = ECHO_L_Pin|ECHO_M_Pin|ECHO_R_Pin;
 800173a:	230e      	movs	r3, #14
 800173c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173e:	2302      	movs	r3, #2
 8001740:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001742:	2300      	movs	r3, #0
 8001744:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001746:	2300      	movs	r3, #0
 8001748:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800174a:	2301      	movs	r3, #1
 800174c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800174e:	f107 031c 	add.w	r3, r7, #28
 8001752:	4619      	mov	r1, r3
 8001754:	482a      	ldr	r0, [pc, #168]	@ (8001800 <HAL_TIM_Base_MspInit+0x120>)
 8001756:	f001 f95f 	bl	8002a18 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800175a:	2200      	movs	r2, #0
 800175c:	2100      	movs	r1, #0
 800175e:	201c      	movs	r0, #28
 8001760:	f000 fda7 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001764:	201c      	movs	r0, #28
 8001766:	f000 fdc0 	bl	80022ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800176a:	e042      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM4)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a24      	ldr	r2, [pc, #144]	@ (8001804 <HAL_TIM_Base_MspInit+0x124>)
 8001772:	4293      	cmp	r3, r2
 8001774:	d116      	bne.n	80017a4 <HAL_TIM_Base_MspInit+0xc4>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
 800177a:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800177e:	4a1f      	ldr	r2, [pc, #124]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001780:	f043 0304 	orr.w	r3, r3, #4
 8001784:	6413      	str	r3, [r2, #64]	@ 0x40
 8001786:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 8001788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800178a:	f003 0304 	and.w	r3, r3, #4
 800178e:	613b      	str	r3, [r7, #16]
 8001790:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001792:	2200      	movs	r2, #0
 8001794:	2100      	movs	r1, #0
 8001796:	201e      	movs	r0, #30
 8001798:	f000 fd8b 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800179c:	201e      	movs	r0, #30
 800179e:	f000 fda4 	bl	80022ea <HAL_NVIC_EnableIRQ>
}
 80017a2:	e026      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM8)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4a17      	ldr	r2, [pc, #92]	@ (8001808 <HAL_TIM_Base_MspInit+0x128>)
 80017aa:	4293      	cmp	r3, r2
 80017ac:	d10e      	bne.n	80017cc <HAL_TIM_Base_MspInit+0xec>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017b6:	4a11      	ldr	r2, [pc, #68]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017b8:	f043 0302 	orr.w	r3, r3, #2
 80017bc:	6453      	str	r3, [r2, #68]	@ 0x44
 80017be:	4b0f      	ldr	r3, [pc, #60]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
}
 80017ca:	e012      	b.n	80017f2 <HAL_TIM_Base_MspInit+0x112>
  else if(htim_base->Instance==TIM10)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a0e      	ldr	r2, [pc, #56]	@ (800180c <HAL_TIM_Base_MspInit+0x12c>)
 80017d2:	4293      	cmp	r3, r2
 80017d4:	d10d      	bne.n	80017f2 <HAL_TIM_Base_MspInit+0x112>
    __HAL_RCC_TIM10_CLK_ENABLE();
 80017d6:	2300      	movs	r3, #0
 80017d8:	60bb      	str	r3, [r7, #8]
 80017da:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017de:	4a07      	ldr	r2, [pc, #28]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80017e6:	4b05      	ldr	r3, [pc, #20]	@ (80017fc <HAL_TIM_Base_MspInit+0x11c>)
 80017e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ee:	60bb      	str	r3, [r7, #8]
 80017f0:	68bb      	ldr	r3, [r7, #8]
}
 80017f2:	bf00      	nop
 80017f4:	3730      	adds	r7, #48	@ 0x30
 80017f6:	46bd      	mov	sp, r7
 80017f8:	bd80      	pop	{r7, pc}
 80017fa:	bf00      	nop
 80017fc:	40023800 	.word	0x40023800
 8001800:	40020000 	.word	0x40020000
 8001804:	40000800 	.word	0x40000800
 8001808:	40010400 	.word	0x40010400
 800180c:	40014400 	.word	0x40014400

08001810 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8001810:	b580      	push	{r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001818:	f107 0314 	add.w	r3, r7, #20
 800181c:	2200      	movs	r2, #0
 800181e:	601a      	str	r2, [r3, #0]
 8001820:	605a      	str	r2, [r3, #4]
 8001822:	609a      	str	r2, [r3, #8]
 8001824:	60da      	str	r2, [r3, #12]
 8001826:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	4a1d      	ldr	r2, [pc, #116]	@ (80018a4 <HAL_TIM_Encoder_MspInit+0x94>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d133      	bne.n	800189a <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	613b      	str	r3, [r7, #16]
 8001836:	4b1c      	ldr	r3, [pc, #112]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800183a:	4a1b      	ldr	r2, [pc, #108]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 800183c:	f043 0302 	orr.w	r3, r3, #2
 8001840:	6413      	str	r3, [r2, #64]	@ 0x40
 8001842:	4b19      	ldr	r3, [pc, #100]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001846:	f003 0302 	and.w	r3, r3, #2
 800184a:	613b      	str	r3, [r7, #16]
 800184c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800184e:	2300      	movs	r3, #0
 8001850:	60fb      	str	r3, [r7, #12]
 8001852:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001856:	4a14      	ldr	r2, [pc, #80]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001858:	f043 0302 	orr.w	r3, r3, #2
 800185c:	6313      	str	r3, [r2, #48]	@ 0x30
 800185e:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_TIM_Encoder_MspInit+0x98>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001862:	f003 0302 	and.w	r3, r3, #2
 8001866:	60fb      	str	r3, [r7, #12]
 8001868:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = EN_L1_Pin|EN_L0_Pin;
 800186a:	2330      	movs	r3, #48	@ 0x30
 800186c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186e:	2302      	movs	r3, #2
 8001870:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001872:	2300      	movs	r3, #0
 8001874:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001876:	2300      	movs	r3, #0
 8001878:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800187a:	2302      	movs	r3, #2
 800187c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800187e:	f107 0314 	add.w	r3, r7, #20
 8001882:	4619      	mov	r1, r3
 8001884:	4809      	ldr	r0, [pc, #36]	@ (80018ac <HAL_TIM_Encoder_MspInit+0x9c>)
 8001886:	f001 f8c7 	bl	8002a18 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800188a:	2200      	movs	r2, #0
 800188c:	2100      	movs	r1, #0
 800188e:	201d      	movs	r0, #29
 8001890:	f000 fd0f 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001894:	201d      	movs	r0, #29
 8001896:	f000 fd28 	bl	80022ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 800189a:	bf00      	nop
 800189c:	3728      	adds	r7, #40	@ 0x28
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40000400 	.word	0x40000400
 80018a8:	40023800 	.word	0x40023800
 80018ac:	40020400 	.word	0x40020400

080018b0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b08a      	sub	sp, #40	@ 0x28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018b8:	f107 0314 	add.w	r3, r7, #20
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM8)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4a25      	ldr	r2, [pc, #148]	@ (8001964 <HAL_TIM_MspPostInit+0xb4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d11f      	bne.n	8001912 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM8_MspPostInit 0 */

  /* USER CODE END TIM8_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	613b      	str	r3, [r7, #16]
 80018d6:	4b24      	ldr	r3, [pc, #144]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018da:	4a23      	ldr	r2, [pc, #140]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 80018dc:	f043 0304 	orr.w	r3, r3, #4
 80018e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e2:	4b21      	ldr	r3, [pc, #132]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e6:	f003 0304 	and.w	r3, r3, #4
 80018ea:	613b      	str	r3, [r7, #16]
 80018ec:	693b      	ldr	r3, [r7, #16]
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    PC8     ------> TIM8_CH3
    PC9     ------> TIM8_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_R1_Pin|MOTOR_R0_Pin|MOTOR_L1_Pin|MOTOR_L0_Pin;
 80018ee:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80018f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018f4:	2302      	movs	r3, #2
 80018f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018f8:	2300      	movs	r3, #0
 80018fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018fc:	2300      	movs	r3, #0
 80018fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001900:	2303      	movs	r3, #3
 8001902:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001904:	f107 0314 	add.w	r3, r7, #20
 8001908:	4619      	mov	r1, r3
 800190a:	4818      	ldr	r0, [pc, #96]	@ (800196c <HAL_TIM_MspPostInit+0xbc>)
 800190c:	f001 f884 	bl	8002a18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM10_MspPostInit 1 */

  /* USER CODE END TIM10_MspPostInit 1 */
  }

}
 8001910:	e023      	b.n	800195a <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM10)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	4a16      	ldr	r2, [pc, #88]	@ (8001970 <HAL_TIM_MspPostInit+0xc0>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d11e      	bne.n	800195a <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	4b11      	ldr	r3, [pc, #68]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 8001922:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001924:	4a10      	ldr	r2, [pc, #64]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 8001926:	f043 0302 	orr.w	r3, r3, #2
 800192a:	6313      	str	r3, [r2, #48]	@ 0x30
 800192c:	4b0e      	ldr	r3, [pc, #56]	@ (8001968 <HAL_TIM_MspPostInit+0xb8>)
 800192e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001930:	f003 0302 	and.w	r3, r3, #2
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SERVO_Pin;
 8001938:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800193c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800193e:	2302      	movs	r3, #2
 8001940:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001942:	2300      	movs	r3, #0
 8001944:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001946:	2300      	movs	r3, #0
 8001948:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 800194a:	2303      	movs	r3, #3
 800194c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(SERVO_GPIO_Port, &GPIO_InitStruct);
 800194e:	f107 0314 	add.w	r3, r7, #20
 8001952:	4619      	mov	r1, r3
 8001954:	4807      	ldr	r0, [pc, #28]	@ (8001974 <HAL_TIM_MspPostInit+0xc4>)
 8001956:	f001 f85f 	bl	8002a18 <HAL_GPIO_Init>
}
 800195a:	bf00      	nop
 800195c:	3728      	adds	r7, #40	@ 0x28
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40010400 	.word	0x40010400
 8001968:	40023800 	.word	0x40023800
 800196c:	40020800 	.word	0x40020800
 8001970:	40014400 	.word	0x40014400
 8001974:	40020400 	.word	0x40020400

08001978 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b08a      	sub	sp, #40	@ 0x28
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4a1d      	ldr	r2, [pc, #116]	@ (8001a0c <HAL_UART_MspInit+0x94>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d134      	bne.n	8001a04 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	613b      	str	r3, [r7, #16]
 800199e:	4b1c      	ldr	r3, [pc, #112]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019a2:	4a1b      	ldr	r2, [pc, #108]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019a4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80019a8:	6413      	str	r3, [r2, #64]	@ 0x40
 80019aa:	4b19      	ldr	r3, [pc, #100]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ae:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80019b2:	613b      	str	r3, [r7, #16]
 80019b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	60fb      	str	r3, [r7, #12]
 80019ba:	4b15      	ldr	r3, [pc, #84]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019be:	4a14      	ldr	r2, [pc, #80]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019c0:	f043 0302 	orr.w	r3, r3, #2
 80019c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019c6:	4b12      	ldr	r3, [pc, #72]	@ (8001a10 <HAL_UART_MspInit+0x98>)
 80019c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ca:	f003 0302 	and.w	r3, r3, #2
 80019ce:	60fb      	str	r3, [r7, #12]
 80019d0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80019d2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80019d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80019e4:	2307      	movs	r3, #7
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019e8:	f107 0314 	add.w	r3, r7, #20
 80019ec:	4619      	mov	r1, r3
 80019ee:	4809      	ldr	r0, [pc, #36]	@ (8001a14 <HAL_UART_MspInit+0x9c>)
 80019f0:	f001 f812 	bl	8002a18 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80019f4:	2200      	movs	r2, #0
 80019f6:	2100      	movs	r1, #0
 80019f8:	2027      	movs	r0, #39	@ 0x27
 80019fa:	f000 fc5a 	bl	80022b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80019fe:	2027      	movs	r0, #39	@ 0x27
 8001a00:	f000 fc73 	bl	80022ea <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001a04:	bf00      	nop
 8001a06:	3728      	adds	r7, #40	@ 0x28
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40004800 	.word	0x40004800
 8001a10:	40023800 	.word	0x40023800
 8001a14:	40020400 	.word	0x40020400

08001a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a18:	b480      	push	{r7}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a1c:	bf00      	nop
 8001a1e:	e7fd      	b.n	8001a1c <NMI_Handler+0x4>

08001a20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a24:	bf00      	nop
 8001a26:	e7fd      	b.n	8001a24 <HardFault_Handler+0x4>

08001a28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a2c:	bf00      	nop
 8001a2e:	e7fd      	b.n	8001a2c <MemManage_Handler+0x4>

08001a30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a34:	bf00      	nop
 8001a36:	e7fd      	b.n	8001a34 <BusFault_Handler+0x4>

08001a38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a3c:	bf00      	nop
 8001a3e:	e7fd      	b.n	8001a3c <UsageFault_Handler+0x4>

08001a40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a40:	b480      	push	{r7}
 8001a42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a44:	bf00      	nop
 8001a46:	46bd      	mov	sp, r7
 8001a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4c:	4770      	bx	lr

08001a4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a4e:	b480      	push	{r7}
 8001a50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a52:	bf00      	nop
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a60:	bf00      	nop
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a6a:	b580      	push	{r7, lr}
 8001a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a6e:	f000 f8c3 	bl	8001bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a72:	bf00      	nop
 8001a74:	bd80      	pop	{r7, pc}
	...

08001a78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a7c:	4802      	ldr	r0, [pc, #8]	@ (8001a88 <TIM2_IRQHandler+0x10>)
 8001a7e:	f001 ff80 	bl	8003982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a82:	bf00      	nop
 8001a84:	bd80      	pop	{r7, pc}
 8001a86:	bf00      	nop
 8001a88:	2000018c 	.word	0x2000018c

08001a8c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM3_IRQHandler+0x10>)
 8001a92:	f001 ff76 	bl	8003982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	200001d4 	.word	0x200001d4

08001aa0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001aa0:	b580      	push	{r7, lr}
 8001aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001aa4:	4802      	ldr	r0, [pc, #8]	@ (8001ab0 <TIM4_IRQHandler+0x10>)
 8001aa6:	f001 ff6c 	bl	8003982 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001aaa:	bf00      	nop
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop
 8001ab0:	2000021c 	.word	0x2000021c

08001ab4 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ab8:	4802      	ldr	r0, [pc, #8]	@ (8001ac4 <USART3_IRQHandler+0x10>)
 8001aba:	f003 f819 	bl	8004af0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
 8001ac2:	bf00      	nop
 8001ac4:	200002f4 	.word	0x200002f4

08001ac8 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001acc:	4802      	ldr	r0, [pc, #8]	@ (8001ad8 <DMA2_Stream0_IRQHandler+0x10>)
 8001ace:	f000 fd67 	bl	80025a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	2000012c 	.word	0x2000012c

08001adc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001adc:	b480      	push	{r7}
 8001ade:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ae0:	4b06      	ldr	r3, [pc, #24]	@ (8001afc <SystemInit+0x20>)
 8001ae2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001ae6:	4a05      	ldr	r2, [pc, #20]	@ (8001afc <SystemInit+0x20>)
 8001ae8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001aec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001af0:	bf00      	nop
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr
 8001afa:	bf00      	nop
 8001afc:	e000ed00 	.word	0xe000ed00

08001b00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b04:	480d      	ldr	r0, [pc, #52]	@ (8001b3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001b06:	490e      	ldr	r1, [pc, #56]	@ (8001b40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001b08:	4a0e      	ldr	r2, [pc, #56]	@ (8001b44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001b0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b0c:	e002      	b.n	8001b14 <LoopCopyDataInit>

08001b0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b12:	3304      	adds	r3, #4

08001b14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b18:	d3f9      	bcc.n	8001b0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b1a:	4a0b      	ldr	r2, [pc, #44]	@ (8001b48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001b1c:	4c0b      	ldr	r4, [pc, #44]	@ (8001b4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8001b1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b20:	e001      	b.n	8001b26 <LoopFillZerobss>

08001b22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b24:	3204      	adds	r2, #4

08001b26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b28:	d3fb      	bcc.n	8001b22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001b2a:	f7ff ffd7 	bl	8001adc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001b2e:	f003 fef9 	bl	8005924 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b32:	f7fe ff89 	bl	8000a48 <main>
  bx  lr    
 8001b36:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001b38:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b40:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8001b44:	08005a4c 	.word	0x08005a4c
  ldr r2, =_sbss
 8001b48:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8001b4c:	2000048c 	.word	0x2000048c

08001b50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b50:	e7fe      	b.n	8001b50 <ADC_IRQHandler>
	...

08001b54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b58:	4b0e      	ldr	r3, [pc, #56]	@ (8001b94 <HAL_Init+0x40>)
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	4a0d      	ldr	r2, [pc, #52]	@ (8001b94 <HAL_Init+0x40>)
 8001b5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001b62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b64:	4b0b      	ldr	r3, [pc, #44]	@ (8001b94 <HAL_Init+0x40>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a0a      	ldr	r2, [pc, #40]	@ (8001b94 <HAL_Init+0x40>)
 8001b6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001b6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b70:	4b08      	ldr	r3, [pc, #32]	@ (8001b94 <HAL_Init+0x40>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	4a07      	ldr	r2, [pc, #28]	@ (8001b94 <HAL_Init+0x40>)
 8001b76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b7c:	2003      	movs	r0, #3
 8001b7e:	f000 fb8d 	bl	800229c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b82:	200f      	movs	r0, #15
 8001b84:	f000 f808 	bl	8001b98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b88:	f7ff fcd8 	bl	800153c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b8c:	2300      	movs	r3, #0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	bd80      	pop	{r7, pc}
 8001b92:	bf00      	nop
 8001b94:	40023c00 	.word	0x40023c00

08001b98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ba0:	4b12      	ldr	r3, [pc, #72]	@ (8001bec <HAL_InitTick+0x54>)
 8001ba2:	681a      	ldr	r2, [r3, #0]
 8001ba4:	4b12      	ldr	r3, [pc, #72]	@ (8001bf0 <HAL_InitTick+0x58>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	4619      	mov	r1, r3
 8001baa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001bae:	fbb3 f3f1 	udiv	r3, r3, r1
 8001bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	f000 fba5 	bl	8002306 <HAL_SYSTICK_Config>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e00e      	b.n	8001be4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	2b0f      	cmp	r3, #15
 8001bca:	d80a      	bhi.n	8001be2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001bcc:	2200      	movs	r2, #0
 8001bce:	6879      	ldr	r1, [r7, #4]
 8001bd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001bd4:	f000 fb6d 	bl	80022b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001bd8:	4a06      	ldr	r2, [pc, #24]	@ (8001bf4 <HAL_InitTick+0x5c>)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001bde:	2300      	movs	r3, #0
 8001be0:	e000      	b.n	8001be4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
}
 8001be4:	4618      	mov	r0, r3
 8001be6:	3708      	adds	r7, #8
 8001be8:	46bd      	mov	sp, r7
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	20000004 	.word	0x20000004
 8001bf0:	2000000c 	.word	0x2000000c
 8001bf4:	20000008 	.word	0x20000008

08001bf8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001bf8:	b480      	push	{r7}
 8001bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001bfc:	4b06      	ldr	r3, [pc, #24]	@ (8001c18 <HAL_IncTick+0x20>)
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4413      	add	r3, r2
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_IncTick+0x24>)
 8001c0a:	6013      	str	r3, [r2, #0]
}
 8001c0c:	bf00      	nop
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	2000000c 	.word	0x2000000c
 8001c1c:	20000348 	.word	0x20000348

08001c20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return uwTick;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_GetTick+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000348 	.word	0x20000348

08001c38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b084      	sub	sp, #16
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c40:	2300      	movs	r3, #0
 8001c42:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d101      	bne.n	8001c4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e033      	b.n	8001cb6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d109      	bne.n	8001c6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fc98 	bl	800158c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	2200      	movs	r2, #0
 8001c60:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	f003 0310 	and.w	r3, r3, #16
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d118      	bne.n	8001ca8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001c7e:	f023 0302 	bic.w	r3, r3, #2
 8001c82:	f043 0202 	orr.w	r2, r3, #2
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8001c8a:	6878      	ldr	r0, [r7, #4]
 8001c8c:	f000 f93a 	bl	8001f04 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2200      	movs	r2, #0
 8001c94:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9a:	f023 0303 	bic.w	r3, r3, #3
 8001c9e:	f043 0201 	orr.w	r2, r3, #1
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca6:	e001      	b.n	8001cac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2200      	movs	r2, #0
 8001cb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb6:	4618      	mov	r0, r3
 8001cb8:	3710      	adds	r7, #16
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
	...

08001cc0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b085      	sub	sp, #20
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
 8001cc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001cd4:	2b01      	cmp	r3, #1
 8001cd6:	d101      	bne.n	8001cdc <HAL_ADC_ConfigChannel+0x1c>
 8001cd8:	2302      	movs	r3, #2
 8001cda:	e105      	b.n	8001ee8 <HAL_ADC_ConfigChannel+0x228>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2201      	movs	r2, #1
 8001ce0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2b09      	cmp	r3, #9
 8001cea:	d925      	bls.n	8001d38 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	68d9      	ldr	r1, [r3, #12]
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	b29b      	uxth	r3, r3
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	4613      	mov	r3, r2
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	4413      	add	r3, r2
 8001d00:	3b1e      	subs	r3, #30
 8001d02:	2207      	movs	r2, #7
 8001d04:	fa02 f303 	lsl.w	r3, r2, r3
 8001d08:	43da      	mvns	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	400a      	ands	r2, r1
 8001d10:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	68d9      	ldr	r1, [r3, #12]
 8001d18:	683b      	ldr	r3, [r7, #0]
 8001d1a:	689a      	ldr	r2, [r3, #8]
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	b29b      	uxth	r3, r3
 8001d22:	4618      	mov	r0, r3
 8001d24:	4603      	mov	r3, r0
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	4403      	add	r3, r0
 8001d2a:	3b1e      	subs	r3, #30
 8001d2c:	409a      	lsls	r2, r3
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	430a      	orrs	r2, r1
 8001d34:	60da      	str	r2, [r3, #12]
 8001d36:	e022      	b.n	8001d7e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	6919      	ldr	r1, [r3, #16]
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	b29b      	uxth	r3, r3
 8001d44:	461a      	mov	r2, r3
 8001d46:	4613      	mov	r3, r2
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	4413      	add	r3, r2
 8001d4c:	2207      	movs	r2, #7
 8001d4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d52:	43da      	mvns	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	400a      	ands	r2, r1
 8001d5a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	6919      	ldr	r1, [r3, #16]
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	689a      	ldr	r2, [r3, #8]
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	b29b      	uxth	r3, r3
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	4603      	mov	r3, r0
 8001d70:	005b      	lsls	r3, r3, #1
 8001d72:	4403      	add	r3, r0
 8001d74:	409a      	lsls	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	430a      	orrs	r2, r1
 8001d7c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	685b      	ldr	r3, [r3, #4]
 8001d82:	2b06      	cmp	r3, #6
 8001d84:	d824      	bhi.n	8001dd0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	685a      	ldr	r2, [r3, #4]
 8001d90:	4613      	mov	r3, r2
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	3b05      	subs	r3, #5
 8001d98:	221f      	movs	r2, #31
 8001d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d9e:	43da      	mvns	r2, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	400a      	ands	r2, r1
 8001da6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	4618      	mov	r0, r3
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	685a      	ldr	r2, [r3, #4]
 8001dba:	4613      	mov	r3, r2
 8001dbc:	009b      	lsls	r3, r3, #2
 8001dbe:	4413      	add	r3, r2
 8001dc0:	3b05      	subs	r3, #5
 8001dc2:	fa00 f203 	lsl.w	r2, r0, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	430a      	orrs	r2, r1
 8001dcc:	635a      	str	r2, [r3, #52]	@ 0x34
 8001dce:	e04c      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b0c      	cmp	r3, #12
 8001dd6:	d824      	bhi.n	8001e22 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001dde:	683b      	ldr	r3, [r7, #0]
 8001de0:	685a      	ldr	r2, [r3, #4]
 8001de2:	4613      	mov	r3, r2
 8001de4:	009b      	lsls	r3, r3, #2
 8001de6:	4413      	add	r3, r2
 8001de8:	3b23      	subs	r3, #35	@ 0x23
 8001dea:	221f      	movs	r2, #31
 8001dec:	fa02 f303 	lsl.w	r3, r2, r3
 8001df0:	43da      	mvns	r2, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	400a      	ands	r2, r1
 8001df8:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	4618      	mov	r0, r3
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	685a      	ldr	r2, [r3, #4]
 8001e0c:	4613      	mov	r3, r2
 8001e0e:	009b      	lsls	r3, r3, #2
 8001e10:	4413      	add	r3, r2
 8001e12:	3b23      	subs	r3, #35	@ 0x23
 8001e14:	fa00 f203 	lsl.w	r2, r0, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	430a      	orrs	r2, r1
 8001e1e:	631a      	str	r2, [r3, #48]	@ 0x30
 8001e20:	e023      	b.n	8001e6a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	685a      	ldr	r2, [r3, #4]
 8001e2c:	4613      	mov	r3, r2
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	3b41      	subs	r3, #65	@ 0x41
 8001e34:	221f      	movs	r2, #31
 8001e36:	fa02 f303 	lsl.w	r3, r2, r3
 8001e3a:	43da      	mvns	r2, r3
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	400a      	ands	r2, r1
 8001e42:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	b29b      	uxth	r3, r3
 8001e50:	4618      	mov	r0, r3
 8001e52:	683b      	ldr	r3, [r7, #0]
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	4613      	mov	r3, r2
 8001e58:	009b      	lsls	r3, r3, #2
 8001e5a:	4413      	add	r3, r2
 8001e5c:	3b41      	subs	r3, #65	@ 0x41
 8001e5e:	fa00 f203 	lsl.w	r2, r0, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	430a      	orrs	r2, r1
 8001e68:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001e6a:	4b22      	ldr	r3, [pc, #136]	@ (8001ef4 <HAL_ADC_ConfigChannel+0x234>)
 8001e6c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	4a21      	ldr	r2, [pc, #132]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x238>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d109      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1cc>
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d105      	bne.n	8001e8c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	685b      	ldr	r3, [r3, #4]
 8001e84:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a19      	ldr	r2, [pc, #100]	@ (8001ef8 <HAL_ADC_ConfigChannel+0x238>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d123      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x21e>
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b10      	cmp	r3, #16
 8001e9c:	d003      	beq.n	8001ea6 <HAL_ADC_ConfigChannel+0x1e6>
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2b11      	cmp	r3, #17
 8001ea4:	d11b      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2b10      	cmp	r3, #16
 8001eb8:	d111      	bne.n	8001ede <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001eba:	4b10      	ldr	r3, [pc, #64]	@ (8001efc <HAL_ADC_ConfigChannel+0x23c>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a10      	ldr	r2, [pc, #64]	@ (8001f00 <HAL_ADC_ConfigChannel+0x240>)
 8001ec0:	fba2 2303 	umull	r2, r3, r2, r3
 8001ec4:	0c9a      	lsrs	r2, r3, #18
 8001ec6:	4613      	mov	r3, r2
 8001ec8:	009b      	lsls	r3, r3, #2
 8001eca:	4413      	add	r3, r2
 8001ecc:	005b      	lsls	r3, r3, #1
 8001ece:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ed0:	e002      	b.n	8001ed8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	3b01      	subs	r3, #1
 8001ed6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d1f9      	bne.n	8001ed2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3714      	adds	r7, #20
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr
 8001ef4:	40012300 	.word	0x40012300
 8001ef8:	40012000 	.word	0x40012000
 8001efc:	20000004 	.word	0x20000004
 8001f00:	431bde83 	.word	0x431bde83

08001f04 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001f0c:	4b79      	ldr	r3, [pc, #484]	@ (80020f4 <ADC_Init+0x1f0>)
 8001f0e:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	685b      	ldr	r3, [r3, #4]
 8001f24:	431a      	orrs	r2, r3
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	685a      	ldr	r2, [r3, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8001f38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	021a      	lsls	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	430a      	orrs	r2, r1
 8001f4c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	685a      	ldr	r2, [r3, #4]
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8001f5c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	6859      	ldr	r1, [r3, #4]
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689a      	ldr	r2, [r3, #8]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	430a      	orrs	r2, r1
 8001f6e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	689a      	ldr	r2, [r3, #8]
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001f7e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	6899      	ldr	r1, [r3, #8]
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68da      	ldr	r2, [r3, #12]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	430a      	orrs	r2, r1
 8001f90:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001f96:	4a58      	ldr	r2, [pc, #352]	@ (80020f8 <ADC_Init+0x1f4>)
 8001f98:	4293      	cmp	r3, r2
 8001f9a:	d022      	beq.n	8001fe2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	689a      	ldr	r2, [r3, #8]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001faa:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6899      	ldr	r1, [r3, #8]
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	430a      	orrs	r2, r1
 8001fbc:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	689a      	ldr	r2, [r3, #8]
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8001fcc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	6899      	ldr	r1, [r3, #8]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	609a      	str	r2, [r3, #8]
 8001fe0:	e00f      	b.n	8002002 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	689a      	ldr	r2, [r3, #8]
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001ff0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	689a      	ldr	r2, [r3, #8]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002000:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	689a      	ldr	r2, [r3, #8]
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f022 0202 	bic.w	r2, r2, #2
 8002010:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	6899      	ldr	r1, [r3, #8]
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	7e1b      	ldrb	r3, [r3, #24]
 800201c:	005a      	lsls	r2, r3, #1
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	430a      	orrs	r2, r1
 8002024:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 3020 	ldrb.w	r3, [r3, #32]
 800202c:	2b00      	cmp	r3, #0
 800202e:	d01b      	beq.n	8002068 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	685a      	ldr	r2, [r3, #4]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800203e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	685a      	ldr	r2, [r3, #4]
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800204e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	6859      	ldr	r1, [r3, #4]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205a:	3b01      	subs	r3, #1
 800205c:	035a      	lsls	r2, r3, #13
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	430a      	orrs	r2, r1
 8002064:	605a      	str	r2, [r3, #4]
 8002066:	e007      	b.n	8002078 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	685a      	ldr	r2, [r3, #4]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002076:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002086:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	69db      	ldr	r3, [r3, #28]
 8002092:	3b01      	subs	r3, #1
 8002094:	051a      	lsls	r2, r3, #20
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	430a      	orrs	r2, r1
 800209c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	689a      	ldr	r2, [r3, #8]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80020ac:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	6899      	ldr	r1, [r3, #8]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80020ba:	025a      	lsls	r2, r3, #9
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	430a      	orrs	r2, r1
 80020c2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	689a      	ldr	r2, [r3, #8]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80020d2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	6899      	ldr	r1, [r3, #8]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	029a      	lsls	r2, r3, #10
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	430a      	orrs	r2, r1
 80020e6:	609a      	str	r2, [r3, #8]
}
 80020e8:	bf00      	nop
 80020ea:	3714      	adds	r7, #20
 80020ec:	46bd      	mov	sp, r7
 80020ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f2:	4770      	bx	lr
 80020f4:	40012300 	.word	0x40012300
 80020f8:	0f000001 	.word	0x0f000001

080020fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f003 0307 	and.w	r3, r3, #7
 800210a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800210c:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 800210e:	68db      	ldr	r3, [r3, #12]
 8002110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002112:	68ba      	ldr	r2, [r7, #8]
 8002114:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002118:	4013      	ands	r3, r2
 800211a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002124:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800212c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800212e:	4a04      	ldr	r2, [pc, #16]	@ (8002140 <__NVIC_SetPriorityGrouping+0x44>)
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	60d3      	str	r3, [r2, #12]
}
 8002134:	bf00      	nop
 8002136:	3714      	adds	r7, #20
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr
 8002140:	e000ed00 	.word	0xe000ed00

08002144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002148:	4b04      	ldr	r3, [pc, #16]	@ (800215c <__NVIC_GetPriorityGrouping+0x18>)
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	0a1b      	lsrs	r3, r3, #8
 800214e:	f003 0307 	and.w	r3, r3, #7
}
 8002152:	4618      	mov	r0, r3
 8002154:	46bd      	mov	sp, r7
 8002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215a:	4770      	bx	lr
 800215c:	e000ed00 	.word	0xe000ed00

08002160 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002160:	b480      	push	{r7}
 8002162:	b083      	sub	sp, #12
 8002164:	af00      	add	r7, sp, #0
 8002166:	4603      	mov	r3, r0
 8002168:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800216a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800216e:	2b00      	cmp	r3, #0
 8002170:	db0b      	blt.n	800218a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002172:	79fb      	ldrb	r3, [r7, #7]
 8002174:	f003 021f 	and.w	r2, r3, #31
 8002178:	4907      	ldr	r1, [pc, #28]	@ (8002198 <__NVIC_EnableIRQ+0x38>)
 800217a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800217e:	095b      	lsrs	r3, r3, #5
 8002180:	2001      	movs	r0, #1
 8002182:	fa00 f202 	lsl.w	r2, r0, r2
 8002186:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800218a:	bf00      	nop
 800218c:	370c      	adds	r7, #12
 800218e:	46bd      	mov	sp, r7
 8002190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002194:	4770      	bx	lr
 8002196:	bf00      	nop
 8002198:	e000e100 	.word	0xe000e100

0800219c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800219c:	b480      	push	{r7}
 800219e:	b083      	sub	sp, #12
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	4603      	mov	r3, r0
 80021a4:	6039      	str	r1, [r7, #0]
 80021a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	db0a      	blt.n	80021c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	b2da      	uxtb	r2, r3
 80021b4:	490c      	ldr	r1, [pc, #48]	@ (80021e8 <__NVIC_SetPriority+0x4c>)
 80021b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ba:	0112      	lsls	r2, r2, #4
 80021bc:	b2d2      	uxtb	r2, r2
 80021be:	440b      	add	r3, r1
 80021c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80021c4:	e00a      	b.n	80021dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80021c6:	683b      	ldr	r3, [r7, #0]
 80021c8:	b2da      	uxtb	r2, r3
 80021ca:	4908      	ldr	r1, [pc, #32]	@ (80021ec <__NVIC_SetPriority+0x50>)
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	3b04      	subs	r3, #4
 80021d4:	0112      	lsls	r2, r2, #4
 80021d6:	b2d2      	uxtb	r2, r2
 80021d8:	440b      	add	r3, r1
 80021da:	761a      	strb	r2, [r3, #24]
}
 80021dc:	bf00      	nop
 80021de:	370c      	adds	r7, #12
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr
 80021e8:	e000e100 	.word	0xe000e100
 80021ec:	e000ed00 	.word	0xe000ed00

080021f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b089      	sub	sp, #36	@ 0x24
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	f003 0307 	and.w	r3, r3, #7
 8002202:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002204:	69fb      	ldr	r3, [r7, #28]
 8002206:	f1c3 0307 	rsb	r3, r3, #7
 800220a:	2b04      	cmp	r3, #4
 800220c:	bf28      	it	cs
 800220e:	2304      	movcs	r3, #4
 8002210:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002212:	69fb      	ldr	r3, [r7, #28]
 8002214:	3304      	adds	r3, #4
 8002216:	2b06      	cmp	r3, #6
 8002218:	d902      	bls.n	8002220 <NVIC_EncodePriority+0x30>
 800221a:	69fb      	ldr	r3, [r7, #28]
 800221c:	3b03      	subs	r3, #3
 800221e:	e000      	b.n	8002222 <NVIC_EncodePriority+0x32>
 8002220:	2300      	movs	r3, #0
 8002222:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002224:	f04f 32ff 	mov.w	r2, #4294967295
 8002228:	69bb      	ldr	r3, [r7, #24]
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43da      	mvns	r2, r3
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	401a      	ands	r2, r3
 8002234:	697b      	ldr	r3, [r7, #20]
 8002236:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002238:	f04f 31ff 	mov.w	r1, #4294967295
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	fa01 f303 	lsl.w	r3, r1, r3
 8002242:	43d9      	mvns	r1, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002248:	4313      	orrs	r3, r2
         );
}
 800224a:	4618      	mov	r0, r3
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
	...

08002258 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	3b01      	subs	r3, #1
 8002264:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002268:	d301      	bcc.n	800226e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800226a:	2301      	movs	r3, #1
 800226c:	e00f      	b.n	800228e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800226e:	4a0a      	ldr	r2, [pc, #40]	@ (8002298 <SysTick_Config+0x40>)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	3b01      	subs	r3, #1
 8002274:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002276:	210f      	movs	r1, #15
 8002278:	f04f 30ff 	mov.w	r0, #4294967295
 800227c:	f7ff ff8e 	bl	800219c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002280:	4b05      	ldr	r3, [pc, #20]	@ (8002298 <SysTick_Config+0x40>)
 8002282:	2200      	movs	r2, #0
 8002284:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002286:	4b04      	ldr	r3, [pc, #16]	@ (8002298 <SysTick_Config+0x40>)
 8002288:	2207      	movs	r2, #7
 800228a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800228c:	2300      	movs	r3, #0
}
 800228e:	4618      	mov	r0, r3
 8002290:	3708      	adds	r7, #8
 8002292:	46bd      	mov	sp, r7
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	e000e010 	.word	0xe000e010

0800229c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b082      	sub	sp, #8
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff29 	bl	80020fc <__NVIC_SetPriorityGrouping>
}
 80022aa:	bf00      	nop
 80022ac:	3708      	adds	r7, #8
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}

080022b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022b2:	b580      	push	{r7, lr}
 80022b4:	b086      	sub	sp, #24
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	4603      	mov	r3, r0
 80022ba:	60b9      	str	r1, [r7, #8]
 80022bc:	607a      	str	r2, [r7, #4]
 80022be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80022c0:	2300      	movs	r3, #0
 80022c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80022c4:	f7ff ff3e 	bl	8002144 <__NVIC_GetPriorityGrouping>
 80022c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80022ca:	687a      	ldr	r2, [r7, #4]
 80022cc:	68b9      	ldr	r1, [r7, #8]
 80022ce:	6978      	ldr	r0, [r7, #20]
 80022d0:	f7ff ff8e 	bl	80021f0 <NVIC_EncodePriority>
 80022d4:	4602      	mov	r2, r0
 80022d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022da:	4611      	mov	r1, r2
 80022dc:	4618      	mov	r0, r3
 80022de:	f7ff ff5d 	bl	800219c <__NVIC_SetPriority>
}
 80022e2:	bf00      	nop
 80022e4:	3718      	adds	r7, #24
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}

080022ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022ea:	b580      	push	{r7, lr}
 80022ec:	b082      	sub	sp, #8
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	4603      	mov	r3, r0
 80022f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80022f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022f8:	4618      	mov	r0, r3
 80022fa:	f7ff ff31 	bl	8002160 <__NVIC_EnableIRQ>
}
 80022fe:	bf00      	nop
 8002300:	3708      	adds	r7, #8
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b082      	sub	sp, #8
 800230a:	af00      	add	r7, sp, #0
 800230c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800230e:	6878      	ldr	r0, [r7, #4]
 8002310:	f7ff ffa2 	bl	8002258 <SysTick_Config>
 8002314:	4603      	mov	r3, r0
}
 8002316:	4618      	mov	r0, r3
 8002318:	3708      	adds	r7, #8
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
	...

08002320 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	b086      	sub	sp, #24
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800232c:	f7ff fc78 	bl	8001c20 <HAL_GetTick>
 8002330:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d101      	bne.n	800233c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002338:	2301      	movs	r3, #1
 800233a:	e099      	b.n	8002470 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	2202      	movs	r2, #2
 8002340:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	681a      	ldr	r2, [r3, #0]
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f022 0201 	bic.w	r2, r2, #1
 800235a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800235c:	e00f      	b.n	800237e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800235e:	f7ff fc5f 	bl	8001c20 <HAL_GetTick>
 8002362:	4602      	mov	r2, r0
 8002364:	693b      	ldr	r3, [r7, #16]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	2b05      	cmp	r3, #5
 800236a:	d908      	bls.n	800237e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2220      	movs	r2, #32
 8002370:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2203      	movs	r2, #3
 8002376:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e078      	b.n	8002470 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0301 	and.w	r3, r3, #1
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1e8      	bne.n	800235e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	4b38      	ldr	r3, [pc, #224]	@ (8002478 <HAL_DMA_Init+0x158>)
 8002398:	4013      	ands	r3, r2
 800239a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685a      	ldr	r2, [r3, #4]
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	689b      	ldr	r3, [r3, #8]
 80023a4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023aa:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	691b      	ldr	r3, [r3, #16]
 80023b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	699b      	ldr	r3, [r3, #24]
 80023bc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6a1b      	ldr	r3, [r3, #32]
 80023c8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80023ca:	697a      	ldr	r2, [r7, #20]
 80023cc:	4313      	orrs	r3, r2
 80023ce:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023d4:	2b04      	cmp	r3, #4
 80023d6:	d107      	bne.n	80023e8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023e0:	4313      	orrs	r3, r2
 80023e2:	697a      	ldr	r2, [r7, #20]
 80023e4:	4313      	orrs	r3, r2
 80023e6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	695b      	ldr	r3, [r3, #20]
 80023f6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80023f8:	697b      	ldr	r3, [r7, #20]
 80023fa:	f023 0307 	bic.w	r3, r3, #7
 80023fe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002404:	697a      	ldr	r2, [r7, #20]
 8002406:	4313      	orrs	r3, r2
 8002408:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800240e:	2b04      	cmp	r3, #4
 8002410:	d117      	bne.n	8002442 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002416:	697a      	ldr	r2, [r7, #20]
 8002418:	4313      	orrs	r3, r2
 800241a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002420:	2b00      	cmp	r3, #0
 8002422:	d00e      	beq.n	8002442 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	f000 fa7b 	bl	8002920 <DMA_CheckFifoParam>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d008      	beq.n	8002442 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2240      	movs	r2, #64	@ 0x40
 8002434:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	2201      	movs	r2, #1
 800243a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800243e:	2301      	movs	r3, #1
 8002440:	e016      	b.n	8002470 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	697a      	ldr	r2, [r7, #20]
 8002448:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f000 fa32 	bl	80028b4 <DMA_CalcBaseAndBitshift>
 8002450:	4603      	mov	r3, r0
 8002452:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002458:	223f      	movs	r2, #63	@ 0x3f
 800245a:	409a      	lsls	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2200      	movs	r2, #0
 8002464:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2201      	movs	r2, #1
 800246a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800246e:	2300      	movs	r3, #0
}
 8002470:	4618      	mov	r0, r3
 8002472:	3718      	adds	r7, #24
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	f010803f 	.word	0xf010803f

0800247c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b084      	sub	sp, #16
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002488:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800248a:	f7ff fbc9 	bl	8001c20 <HAL_GetTick>
 800248e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002496:	b2db      	uxtb	r3, r3
 8002498:	2b02      	cmp	r3, #2
 800249a:	d008      	beq.n	80024ae <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	2280      	movs	r2, #128	@ 0x80
 80024a0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80024aa:	2301      	movs	r3, #1
 80024ac:	e052      	b.n	8002554 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	681a      	ldr	r2, [r3, #0]
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f022 0216 	bic.w	r2, r2, #22
 80024bc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	695a      	ldr	r2, [r3, #20]
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80024cc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d103      	bne.n	80024de <HAL_DMA_Abort+0x62>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d007      	beq.n	80024ee <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	681a      	ldr	r2, [r3, #0]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 0208 	bic.w	r2, r2, #8
 80024ec:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f022 0201 	bic.w	r2, r2, #1
 80024fc:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024fe:	e013      	b.n	8002528 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002500:	f7ff fb8e 	bl	8001c20 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	2b05      	cmp	r3, #5
 800250c:	d90c      	bls.n	8002528 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	2220      	movs	r2, #32
 8002512:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2203      	movs	r2, #3
 8002518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	e015      	b.n	8002554 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 0301 	and.w	r3, r3, #1
 8002532:	2b00      	cmp	r3, #0
 8002534:	d1e4      	bne.n	8002500 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800253a:	223f      	movs	r2, #63	@ 0x3f
 800253c:	409a      	lsls	r2, r3
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2201      	movs	r2, #1
 8002546:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2200      	movs	r2, #0
 800254e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002552:	2300      	movs	r3, #0
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}

0800255c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d004      	beq.n	800257a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2280      	movs	r2, #128	@ 0x80
 8002574:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e00c      	b.n	8002594 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2205      	movs	r2, #5
 800257e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f022 0201 	bic.w	r2, r2, #1
 8002590:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002592:	2300      	movs	r3, #0
}
 8002594:	4618      	mov	r0, r3
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b086      	sub	sp, #24
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80025a8:	2300      	movs	r3, #0
 80025aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80025ac:	4b8e      	ldr	r3, [pc, #568]	@ (80027e8 <HAL_DMA_IRQHandler+0x248>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a8e      	ldr	r2, [pc, #568]	@ (80027ec <HAL_DMA_IRQHandler+0x24c>)
 80025b2:	fba2 2303 	umull	r2, r3, r2, r3
 80025b6:	0a9b      	lsrs	r3, r3, #10
 80025b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ca:	2208      	movs	r2, #8
 80025cc:	409a      	lsls	r2, r3
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d01a      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f003 0304 	and.w	r3, r3, #4
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d013      	beq.n	800260c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	681a      	ldr	r2, [r3, #0]
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f022 0204 	bic.w	r2, r2, #4
 80025f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f8:	2208      	movs	r2, #8
 80025fa:	409a      	lsls	r2, r3
 80025fc:	693b      	ldr	r3, [r7, #16]
 80025fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002604:	f043 0201 	orr.w	r2, r3, #1
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002610:	2201      	movs	r2, #1
 8002612:	409a      	lsls	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	4013      	ands	r3, r2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d012      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	695b      	ldr	r3, [r3, #20]
 8002622:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002626:	2b00      	cmp	r3, #0
 8002628:	d00b      	beq.n	8002642 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800262e:	2201      	movs	r2, #1
 8002630:	409a      	lsls	r2, r3
 8002632:	693b      	ldr	r3, [r7, #16]
 8002634:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800263a:	f043 0202 	orr.w	r2, r3, #2
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002646:	2204      	movs	r2, #4
 8002648:	409a      	lsls	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	4013      	ands	r3, r2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d012      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00b      	beq.n	8002678 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002664:	2204      	movs	r2, #4
 8002666:	409a      	lsls	r2, r3
 8002668:	693b      	ldr	r3, [r7, #16]
 800266a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002670:	f043 0204 	orr.w	r2, r3, #4
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800267c:	2210      	movs	r2, #16
 800267e:	409a      	lsls	r2, r3
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	4013      	ands	r3, r2
 8002684:	2b00      	cmp	r3, #0
 8002686:	d043      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f003 0308 	and.w	r3, r3, #8
 8002692:	2b00      	cmp	r3, #0
 8002694:	d03c      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800269a:	2210      	movs	r2, #16
 800269c:	409a      	lsls	r2, r3
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d018      	beq.n	80026e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d108      	bne.n	80026d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d024      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	4798      	blx	r3
 80026ce:	e01f      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d01b      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026dc:	6878      	ldr	r0, [r7, #4]
 80026de:	4798      	blx	r3
 80026e0:	e016      	b.n	8002710 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d107      	bne.n	8002700 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800270c:	6878      	ldr	r0, [r7, #4]
 800270e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002714:	2220      	movs	r2, #32
 8002716:	409a      	lsls	r2, r3
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	4013      	ands	r3, r2
 800271c:	2b00      	cmp	r3, #0
 800271e:	f000 808f 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f003 0310 	and.w	r3, r3, #16
 800272c:	2b00      	cmp	r3, #0
 800272e:	f000 8087 	beq.w	8002840 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002736:	2220      	movs	r2, #32
 8002738:	409a      	lsls	r2, r3
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b05      	cmp	r3, #5
 8002748:	d136      	bne.n	80027b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f022 0216 	bic.w	r2, r2, #22
 8002758:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	695a      	ldr	r2, [r3, #20]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002768:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	2b00      	cmp	r3, #0
 8002770:	d103      	bne.n	800277a <HAL_DMA_IRQHandler+0x1da>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002776:	2b00      	cmp	r3, #0
 8002778:	d007      	beq.n	800278a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f022 0208 	bic.w	r2, r2, #8
 8002788:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800278e:	223f      	movs	r2, #63	@ 0x3f
 8002790:	409a      	lsls	r2, r3
 8002792:	693b      	ldr	r3, [r7, #16]
 8002794:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2200      	movs	r2, #0
 80027a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d07e      	beq.n	80028ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	4798      	blx	r3
        }
        return;
 80027b6:	e079      	b.n	80028ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d01d      	beq.n	8002802 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d10d      	bne.n	80027f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d031      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80027e0:	6878      	ldr	r0, [r7, #4]
 80027e2:	4798      	blx	r3
 80027e4:	e02c      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
 80027e6:	bf00      	nop
 80027e8:	20000004 	.word	0x20000004
 80027ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d023      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80027fc:	6878      	ldr	r0, [r7, #4]
 80027fe:	4798      	blx	r3
 8002800:	e01e      	b.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800280c:	2b00      	cmp	r3, #0
 800280e:	d10f      	bne.n	8002830 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0210 	bic.w	r2, r2, #16
 800281e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	2201      	movs	r2, #1
 8002824:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002834:	2b00      	cmp	r3, #0
 8002836:	d003      	beq.n	8002840 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800283c:	6878      	ldr	r0, [r7, #4]
 800283e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002844:	2b00      	cmp	r3, #0
 8002846:	d032      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800284c:	f003 0301 	and.w	r3, r3, #1
 8002850:	2b00      	cmp	r3, #0
 8002852:	d022      	beq.n	800289a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2205      	movs	r2, #5
 8002858:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	681a      	ldr	r2, [r3, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	f022 0201 	bic.w	r2, r2, #1
 800286a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	3301      	adds	r3, #1
 8002870:	60bb      	str	r3, [r7, #8]
 8002872:	697a      	ldr	r2, [r7, #20]
 8002874:	429a      	cmp	r2, r3
 8002876:	d307      	bcc.n	8002888 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1f2      	bne.n	800286c <HAL_DMA_IRQHandler+0x2cc>
 8002886:	e000      	b.n	800288a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002888:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	2201      	movs	r2, #1
 800288e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2200      	movs	r2, #0
 8002896:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d005      	beq.n	80028ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80028a6:	6878      	ldr	r0, [r7, #4]
 80028a8:	4798      	blx	r3
 80028aa:	e000      	b.n	80028ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80028ac:	bf00      	nop
    }
  }
}
 80028ae:	3718      	adds	r7, #24
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}

080028b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80028b4:	b480      	push	{r7}
 80028b6:	b085      	sub	sp, #20
 80028b8:	af00      	add	r7, sp, #0
 80028ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3b10      	subs	r3, #16
 80028c4:	4a14      	ldr	r2, [pc, #80]	@ (8002918 <DMA_CalcBaseAndBitshift+0x64>)
 80028c6:	fba2 2303 	umull	r2, r3, r2, r3
 80028ca:	091b      	lsrs	r3, r3, #4
 80028cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80028ce:	4a13      	ldr	r2, [pc, #76]	@ (800291c <DMA_CalcBaseAndBitshift+0x68>)
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	4413      	add	r3, r2
 80028d4:	781b      	ldrb	r3, [r3, #0]
 80028d6:	461a      	mov	r2, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2b03      	cmp	r3, #3
 80028e0:	d909      	bls.n	80028f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028ea:	f023 0303 	bic.w	r3, r3, #3
 80028ee:	1d1a      	adds	r2, r3, #4
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	659a      	str	r2, [r3, #88]	@ 0x58
 80028f4:	e007      	b.n	8002906 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80028fe:	f023 0303 	bic.w	r3, r3, #3
 8002902:	687a      	ldr	r2, [r7, #4]
 8002904:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800290a:	4618      	mov	r0, r3
 800290c:	3714      	adds	r7, #20
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
 8002916:	bf00      	nop
 8002918:	aaaaaaab 	.word	0xaaaaaaab
 800291c:	08005a34 	.word	0x08005a34

08002920 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002928:	2300      	movs	r3, #0
 800292a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002930:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	699b      	ldr	r3, [r3, #24]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d11f      	bne.n	800297a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800293a:	68bb      	ldr	r3, [r7, #8]
 800293c:	2b03      	cmp	r3, #3
 800293e:	d856      	bhi.n	80029ee <DMA_CheckFifoParam+0xce>
 8002940:	a201      	add	r2, pc, #4	@ (adr r2, 8002948 <DMA_CheckFifoParam+0x28>)
 8002942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002946:	bf00      	nop
 8002948:	08002959 	.word	0x08002959
 800294c:	0800296b 	.word	0x0800296b
 8002950:	08002959 	.word	0x08002959
 8002954:	080029ef 	.word	0x080029ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800295c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002960:	2b00      	cmp	r3, #0
 8002962:	d046      	beq.n	80029f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002964:	2301      	movs	r3, #1
 8002966:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002968:	e043      	b.n	80029f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800296e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002972:	d140      	bne.n	80029f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002978:	e03d      	b.n	80029f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002982:	d121      	bne.n	80029c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002984:	68bb      	ldr	r3, [r7, #8]
 8002986:	2b03      	cmp	r3, #3
 8002988:	d837      	bhi.n	80029fa <DMA_CheckFifoParam+0xda>
 800298a:	a201      	add	r2, pc, #4	@ (adr r2, 8002990 <DMA_CheckFifoParam+0x70>)
 800298c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002990:	080029a1 	.word	0x080029a1
 8002994:	080029a7 	.word	0x080029a7
 8002998:	080029a1 	.word	0x080029a1
 800299c:	080029b9 	.word	0x080029b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80029a0:	2301      	movs	r3, #1
 80029a2:	73fb      	strb	r3, [r7, #15]
      break;
 80029a4:	e030      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029aa:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d025      	beq.n	80029fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80029b6:	e022      	b.n	80029fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029bc:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80029c0:	d11f      	bne.n	8002a02 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80029c6:	e01c      	b.n	8002a02 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80029c8:	68bb      	ldr	r3, [r7, #8]
 80029ca:	2b02      	cmp	r3, #2
 80029cc:	d903      	bls.n	80029d6 <DMA_CheckFifoParam+0xb6>
 80029ce:	68bb      	ldr	r3, [r7, #8]
 80029d0:	2b03      	cmp	r3, #3
 80029d2:	d003      	beq.n	80029dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80029d4:	e018      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	73fb      	strb	r3, [r7, #15]
      break;
 80029da:	e015      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d00e      	beq.n	8002a06 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80029e8:	2301      	movs	r3, #1
 80029ea:	73fb      	strb	r3, [r7, #15]
      break;
 80029ec:	e00b      	b.n	8002a06 <DMA_CheckFifoParam+0xe6>
      break;
 80029ee:	bf00      	nop
 80029f0:	e00a      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029f2:	bf00      	nop
 80029f4:	e008      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029f6:	bf00      	nop
 80029f8:	e006      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029fa:	bf00      	nop
 80029fc:	e004      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 80029fe:	bf00      	nop
 8002a00:	e002      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;   
 8002a02:	bf00      	nop
 8002a04:	e000      	b.n	8002a08 <DMA_CheckFifoParam+0xe8>
      break;
 8002a06:	bf00      	nop
    }
  } 
  
  return status; 
 8002a08:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop

08002a18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b089      	sub	sp, #36	@ 0x24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
 8002a20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a22:	2300      	movs	r3, #0
 8002a24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
 8002a32:	e16b      	b.n	8002d0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a34:	2201      	movs	r2, #1
 8002a36:	69fb      	ldr	r3, [r7, #28]
 8002a38:	fa02 f303 	lsl.w	r3, r2, r3
 8002a3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a3e:	683b      	ldr	r3, [r7, #0]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	697a      	ldr	r2, [r7, #20]
 8002a44:	4013      	ands	r3, r2
 8002a46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a48:	693a      	ldr	r2, [r7, #16]
 8002a4a:	697b      	ldr	r3, [r7, #20]
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	f040 815a 	bne.w	8002d06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 0303 	and.w	r3, r3, #3
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d005      	beq.n	8002a6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	685b      	ldr	r3, [r3, #4]
 8002a62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002a66:	2b02      	cmp	r3, #2
 8002a68:	d130      	bne.n	8002acc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	689b      	ldr	r3, [r3, #8]
 8002a6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002a70:	69fb      	ldr	r3, [r7, #28]
 8002a72:	005b      	lsls	r3, r3, #1
 8002a74:	2203      	movs	r2, #3
 8002a76:	fa02 f303 	lsl.w	r3, r2, r3
 8002a7a:	43db      	mvns	r3, r3
 8002a7c:	69ba      	ldr	r2, [r7, #24]
 8002a7e:	4013      	ands	r3, r2
 8002a80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002a82:	683b      	ldr	r3, [r7, #0]
 8002a84:	68da      	ldr	r2, [r3, #12]
 8002a86:	69fb      	ldr	r3, [r7, #28]
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8e:	69ba      	ldr	r2, [r7, #24]
 8002a90:	4313      	orrs	r3, r2
 8002a92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	69ba      	ldr	r2, [r7, #24]
 8002a98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002aa0:	2201      	movs	r2, #1
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	69ba      	ldr	r2, [r7, #24]
 8002aac:	4013      	ands	r3, r2
 8002aae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ab0:	683b      	ldr	r3, [r7, #0]
 8002ab2:	685b      	ldr	r3, [r3, #4]
 8002ab4:	091b      	lsrs	r3, r3, #4
 8002ab6:	f003 0201 	and.w	r2, r3, #1
 8002aba:	69fb      	ldr	r3, [r7, #28]
 8002abc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ac0:	69ba      	ldr	r2, [r7, #24]
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69ba      	ldr	r2, [r7, #24]
 8002aca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002acc:	683b      	ldr	r3, [r7, #0]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	f003 0303 	and.w	r3, r3, #3
 8002ad4:	2b03      	cmp	r3, #3
 8002ad6:	d017      	beq.n	8002b08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	005b      	lsls	r3, r3, #1
 8002ae2:	2203      	movs	r2, #3
 8002ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	4013      	ands	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	689a      	ldr	r2, [r3, #8]
 8002af4:	69fb      	ldr	r3, [r7, #28]
 8002af6:	005b      	lsls	r3, r3, #1
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	69ba      	ldr	r2, [r7, #24]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	685b      	ldr	r3, [r3, #4]
 8002b0c:	f003 0303 	and.w	r3, r3, #3
 8002b10:	2b02      	cmp	r3, #2
 8002b12:	d123      	bne.n	8002b5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b14:	69fb      	ldr	r3, [r7, #28]
 8002b16:	08da      	lsrs	r2, r3, #3
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	3208      	adds	r2, #8
 8002b1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b22:	69fb      	ldr	r3, [r7, #28]
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	220f      	movs	r2, #15
 8002b2c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b30:	43db      	mvns	r3, r3
 8002b32:	69ba      	ldr	r2, [r7, #24]
 8002b34:	4013      	ands	r3, r2
 8002b36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	691a      	ldr	r2, [r3, #16]
 8002b3c:	69fb      	ldr	r3, [r7, #28]
 8002b3e:	f003 0307 	and.w	r3, r3, #7
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	fa02 f303 	lsl.w	r3, r2, r3
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	08da      	lsrs	r2, r3, #3
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	3208      	adds	r2, #8
 8002b56:	69b9      	ldr	r1, [r7, #24]
 8002b58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	005b      	lsls	r3, r3, #1
 8002b66:	2203      	movs	r2, #3
 8002b68:	fa02 f303 	lsl.w	r3, r2, r3
 8002b6c:	43db      	mvns	r3, r3
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	4013      	ands	r3, r2
 8002b72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f003 0203 	and.w	r2, r3, #3
 8002b7c:	69fb      	ldr	r3, [r7, #28]
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	69ba      	ldr	r2, [r7, #24]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	69ba      	ldr	r2, [r7, #24]
 8002b8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	f000 80b4 	beq.w	8002d06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b60      	ldr	r3, [pc, #384]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba6:	4a5f      	ldr	r2, [pc, #380]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002ba8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002bac:	6453      	str	r3, [r2, #68]	@ 0x44
 8002bae:	4b5d      	ldr	r3, [pc, #372]	@ (8002d24 <HAL_GPIO_Init+0x30c>)
 8002bb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002bba:	4a5b      	ldr	r2, [pc, #364]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002bbc:	69fb      	ldr	r3, [r7, #28]
 8002bbe:	089b      	lsrs	r3, r3, #2
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002bc8:	69fb      	ldr	r3, [r7, #28]
 8002bca:	f003 0303 	and.w	r3, r3, #3
 8002bce:	009b      	lsls	r3, r3, #2
 8002bd0:	220f      	movs	r2, #15
 8002bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd6:	43db      	mvns	r3, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	4a52      	ldr	r2, [pc, #328]	@ (8002d2c <HAL_GPIO_Init+0x314>)
 8002be2:	4293      	cmp	r3, r2
 8002be4:	d02b      	beq.n	8002c3e <HAL_GPIO_Init+0x226>
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	4a51      	ldr	r2, [pc, #324]	@ (8002d30 <HAL_GPIO_Init+0x318>)
 8002bea:	4293      	cmp	r3, r2
 8002bec:	d025      	beq.n	8002c3a <HAL_GPIO_Init+0x222>
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4a50      	ldr	r2, [pc, #320]	@ (8002d34 <HAL_GPIO_Init+0x31c>)
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	d01f      	beq.n	8002c36 <HAL_GPIO_Init+0x21e>
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	@ (8002d38 <HAL_GPIO_Init+0x320>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d019      	beq.n	8002c32 <HAL_GPIO_Init+0x21a>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	4a4e      	ldr	r2, [pc, #312]	@ (8002d3c <HAL_GPIO_Init+0x324>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d013      	beq.n	8002c2e <HAL_GPIO_Init+0x216>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	4a4d      	ldr	r2, [pc, #308]	@ (8002d40 <HAL_GPIO_Init+0x328>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d00d      	beq.n	8002c2a <HAL_GPIO_Init+0x212>
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	4a4c      	ldr	r2, [pc, #304]	@ (8002d44 <HAL_GPIO_Init+0x32c>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d007      	beq.n	8002c26 <HAL_GPIO_Init+0x20e>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a4b      	ldr	r2, [pc, #300]	@ (8002d48 <HAL_GPIO_Init+0x330>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d101      	bne.n	8002c22 <HAL_GPIO_Init+0x20a>
 8002c1e:	2307      	movs	r3, #7
 8002c20:	e00e      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c22:	2308      	movs	r3, #8
 8002c24:	e00c      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c26:	2306      	movs	r3, #6
 8002c28:	e00a      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2a:	2305      	movs	r3, #5
 8002c2c:	e008      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c2e:	2304      	movs	r3, #4
 8002c30:	e006      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c32:	2303      	movs	r3, #3
 8002c34:	e004      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c36:	2302      	movs	r3, #2
 8002c38:	e002      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e000      	b.n	8002c40 <HAL_GPIO_Init+0x228>
 8002c3e:	2300      	movs	r3, #0
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f002 0203 	and.w	r2, r2, #3
 8002c46:	0092      	lsls	r2, r2, #2
 8002c48:	4093      	lsls	r3, r2
 8002c4a:	69ba      	ldr	r2, [r7, #24]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002c50:	4935      	ldr	r1, [pc, #212]	@ (8002d28 <HAL_GPIO_Init+0x310>)
 8002c52:	69fb      	ldr	r3, [r7, #28]
 8002c54:	089b      	lsrs	r3, r3, #2
 8002c56:	3302      	adds	r3, #2
 8002c58:	69ba      	ldr	r2, [r7, #24]
 8002c5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c60:	689b      	ldr	r3, [r3, #8]
 8002c62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c64:	693b      	ldr	r3, [r7, #16]
 8002c66:	43db      	mvns	r3, r3
 8002c68:	69ba      	ldr	r2, [r7, #24]
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	685b      	ldr	r3, [r3, #4]
 8002c72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d003      	beq.n	8002c82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002c7a:	69ba      	ldr	r2, [r7, #24]
 8002c7c:	693b      	ldr	r3, [r7, #16]
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002c82:	4a32      	ldr	r2, [pc, #200]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c84:	69bb      	ldr	r3, [r7, #24]
 8002c86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002c88:	4b30      	ldr	r3, [pc, #192]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	43db      	mvns	r3, r3
 8002c92:	69ba      	ldr	r2, [r7, #24]
 8002c94:	4013      	ands	r3, r2
 8002c96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d003      	beq.n	8002cac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	4313      	orrs	r3, r2
 8002caa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002cac:	4a27      	ldr	r2, [pc, #156]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cae:	69bb      	ldr	r3, [r7, #24]
 8002cb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002cb2:	4b26      	ldr	r3, [pc, #152]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002cd6:	4a1d      	ldr	r2, [pc, #116]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002cdc:	4b1b      	ldr	r3, [pc, #108]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d00:	4a12      	ldr	r2, [pc, #72]	@ (8002d4c <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3301      	adds	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
 8002d0c:	69fb      	ldr	r3, [r7, #28]
 8002d0e:	2b0f      	cmp	r3, #15
 8002d10:	f67f ae90 	bls.w	8002a34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3724      	adds	r7, #36	@ 0x24
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d20:	4770      	bx	lr
 8002d22:	bf00      	nop
 8002d24:	40023800 	.word	0x40023800
 8002d28:	40013800 	.word	0x40013800
 8002d2c:	40020000 	.word	0x40020000
 8002d30:	40020400 	.word	0x40020400
 8002d34:	40020800 	.word	0x40020800
 8002d38:	40020c00 	.word	0x40020c00
 8002d3c:	40021000 	.word	0x40021000
 8002d40:	40021400 	.word	0x40021400
 8002d44:	40021800 	.word	0x40021800
 8002d48:	40021c00 	.word	0x40021c00
 8002d4c:	40013c00 	.word	0x40013c00

08002d50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d50:	b480      	push	{r7}
 8002d52:	b083      	sub	sp, #12
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	460b      	mov	r3, r1
 8002d5a:	807b      	strh	r3, [r7, #2]
 8002d5c:	4613      	mov	r3, r2
 8002d5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002d60:	787b      	ldrb	r3, [r7, #1]
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d003      	beq.n	8002d6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002d66:	887a      	ldrh	r2, [r7, #2]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002d6c:	e003      	b.n	8002d76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002d6e:	887b      	ldrh	r3, [r7, #2]
 8002d70:	041a      	lsls	r2, r3, #16
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	619a      	str	r2, [r3, #24]
}
 8002d76:	bf00      	nop
 8002d78:	370c      	adds	r7, #12
 8002d7a:	46bd      	mov	sp, r7
 8002d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d80:	4770      	bx	lr
	...

08002d84 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e267      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0301 	and.w	r3, r3, #1
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d075      	beq.n	8002e8e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002da2:	4b88      	ldr	r3, [pc, #544]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	f003 030c 	and.w	r3, r3, #12
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	d00c      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dae:	4b85      	ldr	r3, [pc, #532]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002db6:	2b08      	cmp	r3, #8
 8002db8:	d112      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002dba:	4b82      	ldr	r3, [pc, #520]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002dc2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002dc6:	d10b      	bne.n	8002de0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dc8:	4b7e      	ldr	r3, [pc, #504]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d05b      	beq.n	8002e8c <HAL_RCC_OscConfig+0x108>
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	2b00      	cmp	r3, #0
 8002dda:	d157      	bne.n	8002e8c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ddc:	2301      	movs	r3, #1
 8002dde:	e242      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002de8:	d106      	bne.n	8002df8 <HAL_RCC_OscConfig+0x74>
 8002dea:	4b76      	ldr	r3, [pc, #472]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	4a75      	ldr	r2, [pc, #468]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002df0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002df4:	6013      	str	r3, [r2, #0]
 8002df6:	e01d      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	685b      	ldr	r3, [r3, #4]
 8002dfc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e00:	d10c      	bne.n	8002e1c <HAL_RCC_OscConfig+0x98>
 8002e02:	4b70      	ldr	r3, [pc, #448]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	4a6f      	ldr	r2, [pc, #444]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e08:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002e0c:	6013      	str	r3, [r2, #0]
 8002e0e:	4b6d      	ldr	r3, [pc, #436]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a6c      	ldr	r2, [pc, #432]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e14:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e18:	6013      	str	r3, [r2, #0]
 8002e1a:	e00b      	b.n	8002e34 <HAL_RCC_OscConfig+0xb0>
 8002e1c:	4b69      	ldr	r3, [pc, #420]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a68      	ldr	r2, [pc, #416]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e22:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002e26:	6013      	str	r3, [r2, #0]
 8002e28:	4b66      	ldr	r3, [pc, #408]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a65      	ldr	r2, [pc, #404]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e2e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002e32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2b00      	cmp	r3, #0
 8002e3a:	d013      	beq.n	8002e64 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fef0 	bl	8001c20 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe feec 	bl	8001c20 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	@ 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e207      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e56:	4b5b      	ldr	r3, [pc, #364]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d0f0      	beq.n	8002e44 <HAL_RCC_OscConfig+0xc0>
 8002e62:	e014      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e64:	f7fe fedc 	bl	8001c20 <HAL_GetTick>
 8002e68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e6a:	e008      	b.n	8002e7e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002e6c:	f7fe fed8 	bl	8001c20 <HAL_GetTick>
 8002e70:	4602      	mov	r2, r0
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	1ad3      	subs	r3, r2, r3
 8002e76:	2b64      	cmp	r3, #100	@ 0x64
 8002e78:	d901      	bls.n	8002e7e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e7a:	2303      	movs	r3, #3
 8002e7c:	e1f3      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e7e:	4b51      	ldr	r3, [pc, #324]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1f0      	bne.n	8002e6c <HAL_RCC_OscConfig+0xe8>
 8002e8a:	e000      	b.n	8002e8e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d063      	beq.n	8002f62 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002e9a:	4b4a      	ldr	r3, [pc, #296]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f003 030c 	and.w	r3, r3, #12
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d00b      	beq.n	8002ebe <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002ea6:	4b47      	ldr	r3, [pc, #284]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002eae:	2b08      	cmp	r3, #8
 8002eb0:	d11c      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002eb2:	4b44      	ldr	r3, [pc, #272]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d116      	bne.n	8002eec <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ebe:	4b41      	ldr	r3, [pc, #260]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d005      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d001      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002ed2:	2301      	movs	r3, #1
 8002ed4:	e1c7      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ed6:	4b3b      	ldr	r3, [pc, #236]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	691b      	ldr	r3, [r3, #16]
 8002ee2:	00db      	lsls	r3, r3, #3
 8002ee4:	4937      	ldr	r1, [pc, #220]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002eea:	e03a      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	68db      	ldr	r3, [r3, #12]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d020      	beq.n	8002f36 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ef4:	4b34      	ldr	r3, [pc, #208]	@ (8002fc8 <HAL_RCC_OscConfig+0x244>)
 8002ef6:	2201      	movs	r2, #1
 8002ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efa:	f7fe fe91 	bl	8001c20 <HAL_GetTick>
 8002efe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f00:	e008      	b.n	8002f14 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f02:	f7fe fe8d 	bl	8001c20 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d901      	bls.n	8002f14 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002f10:	2303      	movs	r3, #3
 8002f12:	e1a8      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f14:	4b2b      	ldr	r3, [pc, #172]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d0f0      	beq.n	8002f02 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f20:	4b28      	ldr	r3, [pc, #160]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	691b      	ldr	r3, [r3, #16]
 8002f2c:	00db      	lsls	r3, r3, #3
 8002f2e:	4925      	ldr	r1, [pc, #148]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e015      	b.n	8002f62 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f36:	4b24      	ldr	r3, [pc, #144]	@ (8002fc8 <HAL_RCC_OscConfig+0x244>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f3c:	f7fe fe70 	bl	8001c20 <HAL_GetTick>
 8002f40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f42:	e008      	b.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f44:	f7fe fe6c 	bl	8001c20 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	693b      	ldr	r3, [r7, #16]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	2b02      	cmp	r3, #2
 8002f50:	d901      	bls.n	8002f56 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f52:	2303      	movs	r3, #3
 8002f54:	e187      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f56:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f003 0302 	and.w	r3, r3, #2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d1f0      	bne.n	8002f44 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f003 0308 	and.w	r3, r3, #8
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d036      	beq.n	8002fdc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	695b      	ldr	r3, [r3, #20]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d016      	beq.n	8002fa4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f76:	4b15      	ldr	r3, [pc, #84]	@ (8002fcc <HAL_RCC_OscConfig+0x248>)
 8002f78:	2201      	movs	r2, #1
 8002f7a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f7c:	f7fe fe50 	bl	8001c20 <HAL_GetTick>
 8002f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f82:	e008      	b.n	8002f96 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f84:	f7fe fe4c 	bl	8001c20 <HAL_GetTick>
 8002f88:	4602      	mov	r2, r0
 8002f8a:	693b      	ldr	r3, [r7, #16]
 8002f8c:	1ad3      	subs	r3, r2, r3
 8002f8e:	2b02      	cmp	r3, #2
 8002f90:	d901      	bls.n	8002f96 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f92:	2303      	movs	r3, #3
 8002f94:	e167      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f96:	4b0b      	ldr	r3, [pc, #44]	@ (8002fc4 <HAL_RCC_OscConfig+0x240>)
 8002f98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d0f0      	beq.n	8002f84 <HAL_RCC_OscConfig+0x200>
 8002fa2:	e01b      	b.n	8002fdc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002fa4:	4b09      	ldr	r3, [pc, #36]	@ (8002fcc <HAL_RCC_OscConfig+0x248>)
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002faa:	f7fe fe39 	bl	8001c20 <HAL_GetTick>
 8002fae:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fb0:	e00e      	b.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002fb2:	f7fe fe35 	bl	8001c20 <HAL_GetTick>
 8002fb6:	4602      	mov	r2, r0
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	1ad3      	subs	r3, r2, r3
 8002fbc:	2b02      	cmp	r3, #2
 8002fbe:	d907      	bls.n	8002fd0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002fc0:	2303      	movs	r3, #3
 8002fc2:	e150      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
 8002fc4:	40023800 	.word	0x40023800
 8002fc8:	42470000 	.word	0x42470000
 8002fcc:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fd0:	4b88      	ldr	r3, [pc, #544]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002fd4:	f003 0302 	and.w	r3, r3, #2
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d1ea      	bne.n	8002fb2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f003 0304 	and.w	r3, r3, #4
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8097 	beq.w	8003118 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fea:	2300      	movs	r3, #0
 8002fec:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fee:	4b81      	ldr	r3, [pc, #516]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d10f      	bne.n	800301a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ffa:	2300      	movs	r3, #0
 8002ffc:	60bb      	str	r3, [r7, #8]
 8002ffe:	4b7d      	ldr	r3, [pc, #500]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003000:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003002:	4a7c      	ldr	r2, [pc, #496]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003004:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003008:	6413      	str	r3, [r2, #64]	@ 0x40
 800300a:	4b7a      	ldr	r3, [pc, #488]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 800300c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800300e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003012:	60bb      	str	r3, [r7, #8]
 8003014:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003016:	2301      	movs	r3, #1
 8003018:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800301a:	4b77      	ldr	r3, [pc, #476]	@ (80031f8 <HAL_RCC_OscConfig+0x474>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003022:	2b00      	cmp	r3, #0
 8003024:	d118      	bne.n	8003058 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003026:	4b74      	ldr	r3, [pc, #464]	@ (80031f8 <HAL_RCC_OscConfig+0x474>)
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a73      	ldr	r2, [pc, #460]	@ (80031f8 <HAL_RCC_OscConfig+0x474>)
 800302c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003030:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003032:	f7fe fdf5 	bl	8001c20 <HAL_GetTick>
 8003036:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003038:	e008      	b.n	800304c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800303a:	f7fe fdf1 	bl	8001c20 <HAL_GetTick>
 800303e:	4602      	mov	r2, r0
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	1ad3      	subs	r3, r2, r3
 8003044:	2b02      	cmp	r3, #2
 8003046:	d901      	bls.n	800304c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003048:	2303      	movs	r3, #3
 800304a:	e10c      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b6a      	ldr	r3, [pc, #424]	@ (80031f8 <HAL_RCC_OscConfig+0x474>)
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003054:	2b00      	cmp	r3, #0
 8003056:	d0f0      	beq.n	800303a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	2b01      	cmp	r3, #1
 800305e:	d106      	bne.n	800306e <HAL_RCC_OscConfig+0x2ea>
 8003060:	4b64      	ldr	r3, [pc, #400]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003062:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003064:	4a63      	ldr	r2, [pc, #396]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003066:	f043 0301 	orr.w	r3, r3, #1
 800306a:	6713      	str	r3, [r2, #112]	@ 0x70
 800306c:	e01c      	b.n	80030a8 <HAL_RCC_OscConfig+0x324>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	2b05      	cmp	r3, #5
 8003074:	d10c      	bne.n	8003090 <HAL_RCC_OscConfig+0x30c>
 8003076:	4b5f      	ldr	r3, [pc, #380]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003078:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800307a:	4a5e      	ldr	r2, [pc, #376]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 800307c:	f043 0304 	orr.w	r3, r3, #4
 8003080:	6713      	str	r3, [r2, #112]	@ 0x70
 8003082:	4b5c      	ldr	r3, [pc, #368]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003084:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003086:	4a5b      	ldr	r2, [pc, #364]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003088:	f043 0301 	orr.w	r3, r3, #1
 800308c:	6713      	str	r3, [r2, #112]	@ 0x70
 800308e:	e00b      	b.n	80030a8 <HAL_RCC_OscConfig+0x324>
 8003090:	4b58      	ldr	r3, [pc, #352]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003092:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003094:	4a57      	ldr	r2, [pc, #348]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003096:	f023 0301 	bic.w	r3, r3, #1
 800309a:	6713      	str	r3, [r2, #112]	@ 0x70
 800309c:	4b55      	ldr	r3, [pc, #340]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 800309e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030a0:	4a54      	ldr	r2, [pc, #336]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030a2:	f023 0304 	bic.w	r3, r3, #4
 80030a6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d015      	beq.n	80030dc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80030b0:	f7fe fdb6 	bl	8001c20 <HAL_GetTick>
 80030b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b6:	e00a      	b.n	80030ce <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030b8:	f7fe fdb2 	bl	8001c20 <HAL_GetTick>
 80030bc:	4602      	mov	r2, r0
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	1ad3      	subs	r3, r2, r3
 80030c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d901      	bls.n	80030ce <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030ca:	2303      	movs	r3, #3
 80030cc:	e0cb      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ce:	4b49      	ldr	r3, [pc, #292]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d0ee      	beq.n	80030b8 <HAL_RCC_OscConfig+0x334>
 80030da:	e014      	b.n	8003106 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030dc:	f7fe fda0 	bl	8001c20 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030e2:	e00a      	b.n	80030fa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030e4:	f7fe fd9c 	bl	8001c20 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e0b5      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030fa:	4b3e      	ldr	r3, [pc, #248]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 80030fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1ee      	bne.n	80030e4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003106:	7dfb      	ldrb	r3, [r7, #23]
 8003108:	2b01      	cmp	r3, #1
 800310a:	d105      	bne.n	8003118 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800310c:	4b39      	ldr	r3, [pc, #228]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 800310e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003110:	4a38      	ldr	r2, [pc, #224]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003112:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003116:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	699b      	ldr	r3, [r3, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	f000 80a1 	beq.w	8003264 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003122:	4b34      	ldr	r3, [pc, #208]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d05c      	beq.n	80031e8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	699b      	ldr	r3, [r3, #24]
 8003132:	2b02      	cmp	r3, #2
 8003134:	d141      	bne.n	80031ba <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003136:	4b31      	ldr	r3, [pc, #196]	@ (80031fc <HAL_RCC_OscConfig+0x478>)
 8003138:	2200      	movs	r2, #0
 800313a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800313c:	f7fe fd70 	bl	8001c20 <HAL_GetTick>
 8003140:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003142:	e008      	b.n	8003156 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003144:	f7fe fd6c 	bl	8001c20 <HAL_GetTick>
 8003148:	4602      	mov	r2, r0
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	1ad3      	subs	r3, r2, r3
 800314e:	2b02      	cmp	r3, #2
 8003150:	d901      	bls.n	8003156 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003152:	2303      	movs	r3, #3
 8003154:	e087      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003156:	4b27      	ldr	r3, [pc, #156]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d1f0      	bne.n	8003144 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	69da      	ldr	r2, [r3, #28]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	431a      	orrs	r2, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003170:	019b      	lsls	r3, r3, #6
 8003172:	431a      	orrs	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003178:	085b      	lsrs	r3, r3, #1
 800317a:	3b01      	subs	r3, #1
 800317c:	041b      	lsls	r3, r3, #16
 800317e:	431a      	orrs	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003184:	061b      	lsls	r3, r3, #24
 8003186:	491b      	ldr	r1, [pc, #108]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 8003188:	4313      	orrs	r3, r2
 800318a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800318c:	4b1b      	ldr	r3, [pc, #108]	@ (80031fc <HAL_RCC_OscConfig+0x478>)
 800318e:	2201      	movs	r2, #1
 8003190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003192:	f7fe fd45 	bl	8001c20 <HAL_GetTick>
 8003196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003198:	e008      	b.n	80031ac <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800319a:	f7fe fd41 	bl	8001c20 <HAL_GetTick>
 800319e:	4602      	mov	r2, r0
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d901      	bls.n	80031ac <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e05c      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031ac:	4b11      	ldr	r3, [pc, #68]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d0f0      	beq.n	800319a <HAL_RCC_OscConfig+0x416>
 80031b8:	e054      	b.n	8003264 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031ba:	4b10      	ldr	r3, [pc, #64]	@ (80031fc <HAL_RCC_OscConfig+0x478>)
 80031bc:	2200      	movs	r2, #0
 80031be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031c0:	f7fe fd2e 	bl	8001c20 <HAL_GetTick>
 80031c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031c6:	e008      	b.n	80031da <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031c8:	f7fe fd2a 	bl	8001c20 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	693b      	ldr	r3, [r7, #16]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	2b02      	cmp	r3, #2
 80031d4:	d901      	bls.n	80031da <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031d6:	2303      	movs	r3, #3
 80031d8:	e045      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031da:	4b06      	ldr	r3, [pc, #24]	@ (80031f4 <HAL_RCC_OscConfig+0x470>)
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d1f0      	bne.n	80031c8 <HAL_RCC_OscConfig+0x444>
 80031e6:	e03d      	b.n	8003264 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	699b      	ldr	r3, [r3, #24]
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d107      	bne.n	8003200 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e038      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40007000 	.word	0x40007000
 80031fc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003200:	4b1b      	ldr	r3, [pc, #108]	@ (8003270 <HAL_RCC_OscConfig+0x4ec>)
 8003202:	685b      	ldr	r3, [r3, #4]
 8003204:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	699b      	ldr	r3, [r3, #24]
 800320a:	2b01      	cmp	r3, #1
 800320c:	d028      	beq.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003218:	429a      	cmp	r2, r3
 800321a:	d121      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003226:	429a      	cmp	r2, r3
 8003228:	d11a      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003230:	4013      	ands	r3, r2
 8003232:	687a      	ldr	r2, [r7, #4]
 8003234:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003236:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003238:	4293      	cmp	r3, r2
 800323a:	d111      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	085b      	lsrs	r3, r3, #1
 8003248:	3b01      	subs	r3, #1
 800324a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800324c:	429a      	cmp	r2, r3
 800324e:	d107      	bne.n	8003260 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800325a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800325c:	429a      	cmp	r2, r3
 800325e:	d001      	beq.n	8003264 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003260:	2301      	movs	r3, #1
 8003262:	e000      	b.n	8003266 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3718      	adds	r7, #24
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023800 	.word	0x40023800

08003274 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
 800327c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2b00      	cmp	r3, #0
 8003282:	d101      	bne.n	8003288 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0cc      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003288:	4b68      	ldr	r3, [pc, #416]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0307 	and.w	r3, r3, #7
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d90c      	bls.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003296:	4b65      	ldr	r3, [pc, #404]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003298:	683a      	ldr	r2, [r7, #0]
 800329a:	b2d2      	uxtb	r2, r2
 800329c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800329e:	4b63      	ldr	r3, [pc, #396]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 0307 	and.w	r3, r3, #7
 80032a6:	683a      	ldr	r2, [r7, #0]
 80032a8:	429a      	cmp	r2, r3
 80032aa:	d001      	beq.n	80032b0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80032ac:	2301      	movs	r3, #1
 80032ae:	e0b8      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	f003 0302 	and.w	r3, r3, #2
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d020      	beq.n	80032fe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	f003 0304 	and.w	r3, r3, #4
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d005      	beq.n	80032d4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032c8:	4b59      	ldr	r3, [pc, #356]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ca:	689b      	ldr	r3, [r3, #8]
 80032cc:	4a58      	ldr	r2, [pc, #352]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80032d2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f003 0308 	and.w	r3, r3, #8
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d005      	beq.n	80032ec <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032e0:	4b53      	ldr	r3, [pc, #332]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e2:	689b      	ldr	r3, [r3, #8]
 80032e4:	4a52      	ldr	r2, [pc, #328]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032e6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80032ea:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032ec:	4b50      	ldr	r3, [pc, #320]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032ee:	689b      	ldr	r3, [r3, #8]
 80032f0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	689b      	ldr	r3, [r3, #8]
 80032f8:	494d      	ldr	r1, [pc, #308]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 0301 	and.w	r3, r3, #1
 8003306:	2b00      	cmp	r3, #0
 8003308:	d044      	beq.n	8003394 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	685b      	ldr	r3, [r3, #4]
 800330e:	2b01      	cmp	r3, #1
 8003310:	d107      	bne.n	8003322 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003312:	4b47      	ldr	r3, [pc, #284]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331a:	2b00      	cmp	r3, #0
 800331c:	d119      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e07f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b02      	cmp	r3, #2
 8003328:	d003      	beq.n	8003332 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800332e:	2b03      	cmp	r3, #3
 8003330:	d107      	bne.n	8003342 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003332:	4b3f      	ldr	r3, [pc, #252]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800333a:	2b00      	cmp	r3, #0
 800333c:	d109      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e06f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003342:	4b3b      	ldr	r3, [pc, #236]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0302 	and.w	r3, r3, #2
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e067      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003352:	4b37      	ldr	r3, [pc, #220]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f023 0203 	bic.w	r2, r3, #3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	4934      	ldr	r1, [pc, #208]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003360:	4313      	orrs	r3, r2
 8003362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003364:	f7fe fc5c 	bl	8001c20 <HAL_GetTick>
 8003368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800336a:	e00a      	b.n	8003382 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800336c:	f7fe fc58 	bl	8001c20 <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	f241 3288 	movw	r2, #5000	@ 0x1388
 800337a:	4293      	cmp	r3, r2
 800337c:	d901      	bls.n	8003382 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e04f      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003382:	4b2b      	ldr	r3, [pc, #172]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	f003 020c 	and.w	r2, r3, #12
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	429a      	cmp	r2, r3
 8003392:	d1eb      	bne.n	800336c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003394:	4b25      	ldr	r3, [pc, #148]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	683a      	ldr	r2, [r7, #0]
 800339e:	429a      	cmp	r2, r3
 80033a0:	d20c      	bcs.n	80033bc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033a2:	4b22      	ldr	r3, [pc, #136]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	b2d2      	uxtb	r2, r2
 80033a8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033aa:	4b20      	ldr	r3, [pc, #128]	@ (800342c <HAL_RCC_ClockConfig+0x1b8>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0307 	and.w	r3, r3, #7
 80033b2:	683a      	ldr	r2, [r7, #0]
 80033b4:	429a      	cmp	r2, r3
 80033b6:	d001      	beq.n	80033bc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e032      	b.n	8003422 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0304 	and.w	r3, r3, #4
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d008      	beq.n	80033da <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033c8:	4b19      	ldr	r3, [pc, #100]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033ca:	689b      	ldr	r3, [r3, #8]
 80033cc:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	4916      	ldr	r1, [pc, #88]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033d6:	4313      	orrs	r3, r2
 80033d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0308 	and.w	r3, r3, #8
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d009      	beq.n	80033fa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033e6:	4b12      	ldr	r3, [pc, #72]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033e8:	689b      	ldr	r3, [r3, #8]
 80033ea:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	691b      	ldr	r3, [r3, #16]
 80033f2:	00db      	lsls	r3, r3, #3
 80033f4:	490e      	ldr	r1, [pc, #56]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 80033f6:	4313      	orrs	r3, r2
 80033f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033fa:	f000 f821 	bl	8003440 <HAL_RCC_GetSysClockFreq>
 80033fe:	4602      	mov	r2, r0
 8003400:	4b0b      	ldr	r3, [pc, #44]	@ (8003430 <HAL_RCC_ClockConfig+0x1bc>)
 8003402:	689b      	ldr	r3, [r3, #8]
 8003404:	091b      	lsrs	r3, r3, #4
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	490a      	ldr	r1, [pc, #40]	@ (8003434 <HAL_RCC_ClockConfig+0x1c0>)
 800340c:	5ccb      	ldrb	r3, [r1, r3]
 800340e:	fa22 f303 	lsr.w	r3, r2, r3
 8003412:	4a09      	ldr	r2, [pc, #36]	@ (8003438 <HAL_RCC_ClockConfig+0x1c4>)
 8003414:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003416:	4b09      	ldr	r3, [pc, #36]	@ (800343c <HAL_RCC_ClockConfig+0x1c8>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4618      	mov	r0, r3
 800341c:	f7fe fbbc 	bl	8001b98 <HAL_InitTick>

  return HAL_OK;
 8003420:	2300      	movs	r3, #0
}
 8003422:	4618      	mov	r0, r3
 8003424:	3710      	adds	r7, #16
 8003426:	46bd      	mov	sp, r7
 8003428:	bd80      	pop	{r7, pc}
 800342a:	bf00      	nop
 800342c:	40023c00 	.word	0x40023c00
 8003430:	40023800 	.word	0x40023800
 8003434:	08005a1c 	.word	0x08005a1c
 8003438:	20000004 	.word	0x20000004
 800343c:	20000008 	.word	0x20000008

08003440 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003440:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003444:	b090      	sub	sp, #64	@ 0x40
 8003446:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003448:	2300      	movs	r3, #0
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800344c:	2300      	movs	r3, #0
 800344e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003450:	2300      	movs	r3, #0
 8003452:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003458:	4b59      	ldr	r3, [pc, #356]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800345a:	689b      	ldr	r3, [r3, #8]
 800345c:	f003 030c 	and.w	r3, r3, #12
 8003460:	2b08      	cmp	r3, #8
 8003462:	d00d      	beq.n	8003480 <HAL_RCC_GetSysClockFreq+0x40>
 8003464:	2b08      	cmp	r3, #8
 8003466:	f200 80a1 	bhi.w	80035ac <HAL_RCC_GetSysClockFreq+0x16c>
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <HAL_RCC_GetSysClockFreq+0x34>
 800346e:	2b04      	cmp	r3, #4
 8003470:	d003      	beq.n	800347a <HAL_RCC_GetSysClockFreq+0x3a>
 8003472:	e09b      	b.n	80035ac <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003474:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x184>)
 8003476:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003478:	e09b      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800347a:	4b53      	ldr	r3, [pc, #332]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x188>)
 800347c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800347e:	e098      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003480:	4b4f      	ldr	r3, [pc, #316]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003488:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800348a:	4b4d      	ldr	r3, [pc, #308]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d028      	beq.n	80034e8 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003496:	4b4a      	ldr	r3, [pc, #296]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	099b      	lsrs	r3, r3, #6
 800349c:	2200      	movs	r2, #0
 800349e:	623b      	str	r3, [r7, #32]
 80034a0:	627a      	str	r2, [r7, #36]	@ 0x24
 80034a2:	6a3b      	ldr	r3, [r7, #32]
 80034a4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80034a8:	2100      	movs	r1, #0
 80034aa:	4b47      	ldr	r3, [pc, #284]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ac:	fb03 f201 	mul.w	r2, r3, r1
 80034b0:	2300      	movs	r3, #0
 80034b2:	fb00 f303 	mul.w	r3, r0, r3
 80034b6:	4413      	add	r3, r2
 80034b8:	4a43      	ldr	r2, [pc, #268]	@ (80035c8 <HAL_RCC_GetSysClockFreq+0x188>)
 80034ba:	fba0 1202 	umull	r1, r2, r0, r2
 80034be:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80034c0:	460a      	mov	r2, r1
 80034c2:	62ba      	str	r2, [r7, #40]	@ 0x28
 80034c4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80034c6:	4413      	add	r3, r2
 80034c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80034ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034cc:	2200      	movs	r2, #0
 80034ce:	61bb      	str	r3, [r7, #24]
 80034d0:	61fa      	str	r2, [r7, #28]
 80034d2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80034d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80034da:	f7fc fe75 	bl	80001c8 <__aeabi_uldivmod>
 80034de:	4602      	mov	r2, r0
 80034e0:	460b      	mov	r3, r1
 80034e2:	4613      	mov	r3, r2
 80034e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034e6:	e053      	b.n	8003590 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034e8:	4b35      	ldr	r3, [pc, #212]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	099b      	lsrs	r3, r3, #6
 80034ee:	2200      	movs	r2, #0
 80034f0:	613b      	str	r3, [r7, #16]
 80034f2:	617a      	str	r2, [r7, #20]
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80034fa:	f04f 0b00 	mov.w	fp, #0
 80034fe:	4652      	mov	r2, sl
 8003500:	465b      	mov	r3, fp
 8003502:	f04f 0000 	mov.w	r0, #0
 8003506:	f04f 0100 	mov.w	r1, #0
 800350a:	0159      	lsls	r1, r3, #5
 800350c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003510:	0150      	lsls	r0, r2, #5
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	ebb2 080a 	subs.w	r8, r2, sl
 800351a:	eb63 090b 	sbc.w	r9, r3, fp
 800351e:	f04f 0200 	mov.w	r2, #0
 8003522:	f04f 0300 	mov.w	r3, #0
 8003526:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800352a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800352e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003532:	ebb2 0408 	subs.w	r4, r2, r8
 8003536:	eb63 0509 	sbc.w	r5, r3, r9
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	f04f 0300 	mov.w	r3, #0
 8003542:	00eb      	lsls	r3, r5, #3
 8003544:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003548:	00e2      	lsls	r2, r4, #3
 800354a:	4614      	mov	r4, r2
 800354c:	461d      	mov	r5, r3
 800354e:	eb14 030a 	adds.w	r3, r4, sl
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	eb45 030b 	adc.w	r3, r5, fp
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	f04f 0300 	mov.w	r3, #0
 8003562:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003566:	4629      	mov	r1, r5
 8003568:	028b      	lsls	r3, r1, #10
 800356a:	4621      	mov	r1, r4
 800356c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003570:	4621      	mov	r1, r4
 8003572:	028a      	lsls	r2, r1, #10
 8003574:	4610      	mov	r0, r2
 8003576:	4619      	mov	r1, r3
 8003578:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800357a:	2200      	movs	r2, #0
 800357c:	60bb      	str	r3, [r7, #8]
 800357e:	60fa      	str	r2, [r7, #12]
 8003580:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003584:	f7fc fe20 	bl	80001c8 <__aeabi_uldivmod>
 8003588:	4602      	mov	r2, r0
 800358a:	460b      	mov	r3, r1
 800358c:	4613      	mov	r3, r2
 800358e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003590:	4b0b      	ldr	r3, [pc, #44]	@ (80035c0 <HAL_RCC_GetSysClockFreq+0x180>)
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	0c1b      	lsrs	r3, r3, #16
 8003596:	f003 0303 	and.w	r3, r3, #3
 800359a:	3301      	adds	r3, #1
 800359c:	005b      	lsls	r3, r3, #1
 800359e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80035a0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80035a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80035a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035a8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035aa:	e002      	b.n	80035b2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035ac:	4b05      	ldr	r3, [pc, #20]	@ (80035c4 <HAL_RCC_GetSysClockFreq+0x184>)
 80035ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80035b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80035b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 80035b4:	4618      	mov	r0, r3
 80035b6:	3740      	adds	r7, #64	@ 0x40
 80035b8:	46bd      	mov	sp, r7
 80035ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035be:	bf00      	nop
 80035c0:	40023800 	.word	0x40023800
 80035c4:	00f42400 	.word	0x00f42400
 80035c8:	017d7840 	.word	0x017d7840

080035cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035cc:	b480      	push	{r7}
 80035ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035d0:	4b03      	ldr	r3, [pc, #12]	@ (80035e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80035d2:	681b      	ldr	r3, [r3, #0]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	46bd      	mov	sp, r7
 80035d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035dc:	4770      	bx	lr
 80035de:	bf00      	nop
 80035e0:	20000004 	.word	0x20000004

080035e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035e4:	b580      	push	{r7, lr}
 80035e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80035e8:	f7ff fff0 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 80035ec:	4602      	mov	r2, r0
 80035ee:	4b05      	ldr	r3, [pc, #20]	@ (8003604 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	0a9b      	lsrs	r3, r3, #10
 80035f4:	f003 0307 	and.w	r3, r3, #7
 80035f8:	4903      	ldr	r1, [pc, #12]	@ (8003608 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035fa:	5ccb      	ldrb	r3, [r1, r3]
 80035fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003600:	4618      	mov	r0, r3
 8003602:	bd80      	pop	{r7, pc}
 8003604:	40023800 	.word	0x40023800
 8003608:	08005a2c 	.word	0x08005a2c

0800360c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003610:	f7ff ffdc 	bl	80035cc <HAL_RCC_GetHCLKFreq>
 8003614:	4602      	mov	r2, r0
 8003616:	4b05      	ldr	r3, [pc, #20]	@ (800362c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	0b5b      	lsrs	r3, r3, #13
 800361c:	f003 0307 	and.w	r3, r3, #7
 8003620:	4903      	ldr	r1, [pc, #12]	@ (8003630 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003622:	5ccb      	ldrb	r3, [r1, r3]
 8003624:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003628:	4618      	mov	r0, r3
 800362a:	bd80      	pop	{r7, pc}
 800362c:	40023800 	.word	0x40023800
 8003630:	08005a2c 	.word	0x08005a2c

08003634 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b082      	sub	sp, #8
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d101      	bne.n	8003646 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e041      	b.n	80036ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800364c:	b2db      	uxtb	r3, r3
 800364e:	2b00      	cmp	r3, #0
 8003650:	d106      	bne.n	8003660 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f7fe f840 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2202      	movs	r2, #2
 8003664:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	3304      	adds	r3, #4
 8003670:	4619      	mov	r1, r3
 8003672:	4610      	mov	r0, r2
 8003674:	f000 fcc4 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2201      	movs	r2, #1
 800367c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2201      	movs	r2, #1
 800368c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2201      	movs	r2, #1
 8003694:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2201      	movs	r2, #1
 800369c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2201      	movs	r2, #1
 80036a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2201      	movs	r2, #1
 80036ac:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2201      	movs	r2, #1
 80036b4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2201      	movs	r2, #1
 80036c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036c8:	2300      	movs	r3, #0
}
 80036ca:	4618      	mov	r0, r3
 80036cc:	3708      	adds	r7, #8
 80036ce:	46bd      	mov	sp, r7
 80036d0:	bd80      	pop	{r7, pc}

080036d2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80036d2:	b580      	push	{r7, lr}
 80036d4:	b082      	sub	sp, #8
 80036d6:	af00      	add	r7, sp, #0
 80036d8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d101      	bne.n	80036e4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e041      	b.n	8003768 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d106      	bne.n	80036fe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80036f8:	6878      	ldr	r0, [r7, #4]
 80036fa:	f000 f839 	bl	8003770 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2202      	movs	r2, #2
 8003702:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	3304      	adds	r3, #4
 800370e:	4619      	mov	r1, r3
 8003710:	4610      	mov	r0, r2
 8003712:	f000 fc75 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2201      	movs	r2, #1
 8003722:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	2201      	movs	r2, #1
 800372a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	2201      	movs	r2, #1
 8003732:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2201      	movs	r2, #1
 800373a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2201      	movs	r2, #1
 8003742:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2201      	movs	r2, #1
 800374a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2201      	movs	r2, #1
 8003752:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	2201      	movs	r2, #1
 8003762:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003766:	2300      	movs	r3, #0
}
 8003768:	4618      	mov	r0, r3
 800376a:	3708      	adds	r7, #8
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}

08003770 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003770:	b480      	push	{r7}
 8003772:	b083      	sub	sp, #12
 8003774:	af00      	add	r7, sp, #0
 8003776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003778:	bf00      	nop
 800377a:	370c      	adds	r7, #12
 800377c:	46bd      	mov	sp, r7
 800377e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003782:	4770      	bx	lr

08003784 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003784:	b580      	push	{r7, lr}
 8003786:	b082      	sub	sp, #8
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d101      	bne.n	8003796 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003792:	2301      	movs	r3, #1
 8003794:	e041      	b.n	800381a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d106      	bne.n	80037b0 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80037aa:	6878      	ldr	r0, [r7, #4]
 80037ac:	f000 f839 	bl	8003822 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2202      	movs	r2, #2
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681a      	ldr	r2, [r3, #0]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4610      	mov	r0, r2
 80037c4:	f000 fc1c 	bl	8004000 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	2201      	movs	r2, #1
 80037cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3708      	adds	r7, #8
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003822:	b480      	push	{r7}
 8003824:	b083      	sub	sp, #12
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800382a:	bf00      	nop
 800382c:	370c      	adds	r7, #12
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr

08003836 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
 800383e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	2b00      	cmp	r3, #0
 8003844:	d101      	bne.n	800384a <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e097      	b.n	800397a <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003850:	b2db      	uxtb	r3, r3
 8003852:	2b00      	cmp	r3, #0
 8003854:	d106      	bne.n	8003864 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2200      	movs	r2, #0
 800385a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800385e:	6878      	ldr	r0, [r7, #4]
 8003860:	f7fd ffd6 	bl	8001810 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2202      	movs	r2, #2
 8003868:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	689b      	ldr	r3, [r3, #8]
 8003872:	687a      	ldr	r2, [r7, #4]
 8003874:	6812      	ldr	r2, [r2, #0]
 8003876:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800387a:	f023 0307 	bic.w	r3, r3, #7
 800387e:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	3304      	adds	r3, #4
 8003888:	4619      	mov	r1, r3
 800388a:	4610      	mov	r0, r2
 800388c:	f000 fbb8 	bl	8004000 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6a1b      	ldr	r3, [r3, #32]
 80038a6:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	697a      	ldr	r2, [r7, #20]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038b8:	f023 0303 	bic.w	r3, r3, #3
 80038bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	689a      	ldr	r2, [r3, #8]
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	4313      	orrs	r3, r2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80038d6:	f023 030c 	bic.w	r3, r3, #12
 80038da:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80038e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80038e6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	69db      	ldr	r3, [r3, #28]
 80038f0:	021b      	lsls	r3, r3, #8
 80038f2:	4313      	orrs	r3, r2
 80038f4:	693a      	ldr	r2, [r7, #16]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	691b      	ldr	r3, [r3, #16]
 80038fe:	011a      	lsls	r2, r3, #4
 8003900:	683b      	ldr	r3, [r7, #0]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	031b      	lsls	r3, r3, #12
 8003906:	4313      	orrs	r3, r2
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8003914:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800391c:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800391e:	683b      	ldr	r3, [r7, #0]
 8003920:	685a      	ldr	r2, [r3, #4]
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	695b      	ldr	r3, [r3, #20]
 8003926:	011b      	lsls	r3, r3, #4
 8003928:	4313      	orrs	r3, r2
 800392a:	68fa      	ldr	r2, [r7, #12]
 800392c:	4313      	orrs	r3, r2
 800392e:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	697a      	ldr	r2, [r7, #20]
 8003936:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	693a      	ldr	r2, [r7, #16]
 800393e:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	2201      	movs	r2, #1
 800395c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2201      	movs	r2, #1
 800396c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2201      	movs	r2, #1
 8003974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003978:	2300      	movs	r3, #0
}
 800397a:	4618      	mov	r0, r3
 800397c:	3718      	adds	r7, #24
 800397e:	46bd      	mov	sp, r7
 8003980:	bd80      	pop	{r7, pc}

08003982 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	68db      	ldr	r3, [r3, #12]
 8003990:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	691b      	ldr	r3, [r3, #16]
 8003998:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800399a:	68bb      	ldr	r3, [r7, #8]
 800399c:	f003 0302 	and.w	r3, r3, #2
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d020      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d01b      	beq.n	80039e6 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f06f 0202 	mvn.w	r2, #2
 80039b6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	699b      	ldr	r3, [r3, #24]
 80039c4:	f003 0303 	and.w	r3, r3, #3
 80039c8:	2b00      	cmp	r3, #0
 80039ca:	d003      	beq.n	80039d4 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 faf8 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 80039d2:	e005      	b.n	80039e0 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d4:	6878      	ldr	r0, [r7, #4]
 80039d6:	f000 faea 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	f000 fafb 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	2200      	movs	r2, #0
 80039e4:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80039e6:	68bb      	ldr	r3, [r7, #8]
 80039e8:	f003 0304 	and.w	r3, r3, #4
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d020      	beq.n	8003a32 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f003 0304 	and.w	r3, r3, #4
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d01b      	beq.n	8003a32 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f06f 0204 	mvn.w	r2, #4
 8003a02:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2202      	movs	r2, #2
 8003a08:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d003      	beq.n	8003a20 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fad2 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	f000 fac4 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 fad5 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003a32:	68bb      	ldr	r3, [r7, #8]
 8003a34:	f003 0308 	and.w	r3, r3, #8
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d020      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0308 	and.w	r3, r3, #8
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d01b      	beq.n	8003a7e <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	f06f 0208 	mvn.w	r2, #8
 8003a4e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2204      	movs	r2, #4
 8003a54:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f003 0303 	and.w	r3, r3, #3
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d003      	beq.n	8003a6c <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a64:	6878      	ldr	r0, [r7, #4]
 8003a66:	f000 faac 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003a6a:	e005      	b.n	8003a78 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	f000 fa9e 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a72:	6878      	ldr	r0, [r7, #4]
 8003a74:	f000 faaf 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	f003 0310 	and.w	r3, r3, #16
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d020      	beq.n	8003aca <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f003 0310 	and.w	r3, r3, #16
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d01b      	beq.n	8003aca <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f06f 0210 	mvn.w	r2, #16
 8003a9a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2208      	movs	r2, #8
 8003aa0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	69db      	ldr	r3, [r3, #28]
 8003aa8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d003      	beq.n	8003ab8 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ab0:	6878      	ldr	r0, [r7, #4]
 8003ab2:	f000 fa86 	bl	8003fc2 <HAL_TIM_IC_CaptureCallback>
 8003ab6:	e005      	b.n	8003ac4 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fa78 	bl	8003fae <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003abe:	6878      	ldr	r0, [r7, #4]
 8003ac0:	f000 fa89 	bl	8003fd6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003aca:	68bb      	ldr	r3, [r7, #8]
 8003acc:	f003 0301 	and.w	r3, r3, #1
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d00c      	beq.n	8003aee <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f003 0301 	and.w	r3, r3, #1
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d007      	beq.n	8003aee <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f06f 0201 	mvn.w	r2, #1
 8003ae6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7fd fcc3 	bl	8001474 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d00c      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d007      	beq.n	8003b12 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003b0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f000 ff6f 	bl	80049f0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003b12:	68bb      	ldr	r3, [r7, #8]
 8003b14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d00c      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d007      	beq.n	8003b36 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003b2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fa5a 	bl	8003fea <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003b36:	68bb      	ldr	r3, [r7, #8]
 8003b38:	f003 0320 	and.w	r3, r3, #32
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d00c      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f003 0320 	and.w	r3, r3, #32
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d007      	beq.n	8003b5a <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f06f 0220 	mvn.w	r2, #32
 8003b52:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003b54:	6878      	ldr	r0, [r7, #4]
 8003b56:	f000 ff41 	bl	80049dc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	3710      	adds	r7, #16
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}

08003b62 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003b62:	b580      	push	{r7, lr}
 8003b64:	b086      	sub	sp, #24
 8003b66:	af00      	add	r7, sp, #0
 8003b68:	60f8      	str	r0, [r7, #12]
 8003b6a:	60b9      	str	r1, [r7, #8]
 8003b6c:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b6e:	2300      	movs	r3, #0
 8003b70:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b78:	2b01      	cmp	r3, #1
 8003b7a:	d101      	bne.n	8003b80 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	e088      	b.n	8003c92 <HAL_TIM_IC_ConfigChannel+0x130>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2201      	movs	r2, #1
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d11b      	bne.n	8003bc6 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b92:	68bb      	ldr	r3, [r7, #8]
 8003b94:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b96:	68bb      	ldr	r3, [r7, #8]
 8003b98:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003b9e:	f000 fc8b 	bl	80044b8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	699a      	ldr	r2, [r3, #24]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f022 020c 	bic.w	r2, r2, #12
 8003bb0:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	6999      	ldr	r1, [r3, #24]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
 8003bba:	689a      	ldr	r2, [r3, #8]
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	430a      	orrs	r2, r1
 8003bc2:	619a      	str	r2, [r3, #24]
 8003bc4:	e060      	b.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d11c      	bne.n	8003c06 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003bd0:	68bb      	ldr	r3, [r7, #8]
 8003bd2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003bd4:	68bb      	ldr	r3, [r7, #8]
 8003bd6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003bdc:	f000 fd0f 	bl	80045fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	699a      	ldr	r2, [r3, #24]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003bee:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	6999      	ldr	r1, [r3, #24]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	689b      	ldr	r3, [r3, #8]
 8003bfa:	021a      	lsls	r2, r3, #8
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	430a      	orrs	r2, r1
 8003c02:	619a      	str	r2, [r3, #24]
 8003c04:	e040      	b.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2b08      	cmp	r3, #8
 8003c0a:	d11b      	bne.n	8003c44 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c10:	68bb      	ldr	r3, [r7, #8]
 8003c12:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c18:	68bb      	ldr	r3, [r7, #8]
 8003c1a:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003c1c:	f000 fd5c 	bl	80046d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	69da      	ldr	r2, [r3, #28]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f022 020c 	bic.w	r2, r2, #12
 8003c2e:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	69d9      	ldr	r1, [r3, #28]
 8003c36:	68bb      	ldr	r3, [r7, #8]
 8003c38:	689a      	ldr	r2, [r3, #8]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	430a      	orrs	r2, r1
 8003c40:	61da      	str	r2, [r3, #28]
 8003c42:	e021      	b.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	2b0c      	cmp	r3, #12
 8003c48:	d11c      	bne.n	8003c84 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003c52:	68bb      	ldr	r3, [r7, #8]
 8003c54:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003c5a:	f000 fd79 	bl	8004750 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	69da      	ldr	r2, [r3, #28]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 8003c6c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	69d9      	ldr	r1, [r3, #28]
 8003c74:	68bb      	ldr	r3, [r7, #8]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	021a      	lsls	r2, r3, #8
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	430a      	orrs	r2, r1
 8003c80:	61da      	str	r2, [r3, #28]
 8003c82:	e001      	b.n	8003c88 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3718      	adds	r7, #24
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
	...

08003c9c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	60b9      	str	r1, [r7, #8]
 8003ca6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cb2:	2b01      	cmp	r3, #1
 8003cb4:	d101      	bne.n	8003cba <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cb6:	2302      	movs	r3, #2
 8003cb8:	e0ae      	b.n	8003e18 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2201      	movs	r2, #1
 8003cbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2b0c      	cmp	r3, #12
 8003cc6:	f200 809f 	bhi.w	8003e08 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cca:	a201      	add	r2, pc, #4	@ (adr r2, 8003cd0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd0:	08003d05 	.word	0x08003d05
 8003cd4:	08003e09 	.word	0x08003e09
 8003cd8:	08003e09 	.word	0x08003e09
 8003cdc:	08003e09 	.word	0x08003e09
 8003ce0:	08003d45 	.word	0x08003d45
 8003ce4:	08003e09 	.word	0x08003e09
 8003ce8:	08003e09 	.word	0x08003e09
 8003cec:	08003e09 	.word	0x08003e09
 8003cf0:	08003d87 	.word	0x08003d87
 8003cf4:	08003e09 	.word	0x08003e09
 8003cf8:	08003e09 	.word	0x08003e09
 8003cfc:	08003e09 	.word	0x08003e09
 8003d00:	08003dc7 	.word	0x08003dc7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	68b9      	ldr	r1, [r7, #8]
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f000 fa24 	bl	8004158 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0208 	orr.w	r2, r2, #8
 8003d1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	699a      	ldr	r2, [r3, #24]
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	f022 0204 	bic.w	r2, r2, #4
 8003d2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	6999      	ldr	r1, [r3, #24]
 8003d36:	68bb      	ldr	r3, [r7, #8]
 8003d38:	691a      	ldr	r2, [r3, #16]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	619a      	str	r2, [r3, #24]
      break;
 8003d42:	e064      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	68b9      	ldr	r1, [r7, #8]
 8003d4a:	4618      	mov	r0, r3
 8003d4c:	f000 fa74 	bl	8004238 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	699a      	ldr	r2, [r3, #24]
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	6999      	ldr	r1, [r3, #24]
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	691b      	ldr	r3, [r3, #16]
 8003d7a:	021a      	lsls	r2, r3, #8
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	430a      	orrs	r2, r1
 8003d82:	619a      	str	r2, [r3, #24]
      break;
 8003d84:	e043      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	68b9      	ldr	r1, [r7, #8]
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	f000 fac9 	bl	8004324 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	69da      	ldr	r2, [r3, #28]
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f042 0208 	orr.w	r2, r2, #8
 8003da0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	69da      	ldr	r2, [r3, #28]
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	f022 0204 	bic.w	r2, r2, #4
 8003db0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	69d9      	ldr	r1, [r3, #28]
 8003db8:	68bb      	ldr	r3, [r7, #8]
 8003dba:	691a      	ldr	r2, [r3, #16]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	61da      	str	r2, [r3, #28]
      break;
 8003dc4:	e023      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68b9      	ldr	r1, [r7, #8]
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f000 fb1d 	bl	800440c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	69da      	ldr	r2, [r3, #28]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003de0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003df0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69d9      	ldr	r1, [r3, #28]
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	691b      	ldr	r3, [r3, #16]
 8003dfc:	021a      	lsls	r2, r3, #8
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	430a      	orrs	r2, r1
 8003e04:	61da      	str	r2, [r3, #28]
      break;
 8003e06:	e002      	b.n	8003e0e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e0c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e16:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d101      	bne.n	8003e3c <HAL_TIM_ConfigClockSource+0x1c>
 8003e38:	2302      	movs	r3, #2
 8003e3a:	e0b4      	b.n	8003fa6 <HAL_TIM_ConfigClockSource+0x186>
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e5a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e62:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68ba      	ldr	r2, [r7, #8]
 8003e6a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e74:	d03e      	beq.n	8003ef4 <HAL_TIM_ConfigClockSource+0xd4>
 8003e76:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e7a:	f200 8087 	bhi.w	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e7e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e82:	f000 8086 	beq.w	8003f92 <HAL_TIM_ConfigClockSource+0x172>
 8003e86:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e8a:	d87f      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e8c:	2b70      	cmp	r3, #112	@ 0x70
 8003e8e:	d01a      	beq.n	8003ec6 <HAL_TIM_ConfigClockSource+0xa6>
 8003e90:	2b70      	cmp	r3, #112	@ 0x70
 8003e92:	d87b      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e94:	2b60      	cmp	r3, #96	@ 0x60
 8003e96:	d050      	beq.n	8003f3a <HAL_TIM_ConfigClockSource+0x11a>
 8003e98:	2b60      	cmp	r3, #96	@ 0x60
 8003e9a:	d877      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003e9c:	2b50      	cmp	r3, #80	@ 0x50
 8003e9e:	d03c      	beq.n	8003f1a <HAL_TIM_ConfigClockSource+0xfa>
 8003ea0:	2b50      	cmp	r3, #80	@ 0x50
 8003ea2:	d873      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ea4:	2b40      	cmp	r3, #64	@ 0x40
 8003ea6:	d058      	beq.n	8003f5a <HAL_TIM_ConfigClockSource+0x13a>
 8003ea8:	2b40      	cmp	r3, #64	@ 0x40
 8003eaa:	d86f      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003eac:	2b30      	cmp	r3, #48	@ 0x30
 8003eae:	d064      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb0:	2b30      	cmp	r3, #48	@ 0x30
 8003eb2:	d86b      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d060      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003eb8:	2b20      	cmp	r3, #32
 8003eba:	d867      	bhi.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d05c      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003ec0:	2b10      	cmp	r3, #16
 8003ec2:	d05a      	beq.n	8003f7a <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	e062      	b.n	8003f8c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003eca:	683b      	ldr	r3, [r7, #0]
 8003ecc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ece:	683b      	ldr	r3, [r7, #0]
 8003ed0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ed2:	683b      	ldr	r3, [r7, #0]
 8003ed4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003ed6:	f000 fc93 	bl	8004800 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	689b      	ldr	r3, [r3, #8]
 8003ee0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003ee8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68ba      	ldr	r2, [r7, #8]
 8003ef0:	609a      	str	r2, [r3, #8]
      break;
 8003ef2:	e04f      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f04:	f000 fc7c 	bl	8004800 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f16:	609a      	str	r2, [r3, #8]
      break;
 8003f18:	e03c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f26:	461a      	mov	r2, r3
 8003f28:	f000 fb3a 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	2150      	movs	r1, #80	@ 0x50
 8003f32:	4618      	mov	r0, r3
 8003f34:	f000 fc49 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f38:	e02c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f42:	683b      	ldr	r3, [r7, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f46:	461a      	mov	r2, r3
 8003f48:	f000 fb96 	bl	8004678 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	2160      	movs	r1, #96	@ 0x60
 8003f52:	4618      	mov	r0, r3
 8003f54:	f000 fc39 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f58:	e01c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f66:	461a      	mov	r2, r3
 8003f68:	f000 fb1a 	bl	80045a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2140      	movs	r1, #64	@ 0x40
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fc29 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f78:	e00c      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	683b      	ldr	r3, [r7, #0]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4619      	mov	r1, r3
 8003f84:	4610      	mov	r0, r2
 8003f86:	f000 fc20 	bl	80047ca <TIM_ITRx_SetConfig>
      break;
 8003f8a:	e003      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003f90:	e000      	b.n	8003f94 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003f92:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2200      	movs	r2, #0
 8003fa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3710      	adds	r7, #16
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}

08003fae <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fb6:	bf00      	nop
 8003fb8:	370c      	adds	r7, #12
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc0:	4770      	bx	lr

08003fc2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd4:	4770      	bx	lr

08003fd6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003fd6:	b480      	push	{r7}
 8003fd8:	b083      	sub	sp, #12
 8003fda:	af00      	add	r7, sp, #0
 8003fdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003ff2:	bf00      	nop
 8003ff4:	370c      	adds	r7, #12
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
	...

08004000 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004000:	b480      	push	{r7}
 8004002:	b085      	sub	sp, #20
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
 8004008:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a46      	ldr	r2, [pc, #280]	@ (800412c <TIM_Base_SetConfig+0x12c>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d013      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800401e:	d00f      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a43      	ldr	r2, [pc, #268]	@ (8004130 <TIM_Base_SetConfig+0x130>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d00b      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	4a42      	ldr	r2, [pc, #264]	@ (8004134 <TIM_Base_SetConfig+0x134>)
 800402c:	4293      	cmp	r3, r2
 800402e:	d007      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	4a41      	ldr	r2, [pc, #260]	@ (8004138 <TIM_Base_SetConfig+0x138>)
 8004034:	4293      	cmp	r3, r2
 8004036:	d003      	beq.n	8004040 <TIM_Base_SetConfig+0x40>
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a40      	ldr	r2, [pc, #256]	@ (800413c <TIM_Base_SetConfig+0x13c>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d108      	bne.n	8004052 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004046:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	685b      	ldr	r3, [r3, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	4313      	orrs	r3, r2
 8004050:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a35      	ldr	r2, [pc, #212]	@ (800412c <TIM_Base_SetConfig+0x12c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d02b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004060:	d027      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a32      	ldr	r2, [pc, #200]	@ (8004130 <TIM_Base_SetConfig+0x130>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d023      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a31      	ldr	r2, [pc, #196]	@ (8004134 <TIM_Base_SetConfig+0x134>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d01f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	4a30      	ldr	r2, [pc, #192]	@ (8004138 <TIM_Base_SetConfig+0x138>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	4a2f      	ldr	r2, [pc, #188]	@ (800413c <TIM_Base_SetConfig+0x13c>)
 800407e:	4293      	cmp	r3, r2
 8004080:	d017      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	4a2e      	ldr	r2, [pc, #184]	@ (8004140 <TIM_Base_SetConfig+0x140>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d013      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a2d      	ldr	r2, [pc, #180]	@ (8004144 <TIM_Base_SetConfig+0x144>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00f      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4a2c      	ldr	r2, [pc, #176]	@ (8004148 <TIM_Base_SetConfig+0x148>)
 8004096:	4293      	cmp	r3, r2
 8004098:	d00b      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a2b      	ldr	r2, [pc, #172]	@ (800414c <TIM_Base_SetConfig+0x14c>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d007      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a2a      	ldr	r2, [pc, #168]	@ (8004150 <TIM_Base_SetConfig+0x150>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0xb2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a29      	ldr	r2, [pc, #164]	@ (8004154 <TIM_Base_SetConfig+0x154>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d108      	bne.n	80040c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	4313      	orrs	r3, r2
 80040c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	695b      	ldr	r3, [r3, #20]
 80040ce:	4313      	orrs	r3, r2
 80040d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	68fa      	ldr	r2, [r7, #12]
 80040d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040d8:	683b      	ldr	r3, [r7, #0]
 80040da:	689a      	ldr	r2, [r3, #8]
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	681a      	ldr	r2, [r3, #0]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	4a10      	ldr	r2, [pc, #64]	@ (800412c <TIM_Base_SetConfig+0x12c>)
 80040ec:	4293      	cmp	r3, r2
 80040ee:	d003      	beq.n	80040f8 <TIM_Base_SetConfig+0xf8>
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a12      	ldr	r2, [pc, #72]	@ (800413c <TIM_Base_SetConfig+0x13c>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	691b      	ldr	r3, [r3, #16]
 800410a:	f003 0301 	and.w	r3, r3, #1
 800410e:	2b01      	cmp	r3, #1
 8004110:	d105      	bne.n	800411e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	f023 0201 	bic.w	r2, r3, #1
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	611a      	str	r2, [r3, #16]
  }
}
 800411e:	bf00      	nop
 8004120:	3714      	adds	r7, #20
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	40010000 	.word	0x40010000
 8004130:	40000400 	.word	0x40000400
 8004134:	40000800 	.word	0x40000800
 8004138:	40000c00 	.word	0x40000c00
 800413c:	40010400 	.word	0x40010400
 8004140:	40014000 	.word	0x40014000
 8004144:	40014400 	.word	0x40014400
 8004148:	40014800 	.word	0x40014800
 800414c:	40001800 	.word	0x40001800
 8004150:	40001c00 	.word	0x40001c00
 8004154:	40002000 	.word	0x40002000

08004158 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004158:	b480      	push	{r7}
 800415a:	b087      	sub	sp, #28
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6a1b      	ldr	r3, [r3, #32]
 800416c:	f023 0201 	bic.w	r2, r3, #1
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004186:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0303 	bic.w	r3, r3, #3
 800418e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	4313      	orrs	r3, r2
 8004198:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800419a:	697b      	ldr	r3, [r7, #20]
 800419c:	f023 0302 	bic.w	r3, r3, #2
 80041a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	689b      	ldr	r3, [r3, #8]
 80041a6:	697a      	ldr	r2, [r7, #20]
 80041a8:	4313      	orrs	r3, r2
 80041aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a20      	ldr	r2, [pc, #128]	@ (8004230 <TIM_OC1_SetConfig+0xd8>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_OC1_SetConfig+0x64>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a1f      	ldr	r2, [pc, #124]	@ (8004234 <TIM_OC1_SetConfig+0xdc>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d10c      	bne.n	80041d6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80041bc:	697b      	ldr	r3, [r7, #20]
 80041be:	f023 0308 	bic.w	r3, r3, #8
 80041c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80041c4:	683b      	ldr	r3, [r7, #0]
 80041c6:	68db      	ldr	r3, [r3, #12]
 80041c8:	697a      	ldr	r2, [r7, #20]
 80041ca:	4313      	orrs	r3, r2
 80041cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80041ce:	697b      	ldr	r3, [r7, #20]
 80041d0:	f023 0304 	bic.w	r3, r3, #4
 80041d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a15      	ldr	r2, [pc, #84]	@ (8004230 <TIM_OC1_SetConfig+0xd8>)
 80041da:	4293      	cmp	r3, r2
 80041dc:	d003      	beq.n	80041e6 <TIM_OC1_SetConfig+0x8e>
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	4a14      	ldr	r2, [pc, #80]	@ (8004234 <TIM_OC1_SetConfig+0xdc>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d111      	bne.n	800420a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041ee:	693b      	ldr	r3, [r7, #16]
 80041f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	695b      	ldr	r3, [r3, #20]
 80041fa:	693a      	ldr	r2, [r7, #16]
 80041fc:	4313      	orrs	r3, r2
 80041fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	693a      	ldr	r2, [r7, #16]
 8004206:	4313      	orrs	r3, r2
 8004208:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	693a      	ldr	r2, [r7, #16]
 800420e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004216:	683b      	ldr	r3, [r7, #0]
 8004218:	685a      	ldr	r2, [r3, #4]
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	621a      	str	r2, [r3, #32]
}
 8004224:	bf00      	nop
 8004226:	371c      	adds	r7, #28
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	40010000 	.word	0x40010000
 8004234:	40010400 	.word	0x40010400

08004238 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004238:	b480      	push	{r7}
 800423a:	b087      	sub	sp, #28
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
 8004240:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a1b      	ldr	r3, [r3, #32]
 8004246:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	f023 0210 	bic.w	r2, r3, #16
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800426e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	021b      	lsls	r3, r3, #8
 8004276:	68fa      	ldr	r2, [r7, #12]
 8004278:	4313      	orrs	r3, r2
 800427a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	f023 0320 	bic.w	r3, r3, #32
 8004282:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	011b      	lsls	r3, r3, #4
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a22      	ldr	r2, [pc, #136]	@ (800431c <TIM_OC2_SetConfig+0xe4>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d003      	beq.n	80042a0 <TIM_OC2_SetConfig+0x68>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	4a21      	ldr	r2, [pc, #132]	@ (8004320 <TIM_OC2_SetConfig+0xe8>)
 800429c:	4293      	cmp	r3, r2
 800429e:	d10d      	bne.n	80042bc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80042a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	011b      	lsls	r3, r3, #4
 80042ae:	697a      	ldr	r2, [r7, #20]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80042b4:	697b      	ldr	r3, [r7, #20]
 80042b6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042ba:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	4a17      	ldr	r2, [pc, #92]	@ (800431c <TIM_OC2_SetConfig+0xe4>)
 80042c0:	4293      	cmp	r3, r2
 80042c2:	d003      	beq.n	80042cc <TIM_OC2_SetConfig+0x94>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	4a16      	ldr	r2, [pc, #88]	@ (8004320 <TIM_OC2_SetConfig+0xe8>)
 80042c8:	4293      	cmp	r3, r2
 80042ca:	d113      	bne.n	80042f4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80042cc:	693b      	ldr	r3, [r7, #16]
 80042ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80042dc:	683b      	ldr	r3, [r7, #0]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	009b      	lsls	r3, r3, #2
 80042e2:	693a      	ldr	r2, [r7, #16]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	699b      	ldr	r3, [r3, #24]
 80042ec:	009b      	lsls	r3, r3, #2
 80042ee:	693a      	ldr	r2, [r7, #16]
 80042f0:	4313      	orrs	r3, r2
 80042f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	693a      	ldr	r2, [r7, #16]
 80042f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	68fa      	ldr	r2, [r7, #12]
 80042fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	685a      	ldr	r2, [r3, #4]
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	621a      	str	r2, [r3, #32]
}
 800430e:	bf00      	nop
 8004310:	371c      	adds	r7, #28
 8004312:	46bd      	mov	sp, r7
 8004314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004318:	4770      	bx	lr
 800431a:	bf00      	nop
 800431c:	40010000 	.word	0x40010000
 8004320:	40010400 	.word	0x40010400

08004324 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004324:	b480      	push	{r7}
 8004326:	b087      	sub	sp, #28
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
 800432c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	69db      	ldr	r3, [r3, #28]
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	f023 0303 	bic.w	r3, r3, #3
 800435a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800435c:	683b      	ldr	r3, [r7, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	68fa      	ldr	r2, [r7, #12]
 8004362:	4313      	orrs	r3, r2
 8004364:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004366:	697b      	ldr	r3, [r7, #20]
 8004368:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800436c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	021b      	lsls	r3, r3, #8
 8004374:	697a      	ldr	r2, [r7, #20]
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	4a21      	ldr	r2, [pc, #132]	@ (8004404 <TIM_OC3_SetConfig+0xe0>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d003      	beq.n	800438a <TIM_OC3_SetConfig+0x66>
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	4a20      	ldr	r2, [pc, #128]	@ (8004408 <TIM_OC3_SetConfig+0xe4>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d10d      	bne.n	80043a6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800438a:	697b      	ldr	r3, [r7, #20]
 800438c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004390:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	68db      	ldr	r3, [r3, #12]
 8004396:	021b      	lsls	r3, r3, #8
 8004398:	697a      	ldr	r2, [r7, #20]
 800439a:	4313      	orrs	r3, r2
 800439c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80043a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	4a16      	ldr	r2, [pc, #88]	@ (8004404 <TIM_OC3_SetConfig+0xe0>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d003      	beq.n	80043b6 <TIM_OC3_SetConfig+0x92>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	4a15      	ldr	r2, [pc, #84]	@ (8004408 <TIM_OC3_SetConfig+0xe4>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d113      	bne.n	80043de <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	695b      	ldr	r3, [r3, #20]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	011b      	lsls	r3, r3, #4
 80043d8:	693a      	ldr	r2, [r7, #16]
 80043da:	4313      	orrs	r3, r2
 80043dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	693a      	ldr	r2, [r7, #16]
 80043e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	68fa      	ldr	r2, [r7, #12]
 80043e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	697a      	ldr	r2, [r7, #20]
 80043f6:	621a      	str	r2, [r3, #32]
}
 80043f8:	bf00      	nop
 80043fa:	371c      	adds	r7, #28
 80043fc:	46bd      	mov	sp, r7
 80043fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004402:	4770      	bx	lr
 8004404:	40010000 	.word	0x40010000
 8004408:	40010400 	.word	0x40010400

0800440c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800440c:	b480      	push	{r7}
 800440e:	b087      	sub	sp, #28
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a1b      	ldr	r3, [r3, #32]
 800441a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	6a1b      	ldr	r3, [r3, #32]
 8004420:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	69db      	ldr	r3, [r3, #28]
 8004432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	021b      	lsls	r3, r3, #8
 800444a:	68fa      	ldr	r2, [r7, #12]
 800444c:	4313      	orrs	r3, r2
 800444e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	689b      	ldr	r3, [r3, #8]
 800445c:	031b      	lsls	r3, r3, #12
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a12      	ldr	r2, [pc, #72]	@ (80044b0 <TIM_OC4_SetConfig+0xa4>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_OC4_SetConfig+0x68>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a11      	ldr	r2, [pc, #68]	@ (80044b4 <TIM_OC4_SetConfig+0xa8>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d109      	bne.n	8004488 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004474:	697b      	ldr	r3, [r7, #20]
 8004476:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800447a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800447c:	683b      	ldr	r3, [r7, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	019b      	lsls	r3, r3, #6
 8004482:	697a      	ldr	r2, [r7, #20]
 8004484:	4313      	orrs	r3, r2
 8004486:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	697a      	ldr	r2, [r7, #20]
 800448c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	68fa      	ldr	r2, [r7, #12]
 8004492:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	685a      	ldr	r2, [r3, #4]
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	693a      	ldr	r2, [r7, #16]
 80044a0:	621a      	str	r2, [r3, #32]
}
 80044a2:	bf00      	nop
 80044a4:	371c      	adds	r7, #28
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
 80044ae:	bf00      	nop
 80044b0:	40010000 	.word	0x40010000
 80044b4:	40010400 	.word	0x40010400

080044b8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80044b8:	b480      	push	{r7}
 80044ba:	b087      	sub	sp, #28
 80044bc:	af00      	add	r7, sp, #0
 80044be:	60f8      	str	r0, [r7, #12]
 80044c0:	60b9      	str	r1, [r7, #8]
 80044c2:	607a      	str	r2, [r7, #4]
 80044c4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	6a1b      	ldr	r3, [r3, #32]
 80044d0:	f023 0201 	bic.w	r2, r3, #1
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	699b      	ldr	r3, [r3, #24]
 80044dc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	4a28      	ldr	r2, [pc, #160]	@ (8004584 <TIM_TI1_SetConfig+0xcc>)
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d01b      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ec:	d017      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a25      	ldr	r2, [pc, #148]	@ (8004588 <TIM_TI1_SetConfig+0xd0>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d013      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	4a24      	ldr	r2, [pc, #144]	@ (800458c <TIM_TI1_SetConfig+0xd4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d00f      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	4a23      	ldr	r2, [pc, #140]	@ (8004590 <TIM_TI1_SetConfig+0xd8>)
 8004502:	4293      	cmp	r3, r2
 8004504:	d00b      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	4a22      	ldr	r2, [pc, #136]	@ (8004594 <TIM_TI1_SetConfig+0xdc>)
 800450a:	4293      	cmp	r3, r2
 800450c:	d007      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4a21      	ldr	r2, [pc, #132]	@ (8004598 <TIM_TI1_SetConfig+0xe0>)
 8004512:	4293      	cmp	r3, r2
 8004514:	d003      	beq.n	800451e <TIM_TI1_SetConfig+0x66>
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	4a20      	ldr	r2, [pc, #128]	@ (800459c <TIM_TI1_SetConfig+0xe4>)
 800451a:	4293      	cmp	r3, r2
 800451c:	d101      	bne.n	8004522 <TIM_TI1_SetConfig+0x6a>
 800451e:	2301      	movs	r3, #1
 8004520:	e000      	b.n	8004524 <TIM_TI1_SetConfig+0x6c>
 8004522:	2300      	movs	r3, #0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d008      	beq.n	800453a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	f023 0303 	bic.w	r3, r3, #3
 800452e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004530:	697a      	ldr	r2, [r7, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4313      	orrs	r3, r2
 8004536:	617b      	str	r3, [r7, #20]
 8004538:	e003      	b.n	8004542 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	f043 0301 	orr.w	r3, r3, #1
 8004540:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800454a:	683b      	ldr	r3, [r7, #0]
 800454c:	011b      	lsls	r3, r3, #4
 800454e:	b2db      	uxtb	r3, r3
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	4313      	orrs	r3, r2
 8004554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f023 030a 	bic.w	r3, r3, #10
 800455c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f003 030a 	and.w	r3, r3, #10
 8004564:	693a      	ldr	r2, [r7, #16]
 8004566:	4313      	orrs	r3, r2
 8004568:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	697a      	ldr	r2, [r7, #20]
 800456e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]
}
 8004576:	bf00      	nop
 8004578:	371c      	adds	r7, #28
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop
 8004584:	40010000 	.word	0x40010000
 8004588:	40000400 	.word	0x40000400
 800458c:	40000800 	.word	0x40000800
 8004590:	40000c00 	.word	0x40000c00
 8004594:	40010400 	.word	0x40010400
 8004598:	40014000 	.word	0x40014000
 800459c:	40001800 	.word	0x40001800

080045a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b087      	sub	sp, #28
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	60f8      	str	r0, [r7, #12]
 80045a8:	60b9      	str	r1, [r7, #8]
 80045aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	6a1b      	ldr	r3, [r3, #32]
 80045b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	6a1b      	ldr	r3, [r3, #32]
 80045b6:	f023 0201 	bic.w	r2, r3, #1
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	699b      	ldr	r3, [r3, #24]
 80045c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	011b      	lsls	r3, r3, #4
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80045d6:	697b      	ldr	r3, [r7, #20]
 80045d8:	f023 030a 	bic.w	r3, r3, #10
 80045dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80045de:	697a      	ldr	r2, [r7, #20]
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4313      	orrs	r3, r2
 80045e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr

080045fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045fe:	b480      	push	{r7}
 8004600:	b087      	sub	sp, #28
 8004602:	af00      	add	r7, sp, #0
 8004604:	60f8      	str	r0, [r7, #12]
 8004606:	60b9      	str	r1, [r7, #8]
 8004608:	607a      	str	r2, [r7, #4]
 800460a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	6a1b      	ldr	r3, [r3, #32]
 8004610:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	6a1b      	ldr	r3, [r3, #32]
 8004616:	f023 0210 	bic.w	r2, r3, #16
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004624:	693b      	ldr	r3, [r7, #16]
 8004626:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800462a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	021b      	lsls	r3, r3, #8
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	4313      	orrs	r3, r2
 8004634:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800463c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	031b      	lsls	r3, r3, #12
 8004642:	b29b      	uxth	r3, r3
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	4313      	orrs	r3, r2
 8004648:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800464a:	697b      	ldr	r3, [r7, #20]
 800464c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004650:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	011b      	lsls	r3, r3, #4
 8004656:	f003 03a0 	and.w	r3, r3, #160	@ 0xa0
 800465a:	697a      	ldr	r2, [r7, #20]
 800465c:	4313      	orrs	r3, r2
 800465e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	693a      	ldr	r2, [r7, #16]
 8004664:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	697a      	ldr	r2, [r7, #20]
 800466a:	621a      	str	r2, [r3, #32]
}
 800466c:	bf00      	nop
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004676:	4770      	bx	lr

08004678 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6a1b      	ldr	r3, [r3, #32]
 8004688:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6a1b      	ldr	r3, [r3, #32]
 800468e:	f023 0210 	bic.w	r2, r3, #16
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	699b      	ldr	r3, [r3, #24]
 800469a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800469c:	693b      	ldr	r3, [r7, #16]
 800469e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	693a      	ldr	r2, [r7, #16]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80046ae:	697b      	ldr	r3, [r7, #20]
 80046b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80046b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046b6:	68bb      	ldr	r3, [r7, #8]
 80046b8:	011b      	lsls	r3, r3, #4
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	697a      	ldr	r2, [r7, #20]
 80046ca:	621a      	str	r2, [r3, #32]
}
 80046cc:	bf00      	nop
 80046ce:	371c      	adds	r7, #28
 80046d0:	46bd      	mov	sp, r7
 80046d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d6:	4770      	bx	lr

080046d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80046d8:	b480      	push	{r7}
 80046da:	b087      	sub	sp, #28
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]
 80046e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a1b      	ldr	r3, [r3, #32]
 80046f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	69db      	ldr	r3, [r3, #28]
 80046fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f023 0303 	bic.w	r3, r3, #3
 8004704:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	4313      	orrs	r3, r2
 800470c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004714:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	011b      	lsls	r3, r3, #4
 800471a:	b2db      	uxtb	r3, r3
 800471c:	693a      	ldr	r2, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004722:	697b      	ldr	r3, [r7, #20]
 8004724:	f423 6320 	bic.w	r3, r3, #2560	@ 0xa00
 8004728:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	021b      	lsls	r3, r3, #8
 800472e:	f403 6320 	and.w	r3, r3, #2560	@ 0xa00
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	4313      	orrs	r3, r2
 8004736:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	693a      	ldr	r2, [r7, #16]
 800473c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	697a      	ldr	r2, [r7, #20]
 8004742:	621a      	str	r2, [r3, #32]
}
 8004744:	bf00      	nop
 8004746:	371c      	adds	r7, #28
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
 800475c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	6a1b      	ldr	r3, [r3, #32]
 8004762:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6a1b      	ldr	r3, [r3, #32]
 8004768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	69db      	ldr	r3, [r3, #28]
 8004774:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800477c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	693a      	ldr	r2, [r7, #16]
 8004784:	4313      	orrs	r3, r2
 8004786:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004788:	693b      	ldr	r3, [r7, #16]
 800478a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800478e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	031b      	lsls	r3, r3, #12
 8004794:	b29b      	uxth	r3, r3
 8004796:	693a      	ldr	r2, [r7, #16]
 8004798:	4313      	orrs	r3, r2
 800479a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800479c:	697b      	ldr	r3, [r7, #20]
 800479e:	f423 4320 	bic.w	r3, r3, #40960	@ 0xa000
 80047a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80047a4:	68bb      	ldr	r3, [r7, #8]
 80047a6:	031b      	lsls	r3, r3, #12
 80047a8:	f403 4320 	and.w	r3, r3, #40960	@ 0xa000
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	4313      	orrs	r3, r2
 80047b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	693a      	ldr	r2, [r7, #16]
 80047b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	697a      	ldr	r2, [r7, #20]
 80047bc:	621a      	str	r2, [r3, #32]
}
 80047be:	bf00      	nop
 80047c0:	371c      	adds	r7, #28
 80047c2:	46bd      	mov	sp, r7
 80047c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c8:	4770      	bx	lr

080047ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80047ca:	b480      	push	{r7}
 80047cc:	b085      	sub	sp, #20
 80047ce:	af00      	add	r7, sp, #0
 80047d0:	6078      	str	r0, [r7, #4]
 80047d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	689b      	ldr	r3, [r3, #8]
 80047d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	4313      	orrs	r3, r2
 80047e8:	f043 0307 	orr.w	r3, r3, #7
 80047ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68fa      	ldr	r2, [r7, #12]
 80047f2:	609a      	str	r2, [r3, #8]
}
 80047f4:	bf00      	nop
 80047f6:	3714      	adds	r7, #20
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004800:	b480      	push	{r7}
 8004802:	b087      	sub	sp, #28
 8004804:	af00      	add	r7, sp, #0
 8004806:	60f8      	str	r0, [r7, #12]
 8004808:	60b9      	str	r1, [r7, #8]
 800480a:	607a      	str	r2, [r7, #4]
 800480c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	689b      	ldr	r3, [r3, #8]
 8004812:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800481a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	021a      	lsls	r2, r3, #8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	431a      	orrs	r2, r3
 8004824:	68bb      	ldr	r3, [r7, #8]
 8004826:	4313      	orrs	r3, r2
 8004828:	697a      	ldr	r2, [r7, #20]
 800482a:	4313      	orrs	r3, r2
 800482c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	609a      	str	r2, [r3, #8]
}
 8004834:	bf00      	nop
 8004836:	371c      	adds	r7, #28
 8004838:	46bd      	mov	sp, r7
 800483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483e:	4770      	bx	lr

08004840 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004840:	b480      	push	{r7}
 8004842:	b085      	sub	sp, #20
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
 8004848:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d101      	bne.n	8004858 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004854:	2302      	movs	r3, #2
 8004856:	e05a      	b.n	800490e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	2201      	movs	r2, #1
 800485c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2202      	movs	r2, #2
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800487e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004880:	683b      	ldr	r3, [r7, #0]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	68fa      	ldr	r2, [r7, #12]
 8004886:	4313      	orrs	r3, r2
 8004888:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	68fa      	ldr	r2, [r7, #12]
 8004890:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	4a21      	ldr	r2, [pc, #132]	@ (800491c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d022      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80048a4:	d01d      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a1d      	ldr	r2, [pc, #116]	@ (8004920 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	d018      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	4a1b      	ldr	r2, [pc, #108]	@ (8004924 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80048b6:	4293      	cmp	r3, r2
 80048b8:	d013      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4a1a      	ldr	r2, [pc, #104]	@ (8004928 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80048c0:	4293      	cmp	r3, r2
 80048c2:	d00e      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a18      	ldr	r2, [pc, #96]	@ (800492c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80048ca:	4293      	cmp	r3, r2
 80048cc:	d009      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	4a17      	ldr	r2, [pc, #92]	@ (8004930 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80048d4:	4293      	cmp	r3, r2
 80048d6:	d004      	beq.n	80048e2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	4a15      	ldr	r2, [pc, #84]	@ (8004934 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80048de:	4293      	cmp	r3, r2
 80048e0:	d10c      	bne.n	80048fc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80048e2:	68bb      	ldr	r3, [r7, #8]
 80048e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80048e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	68ba      	ldr	r2, [r7, #8]
 80048fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2200      	movs	r2, #0
 8004908:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800490c:	2300      	movs	r3, #0
}
 800490e:	4618      	mov	r0, r3
 8004910:	3714      	adds	r7, #20
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	40010000 	.word	0x40010000
 8004920:	40000400 	.word	0x40000400
 8004924:	40000800 	.word	0x40000800
 8004928:	40000c00 	.word	0x40000c00
 800492c:	40010400 	.word	0x40010400
 8004930:	40014000 	.word	0x40014000
 8004934:	40001800 	.word	0x40001800

08004938 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004938:	b480      	push	{r7}
 800493a:	b085      	sub	sp, #20
 800493c:	af00      	add	r7, sp, #0
 800493e:	6078      	str	r0, [r7, #4]
 8004940:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004942:	2300      	movs	r3, #0
 8004944:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800494c:	2b01      	cmp	r3, #1
 800494e:	d101      	bne.n	8004954 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004950:	2302      	movs	r3, #2
 8004952:	e03d      	b.n	80049d0 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	2201      	movs	r2, #1
 8004958:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	68db      	ldr	r3, [r3, #12]
 8004966:	4313      	orrs	r3, r2
 8004968:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	4313      	orrs	r3, r2
 8004976:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	4313      	orrs	r3, r2
 8004984:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	4313      	orrs	r3, r2
 8004992:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	4313      	orrs	r3, r2
 80049ae:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80049b6:	683b      	ldr	r3, [r7, #0]
 80049b8:	69db      	ldr	r3, [r3, #28]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	68fa      	ldr	r2, [r7, #12]
 80049c4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	2200      	movs	r2, #0
 80049ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80049dc:	b480      	push	{r7}
 80049de:	b083      	sub	sp, #12
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80049e4:	bf00      	nop
 80049e6:	370c      	adds	r7, #12
 80049e8:	46bd      	mov	sp, r7
 80049ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b083      	sub	sp, #12
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80049f8:	bf00      	nop
 80049fa:	370c      	adds	r7, #12
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr

08004a04 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b082      	sub	sp, #8
 8004a08:	af00      	add	r7, sp, #0
 8004a0a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d101      	bne.n	8004a16 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a12:	2301      	movs	r3, #1
 8004a14:	e042      	b.n	8004a9c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a1c:	b2db      	uxtb	r3, r3
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d106      	bne.n	8004a30 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2200      	movs	r2, #0
 8004a26:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f7fc ffa4 	bl	8001978 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2224      	movs	r2, #36	@ 0x24
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004a46:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 fcdb 	bl	8005404 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	691a      	ldr	r2, [r3, #16]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004a5c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	695a      	ldr	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004a6c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	68da      	ldr	r2, [r3, #12]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004a7c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2200      	movs	r2, #0
 8004a82:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2220      	movs	r2, #32
 8004a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2220      	movs	r2, #32
 8004a90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	3708      	adds	r7, #8
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}

08004aa4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004aa4:	b580      	push	{r7, lr}
 8004aa6:	b084      	sub	sp, #16
 8004aa8:	af00      	add	r7, sp, #0
 8004aaa:	60f8      	str	r0, [r7, #12]
 8004aac:	60b9      	str	r1, [r7, #8]
 8004aae:	4613      	mov	r3, r2
 8004ab0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b20      	cmp	r3, #32
 8004abc:	d112      	bne.n	8004ae4 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004abe:	68bb      	ldr	r3, [r7, #8]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d002      	beq.n	8004aca <HAL_UART_Receive_IT+0x26>
 8004ac4:	88fb      	ldrh	r3, [r7, #6]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d101      	bne.n	8004ace <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004aca:	2301      	movs	r3, #1
 8004acc:	e00b      	b.n	8004ae6 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004ad4:	88fb      	ldrh	r3, [r7, #6]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	68b9      	ldr	r1, [r7, #8]
 8004ada:	68f8      	ldr	r0, [r7, #12]
 8004adc:	f000 faba 	bl	8005054 <UART_Start_Receive_IT>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	e000      	b.n	8004ae6 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004ae4:	2302      	movs	r3, #2
  }
}
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	3710      	adds	r7, #16
 8004aea:	46bd      	mov	sp, r7
 8004aec:	bd80      	pop	{r7, pc}
	...

08004af0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b0ba      	sub	sp, #232	@ 0xe8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	695b      	ldr	r3, [r3, #20]
 8004b12:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004b22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b26:	f003 030f 	and.w	r3, r3, #15
 8004b2a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004b2e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0320 	and.w	r3, r3, #32
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d009      	beq.n	8004b56 <HAL_UART_IRQHandler+0x66>
 8004b42:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b46:	f003 0320 	and.w	r3, r3, #32
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d003      	beq.n	8004b56 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004b4e:	6878      	ldr	r0, [r7, #4]
 8004b50:	f000 fb99 	bl	8005286 <UART_Receive_IT>
      return;
 8004b54:	e25b      	b.n	800500e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004b56:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f000 80de 	beq.w	8004d1c <HAL_UART_IRQHandler+0x22c>
 8004b60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b64:	f003 0301 	and.w	r3, r3, #1
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d106      	bne.n	8004b7a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b70:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	f000 80d1 	beq.w	8004d1c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d00b      	beq.n	8004b9e <HAL_UART_IRQHandler+0xae>
 8004b86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d005      	beq.n	8004b9e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b96:	f043 0201 	orr.w	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ba2:	f003 0304 	and.w	r3, r3, #4
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d00b      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xd2>
 8004baa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bae:	f003 0301 	and.w	r3, r3, #1
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d005      	beq.n	8004bc2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bba:	f043 0202 	orr.w	r2, r3, #2
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004bc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bc6:	f003 0302 	and.w	r3, r3, #2
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d00b      	beq.n	8004be6 <HAL_UART_IRQHandler+0xf6>
 8004bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004bd2:	f003 0301 	and.w	r3, r3, #1
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d005      	beq.n	8004be6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bde:	f043 0204 	orr.w	r2, r3, #4
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004be6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004bea:	f003 0308 	and.w	r3, r3, #8
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d011      	beq.n	8004c16 <HAL_UART_IRQHandler+0x126>
 8004bf2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004bf6:	f003 0320 	and.w	r3, r3, #32
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d105      	bne.n	8004c0a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004bfe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c02:	f003 0301 	and.w	r3, r3, #1
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d005      	beq.n	8004c16 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c0e:	f043 0208 	orr.w	r2, r3, #8
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	f000 81f2 	beq.w	8005004 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c24:	f003 0320 	and.w	r3, r3, #32
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d008      	beq.n	8004c3e <HAL_UART_IRQHandler+0x14e>
 8004c2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c30:	f003 0320 	and.w	r3, r3, #32
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d002      	beq.n	8004c3e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f000 fb24 	bl	8005286 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c48:	2b40      	cmp	r3, #64	@ 0x40
 8004c4a:	bf0c      	ite	eq
 8004c4c:	2301      	moveq	r3, #1
 8004c4e:	2300      	movne	r3, #0
 8004c50:	b2db      	uxtb	r3, r3
 8004c52:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c5a:	f003 0308 	and.w	r3, r3, #8
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d103      	bne.n	8004c6a <HAL_UART_IRQHandler+0x17a>
 8004c62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d04f      	beq.n	8004d0a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f000 fa2c 	bl	80050c8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c7a:	2b40      	cmp	r3, #64	@ 0x40
 8004c7c:	d141      	bne.n	8004d02 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	3314      	adds	r3, #20
 8004c84:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c88:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c8c:	e853 3f00 	ldrex	r3, [r3]
 8004c90:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c94:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	3314      	adds	r3, #20
 8004ca6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004caa:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004cae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004cc2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d1d9      	bne.n	8004c7e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	d013      	beq.n	8004cfa <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cd6:	4a7e      	ldr	r2, [pc, #504]	@ (8004ed0 <HAL_UART_IRQHandler+0x3e0>)
 8004cd8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7fd fc3c 	bl	800255c <HAL_DMA_Abort_IT>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d016      	beq.n	8004d18 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004cf0:	687a      	ldr	r2, [r7, #4]
 8004cf2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004cf4:	4610      	mov	r0, r2
 8004cf6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	e00e      	b.n	8004d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f000 f994 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d00:	e00a      	b.n	8004d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f000 f990 	bl	8005028 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d08:	e006      	b.n	8004d18 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f000 f98c 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	2200      	movs	r2, #0
 8004d14:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004d16:	e175      	b.n	8005004 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d18:	bf00      	nop
    return;
 8004d1a:	e173      	b.n	8005004 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	f040 814f 	bne.w	8004fc4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004d26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2a:	f003 0310 	and.w	r3, r3, #16
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8148 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d38:	f003 0310 	and.w	r3, r3, #16
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	f000 8141 	beq.w	8004fc4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004d42:	2300      	movs	r3, #0
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	60bb      	str	r3, [r7, #8]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	60bb      	str	r3, [r7, #8]
 8004d56:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	695b      	ldr	r3, [r3, #20]
 8004d5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d62:	2b40      	cmp	r3, #64	@ 0x40
 8004d64:	f040 80b6 	bne.w	8004ed4 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	685b      	ldr	r3, [r3, #4]
 8004d70:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d74:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 8145 	beq.w	8005008 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d86:	429a      	cmp	r2, r3
 8004d88:	f080 813e 	bcs.w	8005008 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d92:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d98:	69db      	ldr	r3, [r3, #28]
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d9e:	f000 8088 	beq.w	8004eb2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	330c      	adds	r3, #12
 8004da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004db8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004dbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004dc0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	330c      	adds	r3, #12
 8004dca:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004dce:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004dd2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dd6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004dda:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004dde:	e841 2300 	strex	r3, r2, [r1]
 8004de2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004de6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d1d9      	bne.n	8004da2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	3314      	adds	r3, #20
 8004df4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004df6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004df8:	e853 3f00 	ldrex	r3, [r3]
 8004dfc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004dfe:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004e00:	f023 0301 	bic.w	r3, r3, #1
 8004e04:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	3314      	adds	r3, #20
 8004e0e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004e12:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004e16:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e18:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004e1a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004e1e:	e841 2300 	strex	r3, r2, [r1]
 8004e22:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004e24:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d1e1      	bne.n	8004dee <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	3314      	adds	r3, #20
 8004e30:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e32:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004e34:	e853 3f00 	ldrex	r3, [r3]
 8004e38:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004e3a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004e3c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004e40:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	3314      	adds	r3, #20
 8004e4a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004e4e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e52:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004e54:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004e56:	e841 2300 	strex	r3, r2, [r1]
 8004e5a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004e5c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d1e3      	bne.n	8004e2a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	2220      	movs	r2, #32
 8004e66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2200      	movs	r2, #0
 8004e6e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	330c      	adds	r3, #12
 8004e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e78:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e7a:	e853 3f00 	ldrex	r3, [r3]
 8004e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e80:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e82:	f023 0310 	bic.w	r3, r3, #16
 8004e86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	330c      	adds	r3, #12
 8004e90:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e94:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e96:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e98:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e9a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e9c:	e841 2300 	strex	r3, r2, [r1]
 8004ea0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004ea2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d1e3      	bne.n	8004e70 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004eac:	4618      	mov	r0, r3
 8004eae:	f7fd fae5 	bl	800247c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	2202      	movs	r2, #2
 8004eb6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	1ad3      	subs	r3, r2, r3
 8004ec4:	b29b      	uxth	r3, r3
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	6878      	ldr	r0, [r7, #4]
 8004eca:	f000 f8b7 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004ece:	e09b      	b.n	8005008 <HAL_UART_IRQHandler+0x518>
 8004ed0:	0800518f 	.word	0x0800518f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004edc:	b29b      	uxth	r3, r3
 8004ede:	1ad3      	subs	r3, r2, r3
 8004ee0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004ee8:	b29b      	uxth	r3, r3
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 808e 	beq.w	800500c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004ef0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f000 8089 	beq.w	800500c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	330c      	adds	r3, #12
 8004f00:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f02:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f04:	e853 3f00 	ldrex	r3, [r3]
 8004f08:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004f0a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004f10:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	330c      	adds	r3, #12
 8004f1a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004f1e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004f20:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f22:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004f24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004f26:	e841 2300 	strex	r3, r2, [r1]
 8004f2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004f2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d1e3      	bne.n	8004efa <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	3314      	adds	r3, #20
 8004f38:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f3c:	e853 3f00 	ldrex	r3, [r3]
 8004f40:	623b      	str	r3, [r7, #32]
   return(result);
 8004f42:	6a3b      	ldr	r3, [r7, #32]
 8004f44:	f023 0301 	bic.w	r3, r3, #1
 8004f48:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	3314      	adds	r3, #20
 8004f52:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004f56:	633a      	str	r2, [r7, #48]	@ 0x30
 8004f58:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f5a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004f5c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004f5e:	e841 2300 	strex	r3, r2, [r1]
 8004f62:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1e3      	bne.n	8004f32 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	2220      	movs	r2, #32
 8004f6e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	330c      	adds	r3, #12
 8004f7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f80:	693b      	ldr	r3, [r7, #16]
 8004f82:	e853 3f00 	ldrex	r3, [r3]
 8004f86:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	f023 0310 	bic.w	r3, r3, #16
 8004f8e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	330c      	adds	r3, #12
 8004f98:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f9c:	61fa      	str	r2, [r7, #28]
 8004f9e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fa0:	69b9      	ldr	r1, [r7, #24]
 8004fa2:	69fa      	ldr	r2, [r7, #28]
 8004fa4:	e841 2300 	strex	r3, r2, [r1]
 8004fa8:	617b      	str	r3, [r7, #20]
   return(result);
 8004faa:	697b      	ldr	r3, [r7, #20]
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d1e3      	bne.n	8004f78 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2202      	movs	r2, #2
 8004fb4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004fb6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fba:	4619      	mov	r1, r3
 8004fbc:	6878      	ldr	r0, [r7, #4]
 8004fbe:	f000 f83d 	bl	800503c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fc2:	e023      	b.n	800500c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004fc4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fc8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d009      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x4f4>
 8004fd0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004fd4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d003      	beq.n	8004fe4 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f000 f8ea 	bl	80051b6 <UART_Transmit_IT>
    return;
 8004fe2:	e014      	b.n	800500e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004fe8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d00e      	beq.n	800500e <HAL_UART_IRQHandler+0x51e>
 8004ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ff4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d008      	beq.n	800500e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f000 f92a 	bl	8005256 <UART_EndTransmit_IT>
    return;
 8005002:	e004      	b.n	800500e <HAL_UART_IRQHandler+0x51e>
    return;
 8005004:	bf00      	nop
 8005006:	e002      	b.n	800500e <HAL_UART_IRQHandler+0x51e>
      return;
 8005008:	bf00      	nop
 800500a:	e000      	b.n	800500e <HAL_UART_IRQHandler+0x51e>
      return;
 800500c:	bf00      	nop
  }
}
 800500e:	37e8      	adds	r7, #232	@ 0xe8
 8005010:	46bd      	mov	sp, r7
 8005012:	bd80      	pop	{r7, pc}

08005014 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800501c:	bf00      	nop
 800501e:	370c      	adds	r7, #12
 8005020:	46bd      	mov	sp, r7
 8005022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005026:	4770      	bx	lr

08005028 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005028:	b480      	push	{r7}
 800502a:	b083      	sub	sp, #12
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005030:	bf00      	nop
 8005032:	370c      	adds	r7, #12
 8005034:	46bd      	mov	sp, r7
 8005036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800503a:	4770      	bx	lr

0800503c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800503c:	b480      	push	{r7}
 800503e:	b083      	sub	sp, #12
 8005040:	af00      	add	r7, sp, #0
 8005042:	6078      	str	r0, [r7, #4]
 8005044:	460b      	mov	r3, r1
 8005046:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005048:	bf00      	nop
 800504a:	370c      	adds	r7, #12
 800504c:	46bd      	mov	sp, r7
 800504e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005052:	4770      	bx	lr

08005054 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005054:	b480      	push	{r7}
 8005056:	b085      	sub	sp, #20
 8005058:	af00      	add	r7, sp, #0
 800505a:	60f8      	str	r0, [r7, #12]
 800505c:	60b9      	str	r1, [r7, #8]
 800505e:	4613      	mov	r3, r2
 8005060:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	88fa      	ldrh	r2, [r7, #6]
 800506c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	88fa      	ldrh	r2, [r7, #6]
 8005072:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	2200      	movs	r2, #0
 8005078:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2222      	movs	r2, #34	@ 0x22
 800507e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d007      	beq.n	800509a <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005098:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	695a      	ldr	r2, [r3, #20]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f042 0201 	orr.w	r2, r2, #1
 80050a8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f042 0220 	orr.w	r2, r2, #32
 80050b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3714      	adds	r7, #20
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b095      	sub	sp, #84	@ 0x54
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	330c      	adds	r3, #12
 80050d6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050da:	e853 3f00 	ldrex	r3, [r3]
 80050de:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050f0:	643a      	str	r2, [r7, #64]	@ 0x40
 80050f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050f4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050f6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050f8:	e841 2300 	strex	r3, r2, [r1]
 80050fc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050fe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e5      	bne.n	80050d0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	3314      	adds	r3, #20
 800510a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800510c:	6a3b      	ldr	r3, [r7, #32]
 800510e:	e853 3f00 	ldrex	r3, [r3]
 8005112:	61fb      	str	r3, [r7, #28]
   return(result);
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	f023 0301 	bic.w	r3, r3, #1
 800511a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	3314      	adds	r3, #20
 8005122:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005124:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005126:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005128:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800512a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800512c:	e841 2300 	strex	r3, r2, [r1]
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e5      	bne.n	8005104 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800513c:	2b01      	cmp	r3, #1
 800513e:	d119      	bne.n	8005174 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	330c      	adds	r3, #12
 8005146:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	e853 3f00 	ldrex	r3, [r3]
 800514e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	f023 0310 	bic.w	r3, r3, #16
 8005156:	647b      	str	r3, [r7, #68]	@ 0x44
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	330c      	adds	r3, #12
 800515e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005160:	61ba      	str	r2, [r7, #24]
 8005162:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005164:	6979      	ldr	r1, [r7, #20]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	e841 2300 	strex	r3, r2, [r1]
 800516c:	613b      	str	r3, [r7, #16]
   return(result);
 800516e:	693b      	ldr	r3, [r7, #16]
 8005170:	2b00      	cmp	r3, #0
 8005172:	d1e5      	bne.n	8005140 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2220      	movs	r2, #32
 8005178:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2200      	movs	r2, #0
 8005180:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005182:	bf00      	nop
 8005184:	3754      	adds	r7, #84	@ 0x54
 8005186:	46bd      	mov	sp, r7
 8005188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518c:	4770      	bx	lr

0800518e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800518e:	b580      	push	{r7, lr}
 8005190:	b084      	sub	sp, #16
 8005192:	af00      	add	r7, sp, #0
 8005194:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2200      	movs	r2, #0
 80051a0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2200      	movs	r2, #0
 80051a6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f7ff ff3d 	bl	8005028 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051ae:	bf00      	nop
 80051b0:	3710      	adds	r7, #16
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051b6:	b480      	push	{r7}
 80051b8:	b085      	sub	sp, #20
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051c4:	b2db      	uxtb	r3, r3
 80051c6:	2b21      	cmp	r3, #33	@ 0x21
 80051c8:	d13e      	bne.n	8005248 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051d2:	d114      	bne.n	80051fe <UART_Transmit_IT+0x48>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	691b      	ldr	r3, [r3, #16]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d110      	bne.n	80051fe <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6a1b      	ldr	r3, [r3, #32]
 80051e0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	881b      	ldrh	r3, [r3, #0]
 80051e6:	461a      	mov	r2, r3
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051f0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	6a1b      	ldr	r3, [r3, #32]
 80051f6:	1c9a      	adds	r2, r3, #2
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	621a      	str	r2, [r3, #32]
 80051fc:	e008      	b.n	8005210 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	6a1b      	ldr	r3, [r3, #32]
 8005202:	1c59      	adds	r1, r3, #1
 8005204:	687a      	ldr	r2, [r7, #4]
 8005206:	6211      	str	r1, [r2, #32]
 8005208:	781a      	ldrb	r2, [r3, #0]
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005214:	b29b      	uxth	r3, r3
 8005216:	3b01      	subs	r3, #1
 8005218:	b29b      	uxth	r3, r3
 800521a:	687a      	ldr	r2, [r7, #4]
 800521c:	4619      	mov	r1, r3
 800521e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005220:	2b00      	cmp	r3, #0
 8005222:	d10f      	bne.n	8005244 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68da      	ldr	r2, [r3, #12]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005232:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	68da      	ldr	r2, [r3, #12]
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005242:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	e000      	b.n	800524a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005248:	2302      	movs	r3, #2
  }
}
 800524a:	4618      	mov	r0, r3
 800524c:	3714      	adds	r7, #20
 800524e:	46bd      	mov	sp, r7
 8005250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005254:	4770      	bx	lr

08005256 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005256:	b580      	push	{r7, lr}
 8005258:	b082      	sub	sp, #8
 800525a:	af00      	add	r7, sp, #0
 800525c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	68da      	ldr	r2, [r3, #12]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800526c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	2220      	movs	r2, #32
 8005272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f7ff fecc 	bl	8005014 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800527c:	2300      	movs	r3, #0
}
 800527e:	4618      	mov	r0, r3
 8005280:	3708      	adds	r7, #8
 8005282:	46bd      	mov	sp, r7
 8005284:	bd80      	pop	{r7, pc}

08005286 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005286:	b580      	push	{r7, lr}
 8005288:	b08c      	sub	sp, #48	@ 0x30
 800528a:	af00      	add	r7, sp, #0
 800528c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005294:	b2db      	uxtb	r3, r3
 8005296:	2b22      	cmp	r3, #34	@ 0x22
 8005298:	f040 80ae 	bne.w	80053f8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	689b      	ldr	r3, [r3, #8]
 80052a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052a4:	d117      	bne.n	80052d6 <UART_Receive_IT+0x50>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	691b      	ldr	r3, [r3, #16]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d113      	bne.n	80052d6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	b29b      	uxth	r3, r3
 80052c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052c4:	b29a      	uxth	r2, r3
 80052c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052c8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ce:	1c9a      	adds	r2, r3, #2
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	629a      	str	r2, [r3, #40]	@ 0x28
 80052d4:	e026      	b.n	8005324 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052da:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052dc:	2300      	movs	r3, #0
 80052de:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	689b      	ldr	r3, [r3, #8]
 80052e4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052e8:	d007      	beq.n	80052fa <UART_Receive_IT+0x74>
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	689b      	ldr	r3, [r3, #8]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d10a      	bne.n	8005308 <UART_Receive_IT+0x82>
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	691b      	ldr	r3, [r3, #16]
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	b2da      	uxtb	r2, r3
 8005302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005304:	701a      	strb	r2, [r3, #0]
 8005306:	e008      	b.n	800531a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	b2db      	uxtb	r3, r3
 8005310:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005314:	b2da      	uxtb	r2, r3
 8005316:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005318:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800531e:	1c5a      	adds	r2, r3, #1
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29b      	uxth	r3, r3
 800532e:	687a      	ldr	r2, [r7, #4]
 8005330:	4619      	mov	r1, r3
 8005332:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005334:	2b00      	cmp	r3, #0
 8005336:	d15d      	bne.n	80053f4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	68da      	ldr	r2, [r3, #12]
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f022 0220 	bic.w	r2, r2, #32
 8005346:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	68da      	ldr	r2, [r3, #12]
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	695a      	ldr	r2, [r3, #20]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f022 0201 	bic.w	r2, r2, #1
 8005366:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800537a:	2b01      	cmp	r3, #1
 800537c:	d135      	bne.n	80053ea <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	330c      	adds	r3, #12
 800538a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	e853 3f00 	ldrex	r3, [r3]
 8005392:	613b      	str	r3, [r7, #16]
   return(result);
 8005394:	693b      	ldr	r3, [r7, #16]
 8005396:	f023 0310 	bic.w	r3, r3, #16
 800539a:	627b      	str	r3, [r7, #36]	@ 0x24
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	330c      	adds	r3, #12
 80053a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053a4:	623a      	str	r2, [r7, #32]
 80053a6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053a8:	69f9      	ldr	r1, [r7, #28]
 80053aa:	6a3a      	ldr	r2, [r7, #32]
 80053ac:	e841 2300 	strex	r3, r2, [r1]
 80053b0:	61bb      	str	r3, [r7, #24]
   return(result);
 80053b2:	69bb      	ldr	r3, [r7, #24]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d1e5      	bne.n	8005384 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 0310 	and.w	r3, r3, #16
 80053c2:	2b10      	cmp	r3, #16
 80053c4:	d10a      	bne.n	80053dc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053c6:	2300      	movs	r3, #0
 80053c8:	60fb      	str	r3, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	60fb      	str	r3, [r7, #12]
 80053da:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053e0:	4619      	mov	r1, r3
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f7ff fe2a 	bl	800503c <HAL_UARTEx_RxEventCallback>
 80053e8:	e002      	b.n	80053f0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053ea:	6878      	ldr	r0, [r7, #4]
 80053ec:	f7fc f826 	bl	800143c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e002      	b.n	80053fa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053f4:	2300      	movs	r3, #0
 80053f6:	e000      	b.n	80053fa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053f8:	2302      	movs	r3, #2
  }
}
 80053fa:	4618      	mov	r0, r3
 80053fc:	3730      	adds	r7, #48	@ 0x30
 80053fe:	46bd      	mov	sp, r7
 8005400:	bd80      	pop	{r7, pc}
	...

08005404 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005404:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005408:	b0c0      	sub	sp, #256	@ 0x100
 800540a:	af00      	add	r7, sp, #0
 800540c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005410:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	691b      	ldr	r3, [r3, #16]
 8005418:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800541c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005420:	68d9      	ldr	r1, [r3, #12]
 8005422:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005426:	681a      	ldr	r2, [r3, #0]
 8005428:	ea40 0301 	orr.w	r3, r0, r1
 800542c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800542e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005432:	689a      	ldr	r2, [r3, #8]
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	691b      	ldr	r3, [r3, #16]
 800543a:	431a      	orrs	r2, r3
 800543c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005440:	695b      	ldr	r3, [r3, #20]
 8005442:	431a      	orrs	r2, r3
 8005444:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005448:	69db      	ldr	r3, [r3, #28]
 800544a:	4313      	orrs	r3, r2
 800544c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005450:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68db      	ldr	r3, [r3, #12]
 8005458:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800545c:	f021 010c 	bic.w	r1, r1, #12
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	681a      	ldr	r2, [r3, #0]
 8005466:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800546a:	430b      	orrs	r3, r1
 800546c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800546e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	695b      	ldr	r3, [r3, #20]
 8005476:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800547a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800547e:	6999      	ldr	r1, [r3, #24]
 8005480:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005484:	681a      	ldr	r2, [r3, #0]
 8005486:	ea40 0301 	orr.w	r3, r0, r1
 800548a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005490:	681a      	ldr	r2, [r3, #0]
 8005492:	4b8f      	ldr	r3, [pc, #572]	@ (80056d0 <UART_SetConfig+0x2cc>)
 8005494:	429a      	cmp	r2, r3
 8005496:	d005      	beq.n	80054a4 <UART_SetConfig+0xa0>
 8005498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	4b8d      	ldr	r3, [pc, #564]	@ (80056d4 <UART_SetConfig+0x2d0>)
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d104      	bne.n	80054ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054a4:	f7fe f8b2 	bl	800360c <HAL_RCC_GetPCLK2Freq>
 80054a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054ac:	e003      	b.n	80054b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054ae:	f7fe f899 	bl	80035e4 <HAL_RCC_GetPCLK1Freq>
 80054b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054ba:	69db      	ldr	r3, [r3, #28]
 80054bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054c0:	f040 810c 	bne.w	80056dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054c8:	2200      	movs	r2, #0
 80054ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054d6:	4622      	mov	r2, r4
 80054d8:	462b      	mov	r3, r5
 80054da:	1891      	adds	r1, r2, r2
 80054dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80054de:	415b      	adcs	r3, r3
 80054e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80054e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80054e6:	4621      	mov	r1, r4
 80054e8:	eb12 0801 	adds.w	r8, r2, r1
 80054ec:	4629      	mov	r1, r5
 80054ee:	eb43 0901 	adc.w	r9, r3, r1
 80054f2:	f04f 0200 	mov.w	r2, #0
 80054f6:	f04f 0300 	mov.w	r3, #0
 80054fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80054fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005502:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005506:	4690      	mov	r8, r2
 8005508:	4699      	mov	r9, r3
 800550a:	4623      	mov	r3, r4
 800550c:	eb18 0303 	adds.w	r3, r8, r3
 8005510:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005514:	462b      	mov	r3, r5
 8005516:	eb49 0303 	adc.w	r3, r9, r3
 800551a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800551e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	2200      	movs	r2, #0
 8005526:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800552a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800552e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005532:	460b      	mov	r3, r1
 8005534:	18db      	adds	r3, r3, r3
 8005536:	653b      	str	r3, [r7, #80]	@ 0x50
 8005538:	4613      	mov	r3, r2
 800553a:	eb42 0303 	adc.w	r3, r2, r3
 800553e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005540:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005544:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005548:	f7fa fe3e 	bl	80001c8 <__aeabi_uldivmod>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4b61      	ldr	r3, [pc, #388]	@ (80056d8 <UART_SetConfig+0x2d4>)
 8005552:	fba3 2302 	umull	r2, r3, r3, r2
 8005556:	095b      	lsrs	r3, r3, #5
 8005558:	011c      	lsls	r4, r3, #4
 800555a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800555e:	2200      	movs	r2, #0
 8005560:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005564:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005568:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800556c:	4642      	mov	r2, r8
 800556e:	464b      	mov	r3, r9
 8005570:	1891      	adds	r1, r2, r2
 8005572:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005574:	415b      	adcs	r3, r3
 8005576:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005578:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800557c:	4641      	mov	r1, r8
 800557e:	eb12 0a01 	adds.w	sl, r2, r1
 8005582:	4649      	mov	r1, r9
 8005584:	eb43 0b01 	adc.w	fp, r3, r1
 8005588:	f04f 0200 	mov.w	r2, #0
 800558c:	f04f 0300 	mov.w	r3, #0
 8005590:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005594:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005598:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800559c:	4692      	mov	sl, r2
 800559e:	469b      	mov	fp, r3
 80055a0:	4643      	mov	r3, r8
 80055a2:	eb1a 0303 	adds.w	r3, sl, r3
 80055a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055aa:	464b      	mov	r3, r9
 80055ac:	eb4b 0303 	adc.w	r3, fp, r3
 80055b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055b8:	685b      	ldr	r3, [r3, #4]
 80055ba:	2200      	movs	r2, #0
 80055bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055c8:	460b      	mov	r3, r1
 80055ca:	18db      	adds	r3, r3, r3
 80055cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80055ce:	4613      	mov	r3, r2
 80055d0:	eb42 0303 	adc.w	r3, r2, r3
 80055d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80055d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80055de:	f7fa fdf3 	bl	80001c8 <__aeabi_uldivmod>
 80055e2:	4602      	mov	r2, r0
 80055e4:	460b      	mov	r3, r1
 80055e6:	4611      	mov	r1, r2
 80055e8:	4b3b      	ldr	r3, [pc, #236]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80055ea:	fba3 2301 	umull	r2, r3, r3, r1
 80055ee:	095b      	lsrs	r3, r3, #5
 80055f0:	2264      	movs	r2, #100	@ 0x64
 80055f2:	fb02 f303 	mul.w	r3, r2, r3
 80055f6:	1acb      	subs	r3, r1, r3
 80055f8:	00db      	lsls	r3, r3, #3
 80055fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80055fe:	4b36      	ldr	r3, [pc, #216]	@ (80056d8 <UART_SetConfig+0x2d4>)
 8005600:	fba3 2302 	umull	r2, r3, r3, r2
 8005604:	095b      	lsrs	r3, r3, #5
 8005606:	005b      	lsls	r3, r3, #1
 8005608:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800560c:	441c      	add	r4, r3
 800560e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005612:	2200      	movs	r2, #0
 8005614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005618:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800561c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005620:	4642      	mov	r2, r8
 8005622:	464b      	mov	r3, r9
 8005624:	1891      	adds	r1, r2, r2
 8005626:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005628:	415b      	adcs	r3, r3
 800562a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800562c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005630:	4641      	mov	r1, r8
 8005632:	1851      	adds	r1, r2, r1
 8005634:	6339      	str	r1, [r7, #48]	@ 0x30
 8005636:	4649      	mov	r1, r9
 8005638:	414b      	adcs	r3, r1
 800563a:	637b      	str	r3, [r7, #52]	@ 0x34
 800563c:	f04f 0200 	mov.w	r2, #0
 8005640:	f04f 0300 	mov.w	r3, #0
 8005644:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005648:	4659      	mov	r1, fp
 800564a:	00cb      	lsls	r3, r1, #3
 800564c:	4651      	mov	r1, sl
 800564e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005652:	4651      	mov	r1, sl
 8005654:	00ca      	lsls	r2, r1, #3
 8005656:	4610      	mov	r0, r2
 8005658:	4619      	mov	r1, r3
 800565a:	4603      	mov	r3, r0
 800565c:	4642      	mov	r2, r8
 800565e:	189b      	adds	r3, r3, r2
 8005660:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005664:	464b      	mov	r3, r9
 8005666:	460a      	mov	r2, r1
 8005668:	eb42 0303 	adc.w	r3, r2, r3
 800566c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005670:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005674:	685b      	ldr	r3, [r3, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800567c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005680:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005684:	460b      	mov	r3, r1
 8005686:	18db      	adds	r3, r3, r3
 8005688:	62bb      	str	r3, [r7, #40]	@ 0x28
 800568a:	4613      	mov	r3, r2
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005692:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005696:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800569a:	f7fa fd95 	bl	80001c8 <__aeabi_uldivmod>
 800569e:	4602      	mov	r2, r0
 80056a0:	460b      	mov	r3, r1
 80056a2:	4b0d      	ldr	r3, [pc, #52]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80056a4:	fba3 1302 	umull	r1, r3, r3, r2
 80056a8:	095b      	lsrs	r3, r3, #5
 80056aa:	2164      	movs	r1, #100	@ 0x64
 80056ac:	fb01 f303 	mul.w	r3, r1, r3
 80056b0:	1ad3      	subs	r3, r2, r3
 80056b2:	00db      	lsls	r3, r3, #3
 80056b4:	3332      	adds	r3, #50	@ 0x32
 80056b6:	4a08      	ldr	r2, [pc, #32]	@ (80056d8 <UART_SetConfig+0x2d4>)
 80056b8:	fba2 2303 	umull	r2, r3, r2, r3
 80056bc:	095b      	lsrs	r3, r3, #5
 80056be:	f003 0207 	and.w	r2, r3, #7
 80056c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	4422      	add	r2, r4
 80056ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056cc:	e106      	b.n	80058dc <UART_SetConfig+0x4d8>
 80056ce:	bf00      	nop
 80056d0:	40011000 	.word	0x40011000
 80056d4:	40011400 	.word	0x40011400
 80056d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80056dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056e0:	2200      	movs	r2, #0
 80056e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80056e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80056ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	1891      	adds	r1, r2, r2
 80056f4:	6239      	str	r1, [r7, #32]
 80056f6:	415b      	adcs	r3, r3
 80056f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80056fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80056fe:	4641      	mov	r1, r8
 8005700:	1854      	adds	r4, r2, r1
 8005702:	4649      	mov	r1, r9
 8005704:	eb43 0501 	adc.w	r5, r3, r1
 8005708:	f04f 0200 	mov.w	r2, #0
 800570c:	f04f 0300 	mov.w	r3, #0
 8005710:	00eb      	lsls	r3, r5, #3
 8005712:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005716:	00e2      	lsls	r2, r4, #3
 8005718:	4614      	mov	r4, r2
 800571a:	461d      	mov	r5, r3
 800571c:	4643      	mov	r3, r8
 800571e:	18e3      	adds	r3, r4, r3
 8005720:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005724:	464b      	mov	r3, r9
 8005726:	eb45 0303 	adc.w	r3, r5, r3
 800572a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800572e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	2200      	movs	r2, #0
 8005736:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800573a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800573e:	f04f 0200 	mov.w	r2, #0
 8005742:	f04f 0300 	mov.w	r3, #0
 8005746:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800574a:	4629      	mov	r1, r5
 800574c:	008b      	lsls	r3, r1, #2
 800574e:	4621      	mov	r1, r4
 8005750:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005754:	4621      	mov	r1, r4
 8005756:	008a      	lsls	r2, r1, #2
 8005758:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800575c:	f7fa fd34 	bl	80001c8 <__aeabi_uldivmod>
 8005760:	4602      	mov	r2, r0
 8005762:	460b      	mov	r3, r1
 8005764:	4b60      	ldr	r3, [pc, #384]	@ (80058e8 <UART_SetConfig+0x4e4>)
 8005766:	fba3 2302 	umull	r2, r3, r3, r2
 800576a:	095b      	lsrs	r3, r3, #5
 800576c:	011c      	lsls	r4, r3, #4
 800576e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005772:	2200      	movs	r2, #0
 8005774:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005778:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800577c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005780:	4642      	mov	r2, r8
 8005782:	464b      	mov	r3, r9
 8005784:	1891      	adds	r1, r2, r2
 8005786:	61b9      	str	r1, [r7, #24]
 8005788:	415b      	adcs	r3, r3
 800578a:	61fb      	str	r3, [r7, #28]
 800578c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005790:	4641      	mov	r1, r8
 8005792:	1851      	adds	r1, r2, r1
 8005794:	6139      	str	r1, [r7, #16]
 8005796:	4649      	mov	r1, r9
 8005798:	414b      	adcs	r3, r1
 800579a:	617b      	str	r3, [r7, #20]
 800579c:	f04f 0200 	mov.w	r2, #0
 80057a0:	f04f 0300 	mov.w	r3, #0
 80057a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057a8:	4659      	mov	r1, fp
 80057aa:	00cb      	lsls	r3, r1, #3
 80057ac:	4651      	mov	r1, sl
 80057ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057b2:	4651      	mov	r1, sl
 80057b4:	00ca      	lsls	r2, r1, #3
 80057b6:	4610      	mov	r0, r2
 80057b8:	4619      	mov	r1, r3
 80057ba:	4603      	mov	r3, r0
 80057bc:	4642      	mov	r2, r8
 80057be:	189b      	adds	r3, r3, r2
 80057c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057c4:	464b      	mov	r3, r9
 80057c6:	460a      	mov	r2, r1
 80057c8:	eb42 0303 	adc.w	r3, r2, r3
 80057cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057d4:	685b      	ldr	r3, [r3, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80057dc:	f04f 0200 	mov.w	r2, #0
 80057e0:	f04f 0300 	mov.w	r3, #0
 80057e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80057e8:	4649      	mov	r1, r9
 80057ea:	008b      	lsls	r3, r1, #2
 80057ec:	4641      	mov	r1, r8
 80057ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057f2:	4641      	mov	r1, r8
 80057f4:	008a      	lsls	r2, r1, #2
 80057f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80057fa:	f7fa fce5 	bl	80001c8 <__aeabi_uldivmod>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4611      	mov	r1, r2
 8005804:	4b38      	ldr	r3, [pc, #224]	@ (80058e8 <UART_SetConfig+0x4e4>)
 8005806:	fba3 2301 	umull	r2, r3, r3, r1
 800580a:	095b      	lsrs	r3, r3, #5
 800580c:	2264      	movs	r2, #100	@ 0x64
 800580e:	fb02 f303 	mul.w	r3, r2, r3
 8005812:	1acb      	subs	r3, r1, r3
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	3332      	adds	r3, #50	@ 0x32
 8005818:	4a33      	ldr	r2, [pc, #204]	@ (80058e8 <UART_SetConfig+0x4e4>)
 800581a:	fba2 2303 	umull	r2, r3, r2, r3
 800581e:	095b      	lsrs	r3, r3, #5
 8005820:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005824:	441c      	add	r4, r3
 8005826:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800582a:	2200      	movs	r2, #0
 800582c:	673b      	str	r3, [r7, #112]	@ 0x70
 800582e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005830:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005834:	4642      	mov	r2, r8
 8005836:	464b      	mov	r3, r9
 8005838:	1891      	adds	r1, r2, r2
 800583a:	60b9      	str	r1, [r7, #8]
 800583c:	415b      	adcs	r3, r3
 800583e:	60fb      	str	r3, [r7, #12]
 8005840:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005844:	4641      	mov	r1, r8
 8005846:	1851      	adds	r1, r2, r1
 8005848:	6039      	str	r1, [r7, #0]
 800584a:	4649      	mov	r1, r9
 800584c:	414b      	adcs	r3, r1
 800584e:	607b      	str	r3, [r7, #4]
 8005850:	f04f 0200 	mov.w	r2, #0
 8005854:	f04f 0300 	mov.w	r3, #0
 8005858:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800585c:	4659      	mov	r1, fp
 800585e:	00cb      	lsls	r3, r1, #3
 8005860:	4651      	mov	r1, sl
 8005862:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005866:	4651      	mov	r1, sl
 8005868:	00ca      	lsls	r2, r1, #3
 800586a:	4610      	mov	r0, r2
 800586c:	4619      	mov	r1, r3
 800586e:	4603      	mov	r3, r0
 8005870:	4642      	mov	r2, r8
 8005872:	189b      	adds	r3, r3, r2
 8005874:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005876:	464b      	mov	r3, r9
 8005878:	460a      	mov	r2, r1
 800587a:	eb42 0303 	adc.w	r3, r2, r3
 800587e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005880:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	2200      	movs	r2, #0
 8005888:	663b      	str	r3, [r7, #96]	@ 0x60
 800588a:	667a      	str	r2, [r7, #100]	@ 0x64
 800588c:	f04f 0200 	mov.w	r2, #0
 8005890:	f04f 0300 	mov.w	r3, #0
 8005894:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005898:	4649      	mov	r1, r9
 800589a:	008b      	lsls	r3, r1, #2
 800589c:	4641      	mov	r1, r8
 800589e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058a2:	4641      	mov	r1, r8
 80058a4:	008a      	lsls	r2, r1, #2
 80058a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058aa:	f7fa fc8d 	bl	80001c8 <__aeabi_uldivmod>
 80058ae:	4602      	mov	r2, r0
 80058b0:	460b      	mov	r3, r1
 80058b2:	4b0d      	ldr	r3, [pc, #52]	@ (80058e8 <UART_SetConfig+0x4e4>)
 80058b4:	fba3 1302 	umull	r1, r3, r3, r2
 80058b8:	095b      	lsrs	r3, r3, #5
 80058ba:	2164      	movs	r1, #100	@ 0x64
 80058bc:	fb01 f303 	mul.w	r3, r1, r3
 80058c0:	1ad3      	subs	r3, r2, r3
 80058c2:	011b      	lsls	r3, r3, #4
 80058c4:	3332      	adds	r3, #50	@ 0x32
 80058c6:	4a08      	ldr	r2, [pc, #32]	@ (80058e8 <UART_SetConfig+0x4e4>)
 80058c8:	fba2 2303 	umull	r2, r3, r2, r3
 80058cc:	095b      	lsrs	r3, r3, #5
 80058ce:	f003 020f 	and.w	r2, r3, #15
 80058d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	4422      	add	r2, r4
 80058da:	609a      	str	r2, [r3, #8]
}
 80058dc:	bf00      	nop
 80058de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80058e2:	46bd      	mov	sp, r7
 80058e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80058e8:	51eb851f 	.word	0x51eb851f

080058ec <free>:
 80058ec:	4b02      	ldr	r3, [pc, #8]	@ (80058f8 <free+0xc>)
 80058ee:	4601      	mov	r1, r0
 80058f0:	6818      	ldr	r0, [r3, #0]
 80058f2:	f000 b83d 	b.w	8005970 <_free_r>
 80058f6:	bf00      	nop
 80058f8:	20000010 	.word	0x20000010

080058fc <__malloc_lock>:
 80058fc:	4801      	ldr	r0, [pc, #4]	@ (8005904 <__malloc_lock+0x8>)
 80058fe:	f000 b835 	b.w	800596c <__retarget_lock_acquire_recursive>
 8005902:	bf00      	nop
 8005904:	20000488 	.word	0x20000488

08005908 <__malloc_unlock>:
 8005908:	4801      	ldr	r0, [pc, #4]	@ (8005910 <__malloc_unlock+0x8>)
 800590a:	f000 b830 	b.w	800596e <__retarget_lock_release_recursive>
 800590e:	bf00      	nop
 8005910:	20000488 	.word	0x20000488

08005914 <memset>:
 8005914:	4402      	add	r2, r0
 8005916:	4603      	mov	r3, r0
 8005918:	4293      	cmp	r3, r2
 800591a:	d100      	bne.n	800591e <memset+0xa>
 800591c:	4770      	bx	lr
 800591e:	f803 1b01 	strb.w	r1, [r3], #1
 8005922:	e7f9      	b.n	8005918 <memset+0x4>

08005924 <__libc_init_array>:
 8005924:	b570      	push	{r4, r5, r6, lr}
 8005926:	4d0d      	ldr	r5, [pc, #52]	@ (800595c <__libc_init_array+0x38>)
 8005928:	4c0d      	ldr	r4, [pc, #52]	@ (8005960 <__libc_init_array+0x3c>)
 800592a:	1b64      	subs	r4, r4, r5
 800592c:	10a4      	asrs	r4, r4, #2
 800592e:	2600      	movs	r6, #0
 8005930:	42a6      	cmp	r6, r4
 8005932:	d109      	bne.n	8005948 <__libc_init_array+0x24>
 8005934:	4d0b      	ldr	r5, [pc, #44]	@ (8005964 <__libc_init_array+0x40>)
 8005936:	4c0c      	ldr	r4, [pc, #48]	@ (8005968 <__libc_init_array+0x44>)
 8005938:	f000 f864 	bl	8005a04 <_init>
 800593c:	1b64      	subs	r4, r4, r5
 800593e:	10a4      	asrs	r4, r4, #2
 8005940:	2600      	movs	r6, #0
 8005942:	42a6      	cmp	r6, r4
 8005944:	d105      	bne.n	8005952 <__libc_init_array+0x2e>
 8005946:	bd70      	pop	{r4, r5, r6, pc}
 8005948:	f855 3b04 	ldr.w	r3, [r5], #4
 800594c:	4798      	blx	r3
 800594e:	3601      	adds	r6, #1
 8005950:	e7ee      	b.n	8005930 <__libc_init_array+0xc>
 8005952:	f855 3b04 	ldr.w	r3, [r5], #4
 8005956:	4798      	blx	r3
 8005958:	3601      	adds	r6, #1
 800595a:	e7f2      	b.n	8005942 <__libc_init_array+0x1e>
 800595c:	08005a44 	.word	0x08005a44
 8005960:	08005a44 	.word	0x08005a44
 8005964:	08005a44 	.word	0x08005a44
 8005968:	08005a48 	.word	0x08005a48

0800596c <__retarget_lock_acquire_recursive>:
 800596c:	4770      	bx	lr

0800596e <__retarget_lock_release_recursive>:
 800596e:	4770      	bx	lr

08005970 <_free_r>:
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4605      	mov	r5, r0
 8005974:	2900      	cmp	r1, #0
 8005976:	d041      	beq.n	80059fc <_free_r+0x8c>
 8005978:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800597c:	1f0c      	subs	r4, r1, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	bfb8      	it	lt
 8005982:	18e4      	addlt	r4, r4, r3
 8005984:	f7ff ffba 	bl	80058fc <__malloc_lock>
 8005988:	4a1d      	ldr	r2, [pc, #116]	@ (8005a00 <_free_r+0x90>)
 800598a:	6813      	ldr	r3, [r2, #0]
 800598c:	b933      	cbnz	r3, 800599c <_free_r+0x2c>
 800598e:	6063      	str	r3, [r4, #4]
 8005990:	6014      	str	r4, [r2, #0]
 8005992:	4628      	mov	r0, r5
 8005994:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005998:	f7ff bfb6 	b.w	8005908 <__malloc_unlock>
 800599c:	42a3      	cmp	r3, r4
 800599e:	d908      	bls.n	80059b2 <_free_r+0x42>
 80059a0:	6820      	ldr	r0, [r4, #0]
 80059a2:	1821      	adds	r1, r4, r0
 80059a4:	428b      	cmp	r3, r1
 80059a6:	bf01      	itttt	eq
 80059a8:	6819      	ldreq	r1, [r3, #0]
 80059aa:	685b      	ldreq	r3, [r3, #4]
 80059ac:	1809      	addeq	r1, r1, r0
 80059ae:	6021      	streq	r1, [r4, #0]
 80059b0:	e7ed      	b.n	800598e <_free_r+0x1e>
 80059b2:	461a      	mov	r2, r3
 80059b4:	685b      	ldr	r3, [r3, #4]
 80059b6:	b10b      	cbz	r3, 80059bc <_free_r+0x4c>
 80059b8:	42a3      	cmp	r3, r4
 80059ba:	d9fa      	bls.n	80059b2 <_free_r+0x42>
 80059bc:	6811      	ldr	r1, [r2, #0]
 80059be:	1850      	adds	r0, r2, r1
 80059c0:	42a0      	cmp	r0, r4
 80059c2:	d10b      	bne.n	80059dc <_free_r+0x6c>
 80059c4:	6820      	ldr	r0, [r4, #0]
 80059c6:	4401      	add	r1, r0
 80059c8:	1850      	adds	r0, r2, r1
 80059ca:	4283      	cmp	r3, r0
 80059cc:	6011      	str	r1, [r2, #0]
 80059ce:	d1e0      	bne.n	8005992 <_free_r+0x22>
 80059d0:	6818      	ldr	r0, [r3, #0]
 80059d2:	685b      	ldr	r3, [r3, #4]
 80059d4:	6053      	str	r3, [r2, #4]
 80059d6:	4408      	add	r0, r1
 80059d8:	6010      	str	r0, [r2, #0]
 80059da:	e7da      	b.n	8005992 <_free_r+0x22>
 80059dc:	d902      	bls.n	80059e4 <_free_r+0x74>
 80059de:	230c      	movs	r3, #12
 80059e0:	602b      	str	r3, [r5, #0]
 80059e2:	e7d6      	b.n	8005992 <_free_r+0x22>
 80059e4:	6820      	ldr	r0, [r4, #0]
 80059e6:	1821      	adds	r1, r4, r0
 80059e8:	428b      	cmp	r3, r1
 80059ea:	bf04      	itt	eq
 80059ec:	6819      	ldreq	r1, [r3, #0]
 80059ee:	685b      	ldreq	r3, [r3, #4]
 80059f0:	6063      	str	r3, [r4, #4]
 80059f2:	bf04      	itt	eq
 80059f4:	1809      	addeq	r1, r1, r0
 80059f6:	6021      	streq	r1, [r4, #0]
 80059f8:	6054      	str	r4, [r2, #4]
 80059fa:	e7ca      	b.n	8005992 <_free_r+0x22>
 80059fc:	bd38      	pop	{r3, r4, r5, pc}
 80059fe:	bf00      	nop
 8005a00:	2000034c 	.word	0x2000034c

08005a04 <_init>:
 8005a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a06:	bf00      	nop
 8005a08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0a:	bc08      	pop	{r3}
 8005a0c:	469e      	mov	lr, r3
 8005a0e:	4770      	bx	lr

08005a10 <_fini>:
 8005a10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a12:	bf00      	nop
 8005a14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a16:	bc08      	pop	{r3}
 8005a18:	469e      	mov	lr, r3
 8005a1a:	4770      	bx	lr
